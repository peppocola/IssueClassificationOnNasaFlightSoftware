title,body,label,url
Add guidance for coverage tests in contributing guide,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**

When improving coverage for code we should update the minimum coverage checks in the appropriate github workflow. 

**Describe the solution you'd like**
Add a section to contributing guide 

**Describe alternatives you've considered**
Do nothing. Include in wiki or other document

**Additional context**
See yml change in https://github.com/nasa/cFE/pull/2081

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA
",non-bug,https://github.com/nasa/cFS/issues/456
Update end child task error requirement (can't return error code from void function),"**Is your feature request related to a problem? Please describe.**
Calling CFE_ES_ExitChildTask from a main application task is a bug/error, but it's a void call so impossible to fully meet the ES: End Child Task - Error If Application Main Task,cES1314.1 as written since an error code can't be returned:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L116

**Describe the solution you'd like**
Remove the error code return language.

**Describe alternatives you've considered**
Add a return code.  Really it's a bug so there's no use case to logically handle a return code when called from a main app context.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1771
Support for alternate checksum type indicated in Metadata PDU,"Per the CCSDS blue book 727.0-B-5, section 5.2.5 - the metadata PDU has a 4-bit ""checksum type"" field.  The description says:

> Checksum algorithm identifier as registered in the SANA Checksum Types Registry.  
> Value zero indicates use of the legacy modular checksum.

It looks like CF only supports the legacy checksum, because it does not check this field at all, and there appears to be only one algorithm implemented.  However, this is not as significant as the large file size issue (#95) because it does not otherwise change the format, here the result will be a simple failure of the validation check if there is a mismatch between peers.

This is an interoperability concern.  If the intent is to only support legacy checksum, this should probably be documented in the release notes/version description document.  If the intent is for full compliance with CCSDS book 727.0-B-5, then this is missing.

Interim recommendation for FSW is to at least check this field on receipt of a Metadata PDU, and reject if the checksum type field is set to anything other than '0'.
",non-bug,https://github.com/nasa/CF/issues/99
Infinite loop if initialization fails for any reason,"**Describe the bug**
SCH_LAB does not exit/abort if its initialization fails - it will continue into its main loop anyway.  In turn, it is possible that the ""CmdPipe"" was not initialized when this task calls `CFE_SB_ReceiveBuffer`.  This will return an error, but it just repeats the loop, forever.

**To Reproduce**
Delete or do not install the SCH LAB table file, so the loading of the table will fail.  SCH_LAB then enters an infinite loop, because the CmdPipe is not valid, continually generating this error event:

`EVS Port1 42/1/CFE_SB 19: Rcv Err:PipeId 0 does not exist,app SCH_LAB_APP`

**Expected behavior**
If it did not successfully initialize itself, SCH LAB should skip the remainder of its main function, since behavior is non-deterministic if not fully and successfully initialized.

**Code snips**
The ""while"" loop here should probably be moved to an ""else"" block, so it will only be entered if initialized successfully.

https://github.com/nasa/sch_lab/blob/4a1b72e5a3092369b49d5c65f325bc48e1f7f832/fsw/src/sch_lab_app.c#L91-L97

**System observed on:**
Ubuntu

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sch_lab/issues/80
EVS - CFE_EVS_WriteAppDataCmd References Incorrect Variable in Call to OS_creat,"In the CFE_EVS_WriteAppDataCmd function, the wrong variable (uninitialized) is being passed into the OS_create function. LocalName (initialized via the call to CFE_SB_MessageStringGet) should be passed in to OS_creat rather than AppDataFilename. 

See code snippet below from cfe_evs_task.c lines 1852-1857: 
/* Copy the commanded filename into local buffer to ensure size limitation and to allow for modification */
CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppDataFilename, CFE_EVS_DEFAULT_APP_DATA_FILE,
OS_MAX_PATH_LEN, sizeof(CmdPtr->AppDataFilename));
/* Create Application Data File */
FileHandle = OS_creat(AppDataFilename, OS_WRITE_ONLY);",bug,https://github.com/nasa/cFE/issues/188
remove GetLastSenderId() API and replace with a RecvMsg() API that returns the AppId of the sender of the message being received,"**Describe the bug**
The current CFE_SB_GetLastSenderId() API is broken, as indicated in #745 and #744, but also as discussed at today's CCB, the intent and use-case is really ""who sent *this* message"" not ""who sent the *last* message"" on a pipe. In fact, SBN is currently using this API to prevent SBN message loops, and this API doesn't work correctly for that purpose.

**Expected behavior**
The suggestion is to remove the GetLastSenderId() API entirely, and add a new receive method like: `int32  CFE_SB_RcvMsgWithSenderId(CFE_SB_MsgPtr_t  *BufPtr, uint32 *SenderAppIdPtr, CFE_SB_PipeId_t  PipeId, int32 TimeOut);` that has an additional out parameter which will contain the AppId of the app that sent the message returned in the BufPtr.

**Reporter Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/759
Update unit tests to provide consistent directory map,"**Is your feature request related to a problem? Please describe.**
The ""file-api-test"" and ""osal_loader_UT"" unit tests rely on a real FS_BASED directory map that is provided by the BSP.  This creates an undesired dependency on the BSP volume table in these test cases, in that they must provide a map for `/cf`.

**Describe the solution you'd like**
Test should be BSP-agnostic.   A map for the directory used by the test case can be provided locally as part of this test setup.  A relative system directory can be used (e.g. ""./test"") to make this platform-agnostic.

**Additional context**
This will allow to run unit tests without a BSP-provided volume table.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/460
Fix pc-linux PSP for the latest OSAL,"Several items in the pc-linux PSP can be removed/cleaned up when using the newest revisions of OSAL:
* The hack to use {{{-m32}}} can be removed as the latest osal works with 64 bit natively
* The installation subdirectory should be ""cf"" rather than ""eeprom1""
* The task priority modifications done in main() (cfe_psp_start.c) are now integrated into OS_API_Init and OS_API_Wait so these can be removed.
",bug,https://github.com/nasa/PSP/issues/25
JSC: Add L/U/UL suffixes to literal values,"Add an ""L"", ""U"", or ""UL"" suffix to all literal values and macro constants in CFE",bug,https://github.com/nasa/cFE/issues/161
Improve consistency in application of CFE_SB_MsgIdToValue/ValueToMsgId conversions,"**Is your feature request related to a problem? Please describe.**
A `CFE_SB_MsgId_t` value, like other IDs, is supposed to be a unique type/opaque value that identifies a message within the SB application context.   Although it is currently implemented using an integer (`uint32` specifically) application should not assume this.  Instead, a set of macros and inline conversion functions (CFE_SB_MsgIdToValue and CFE_SB_ValueToMsgId) are provided for when the application needs to interpret the value as an integer for a valid purpose.

However, since use of this conversion is not currently enforced - there is no config option that makes MsgId into a strict type, as there is for ResourceID - so much of the newly-added code such as tests and apps, didn't completely apply it.

**Describe the solution you'd like**
Add conversions where they are currently missing

**Describe alternatives you've considered**
Preferably, the MID constants should be defined directly as a `CFE_SB_MsgId_t` type value, which would eliminate the need for conversions all over the runtime code.  However, this breaks the switch/case paradigm used when dispatching - a `case` label needs to be an integer value.  So although this would yield cleaner code it does have a bigger backward compatibility impact which is why it was avoided for Caelum.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1945
Header version/implementation selection logic update,"**Is your feature request related to a problem? Please describe.**
#726 separates the header implementation logic and paves the way to use source selection for msgid implementation and CCSDS extended header use.  It partially uses new cmake flags to implement, but still relies on MESSAGE_FORMAT_IS_CCSDS_VER_2 being set correctly (but does not do it by default).

**Describe the solution you'd like**
Remove dependencies on MESSAGE_FORMAT_IS_CCSDS_VER_2 (see proposal below)

**Describe alternatives you've considered**
Consider changing cfe configs to cmake options (like the osconfig update), and use the cmake options to set the define if still required.  Or could just set the version 2 define if either cmake option (from #726) is set.

**Additional context**
#726 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/796
"unify ""table"" and "".scr"" file loading","**Is your feature request related to a problem? Please describe.**
We currently have two ways of populating configuration data in cFS, the ""table"" API (loading a binary data structure into memory) and a ""configuration file"" (cfe_es_startup.scr). These have similar purposes (load-time configuration) and could use the same API?

**Describe the solution you'd like**
It should be fairly straightforward to automagically determine whether a ""table"" file is an ELF or a text file (first byte == 0x7F => ELF) and if it's not ELF it should hand off to a text parser (provided by OSAL?) to parse the table into an in-memory data structure. The current ""csv-like"" structure wouldn't handle complex (e.g. nested) data structures but for common tables it should be sufficient. Alternatives would be JSON or YAML or some other text format, but would require a way to disambiguate.

Table files trade efficiency for easy editing.

**Describe alternatives you've considered**
Stick with the separate ES code for loading the .scr file and table code. SBN previously used a similar .csv file format for its load configuration but it's been moved to a table-based configuration.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/576
Format conversion error in coverage test,"**Describe the bug**
When compiling the coverage test on RTEMS, a format conversion error is triggered:

```
/home/joe/code/cfecfs/github/apps/sample_app/unit-test/coveragetest/coveragetest_sample_app.c:152:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'uint32' [-Werror=format=]
     UtAssert_True(SAMPLE_AppData.RunStatus == CFE_ES_RunStatus_APP_ERROR,
     ^
cc1: all warnings being treated as errors
```

**To Reproduce**
Build with ENABLE_UNIT_TESTS=TRUE for i686-rtems4.11 platform

**Expected behavior**
Should build clean

**System observed on:**
i686-rtems4.11 cross build

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sample_app/issues/60
"Typo, copy/paste, comment clean-up","**Is your feature request related to a problem? Please describe.**
General issue to capture typo, copy/paste cleanup from OSAL code review.

Extra space:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-dir.h#L124

Add comment to justify numbers: common pattern to represent 8 obtjects in a byte (single bit)
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-select.h#L41

Clarify in comments if OS_TaskDelay is a ""busy"" wait or scheduled (sleep):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-task.h#L142-L154

Document Input parameter as actually in/out:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L112-L123

Make capitalization consistent output -> Output:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L123

Clarify comment - Explicitly zero for consistency in operations and to avoid confusion:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L182

Clarify comment - Test for existence and is a directory
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-posix-dirs.c#L85-L89

Duplicate function comments:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L258-L274

check_mode -> lock_mode:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L1073-L1076

Comment cleanup, vsnprintf also does the format, `Call vsnprintf to format and determine the actual size of the string to write`:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-printf.c#L284-L289

data_size -> max_size:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-queue.c#L90

Clarify constants in comments:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-select.c#L144
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-select.c#L169
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-select.c#L197

Justify constant return - `Return OK since called from taskSpawn (where it's not easily accessible), error is reported in debug message`:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-console.c#L122

Clarify - `locally scoped statically allocated buffer`:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-tasks.c#L169

Justify constants (+500/1000) rounds:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-timebase.c#L325

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
No impacts

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/846
Add typedef for OSAL status codes,"**Is your feature request related to a problem? Please describe.**
In the recent versions of CFE, a typedef (`CFE_Status_t`) is added and used for the return type on any function that returns a CFE status code, while OSAL continues to use a bare `int32` return type.

Although the type does need to be integer in nature (to maintain semantics of equality checks, etc), the typedef does still serve a useful purpose, in that it implies behavioral characteristics of the function i.e. that its return value should be checked against the set of defined status values for that module where certain values have defined meaning - as opposed to a generic number.

**Describe the solution you'd like**
OSAL should define an `OS_Status_t` (which can be a typedef to `int32`) and prototypes of functions returning a status value should be updated to `OS_Status_t` to more clearly indicate when the return value should be compared against the set of constants defined in `osapi-error.h`.

**Describe alternatives you've considered**
Leave as `int32` (inconsistent with CFE).

**Additional context**
In particular, having a separate type and macros helps identify cases where improper or incomplete type conversions are done, for instance see nasa/cfe#1599

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1108
"ES - command to load a new application, commands to load/unload/reload libraries","**Is your feature request related to a problem? Please describe.**
Currently ES can be commanded to unload or reload an existing application. Commands should be added to load an application not currently loaded. Similarly, there's no commands to load/unload/reload libraries--these commands should be added.

**Describe the solution you'd like**
Addl. commands.

**Describe alternatives you've considered**
SBN currently directly loads libraries, if the library is not already resident. With this change, SBN should command ES to load those libraries. SBN also reloads libraries when the SBN configuration table is changed, this should also translate to ES commands.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/783
`OCS_off_t` should be a signed type,"**Describe the bug**
`OCS_off_t` is used for OSAL coverage testing to replace the C library `off_t` type as used in e.g. `lseek()`
This is being substituted with an unsigned type, but really should be a signed type.

**To Reproduce**
Suggested change in PR #592 exposes the mismatch:

https://github.com/klystron78/osal/blob/862f1322da247b1ae8a93a9e25e3f76bb5fa8d8e/src/os/portable/os-impl-posix-io.c#L106

Coverage test fails due to later comparison for (result < 0) which is impossible with unsigned type.

**System observed on:**
Ubuntu 20.04

**Additional context**
Using `long` instead fixes it.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/593
New cfe_locate_implementation_file() includes fallback file in results even if override found,"**Describe the bug**
When using a ""FALLBACK_FILE"" option, this is put at the last priority
When using the ""ALLOW_LIST"" option, this function returns ALL files found that match the pattern being searched for.   

When those two options are used together, it means that the fallback file will be included in the result list, along with the user-supplied files.  This is not the intent; the fallback file should only be returned if _no_ user-supplied files were found.

The result of including both is that one gets duplicate defs and/or unexpected values.

The ""generate_include_configfile()"" uses it in this way, and thus gets both copies.

**To Reproduce**
Use ""generate_config_includefile"" with a file that has been overridden by the user.  The generated include file will get both the default and the user-supplied copy.

**Expected behavior**
Only the user-supplied copy should be used.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/2311
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/sample_lib/issues/39
Static analysis issues relative to flight code,"Handful of static analysis issues in the ""red"" identified (non-Style issues).  Need to resolve these.

Filter: -file:elf -file:ut -file:cfe -file:os -file:cf_ -file:_lab_app.c !(significance:style)

should resolve and/or disposition the higher ranked ones at minimum.

Note license restricts publishing issues.

Imported from GSFCCFS-1958",bug,https://github.com/nasa/MM/issues/18
Promote the internal `OS_ObjectIdToArrayIndex` function to the public API,"**Is your feature request related to a problem? Please describe.**
Currently OSAL only provides a public API for `OS_ConvertToArrayIndex` which operates indiscriminately on any object type.  For instance, if passed a task ID, it returns a value in the range of `[0..OS_MAX_TASKS)` and if passed a queue ID it will return a value in the range of `[0..OS_MAX_QUEUES)` and so forth.

But code using this function is using it to index an array of a specific object type (e.g. tasks).  So this creates an opportunity for error if passed the wrong object ID - the caller may get a successful conversion but still get an index that is beyond the range of their local table.

**Describe the solution you'd like**
The `OS_ObjectIdToArrayIndex` function is better because it first enforces that the passed-in ID actually refers to the intended object type.  The public API is actually just a wrapper around this that _defeats_ the type check.  For some reason this got relegated to an internal API.

**Describe alternatives you've considered**
Keep as is, accept risk of getting an index outside the expected range if IDs get mixed.

**Additional context**
As the function already exists it should be just a matter of putting its prototype into the public API, and providing a UT stub for it (easy).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/589
"Recieved software bus buffers must be treated as ""const""","The software bus is a broadcast mechanism and sends the same memory buffers to all subscribed applications/pipes.  The intent is that the data buffer should be `const` but for backward compatibility reasons the API does not enforce this.

However, CF actively writes to and modifies its received buffers, basically treating it as its own temporary storage location.  If this is combined in a system with another app that subscribes to CF traffic (e.g. Data store, DTN, or some other traffic monitor) then all other apps will see the same modifications to the data buffer, and this effectively creates a race condition / unpredictable behavior.

All received software bus buffers should be qualified as `const` in application code, and they should not be written to.  Apps should create their own buffers for temporary storage.
",bug,https://github.com/nasa/CF/issues/71
Remove old MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",non-bug,https://github.com/nasa/gen_sch_tbl/issues/2
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/cFE/blob/9bc7bfdbced474fabfc2a46cf47e044b9d59f8e5/cmake/target/inc/target_config.h#L37-L38

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1221
Users guide generation warning,"**Is your feature request related to a problem? Please describe.**
Generated from user's guide action from cFS
```
/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-bsp.h:95: warning: end of file while inside a group
/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-idmap.h:274: warning: end of file while inside a group
```

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/osal/issues/726
Allow UT assert tests to specify default verbosity,"**Is your feature request related to a problem? Please describe.**
By default, UT assert runs in verbose (not debug) mode, where all calls to any assert macro are added to a log, except for DEBUG messages.  This means there is a record of tests that PASS, which is generally desired for coverage testing.

However, if doing fuzz testing, the point is to run a test against a large, random data set and as such there may be thousands (or even millions) of assertions.  This will result in a very large log file full of ""PASS"" messages.

UT Assert does allow the verbosity to be set, but currently only via command line on a run-by-run basis.

**Describe the solution you'd like**
Allow a test to specify what its default verbosity is supposed to be.  For fuzz testing this can be a lower value than the normal coverage testing default.  

**Describe alternatives you've considered**
Currently test cases that run in a loop or otherwise would generate a large number of PASS results use a pattern where the result is checked directly in the test code, e.g.:

```
if (status != expected)
{
    UtAssert_Failed(""message"");
}
```

Such that an assertion is only logged if it fails.  However, a side effect of this means that the ""pass"" counter and total test counter does not increment to reflect that something was tested/checked - it only increments if it fails.  In contrast, by using the normal assert macro but reducing the verbosity means that the counters will still increment, it just doesn't write a log entry for PASS cases.  Furthermore, a user could manually _increase_ the log level if they actually do want to see them all.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1317
"Error constants defined in ""cfe_error.h"" incorrectly use the ""L"" suffix","The ""L"" suffix on an integer literal tells the compiler that it is supposed to be interpreted as a ""long"" type.  However, CFE error constants are supposed to be 32-bit signed integers, which may or may not be the same thing as the system native ""long"" type.  

To be correct, the constants should be defined to be the same as the ""int32"" OSAL type and the ""L"" suffix should be removed.  

This causes problems on a 64-bit machine where the ""long"" type is 64 bits.

",bug,https://github.com/nasa/cFE/issues/53
"Remove DEPRECATED define in ut_assert, UtMemSet","Has been marked DEPRECATED for 4 years, since [changeset:10b7816] as part of ticket #40.",bug,https://github.com/nasa/osal/issues/252
CFE_SB_GetUserDataLength possible uninitialized variable (false alarm),"**Is your feature request related to a problem? Please describe.**
CFE_SB_GetUserDataLength use of TotalMsgSize causes static analysis warning.  False alarm since MsgPtr is checked before CFE_MSG_GetSize, and &TotalMsgSize will never be NULL, so it's always set.

**Describe the solution you'd like**
Initialize to 0 to squash the warning.

**Describe alternatives you've considered**
Still dislike this function... don't use it.

**Additional context**
#1190, static analysis warnings

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1192
osal needs blocking timer API,"The current OSAL timer API calls callbacks in an unknown context to the user when the timer event fires. This removes flexibility from the user to manage their own threads. A new API (or addition to existing one) should be created where the user can read from the timer, which will block until the event fires. As this would be a periodic timer, the user should also be able to be informed of overruns that occurred.

This functionality mirrors POSIX timerfd/read().",non-bug,https://github.com/nasa/osal/issues/220
"CFE_SB_SND_RTG_EID and CFE_SB_SND_RTG_ERR1_EID used for all three write file cmds (route, map, pipe)","**Is your feature request related to a problem? Please describe.**
Event ID's should be unique, these aren't.

**Describe the solution you'd like**
Define event ID's for all three.  Also worth a general scrub of event ID's to ensure they are unique.  

Other considerations:
 - ""SND"" is a misnomer, these are write commands
 - There is no event for the file header error

**Describe alternatives you've considered**
None

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1117
Refactor long switch in CFE_ES_ProcessControlRequest,"**Is your feature request related to a problem? Please describe.**
Long switch could be replaced with table and general logic:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1201

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Code Review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1333
"Add pc-linux toolchain ""cross-compile"" to CI","**Is your feature request related to a problem? Please describe.**
Current CI uses SIMULATION=native for all builds

**Describe the solution you'd like**
Add one non-simulation build, consider matrix model as used in osal

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFE#629 - failure that wasn't caught

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/69
Incorrect install/staging location for coverage test binaries,"**Describe the bug**
Typo in cmake file - the loop variable when installing coverage binaries is `TGT` but the DESTINATION refers to `TGTNAME`.

**To Reproduce**
Build with multiple CPUs sharing the same target+platform config.

**Expected behavior**
Binaries should be installed for everything in INSTALL_TARGET_LIST.

**Code snips**
https://github.com/nasa/osal/blob/80fdd67a6c28a962164697ece12570142331ea44/src/unit-test-coverage/CMakeLists.txt#L86-L89

**System observed on:**
Ubuntu 20.04

**Additional context**
The CFE scripts also do set `TGTNAME` in other places so it by chance had a leftover value that happened to be the same thing, and therefore this wouldn't be noticed when building for a single target (the default case).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/538
`CFE_SB_IsValidMsgId` handler default behavior fails if return not set,"**Is your feature request related to a problem? Please describe.**
Any UT not setting the return for `CFE_SB_IsValidMsgId` will see the call fail in the unit under test:
https://github.com/nasa/cFE/blob/07fb34854af9667c31216f6cfe615843952f0821/modules/core_api/ut-stubs/src/cfe_sb_handlers.c#L399-L409

**Describe the solution you'd like**
<ore helpful to test against CFE_SB_INVALID_MSG_ID if the return isn't set.

**Describe alternatives you've considered**
None

**Additional context**
Just test against invalid, since max is configurable and UT's shouldn't rely on it.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2040
Cast align issue in cfe_es_task.c - CFE_ES_TaskPipe,"**Describe the bug**
```
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_task.c: In function ‘CFE_ES_TaskPipe’:
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_task.c:635:52: warning: cast increases required alignment of target type [-Wcast-align]
  635 |                         CFE_ES_SendMemPoolStatsCmd((CFE_ES_SendMemPoolStats_t*)Msg);
```

**To Reproduce**
Build on gcc 8+ with cast-align=strict

**Expected behavior**
Clean build

**Code snips**
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/es/cfe_es_task.c#L632-L637

**System observed on:**
 - Hardware: arm64
 - OS: Ubuntu 20.04
 - Versions bundle + mods to cast-align=strict

**Additional context**
#851, #852 

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/854
LGTM warning - no header guard in to_lab_sub_table.h,"**Is your feature request related to a problem? Please describe.**
Missing header guard in to_lab_sub_table.h

**Describe the solution you'd like**
Add header guard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/to_lab/issues/56
Remove Test_SB_Cmds_SubRptUnexpCmdCode (no longer applicable),"**Is your feature request related to a problem? Please describe.**
Test_SB_Cmds_SubRptUnexpCmdCode seems like it was intended to test the subscription reporting with a command code parameter, but this is a no parameter command.  It's also just a copy of Test_SB_Cmds_UnexpCmdCode so doesn't do anything unique.

**Describe the solution you'd like**
Remove.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1014
Renumber requirements based on category,"**Is your feature request related to a problem? Please describe.**
Requirements have evolved such that the numbering is no longer consistent.  Makes it harder to quickly check implementation linkage to at least the correct category (CFE_ES_WriteToSysLog links to cES1014 which is typically the command/message group)

Examples:
cES1014 and associated is all about the system log, but in what is typically the command section
cES1017 is the exception reset log
cES1022 is for performance analyzer API
cES1600 is FS, but is under ES (should be all under API's and/or functional)
... and so on

**Describe the solution you'd like**
X0XX - Commands/Messages and behavior (upon receipt of a command/message and X0XX.X for additional behavior) 
X3XX - API's and behavior (upon receipt of a request)
X5XX - Reset behavior
X7XX - Functional/performance behavior

FS should be split out from ES (16XX)

**Describe alternatives you've considered**
None, although renumbering should always use NEW numbers to avoid confusion and helpful to have a comment with the old number (or other way to identify in a search).

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1710
"Remove local-endian SID macros, and unnecessary abstraction of mask/shift","**Is your feature request related to a problem? Please describe.**
The following macros aren't clearly documented as to use.  They only work on a local endian StreamID (like what comes from `CCSDS_RD_SID`).

https://github.com/nasa/cFE/blob/62252d11409f337d3dea2732739e068987363985/fsw/cfe-core/src/inc/ccsds.h#L437-L454

The CCSDS_RD_BITS/WR_BITS isn't CCSDS related, and is just a mask/shift.  More straight forward to just use mask/shift.  See conversation on https://github.com/skliper/cFE/commit/a8c24ea4370d99b097f91a2c3a8dd76d9202dc74#commitcomment-38382611

**Describe the solution you'd like**
Remove these since they just add to confusion.  Just use the CCSDS_RD_SID/APID/SHDR/TYPE/VERS macros directly on the header.

**Describe alternatives you've considered**
Could deprecate, but no known uses.

**Additional context**
Conversation stemmed from #568

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT* fixed code blob
*EDIT* fixed my initial issue title and updated description per @jphickey clarification of intended use",non-bug,https://github.com/nasa/cFE/issues/597
"UT assert stub generator bypasses functions marked `extern ""C""`","**Describe the bug**
The `generate_stubs.pl` script ignores all contents inside `{}` blocks.  Unfortunately, for header files which are made C++-aware, it is typical to wrap C function calls in an `extern ""C""` block which means it gets ignored by the tool.  It does not understand the `#ifdef __cplusplus` surrounding it.

**To Reproduce**
Attempt to generate stubs against a header file which includes an extern ""C"" block.  The prototypes inside the block are not processed.

**Expected behavior**
Should process prototypes inside the extern ""C"" block.

**System observed on:**
Ubuntu.

**Additional context**
Prototypes were expected to all occur at the top-most scope but the `extern ""C""` keyword for C++ changes this.  Really, the file needs to be run through the C (not C++) preprocessor first, so the `#ifdef` here has the intended effect.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/1166
cFE Application Developers Guide.md shows use of deprecated binary filter constant name,"**Describe the bug**
CFE_EVS_BINARY_FILTER appears in the guide, but the current usage is CFE_EVS_EventFilter_BINARY.

**To Reproduce**
N/A

**Expected behavior**
Update guide to show use of CFE_EVS_EventFilter_BINARY.

**Code snips**
There are 3 locations:
[Line 2308](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2308)
[Line 2334](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2334)
[Line 2403](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2403)

**System observed on:**
N/A

**Reporter Info**
Alan Gibson  NASA/GSFC 587
",non-bug,https://github.com/nasa/cFE/issues/2004
doxygen obsolete warning,"**Is your feature request related to a problem? Please describe.**
obsolete warning when creating osalguide/usersguide/doc:

```
warning: Tag `DETAILS_AT_TOP' at line 35 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `SHOW_DIRECTORIES' at line 75 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `HTML_ALIGN_MEMBERS' at line 137 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `XML_SCHEMA' at line 185 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `XML_DTD' at line 186 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
```


**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/459
Errors printed using OS_printf may never appear,"**Describe the bug**
OS_printf uses an additional output buffer with a low priority task to move the data from the buffer to the console.  In the case of fatal errors which cause the process to exit as a result, the output may not get transferred before the process exits and the task is killed.

**To Reproduce**
See #202 of a case where (for other reasons) shmget failed but no error message was shown.

**Expected behavior**
Error messages should be shown

**Additional context**
This is particularly an issue for errors which cause an immediate process exit.  So long as the process keeps running and the output task isn't immediately cancelled, there should not be an issue.  

Recommendation is to use `fprintf(stderr, ...)` for fatal error messages, as even the stdout stream might have some line buffering in the C library, but the stderr stream should be (relatively) unbuffered.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.  ( based on previous report in #202 )
",bug,https://github.com/nasa/PSP/issues/203
Code coverage for shared dropped below 100% (again),"**Is your feature request related to a problem? Please describe.**
shared/src/osapi-common.c: OS_DeleteAllObjects missing coverage
shared/src/osapi-idmap.c: OS_ObjectIdFinalizeDelete not covered

**Describe the solution you'd like**
1. Add coverage back in
1. Enforce 100% coverage in CI

**Describe alternatives you've considered**
At minimum add coverage back... CI really should enforce or we will keep missing code coverage.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/602
OS_TimerCreate() Unterminated String,"ostimer.c maintains a static OS_timer_table, and a char name[OS_MAX_API_NAME] is an element of each table entry.

In OS_TimerCreate(), ln 298, '''the code could leave an unterminated string in OS_timer_table[i].name'''.  And it appears as though all the other code is assuming it IS a properly-terminated string.  Line 243 tests:
{{{
if (strlen(timer_name) > OS_MAX_API_NAME)
...return error value
}}}
and later
{{{
strncpy(OS_timer_table[possible_tid].name, timer_name, OS_MAX_API_NAME);
}}}
copies the string with OS_MAX_API_NAME length.

But if the timer_name argument is sized exactly OS_MAX_API_NAME+1 (including the terminating null) then it'll be copied over so that there is no terminating null in the table entry name.

To fix:
* The strlen if-test should account for the \0 in its length check
{{{
if (strlen(timer_name) > OS_MAX_API_NAME-1)
}}}
* The documentation for this function should note the actual arg length limit with the null 
* (nice to have) It isn't actually documented in osconfig.h whether the terminating string nulls are counted as part of the OS_MAX_* name and path limits.  But it certainly does appear that the intent is that strings are properly terminated in the VxWorks OSAL.  (Written clairty on that convention would have helped some.)",non-bug,https://github.com/nasa/osal/issues/88
Fix doxygen warnings,"**Describe the bug**
Warnings are generated when compiling the documentation

**To Reproduce**
1. Build documentation using `make doc`
2. Observe warnings in `cFS/build/doc/warnings.log`

**Expected behavior**
No warnings should be generated

**Reporter Info**
Leor Bleier, GSFC\582
",non-bug,https://github.com/nasa/PSP/issues/150
Previous PR #45 broke some platforms due to type mismatch,"**Describe the bug**
A recent change in pull request #45 changed  the `TO_LAB_init` function prototype to return an `int32` type here:
https://github.com/nasa/to_lab/blob/7e7dc4b5e10386ce533fdf890d7e2805cdece38c/fsw/src/to_lab_app.c#L83

However the function is actually defined later here:
https://github.com/nasa/to_lab/blob/7e7dc4b5e10386ce533fdf890d7e2805cdece38c/fsw/src/to_lab_app.c#L158

This results in error if `int` and `int32` are not actually the same type.

**To Reproduce**
Build on any platform where `int` and `int32` are not the same type (e.g. 32 bit RTEMS, for example).

**Expected behavior**
Declaration should match definition, and it should build cleanly.

**System observed on:**
RTEMS 4.11.3 (cross)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/to_lab/issues/47
Add actions in workflow to replace former CI implementation ,"**Is your feature request related to a problem? Please describe.**
CI no longer running for PR's in nasa repo

**Describe the solution you'd like**
Implement CI as GitHub Actions

**Describe alternatives you've considered**
None

**Additional context**
Similar to transition in nasa/cFS

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/729
Doxygen description of stub for CFE_SB_SendMsg is not correct,"**Describe the bug**
Description on the stub for CFE_SB_SendMsg is out of date.

**Expected behavior**
Update description

**Code snips**
https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L453-L462

**Reporter Info**
Alan Gibson  NASA GSFC/587
",non-bug,https://github.com/nasa/cFE/issues/938
"More lenient operation when ""SIMULATION"" compile-time directive is defined","When using the POSIX OSAL implementation under Linux, certain things only fully work when running as root.  Specifically:
* Attempts to create POSIX queues at depths greater than /proc/sys/fs/mqueue/msg_max (typically 10) will fail.
* Attempts to raise the priority of user threads will fail.

The queue depth issue in particular is so frequently encountered that there is a special message printed if queue creation fails.  However, the suggested workarounds require root access, and this would not typically be the case when using an official ACES-issued Linux workstation (unless one has elevated privileges).

In order to make it easier for someone to initially get up and running with OSAL/CFE, the OSAL should be more lenient and allow the operation to succeed even if all the parameters were not met due to being a normal user and not root.  

A workaround such as this can be employed if and only if compiling with the ""SIMULATION"" flag, as this indicates the user is performing a debug build and not running on a real target.  This way, the operation will still fail when performing a build for real hardware.

",non-bug,https://github.com/nasa/osal/issues/37
Document nested usage of UT_ADD_TEST and clarify nomenclature for individual versus groups of tests,"## Describe the problem

The `UT_ADD_TEST` call has some limitations as addressed in nasa/cFE#840.  Some solutions are discussed in that PR. 

## Proposed Solutions
 
1. Have `UT_ADD_TEST` handle ""nested"" unit tests, OR
2. Develop a nomenclature for unit test functions that explicitly indicates whether there are nested unit tests and then rename unit tests accordingly, OR
3. Document the anti-pattern, OR
4. Split up all unit tests to ensure only one test per function and make this a design pattern.



## Additional Context

_Originally posted by @skliper in https://github.com/nasa/cFE/pull/840#issuecomment-680193849_

>Related to nasa/osal#577.  Individual tests are added w/ the UT_ADD_TEST call.  Some tests are grouped at a lower level (Test_MSG_CCSDSExt is a group of tests), and those functions are called directly.  Same pattern is used in `sb`:
>
>https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/unit-test/sb_UT.c#L134-L135

",non-bug,https://github.com/nasa/cFE/issues/841
"""PipeName"" is unset for debug event","**Describe the bug**
Mistake in previous PR #1092 where the `PipeName` buffer is used to send a debug event on success but it is only set to a value on failure.

**To Reproduce**
Enabled debug events, and ""Subscription Rcvd"" events do not have a valid name.

**Expected behavior**
Need to get name in all cases, not just failure.

**System observed on:**
Ubuntu 20.04

**Additional context**
My preference would be to only print the ID in a debug event, as its faster and it saves the work of copying the name since most of the time debug events are turned off anyway.  But a ""quick fix"" that doesn't change the format is to just move the line.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1141
Remove rogue while loop,"**Is your feature request related to a problem? Please describe.**
Leftover while loop:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L355-L356

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/873
assert() in main-line code,"**Is your feature request related to a problem? Please describe.**
In unit tests, we use assert statements.

A lot of our code performs a number of safety checks (pointer is not null, index is less than array size, etc.) I suggest we develop something similar to the UT assert code, and use as much as possible in the main-line code base in lieu of our current safety checks as it will improve readability and support tooling of code analysis.

**Describe the solution you'd like**
Assert library should generate events, return values, and will need to be able to unwind such things as semaphores.

**Describe alternatives you've considered**
Implementing this will introduce risk that we miss a safety check or otherwise mis-translate the check into an assert. Need to develop the library and slowly migrate current safety checks to the library.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/520
C++ comment style and commented out code violations,"**Is your feature request related to a problem? Please describe.**
C++ comment style and commented out code violates style guidelines

https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/tests/select-test/select-test.c#L266

**Describe the solution you'd like**
Clean up

**Describe alternatives you've considered**
None

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/osal/issues/828
OS_TranslatePath() does not handle mountpoint equal to virtualpath,"Discovered while using cfs_fm app, if one were to get a directory listing for ""/cf"", then OSAL will report this doesn't exist because of a bug in OS_TranslatePath().

You are required to ask for ""/cf/""  because the code is looking for a required trailing slash.   This seems to be true of all volumes listed in one's volume table (cfe_psp_voltab.c).

This trailing slash should not be required.

Two diff outputs with fixes are enclosed..  one for vxworks6 and one for posix.

{{{
diff --git a/cfs_osal/src/os/vxworks6/osfilesys.c b/cfs_osal/src/os/vxworks6/osfilesys.c
index 02e0a3c..48636d3 100644
--- a/cfs_osal/src/os/vxworks6/osfilesys.c
+++ b/cfs_osal/src/os/vxworks6/osfilesys.c
@@ -1099,7 +1099,7 @@ int32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)
         if (OS_VolumeTable[i].FreeFlag == FALSE)
         {
             path_on_device = skip_prefix(VirtualPath, OS_VolumeTable[i].MountPoint);
-            if (path_on_device && ('/' == *path_on_device))
+            if (path_on_device && (  ('/' == *path_on_device)  ||  ('\0' == *path_on_device) ) )
             {
 #ifdef OS_DEBUG_PRINTF
                 printf(""NumChars: %d\n"", path_on_device + 1 - VirtualPath);
}}}

{{{
diff --git a/cfs_osal/src/os/posix/osfilesys.c b/cfs_osal/src/os/posix/osfilesys.c
index ef92ce9..a6f9a15 100644
--- a/cfs_osal/src/os/posix/osfilesys.c
+++ b/cfs_osal/src/os/posix/osfilesys.c
@@ -643,7 +643,7 @@ int32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)
         if (OS_VolumeTable[i].FreeFlag == FALSE)
         {
             path_on_device = skip_prefix(VirtualPath, OS_VolumeTable[i].MountPoint);
-            if (path_on_device && ('/' == *path_on_device))
+            if (path_on_device && (  ('/' == *path_on_device)  ||  ('\0' == *path_on_device) ) )
             {
 #ifdef OS_DEBUG_PRINTF
                 OS_printf(""NumChars: %d\n"", path_on_device + 1 - VirtualPath);
}}}
",bug,https://github.com/nasa/osal/issues/204
Posix queue depth differs: mqueues vs sockets,"Running the OSAL oscore-test unit test with mqueue vs. sockets (appropriate #define changed in osconfig.h) shows a difference with sockets that wasn't there with mqueues.

{{{
Test #27 Queue-full [FAILED]
FAILED [ ] OS_QueuePut - #27 Queue-full 
}}}

Apparently the socket implementation doesn't implement queue depth checks with the same semantics.  The socket OS_QueueCreate() queue_depth arg is ignored:
{{{
int32 OS_QueueCreate (uint32 *queue_id, const char *queue_name, 
                       uint32 queue_depth,
                       uint32 data_size, uint32 flags)
}}}
The socket OS_QueuePut() looks at the bytes sent, returned from sendto(), and compares them to the message data size, but this results different ""depth"" semantics based on the socket behavior.

The unit test fails because it is expecting the API to honor the queue depth limit and error out on OS_QueuePut(), but it doesn't.",bug,https://github.com/nasa/osal/issues/191
Remove cfe_es_devsrvr code,"cfe_es_devsrvr.c and .h appear to be stale/obsolete and not being called or referenced by anything else in cFE.

Furthermore, it should be deprecated anyway since device-support code logically fits better within the PSP.  At the cFE layer it should be all hardware-independent code.

If this is correct, these two files should be removed from the build.",bug,https://github.com/nasa/cFE/issues/47
Delete/exit/create child task additional error codes need to be documented in API and tested (related to requirements),"**Is your feature request related to a problem? Please describe.**
We've got requirements to error if `CFE_ES_DeleteChildTask` or `CFE_ES_ExitChildTask` relate to the main app task:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L114
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L116

Also `CFE_ES_CreateChildTask` can not be called from a child task:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L112

**Describe the solution you'd like**
Document in the API and exercise these cases and test for return codes:
`CFE_ES_ERR_CHILD_TASK_DELETE_MAIN_TASK`
`CFE_ES_ERR_CHILD_TASK_CREATE`
Note `CFE_ES_ExitChildTask` is a void so no error code to check but shouldn't exit from a main app, exercise from main test app task to confirm

**Describe alternatives you've considered**
None

**Additional context**
Hopefully this would be caught by the upcoming API scrub (@jphickey), but documenting explicitly since it's a requirement verification issue.  Not sure if it's easier to fix now or with the rest of the updates... open to whatever is easiest.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1769
Possible race condition with creation of throttle sem (needs to exist before CF initializes),"**Describe the bug**
CFE ES starts all applications in their own thread.  Therefore, conceptually at least, all apps are starting at the same time.

If configured to use a throttle sem, the CF app expects that semaphore to be created _before_ it starts.  During startup, it will attempt to bind to that semaphore during CF_CFDP_InitEngine(), and if that fails, CF aborts (see #178).

Problem is, if the semaphore is created by another app, whether it be CI/TO or some other dedicated I/O app, there is no guarantee that the semaphore has been created before CF attempts to use it.

Secondary problem exists if the I/O app that owns the sem gets restarted or reloaded, the semaphore ID will likely change too.   This may be recoverable by disabling the engine and re-enabling it (but haven't tested that).

**To Reproduce**
Its a race condition, so not readily reproducible.
Start CF _before_ the app that creates the sem (still not guaranteed, but increases the chance the race will be lost)
Add an artificial delay during startup for the app that creates the sem (just further increases the chance the race will be lost)

**Expected behavior**
Should be guaranteed via sync mechanisms, or shouldn't be a hard error (e.g. maybe retry to bind later?)

Suggestion that CF might still start up but with the engine in a disabled state, so at least someone can correct the condition and enable the engine, rather than having CF abort/exit.

Adding a call to CFE_ES_WaitForStartupSync() before starting the engine might help too...

**Code snips**
https://github.com/nasa/CF/blob/2a024d8efd9f44f54b7a59f7face24f255536236/fsw/src/cf_cfdp.c#L1014-L1015

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/CF/issues/184
MCP750 uncommanded reset at startup,"An uncommanded reset periodically occurs (~1 in 5 startups) at startup on the MCP750 using vxworks6.9.

This bug has likely been around for a long time (10 years or more), is only seen on a ""processor reset"", and is likely related to something corrupted in memory that gets reused.  Reset type is based on a register, and after the reset, a ""power-on reset"" is performed and is always successful (formats/clears the corrupted memory before use).",bug,https://github.com/nasa/PSP/issues/107
Incomplete coverage test for src/tbl,"**Is your feature request related to a problem? Please describe.**
Current Coverage: 99.6 %

 cfe_tbl_api.c
CFE_TBL_Register
```
     373           0 :                                 CFE_ES_GetAppName(AppName, ThisAppId, OS_MAX_API_NAME);
     374           0 :                                 CFE_ES_WriteToSysLog(""CFE_TBL:Register-Failed to get work buffer for '%s.%s' (ErrCode=0x%08X)\n"",
```

CFE_TBL_Update
```
    1005           0 :             CFE_EVS_SendEventWithAppID(CFE_TBL_UPDATE_ERR_EID,
    1006             :                                        CFE_EVS_EventType_ERROR,
    1007             :                                        CFE_TBL_TaskData.TableTaskAppId,
    1008             :                                        ""%s Failed to Update '%s', Status=0x%08X"",
    1009           0 :                                        AppName, RegRecPtr->Name, (unsigned int)Status);
```

CFE_TBL_Manage
```
    1374             :                 /* If an error occurred during Validate, then do not perform any more managing */
    1375           0 :                 FinishedManaging = true;
```

cfe_tbl_task_cmds.c
CFE_TBL_LoadCmd

```
    515             :                         {
     516           0 :                             CFE_EVS_SendEvent(CFE_TBL_INTERNAL_ERROR_ERR_EID,
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/472
Some vxworks osfileapi.c functions not handling string length correctly,"There were multiple problems identified in the osfileapi.c's string handling.  This issue wraps them all up together for convenience.

Problem 1:  strlen check (>=) is different than OS_check_name_length strlen check (>) for the same variable.  The check in OS_check_name_length should be (>=).

Affects: (function, rough line number)
* OS_creat	196
* OS_open	311
* OS_stat	560
* OS_remove	666
* OS_rename	738
* OS_rename	741
* OS_cp	820
* OS_cp	825
* OS_mv	922
* OS_mv	927
* OS_rmdir	1166

Problem 2:
strlen check (>) should check for (>=), assuming OS_MAX_PATH_LEN includes the terminating null character.

Affects: (function, rough line number)
* OS_opendir	1044
* OS_check_name_length	1211

Identified with #45 white-box coverage testing.",bug,https://github.com/nasa/osal/issues/107
Occasional table build failures with parallel builds (-j),"**Describe the bug**
When using the -j option to `make`, occasionally some table builds may fail.

**To Reproduce**
Depends on a configuration that uses a lot of table files (> 100).  Repeatedly do clean builds followed by `make -j<X> install` where X is a number greater than 3 or so.  Occasionally an error will occur due to a missing object.

**Expected behavior**
Should succeed

**System observed on:**
Debian

**Additional context**
Initial analysis of a failed build seems to suggest it was trying to build the same intermediate table library twice, at the same time.  As such either the `ranlib` or `ar` actions failed because one of them stepped on the files from the other parallel build.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/2421
Provide useful output upon posix osloader failure,"The posix osloader.c's OS_ModuleLoad() fails '''very''' tersely providing absolutely no help in figuring out _why_ a module failed to load.

{{{
277	   /*
278	   ** Open the loadble bundle .. just opening it loads it into the system.
279	   */
280	   function_lib = dlopen(translated_path, RTLD_LAZY | RTLD_GLOBAL);
281	   dl_error = dlerror();
282	   if( dl_error )  <=== ""oh so many reasons why""
283	   {
284	      OS_module_table[possible_moduleid].free = TRUE;
285	      return(OS_ERROR);
286	   }
}}}

Various reasons include (but aren't limited to): missing file, bad filename, bad path, bad path mapping, missing symbol, bad/typo entry point in the startup script, etc.  This wastes developer time and frequently forces you into a debugger.

A fix like this helps immensely:
{{{
+++ b/osal/src/os/posix/osloader.c
@@ -282,6 +282,9 @@ int32 OS_ModuleLoad ( uint32 *module_id, const char *module_name, const char *fi
    if( dl_error )
    {
       OS_module_table[possible_moduleid].free = TRUE;
+      /* FIXME - debugging */
+      OS_printf(""OS_ModuleLoad()'s dlopen failed for translated path: %s\n"",(char *)translated_path);
+      OS_printf(""OS_ModuleLoad()'s dlopen error: %s\n"",dl_error);
       return(OS_ERROR);
    }
}}}
",non-bug,https://github.com/nasa/osal/issues/192
Address alignment issue in VxWorks 7 on 32 bit processor,"**Describe the bug**
The task control bock (TCB) has an element with a 64 bit alignment requirement on some processors, but the way the OS_impl_task_internal_record_t is defined for VxWorks 7 does not enforce 64 bit alignment on a 32 bit system.  This causes taskInitialize to fail.

Note the use of a char array in the structure here:
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/os/vxworks/inc/os-impl-tasks.h#L32-L47

Used here:
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/os/vxworks/src/os-impl-tasks.c#L236-L243

**To Reproduce**
Need to get into a situation where the internal task record (and tcb since it's the first element) is not on a 64 bit boundary, and get's passed into taskInitialize, on a system that errors out if a 64 bit structure element isn't on a boundary.  Observed on GR712RC.

**Expected behavior**
Should initialize tasks successfully.  As a quick test a `uint64 val;` was added to the internal task record, forcing alignment and the task initialization worked.

**System observed on:**
 - Hardware: GR712RC
 - OS: VxWorks 7
 - Versions: should be observable in Caelum or later

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/osal/issues/1271
Executive Services Requirements Scrub - Missing command requirements,"**Is your feature request related to a problem? Please describe.**
ES requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Note #509 and #510 missed the following new commands.

New command requirements:
- cES1029: CFE_ES_StartPerfDataCmd
- cES1030: CFE_ES_SetPerfFilterMaskCmd
- cES1031: CFE_ES_SetPerfTriggerMaskCmd
- cES1032: CFE_ES_QueryAllTasksCmd
- cES1033: CFE_ES_SendMemPoolStatsCmd

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/512
Overrun warning false alarm for CFE_SB_Buffer_t ,"**Describe the bug**
Overrunning struct type CFE_SB_Buffer_t of 16 bytes by passing it to a function which accesses it at byte offset 32767 using argument MsgSize (which evaluates to 32768).

**Expected behavior**
Fix overrun

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_api.c#L2081

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFE/issues/1994
Coverage test not installed in correct directory,"**Describe the bug**
Coverage test not installed in correct directory - see nasa/cfe#881

**To Reproduce**
Make unit tests, make install, observe unit test in build directory.

**Expected behavior**
Should go in target directory (build/exe/cpu1 for sample config)

**Code snips**
https://github.com/nasa/PSP/blob/5f08c5c06b2899d5c7f24b38a7b643595d4c51f9/unit-test-coverage/mcp750-vxworks/CMakeLists.txt#L60-L62

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/PSP/issues/194
Remove config tlm packet and associated command,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
All the configuration information is in the table (and maintained there), the config packet is redundant and actually is missing all the channel data so it's not all that useful anyways.
https://github.com/nasa/CF/blob/bfeaa9a30094fbd5c8720e6b85bf71435b7ddc7d/fsw/src/cf_msg.h#L108-L127

**Describe the solution you'd like**
Remove this functionality along with requirement CF5004

**Describe alternatives you've considered**
None

**Additional context**
As part of making more configuration channel based, this redundancy was noted.  Not worth the effort to maintain a tlm packet that's basically a repeat of the table.
- #120

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/256
"CF use of ""static const int32"" for return codes, not used anywhere","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1794] CF use of ""static const int32"" for return codes, not used anywhere
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 08:58:47 2021

_Original Description_:
In the table validation function ""CF\_ValidateConfigTable"" it has return values declared locally as a set of ""static const int32"" values:  
  
    static const int32 no\_ticks\_per\_second = -1;  
    static const int32 crc\_alignment = -2;  
    static const int32 outgoing\_chunk\_size = -3;  
  
Because they are local, these values are not available to code outside this function, so nothing can ever check for these status codes (and nothing ever does). The validation function caller only ever checks if the value is negative, and CF only checks if the TBL call returns something other than CFE\_SUCCESS.  
  
Since CF is already sending an event with the validation failure details, this error code is not necessary and not relevant. It should be remove and replaced with one of the generic cfe\_error constants.",non-bug,https://github.com/nasa/CF/issues/57
Refactor/split files (headers and c) into smaller topics,"**Is your feature request related to a problem? Please describe.**
Huge files are harder to manage.  Example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L2136
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_task.c#L1772

Note also split up old ""task"" pattern:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.h#L94-L118

**Describe the solution you'd like**
Split/refactor into more manageable units.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1322
Exception/Interrupt API issues in OSAL,"**Describe the bug**
When running unit tests on the OSAL for the VxWorks, POSIX, and RTEMS environments, it revealed a few minor issues on the implementation side that should be addressed.  These are all in the interrupt/fpu/exception API areas for which the CFE FSW does not really rely upon.

1. For POSIX and RTEMS, the FPU exception APIs should all return `OS_ERR_NOT_IMPLEMENTED`, because these are in fact not implemented.  Returning `OS_SUCCESS`, as some did, implies that the behavior took effect when it did not (this matters to UT).  These are:
-  `OS_FPUExcSetMask_Impl()`
- `OS_FPUExcGetMask_Impl()` 
- `OS_FPUExcEnable_Impl()`
- `OS_FPUExcDisable_Impl()`

2. RTEMS does not provide a direct equivalent for the OS_IntEnable/OS_IntDisable API like VxWorks has.  The implementation had been using rtems_intterupt_enable/disable for this, but the semantics of those calls are different (they are more appropriate for OS_IntLock/OS_IntUnlock).  The Enable/Disable implementation should just return `OS_ERR_NOT_IMPLEMENTED`.

3. The RTEMS `OS_IntLock_Impl`/`OS_IntUnlock_Impl` implementation should use the ""local"" variant of the RTEMS interrupt enable/disable function.  This is documented as being identical on single-processor machines but only the local variant is applicable to multi-processor machines.

4. The `OS_FPUExcGetMask()` API accepts a pointer as an output buffer, so to be consistent with all other API calls that accept a pointer, it should check for NULL and return `OS_INVALID_POINTER` in that case.

**To Reproduce**
Execute the OSAL unit tests (including changeset for #313 to enable full testing) and some failures are reported due tot his.

**Expected behavior**
All unit tests should pass.

**System observed on:**
- Ubuntu 18.04 LTS 64-bit (native/posix)
- RTEMS 4.11 on i686/pc (QEMU-emulated target)
- VxWorks 6.9 on PPC/MCP750

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/316
Import UT-Assert basics into OSAL,"Portions of UT-Assert will be very useful for
unit testing within OSAL, and should be imported
from the official release into the OSAL tree.
",non-bug,https://github.com/nasa/osal/issues/80
Add build verification scripts (CTF based),"**Is your feature request related to a problem? Please describe.**
No build verification scripts for command requirements

**Describe the solution you'd like**
Add build verification scripts

**Describe alternatives you've considered**
None.

**Additional context**
Need to discuss how we approach this.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/627
cFE core services can create files FM can't delete,"**Describe the bug**
A few commands to the cFE core services, and possibly some cFS applications, are able to create files that cannot then be moved, renamed, deleted, or otherwise by FM. One example is `EVS_WRITELOG2FILE` (`CFE_EVS_FILE_WRITE_LOG_DATA_CC`). This command (and all others that take filenames in the cFE core) don't check the validity of a filename; they simply pull the filename from the command and call `OS_creat()` or `OS_open()` immediately.

FM, on the other hand, calls `CFS_IsValidFilename()` to check for validity of provided filenames in all commands. So, if a command like `EVS_WRITELOG2FILE` is used to create a file with an invalid filename, FM cannot then access that file in any way.

**To Reproduce**
Steps to reproduce the behavior:
1. Use `EVS_WRITELOG2FILE` to create a log file in `/ram` with a `?` in its filename.
2. Attempt to delete this file with FM.

**Expected behavior**
I would expect that no cFE application, or cFE itself, should be able to create files with invalid filenames.

My suggested fix, and how we've fixed this in our local copies of cFE and OSAL, is to move the `CFS_IsValidFilename()` function into the OSAL, and have all OSAL file API functions perform the check before operating on files. This guarantees that nothing above the OSAL can create a file with an invalid name.

**Code snips**
* [EVS creation of log data files without validating filename](https://github.com/nasa/cFE/blob/6aaf5a3244e02af43c8ebb893ef413916dff5ef2/fsw/cfe-core/src/evs/cfe_evs_log.c#L178)
* [FM check on valid filenames](https://github.com/nasa/FM/blob/a1ebbc8b48a90764837cd083fae6d00f8967d46f/fsw/src/fm_cmd_utils.c#L159)
* [cfs_lib filename validation](https://github.com/nasa/cfs_lib/blob/871ce1e8cc1e597464923029e04f2ff3aa47e64e/fsw/src/cfs_utils.c#L170)

**System observed on:**
 - Capella flight computer
 - OS: FreeRTOS 9.0.0
 - Versions: cFE 6.5.0, OSAL 4.2.1 (plus in-house FreeRTOS port), cfs_lib 2.2.0, FM 2.5.2

**Additional context**
This is another one we discovered accidentally operationally. One of our operators created an EVS log with a question mark in the name, and then we realized that we couldn't do anything with that file with FM. We ended up patching the filename check in cfs_lib with MM so it would allow for us to delete the file.

**Reporter Info**
Mike Stewart, Capella Space.
",bug,https://github.com/nasa/FM/issues/1
CCSDSv2 MsgId construction not 16 bits as described in cfe_sb_msg_id_util.h,"**Describe the bug**
CCSDSv2 MsgId construction not 16 bits as described in cfe_sb_msg_id_util.h. It looks like the 8th bit of the APID qualifier subsystem ID is included, making the MsgID 17 bits. 

**To Reproduce**
N/A, code inspection

**Expected behavior**
MsgId should mask off bit 8 in subsystem ID

**Code snips**
https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.h#L40-L58

https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/fsw/cfe-core/src/inc/ccsds.h#L346

https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.c#L137-L138

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
John N Pham, Northrop Grumman
",non-bug,https://github.com/nasa/cFE/issues/781
Update release document links in README.md,"**Is your feature request related to a problem? Please describe.**
All references in
```
Additional release notes for the cFS Framework are found in [release notes](https://github.com/nasa/cFE/tree/master/docs/cFE_release_notes.md).  See the [version description document](https://github.com/nasa/cFE/tree/master/docs/cFE_6_6_0_version_description.md) for the full version description document.  Test results can be found in [test results](https://github.com/nasa/cFE/tree/master/test-and-ground/test-review-packages/Results).  This is a point release from major development work currently being performed on an internal repository.
```
are broken.

**Describe the solution you'd like**
Fix links - relate to 6.7 release when available.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
Email from @dmccomas
",non-bug,https://github.com/nasa/cFS/issues/27
Remove dependencies on deprecated cFE elements,"With:
`cfe/CMakeLists.txt:add_definitions(""-D_ENHANCED_BUILD_ -DCFE_OMIT_DEPRECATED_6_6"")`
build errors:
```
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c: In function ‘SAMPLE_AppMain’:
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:62:24: error: ‘CFE_ES_APP_RUN’ undeclared (first use in this function)
     uint32 RunStatus = CFE_ES_APP_RUN;
                        ^
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:62:24: note: each undeclared identifier is reported only once for each function it appears in
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c: In function ‘SAMPLE_AppInit’:
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:108:22: error:  CFE_EVS_BINARY_FILTER’ undeclared (first use in this function)
                      CFE_EVS_BINARY_FILTER);
                      ^
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:124:48: error:  CFE_EVS_INFORMATION’ undeclared (first use in this function)
     CFE_EVS_SendEvent (SAMPLE_STARTUP_INF_EID, CFE_EVS_INFORMATION,
                                                ^
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c: In function ‘SAMPLE_ProcessCommandPacket’:
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:159:54: error:  CFE_EVS_ERROR’ undeclared (first use in this function)
             CFE_EVS_SendEvent(SAMPLE_COMMAND_ERR_EID,CFE_EVS_ERROR,
                                                      ^
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c: In function ‘SAMPLE_ProcessGroundCommand’:
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:185:57: error:  CFE_EVS_INFORMATION’ undeclared (first use in this function)
             CFE_EVS_SendEvent(SAMPLE_COMMANDNOP_INF_EID,CFE_EVS_INFORMATION,
                                                         ^
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c: In function ‘SAMPLE_ResetCounters’:
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:232:50: error:  CFE_EVS_INFORMATION’ undeclared (first use in this function)
     CFE_EVS_SendEvent(SAMPLE_COMMANDRST_INF_EID, CFE_EVS_INFORMATION,
                                                  ^
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c: In function ‘SAMPLE_VerifyCmdLength’:
/home/jhageman/cFS/cFS-dev/apps/sample_app/fsw/src/sample_app.c:257:47: error:  CFE_EVS_ERROR’ undeclared (first use in this function)
         CFE_EVS_SendEvent(SAMPLE_LEN_ERR_EID, CFE_EVS_ERROR,
```",non-bug,https://github.com/nasa/sample_app/issues/6
Consolidate similar functions,"SC_ManageAtsTable, SC_ManageRtsTable, and SC_ManageAppendTable are similar enough that some consolidation may be possible.  



Imported from GSFCCFS-1458",non-bug,https://github.com/nasa/SC/issues/7
osal_timer_UT inconsistent on MCP750 / VxWorks,"**Describe the bug**
The timer test does not have consistent results when run on the MCP750 + VxWorks 6.9 platform

**To Reproduce**
Run ""osal_timer_UT"" and occasionally a failure occurs in the ""nominal"" timer case:

```
[ PASS] 05.006 ut_ostimer_timerio_test.c:468 - OS_TimerSet(g_timerIds[4], startTime, intervalTime) (0) == OS_SUCCESS (0)
[ FAIL] 05.007 ut_ostimer_timerio_test.c:475 - 4# Nominal - callback status -1
```

**Expected behavior**
Test should pass reliably

**Code snips**
This is partly related to the fact that the MCP750 implementation has something wrong with its timer implementation.  The test reports these warnings:

```
OS_TimeBaseSet_Impl():576:WARNING: timer 524301 start_time requested=1000us, configured=16666us
OS_TimeBaseSet_Impl():582:WARNING: timer 524301 interval_time requested=500000us, configured=516666us
```

This means there is increased jitter in the callbacks, which is then compounded by the rather crude delta check:

https://github.com/nasa/osal/blob/64a6b31b5448a6301c64b001e043d4c7d9570131/src/unit-tests/ostimer-test/ut_ostimer_test.c#L104

**System observed on:**
MCP750 / VxWorks 6.9

**Additional context**
Other timer tests which average the counts over total time pass fine.  But this one checks the delta on every interval, so one case of too much jitter and it fails.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1095
Provide UT_BSP_Lock/Unlock in CFE assert app,"**Is your feature request related to a problem? Please describe.**
In nasa/osal#1065 it adds a UT_BSP_Lock / UT_BSP_Unlock routine to protect the UtAssert global data structures.  However for cfe_assert app the utbsp.c file is not used, it provides its own routines.  Therefore these routines need to be added.

**Describe the solution you'd like**
Add UT_BSP_Lock/Unlock wrappers in CFE assert (this already has a mutex).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1595
RPI3 buffer warning/make error. ,"```
/home/pi/Desktop/sat/cFS/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c: In function ‘CFE_SB_GetBufferFromPool’:
/home/pi/Desktop/sat/cFS/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c:94:21: error: cast increases required alignment of target type [-Werror=cast-align]
     bd->Buffer    = (CFE_SB_Buffer_t *)address;
                     ^
cc1: all warnings being treated as errors
```

given its just a warning I tried to suppress it with the ol' `make -k`

and this pops

```
make[6]: Target 'all' not remade because of errors.
make[5]: *** [Makefile:141: all] Error 2
make[4]: *** [CMakeFiles/native_default_cpu1-all.dir/build.make:57: CMakeFiles/native_default_cpu1-all] Error 2
make[4]: Target 'CMakeFiles/native_default_cpu1-all.dir/build' not remade because of errors.
make[3]: *** [CMakeFiles/Makefile2:298: CMakeFiles/native_default_cpu1-all.dir/all] Error 2
make[3]: Target 'CMakeFiles/mission-all.dir/all' not remade because of errors.
make[2]: *** [CMakeFiles/Makefile2:177: CMakeFiles/mission-all.dir/rule] Error 2
make[2]: Target 'mission-all' not remade because of errors.
make[1]: *** [Makefile:214: mission-all] Error 2
make: *** [Makefile:120: all] Error 2
```

Trying to compile on raspberry OS with a RPI 3B works on ubuntu 18.04 following the same steps. 

any help is appreciated tried main and integration-candidate  

new to git sorry if i missed anything,. ",non-bug,https://github.com/nasa/cFS/issues/206
CFE TIME fails to build when CFE_TIME_CFG_SIGNAL set to TRUE,"The CFE_TIME_CFG_SIGNAL configuration macro will add calls to a function {{{OS_SelectTone()}}} if it is set to TRUE.

However, OS_SelectTone is neither prototyped nor implemented in any released version of CFE or OSAL, as far as I can tell.  It does not seem to be documented anywhere what this is supposed to do.

It is currently not possible to build CFE with this configuration set to TRUE due to this problem.

Calling this a minor defect for now, as it only appears when using this configuration option.",bug,https://github.com/nasa/cFE/issues/78
Cannot specify custom PSP directory using psp_MISSION_DIR,"**Describe the bug**

Originally discussed in #1864 by @jbohren-hbr 

Cannot specify ""non-standard"" psp source directory via the environment variable $CFS_APP_PATH or the cmake variable ${psp_SEARCH_PATH}.

> The cFE cmake build infrastructure uses the environment / cmake variable $CFS_APP_PATH
as well as the cmake meta-variable pattern ${${APP}_SEARCH_PATH} to locate apps and other modules (such as psp), and subsequently sets the variable pattern ${${APP}_MISSION_DIR} (see mission_build.cmake lines 202-222).

https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/mission_build.cmake#L202-L222

> However, the resulting variable ${psp_MISSION_DIR} is not used in process_arch() in arch_build.cmake line 588 when including a target platform's build_options.cmake file. This causes a cmake configuration failure when trying to use a non-standard psp location.

https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/arch_build.cmake#L587-L589

**To Reproduce**
Build with psp in non-standard location, with the CFS_APP_PATH environment variable set

**Expected behavior**
${psp_MISSION_DIR} is used in process_arch() in arch_build.cmake for a successful build


**System observed on:**
System(s) tested on

    Hardware: PC
    OS: Ubuntu 18.04
    Versions: cFE v6.8.0-rc1+dev933


**Reporter Info**
@jbohren-hbr 
",non-bug,https://github.com/nasa/cFE/issues/1921
Initialize CDS block data in es unit testing to avoid uninit var warnings from valgrind,"**Is your feature request related to a problem? Please describe.**
Block data is used uninitialized in unit test:
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/ut-coverage/es_UT.c#L4669
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/ut-coverage/es_UT.c#L4789
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/ut-coverage/es_UT.c#L4795

**Describe the solution you'd like**
Initialize.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2028
Recommended lgtm osal issues,"**Is your feature request related to a problem? Please describe.**
Recommended osal issues:

osapi-os-core.h
```
line 50:
/* #define for enabling floating point operations on a task*/
--
  | This comment appears to contain commented-out code
```

osapi-module.c
```
line 319:
/* module_prop->creator = record->creator; */
--
  | This comment appears to contain commented-out code


```

shared/os-impl.h
```
typedef enum
--
367 | {
  | In an enumerator list, the = construct should not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.
368 | OS_FILE_FLAG_NONE,
369 | OS_FILE_FLAG_CREATE = 0x01,
```


posix/osnetwork.c
```
/*
--
25 | * FIXME: this belongs in the osconfig.h file, really.
26 | */
  | FIXME comment: this belongs in the osconfig.h file, really.
27 | #define OS_NETWORK_SUPPORTS_IPV6
```

shared/osapi-select.c
```
/*
--
85 | * FIXME:
86 | * This does not currently increment any refcounts.
87 | * That means a file/socket can be closed while actively inside a
88 | * OS_SelectMultiple() call in another thread.
89 | */
  | FIXME comment
```
**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/327
Add naming convention document,"From #207, but wasn't merged to 6.6.0",bug,https://github.com/nasa/cFE/issues/338
CFE_EVS_Register Filters argument should be of type CFE_EVS_BinFilter_t *,"If the Filters argument of CFE_EVS_Register is not null, it is always cast to ""CFE_EVS_BinFilter_t *"", the parameter should be of that type and not ""void *"". (If users want to pass another type that is compatible, they can cast on their call to make it explicit.) void * invites passing the wrong type of pointer.",bug,https://github.com/nasa/cFE/issues/197
Protect from EventID collisions with `CFE_EVS_FREE_SLOT`,"**Is your feature request related to a problem? Please describe.**
EVS uses `CFE_EVS_FREE_SLOT` to mark slots in the filter table as free:
https://github.com/nasa/cFE/blob/8443a46db34bc2a19cb6b601c117840d686932e3/modules/evs/fsw/src/cfe_evs_task.h#L57

Since `EventID` is of type `uint16`, this ends up colliding with 0xFFFF which isn't documented in the API's as being ""reserved"".  Leads to some very strange asserts in the coverage tests where -1 EventID returns CFE_SUCCESS where it should be rejected:
https://github.com/nasa/cFE/blob/8443a46db34bc2a19cb6b601c117840d686932e3/modules/evs/ut-coverage/evs_UT.c#L645-L646

**Describe the solution you'd like**
`CFE_EVS_FREE_SLOT` should be documented as an invalid EventID (expose), and reject in APIs/commands that take EventID.

**Describe alternatives you've considered**
None

**Additional context**
#1572

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1574
SB memory limit on individual pipes,"Discussion spawning from #100 and #304, APL has a use case for limiting the memory used on a pipe.  Different implementations were discussed (see attached email chain).


For steering committee discussion.",non-bug,https://github.com/nasa/cFE/issues/307
Automate a deployment of docs to GitHub pages,"Having to build and open the documentation locally adds an extra step that could be mitigated by pushing the documentation of the current master commit to GitHub pages.

The process of uploading to GitHub pages is documented [here](https://pages.github.com/)",non-bug,https://github.com/nasa/cFS/issues/28
CFE_MSG_GetTypeFromMsgId not handling all invalid inputs,"**Is your feature request related to a problem? Please describe.**
CFE_MSG_GetTypeFromMsgId calls CFE_MSG_SetMsgId and CFE_MSG_GetType but ignores those return calls. They can return fail status codes so CFE_MSG_GetTypeFromMsgId should handle that. 

**Describe the solution you'd like**
CFE_MSG_GetTypeFromMsgId should check for failing status codes and return them if they happen. 

**Requester Info**
Alex Campbell GSFC",bug,https://github.com/nasa/cFE/issues/1757
use timer_create() instead of setitimer() for pc-linux,"PSP uses setitemer() to call CFE_PSP_TimerHandler at 4hz. setitemer() does this by sending SIGALRM to the process every 1/4s.

SIGALRM (and signals in general) have no mechanism for distinguishing who created the signal, and handling the signal is tricky in multi-threaded environments. I would like to integrate a library but it also uses SIGALRM (also for timing) and the two uses conflict.

Additionally, ""POSIX.1-2008 marks getitimer() and setitimer() obsolete"" and also has a number of issues regarding multiple timers and accuracy of the timers under load. See https://linux.die.net/man/2/setitimer

I propose using timer_create() and sigaction() as demonstrated in the manual page: http://man7.org/linux/man-pages/man2/timer_create.2.html",non-bug,https://github.com/nasa/PSP/issues/80
Cppcheck unread variable errors in hs_monitor.c,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Cppcheck is currently reporting the following style issues: 

| severity | location | error id | issue |
| --- | --- | --- | --- |
| style | fsw/src/hs_monitors.c:641 | unreadVariable | Variable 'EntryResult' is assigned a value that is never used. |
| style | fsw/src/hs_monitors.c:643 | unreadVariable | Variable 'ResourceType' is assigned a value that is never used. |
| style | fsw/src/hs_monitors.c:644 | unreadVariable | Variable 'NullTerm' is assigned a value that is never used. |

**To Reproduce**
Run Cppcheck workflow

**Expected behavior**
Should run clean

**System observed on:**
Github hosted runner

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/HS/issues/73
OSC_INUM_TO_IVEC stub returning stack allocated memory,"**Is your feature request related to a problem? Please describe.**
CodeQL warning on line 72 (returning VecTbl):
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-test-coverage/ut-stubs/src/vxworks-intLib-stubs.c#L51-L77

**Describe the solution you'd like**
Make DummyVec static

**Describe alternatives you've considered**
Remove, no longer used in OSAL testing but could be used by PSP implementations.  Leaving in for now.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/777
"All CMD/TLM message should put content in a ""Payload"" sub-structure","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
To match the patterns used in CFE and other modules, all CMD/TLM message definitions should put the content (non-header) parts into a separate struct called ""Payload"".

**Describe the solution you'd like**
Separate message content into a sub structure called ""Payload"".

**Additional context**
This is benefit to tooling that can use the presence of this field to identify where the actual content starts (e.g. something like `offsetof(MsgType, Payload)` would work and be correct, as opposed to checking `sizeof(CFE_MSG_CommandHeader_t)` which may not actually reflect where the content starts due to possible compiler-added padding between them).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/FM/issues/74
Optional support for symbol table dump and module address/size info on POSIX systems (adds GNU extension dependence),"**Is your feature request related to a problem? Please describe.**
Currently checksum app does not work on systems that use os-impl-posix-dl-symtab.c since module address/size data is not filled in, nor is OS_SymbolTableDump supported.

**Describe the solution you'd like**
Would add GNU extension dependence, but dl_iterate_phdr() could be used to get the information required for both symbol table dump and module address/size.  Example for getting module address here: https://stackoverflow.com/questions/19451791/get-loaded-address-of-a-elf-binary-dlopen-is-not-working-as-expected

**Describe alternatives you've considered**
None

**Additional context**
We've avoided GNU extension dependence, but if supported on the desired system it would be helpful to have the option for this functionality to work.  Another use case is when simulating a system that does have these functions implemented, it's likely desirable to support the capability.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1205
"Time State flags near duplicate functions, one skips IsToneGood","CFE_TIME_GetStateFlags in cfe_time_utils.c is nearly identical to CFE_TIME_GetClockInfo in cfe_time_api.c except GetStateFlags doesn't include IsToneGood flag (both convert state data to flags).

Recommend removing GetStateFlags (internal, only used in HK generation) and replace with call to GetClockInfo (From API).

From Keegan Moore email thread (5/6/2019)",bug,https://github.com/nasa/cFE/issues/340
Header structure name assumptions limit MSG abstraction capability,"**Is your feature request related to a problem? Please describe.**
The MSG library is supposed to offer a complete abstraction of the header format, but in practice there are still some direct references to header structure members in Caelum which limit this capability.

In particular, when converting a local message buffer to a `CFE_MSG_Message_t` pointer, when passing into any CFE_SB API, the code references a sub-member, such as:

https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/es/fsw/src/cfe_es_task.c#L396

While this was nice in that it is fully type-safe, it limits the header abstraction in two important ways:
1. It assumes/requires that the buffer itself contains a `TlmHeader` member.
2. It assumes/requires that the `TlmHeader` structure, in turn, contains a `.Msg` member.  

For item (2) above, the TLM header is a structure controlled/defined by the CFE_MSG module, and there is no guarantee that a ""Msg"" member exists.  This will be a problem if an alternate MSG module is used, where the `CFE_MSG_Message_t` member is not called ""Msg"".  (The whole point of MSG is to make these structures free-form, and no assumptions should be made as to their internal structure, so this reference somewhat defeats that purpose).

**Describe the solution you'd like**

- Convert this to a cast instead, e.g. `(CFE_MSG_Message_t*)&CFE_ES_Global.TaskData.HkPacket`
- Have CFE_MSG provide a macro/inline function to implement this conversion/cast

**Describe alternatives you've considered**
Just document what the names need to be, and make it a requirement to name things in this manner.

Major issues with that - mainly that it is not friendly to automated tools which might be used to generate these headers/structures from a CMD/TLM database.

**Additional context**
There is no real convention to the names that exist today.  It would be more viable to do that if a specific convention/reasoning was followed, such as the `CFE_MSG_Message_t` member being called `Message` (i.e. without the CFE_MSG_ prefix or _t suffix).  This way a tool would know what name to call things in the generated files.  But as it is, there is simply no naming consistency in these members, a tool would have to hard-code ""special"" member names for each structure, for no good reason other than that's what a human had used for an abbreviation at one point.

But furthermore, even if a name convention was follwed prevents an additional layer of headers to be added.  For example, the ""TlmHeader"" is assumed contain a ""Msg"" member directly.  However in some implementations a user might want an intermediate header, where it would become `.TlmHeader.Intermediate.Msg` instead.  There is no way to accommodate a third layer with the current assumptions in the code.

_Regarding suggested casts_ -- by casting, it can be converted without knowing what the member is specifically named, nor knowing how deep within the structure the Message structure lies.  This is not as bad as it sounds, and not really going back to being type-unsafe, because it is being cast to a `CFE_MSG_Message_t*`, not a `void*` as previous CFE versions had done here.  Because of this, and the fact that CFE is compiled with strict aliasing rules enabled, it will trigger an alias violation if the structure is not actually cast-able to a `CFE_MSG_Message_t` type.  While this is not quite as robust as the current type safety, it is much more flexible, and user errors/mismatches should still be caught.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1965
Check for and report lseek failures,"**Is your feature request related to a problem? Please describe.**
lseek errors not checked:
https://github.com/nasa/tblCRCTool/blob/b02864ba56b12e00ab152225e3e8f9d6c039d48c/cfe_ts_crc.c#L130-L131

**Describe the solution you'd like**
Should explicitly report if lseek fails, could indicate a file shorter than the FS header length (very useful to know!)

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/tblCRCTool/issues/38
OSAL network APIs missing functional tests,"**Is your feature request related to a problem? Please describe.**
Seems there's not really any unit tests for the OSAL networking code.

**Describe the solution you'd like**
Should have unit tests.

**Describe alternatives you've considered**
Not having unit tests?

**Additional context**
Note that to do unit testing, it's likely we'll need to stub out OS-provided API's (open, select, socket, bind, accept, close().) Do we have a standard framework for stubbing out OS-provided functions?

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/373
"Update cES1007.3 and cES1008.3, reload/restart non-param error doesn't increment command err counter","**Is your feature request related to a problem? Please describe.**
Non-command parameter errors (errors within the object files) don't increment the command error counter since the command is processed as a request that happens later (takes time to execute)

cES1007.3:  If the cFE Application Restart fails due to a non-parameter error, then the cFE shall delete the Application, **increment the invalid Command counter**, and generate an event message.
cES1008.3: If the cFE Application Reload fails due to a non-parameter error, then the cFE shall delete the Application, **increment the invalid Command counter**, and generate an event message.

**Describe the solution you'd like**
Update the requirements.

**Describe alternatives you've considered**
More complex command error handling (delay the success increment).

**Additional context**
#915 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1127
CF function CF_CFDP_ProcessPlaybackDirectory has an oddly bracketed block,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1732] CF function CF_CFDP_ProcessPlaybackDirectory has an oddly bracketed block
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Wed Sep 22 09:22:05 2021

_Original Description_:
In cfdp.c the function CF\_CFDP\_ProcessPlaybackDirectory has a block of code with no if/while et. Just a bracketed block of code that does not seem to have a reason to be bracketed.  
",non-bug,https://github.com/nasa/CF/issues/31
`CFE_TBL_NotifyTblUsersOfUpdate` misnomer,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_NotifyTblUsersOfUpdate` just marks the table as updated, doesn't ""notify""

**Describe the solution you'd like**
Clarify name to reflect what is actually done

**Describe alternatives you've considered**
None

**Additional context**
Code review - just an internal naming change

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1518
PTHREAD_STACK_MIN typo in POSIX/POSIX-NG OSAL,"Both the POSIX and POSIX-NG OSALs contain the following in `osapi.c`:
{{{#!c
#ifndef PTHREAD_STACK_MIN
   #define PTHREAD_STACK_MIN 8092
#endif
}}}

I believe this is supposed to be 8192 or 8*1024.",bug,https://github.com/nasa/osal/issues/232
Add PSP API to Return Startup Path of cFE (GSFC DCR 22624),"APL has requested a PSP API function to return the startup path of the cFE.  This will allow them to load tables and applications from the same location the cFE was loaded from without having to use absolute/full paths.

APL has prototyped this and is considering its use on Solar Probe Plus.  Overall description of the changes:

cfe_psp_start.c:
New function
void CFE_PSP_ParseAndSaveStartupPath(char *StartFilePath);
Add storage for strings:
startup file full path and filename
Startup path
Startup filename (excluding path) 
In cfe_psp_main()
Call new function with the string used to pass into cfe_es_main()
inc/cfe_psp.h
New API prototype
uint32 CFE_PSP_GetStarupPath(char *path)
cfe_psp_support.c
New API definition",non-bug,https://github.com/nasa/PSP/issues/73
Fix warnings in vxworks support code,"Take a few minutes to resolve the remaining compiler warnings
generated when building for PowerPC VxWorks targets.

Three edits in /os/ and one in /bsp/, all specific to
the VxWorks cross-compilation.
",bug,https://github.com/nasa/osal/issues/75
VxWorks timebase still registers signal with RTOS when sync function is not NULL,"**Describe the bug**
When calling `OS_TimeBaseCreate` with the 3rd argument (external_sync) non-NULL, it is supposed to use the external sync function rather than an register an RTOS timer to implement the tick.  However, the VxWorks implementation still tries to register the RTOS timer, which has a signal number of 0, so it fails in `timer_create()`.

**To Reproduce**
Run timebase-api-test on VxWorks, observe failure:

```
[ PASS] 01.012 time-base-api-test.c:116 - OS_TimeBaseCreate(&time_base_id2, ""TimeBaseB"", NULL) (0) == OS_SUCCESS (0)
OS_VxWorks_RegisterTimer():248:timer_create() failed: errno=22
OS_TimeBaseCreate_Impl():507:Error during timer registration
[ FAIL] 01.013 time-base-api-test.c:117 - OS_TimeBaseCreate(&time_base_id, ""TimeBaseC"", UT_TimerSync) (-32) == OS_SUCCESS (0)
```

**Expected behavior**
Test should pass

**System observed on:**
MCP750, VxWorks 6.9

**Additional context**
VxWorks just needs to skip `timer_create()` and other RTOS timer configs when assigned_signal is 0.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/1087
"Remove references to ""CCSDS"" structures","**Is your feature request related to a problem? Please describe.**
Applications should NOT refer to the ""CCSDS"" data types and macros, as there should be no assumption of a particular message framing type at this level.

**Describe the solution you'd like**
Use the abstract types provided in `cfe_sb.h` rather than directly using `ccsds.h` types.

**Additional context**
Related to nasa/cfe#554

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/to_lab/issues/41
Update PSP to use OS time conversion/access methods,"**Is your feature request related to a problem? Please describe.**
PSP is directly accessing specific fields within `OS_time_t` which will break when the struct definition changes.   

**Describe the solution you'd like**
Instead of directly accessing the `seconds` and `microsecs` fields within `OS_time_t`, use the accessor functions to convert/extract the relevant info from  the value instead.

**Additional context**
see nasa/osal#429

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.",non-bug,https://github.com/nasa/PSP/issues/227
Remove stray TODO and empty else condition,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/CS/blob/4280e14e841a2559400dfc0372de25d1506a56ff/fsw/src/cs_eeprom_cmds.c#L318-L321

**Describe the solution you'd like**
There's no action for the else case, remove (along with the TODO note).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CS/issues/40
Remove classic build support,Only supporting cmake build going forward,non-bug,https://github.com/nasa/to_lab/issues/5
Benchmark memcpy of full event packet vs size of the actual event message and memset the rest to zero,"**Is your feature request related to a problem? Please describe.**
May be able to improve event services performance wrt writing the event to the log:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L67

by replacing this with a memcpy of the used portion and a memset 0 for the rest.

**Describe the solution you'd like**
Benchmark, if the memcpy/memset is significantly faster consider implementing.

**Describe alternatives you've considered**
It's likely all hardware/compiler/optimization dependent and probably in the noise (may not even notice when flooded w/ events).  If it's not worth it we can mark as wontfix and close, but at least it's documented.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1402
LC Sets the TtoFValue when it transitions from STALE to FALSE,"While testing LC against cFE 6.6, the lc_noaction test procedure failed because values were contained in the TtoFValue when they were not expected. The transition from STALE to FALSE seemed to set these values.

Imported from GSFCCFS-1075",bug,https://github.com/nasa/LC/issues/8
Posix socket OS_QueueGet() timeout fails,"We have Linux platforms where the Linux mqueue is not available and we have to use sockets.  However, we're seeing a problem when using sockets vs. mqueues.  When OS_QueueGet() is called with an actual timeout value (msec) the socket implementation appears to always return without properly reporting a message is present.  SB messages pile up.

The outreach drone is one such platform and we see this in our CentOS Linux VM simulation platform (OSAL configured the same for consistency).  (I have a unofficial report from another developer who encountered this as well.)  I think I've seen this on is with the open-source release OSAL as well as the current development branch.

(Likely the default event filters prevented folks from seeing this if they weren't looking at the SB telemetry directly.)

-------
Steps to reproduce:
1) create a clean/pristine cFS build.  (I used a bootstrap script: https://babelfish.arc.nasa.gov/trac/cfs_tools/ticket/35, but it shouldn't matter.)  (I used all the development branches as of 4/26/2016 11:37 Central time.)
2) source setvars.sh
3) cd build/cpu1
4) make config
5) Remove all SB event filters (to see on command line), as in:
{{{
@@ -287,17 +287,17 @@
 **       This filtering applies only to SB events.
 **       These parameters have a lower limit of 0 and an upper limit of 65535.
 */
-#define CFE_SB_FILTERED_EVENT1    CFE_SB_SEND_NO_SUBS_EID
-#define CFE_SB_FILTER_MASK1       CFE_EVS_FIRST_4_STOP
+#define CFE_SB_FILTERED_EVENT1    0
+#define CFE_SB_FILTER_MASK1       CFE_EVS_NO_FILTER
 
-#define CFE_SB_FILTERED_EVENT2    CFE_SB_DUP_SUBSCRIP_EID
-#define CFE_SB_FILTER_MASK2       CFE_EVS_FIRST_4_STOP
+#define CFE_SB_FILTERED_EVENT2    0
+#define CFE_SB_FILTER_MASK2       CFE_EVS_NO_FILTER
 
-#define CFE_SB_FILTERED_EVENT3    CFE_SB_MSGID_LIM_ERR_EID
-#define CFE_SB_FILTER_MASK3       CFE_EVS_FIRST_16_STOP
+#define CFE_SB_FILTERED_EVENT3    0
+#define CFE_SB_FILTER_MASK3       CFE_EVS_NO_FILTER
 
-#define CFE_SB_FILTERED_EVENT4    CFE_SB_Q_FULL_ERR_EID
-#define CFE_SB_FILTER_MASK4       CFE_EVS_FIRST_16_STOP
+#define CFE_SB_FILTERED_EVENT4    0
+#define CFE_SB_FILTER_MASK4       CFE_EVS_NO_FILTER
 
 #define CFE_SB_FILTERED_EVENT5    0
 #define CFE_SB_FILTER_MASK5       CFE_EVS_NO_FILTER
}}}

6) cd exe and run core-linux.bin & wait for 30-60 seconds
As expected, running with mqueues by default, there will be no significant event messages after:
{{{
ES Startup: CFE_ES_Main entering OPERATIONAL state
}}}

Now, to switch to sockets and show the problem:
7) Edit build/cpu1/inc/osconfig.h as:
{{{
@@ -132,7 +132,7 @@
 ** This define sets the queue implentation of the Linux port to use sockets 
 ** commenting this out makes the Linux port use the POSIX message queues.
 */
-/* #define OSAL_SOCKET_QUEUE */
+#define OSAL_SOCKET_QUEUE
 
 /*
 ** Module loader/symbol table is optional
}}}
8) make clean;make
9) cd exe and run core-linux.bin & wait for 30-60 seconds, you'll see:
{{{
1980-012-14:03:20.26138 ES Startup: CFE_ES_Main entering OPERATIONAL state
Warning: System Log full, log entry discarded.
EVS Port1 66/1/CFE_TIME 21: Stop FLYWHEEL
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1885,pipe CI_LAB_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1883,pipe SAMPLE_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1885,pipe CI_LAB_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1883,pipe SAMPLE_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1885,pipe CI_LAB_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1883,pipe SAMPLE_CMD_PIPE,sender SCH_LAB_APP
}}}

Each of these apps/services invokes CFE_SB_RcvMsg() with a timeout value:
* cFE ES: 1000ms
* CI_LAB & SAMPLE_APP: 500ms
 
They delegate to CFE_SB_ReadQueue() and to OS_QueueGet() with a timeout value.
",bug,https://github.com/nasa/osal/issues/189
Remove references to CFE_ES_RegisterApp,"**Is your feature request related to a problem? Please describe.**
As part of nasa/osal#853 and nasa/cfe#1215 the registration APIs are getting fully deprecated and removed.  Applications no longer need to call OS_TaskRegister, CFE_ES_RegisterApp, or CFE_ES_RegisterChildTask.

**Describe the solution you'd like**
Remove references to these functions.

**Additional context**
Will be required with nasa/osal#853 and nasa/cfe#1215

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/138
CFE_TBL should send events instead of using syslog,"**Is your feature request related to a problem? Please describe.**
There's still a fair bit of code in CFE_TBL that sends SysLog messages rather than generating events. 

**Describe the solution you'd like**
These messages should be removed and events generated where appropriate.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/607
Unit test stubs need to be kept in sync with their respective real implementations,"The ""unit-test"" code implements stub functions for all function calls which are //not// under test.  In addition to stubs for the 6 core CFE functions, there are two other stub files:

* ut_bsp_stubs.c
* ut_osapi_stubs.c

The difficulty here is that both the API/prototype of all the functions as well as the real implementation of those functions come from an external source, specifically the PSP library and the OSAL library.  If either the OSAL or PSP changes, the corresponding change must be made to the CFE stub files to keep them in sync.  Futhermore, if another project tries to use the updated stub files with an older version of OSAL, the build will now break due to the mismatched definitions.

It would be nice to simply make a rule that a defined API is never going to change, but that is not practical.

__Solution 1__

Utilize a preprocessor macro to ""tune"" the function definitions in the stub files to match what the OSAL/PSP should be for that particular version

Advantages: Can be implemented right away without any synchronized change to OSAL/PSP libs.

Disadvantages: Does not scale.  Code can get pretty messy with lots of #ifdef's if it changes more than once.  Still requires CFE to ""know"" the OSAL/PSP prototypes so breaks the independence of the two libraries.

__Solution 2__

Move the stub implementation to the same component that provides the real implementation.  For this, the ut_bsp_stubs.c file would be relocated to the PSP library and the ut_osapi_stubs.c file would be relocated to the OSAL library.

The PSP and OSAL builds would provide a separate UT stub product (a library) that the CFE unit test could link with.

Advantages: Arguably a more logical place for the stub code. Reduces need for synchronized changes in the future, better forward/backward compatibility between versions.  Also, other (non-CFE) users of OSAL library could also use stub functions.

Disadvantages: Requires a synchronized change to get started (solution 1 could help here).  Also would only work using CMake makefiles, although the GNU makefiles could probably be updated accordingly as well.


",bug,https://github.com/nasa/cFE/issues/63
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/CS/issues/34
Implement JPL Rules in CodeQL,"**Is your feature request related to a problem? Please describe.**
CodeQL does not use JPL rules, which is used in the upcoming coding standard. 

**Describe the solution you'd like**
Implement JPL rules for CodeQL. Continue using the security queries, but keep them separate from the JPL results. Can use two different workflows, one for the coding standard and one for the security queries. 

**Describe alternatives you've considered**
Might be able to use one workflow, as long as the results can be easily identified as a coding standard issue or security issue. 

**Additional context**
JPL queries are found here: https://github.com/github/codeql/tree/main/cpp/ql/src/JPL_C

**Requester Info**
Ariel Adams, ASRC Federal ",non-bug,https://github.com/nasa/cFE/issues/1512
doxygen warning: explicit link,"**Describe the bug**
doxygen gives warning: explicit link request to 'CFE_SB_CmdHdr_t' could not be resolved ...etc

[userguide_warning_explicit_link.txt](https://github.com/nasa/cFE/files/3789214/userguide_warning_explicit_link.txt)


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7-0


**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/383
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/101
Add Apache 2.0 LICENSE file and update copyright headers,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Missing license file and out of date copyright info in file headers

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/202
Add combined CLA for cFS App repos,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
We just received updated CLAs for the Apache 2.0 licensed applications. 



**Describe the solution you'd like**
Need to upload the new CLAs, add them to Contributing.md and then add links to the new forms in each app repository. 

**Describe alternatives you've considered**
Migrate to new org and set up shared community info 

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA
",non-bug,https://github.com/nasa/cFS/issues/490
Update the CI functional test to use the unit test report file,"**Is your feature request related to a problem? Please describe.**
CI functional test currently tee's the console output and waits for a string, which is subject to flushing and not very robust.

**Describe the solution you'd like**
#1633 added a test log file, CI in functional test can now just wait until this file exists to know when the test is complete (vs tee on console output).  That log file is then the artifact and can be checked for summary success/failure.

**Describe alternatives you've considered**
None.

**Additional context**
#1633

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1635
Use custom container for workflows,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The documentation workflow and a couple of others keep failing sporadically due to dependency install failures. 

**Describe the solution you'd like**
A custom cFS-dependencies container that has the following toolkit
- cmake
- gcc
- gcov 
- lcov
- doxygen
- latex
- graphviz
- etc.

This will help with both dependency management and maybe even speed up some of our builds that install dependencies with every run.

Another benefit is that we can encourage the community to use these containers as their development environment. 

**Describe alternatives you've considered**

Use a standard doxygen container image for the documentation workflow

**Additional context**
None 

**Requester Info**
Gerardo E. Cruz-Ortiz | NASA
",non-bug,https://github.com/nasa/cFS/issues/502
Task ID Not Valid in CFE_ES_DeleteApp,"**Describe the bug**
When deleting an app the Task ID Not Valid message was observed:
```
1980-012-14:06:24.50399 ES Startup: TST_ES4 loaded and created                                                                                             
EVS Port1 66/1/CFE_ES 6: Started TST_ES4 from /ram/tst_es4.o, AppID = 8                                                                                    
EVS Port1 66/1/TST_ES4 1: TST_ES4: Version 2.0.0.0: Task Initialized                                                                                       
1980-012-14:07:01.50000 CFE_ES_DeleteApp: Delete Application TST_ES4 Initiated                                                                             
1980-012-14:07:06.00100 CFE_ES_GetTaskInfo: Task ID Not Valid: 8                                                                                           
EVS Port1 66/1/CFE_ES 8: Stop Application TST_ES4 Completed.
```
The app was still deleted.

**To Reproduce**
Steps to reproduce the behavior:
1. Should be able to recreate by just deleting an app (say sample_app) on VxWorks6.9 OSAL
(I haven't had a chance to verify myself)

**Expected behavior**
AppID = 8, TaskID seem to start in the 655xx range.  I'd expect the code to use the right values in the right calls.

**Code snips**
Needs investigation

**System observed on:**
 - mcp750
 - OS: VxWorks6.9
 - Versions: rc-6.7 bundle

**Additional context**
Seen during build verification testing.

**Reporter Info**
Jacob Hageman - NASA/GSFC
Found by Walt M.
",bug,https://github.com/nasa/cFE/issues/374
CFDP Backwards Compatibility,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
I have a system that is running CFDP version 3.0 and want to interface it with a system that is running the older version of CFDP 2.2.  Are the two versions compatible for file transfers?

**Describe the solution you'd like**
I would like to know if CFDP version 2.2 and 3.0 are compatible for file transfers.

**Describe alternatives you've considered**
I have looked at the documentation for CFDP available on the github page and have not seen anything suggesting they are compatible/incompatible with each other.  

**Additional context**
I know certain things have changed across the two versions, such as the HK Telemetry messages having a different format.  
**Requester Info**
Jeff Anderson
",non-bug,https://github.com/nasa/CF/issues/246
Race condition within CFE_ES_AppCreate,"When starting an application, CFE ES calls ""CFE_ES_UnlockSharedData()"" before OS_TaskCreate(), then calls CFE_ES_LockSharedData() again to perform several more updates to the global table after the task ID is obtained.

This unlock-relock opens up an opportunity for the child thread to read the shared table data before it is fully populated.  This can cause many problems.  One specific one is that CFE_ES_GetAppID() (which many tasks call very early in their init procedures) will fail, which can have a serious snowball effect.

Note that the initial core app creation (CFE_ES_CreateObjects) and child tasks (CFE_ES_CreateChildTask) keeps the global lock for the entire procedure, so these are safe.

",bug,https://github.com/nasa/cFE/issues/72
Update README_Functionaltest.md to include UTASSERT message descriptions,"**Is your feature request related to a problem? Please describe.**
The cFE functional tests include assert messages that can be further clarified in the README.

**Describe the solution you'd like**
Include and describe each enumerated assert message in the readme.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/cFE/issues/2360
error: unknown type name 'CFE_SB_CmdHdr_t',"I want to believe that I am missing a step in the documentation somewhere, but when I bring DS into my apps folder, I update my MISSION_GLOBAL_APPLIST with DS and attempt to build and get this error amongst others.

/cFS/apps/DS/fsw/src/ds_msg.h:47:5: error: unknown type name ‘CFE_SB_CmdHdr_t’

Is there a script or tool that should be running that I am unaware of?

The training documentation here does not imply any other steps in Exercise 7 which is similar.
https://ntrs.nasa.gov/citations/20205000691


",bug,https://github.com/nasa/DS/issues/3
Provide configurable/customizable message abstraction layer,"**Is your feature request related to a problem? Please describe.**
SB provides abstraction from CCSDS packets, yet the CCSDS_CommandPacket_t is still referenced directly by the services (and likely all the Apps that accept a command) and SB functionality itself is tightly coupled to the actual message format.

**Describe the solution you'd like**
Provide a ""MSG"" abstraction layer (like inc/cfe_msg.h and a src/msg) to implement direct access getters/setters for supported ""header"" fields.  Allow for selection of the supported message formats, or customization via mission configuration (and adding of additional getters/setters).  SB should be abstracted the same as the other services.

""header"" is intentionally vague, since it should include any common fields for which getter/setter abstraction is appropriate related to cFE services and apps.

**Describe alternatives you've considered**
Leave as is, which requires clone and own approach for customization and extensive SB impacts.

**Additional context**
Suggest that since this would now support customization, we collapse the open source supported time format options down to 1 (big endian, with the 6 byte default).  If missions need something else, they can easily customize.

#711 - Separate message access API's from SB
#597 - local endian SID macros, unused shift/mask macros (in ccsds.h)
#440 - Improve API consistency for functions accepting a software bus message
#416 - Investigate various VerifyCmdLength implementations and possible common utility
#172 - Unsafe macros, investigate conversion into Inline functions
#92 - CFE_SB_GetMsgTime() and CFE_SB_SetMsgTime() do not handle byte-swapping on _EL platforms



**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/554
"Limit dynamically-obtained version info to tags starting with ""v""","**Is your feature request related to a problem? Please describe.**
Tags may be created in the git repo for a number of reasons, not just releases/prereleases, and it is helpful to have the option of also making an annotated tag too so it can have a real description attached to it.

But in that case the tag will be picked up by `git describe` which is what is used by default for dynamically obtained version info shown at runtime.

**Describe the solution you'd like**
Version tags in the CFE framework and CFS apps all follow the general pattern of `vX.X.X`.  So if the dynamic version info is limited to tags that start with `v` (maybe also a number to be real specific) this should effectively make it so extra snapshot tags will not be considered - so long as they don't start with `v`.

**Describe alternatives you've considered**
Use annotated tags only for those that should be considered baselines, and only use non-annotated tags for any other snapshots.

**Additional context**
Users can still customize this `git describe` if they happen to use some other tagging pattern/convention.  But all the framework stuff already uses the `v` convention.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1238
sem-speed-test can run infinitely on some platforms,"**Describe the bug**
In the sem-speed-test, the main thread stops the test by doing a task delay and then deleting the worker tasks. 

When running on a hard real time kernel and a single processor system, if the worker threads are a higher priority than the main thread, then the main thread never gets CPU time to stop the test and it just runs infinitely.

**To Reproduce**
Run the test on a single-processor system such as VxWorks or RTEMS where the originating (shell) task is a (logically) lower priority than 50, which is the priority given to the worker tasks it creates.  The test will never exit because the root task never gets CPU time again to cancel the worker tasks.

**Expected behavior**
The test should never run infinitely, regardless of (mis-)configuration.

**System observed on:**
RTEMS 4.11 on i686 (QEMU)

**Additional context**
The worker tasks should employ some type of hard limit so they do not run infinitely even if the priority is higher than the root task.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/323
Add struct name for typedef struct in cFE,"**Is your feature request related to a problem? Please describe.**

All of the struct used in `cFE` are declared with `typedef struct {} TYPEDEF_NAME`, which make the struct anonymous in debug info, and make it harder to access from the debugging tools such as `pahole:

```
$ pahole -E -M -C ""CFE_EVS_ShortEventTlm_t"" build/exe/cpu1/core-cpu1
typedef struct  CFE_EVS_ShortEventTlm_t;
```

Expect to be like:

```
$ pahole -M -C ""CFE_EVS_LongEventTlm_t"" build/exe/cpu1/core-cpu1
struct CFE_EVS_LongEventTlm_t {
	uint8                      TlmHeader[12];        /*     0    12 */
	CFE_EVS_LongEventTlm_Payload_t Payload;          /*    12   156 */

	/* size: 168, cachelines: 3, members: 2 */
	/* last cacheline: 40 bytes */
};

and

$ pahole -E -M -C ""CFE_EVS_LongEventTlm_t"" build/exe/cpu1/core-cpu1
struct CFE_EVS_LongEventTlm_t {
	/* typedef uint8 -> uint8_t */ unsigned char              TlmHeader[12];         /*     0    12 */
	/* typedef CFE_EVS_LongEventTlm_Payload_t */ struct CFE_EVS_LongEventTlm_Payload_t {
		/* typedef CFE_EVS_PacketID_t */ struct CFE_EVS_PacketID_t {
			char       AppName[20];                                          /*    12    20 */
			/* typedef uint16 -> uint16_t */ short unsigned int EventID;     /*    32     2 */
			/* typedef uint16 -> uint16_t */ short unsigned int EventType;   /*    34     2 */
			/* typedef uint32 -> uint32_t */ unsigned int SpacecraftID;      /*    36     4 */
			/* typedef uint32 -> uint32_t */ unsigned int ProcessorID;       /*    40     4 */
		} PacketID; /*    12    32 */
		char               Message[122];                                         /*    44   122 */
		/* --- cacheline 2 boundary (128 bytes) was 38 bytes ago --- */
		/* typedef uint8 -> uint8_t */ unsigned char      Spare1;                /*   166     1 */
		/* typedef uint8 -> uint8_t */ unsigned char      Spare2;                /*   167     1 */
	} Payload; /*    12   156 */

	/* size: 168, cachelines: 3, members: 2 */
	/* last cacheline: 40 bytes */
};
```

**Describe the solution you'd like**

Add struct name to all the typedef struct in cFE, for example:

From:
```
typedef struct {
   uint8                    TlmHeader[CFE_SB_TLM_HDR_SIZE];
   CFE_EVS_ShortEventTlm_Payload_t Payload;

} CFE_EVS_ShortEventTlm_t;
```

Changed to:

```
typedef struct CFE_EVS_ShortEventTlm_t {
   uint8                    TlmHeader[CFE_SB_TLM_HDR_SIZE];
   CFE_EVS_ShortEventTlm_Payload_t Payload;

} CFE_EVS_ShortEventTlm_t;
```

**Describe alternatives you've considered**



**Additional context**


**Requester Info**

@mlouielu
",non-bug,https://github.com/nasa/cFE/issues/769
vxworks osapi.c functions not using semaphore,"Multiple functions in the VxWorks osapi.c are not taking the semaphore when accessing the shared table.

Identified with #45 white-box coverage testing.
",bug,https://github.com/nasa/osal/issues/103
doxygen warning: expected <tr>,"**Describe the bug**
doxygen is giving warning: expected <tr> tag but found TK_LNKWORD token instead!

[userguide_osal_expected_tr_warning.txt](https://github.com/nasa/osal/files/3789109/userguide_osal_expected_tr_warning.txt)


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide
2. see warning in build/doc

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - r.c-6.7.0

**Reporter Info**
Anh Van, NASA Goddard


",bug,https://github.com/nasa/osal/issues/279
Numerous bugs in CF chunk processing edge cases,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
As part of resolving #293, numerous bugs were discovered in cf_chunk.c both with adding to the list w/ `CF_ChunkListAdd` and computing gaps with `CF_ChunkList_ComputeGaps`.

Observed chunk add errors (covers described with non-inclusive end):
1) Adding a chunk that would completely replace chunks 2 and 3 (a CombineNext case).
Starting list {offset, size}: {0,1}, {11, 2}, {23,3}, {36,4}, {50,5} so it covers 0-1 11-13 23-26 36-40 50-55
CF_ChunkListAdd with {20,21} so it should completely replace chunk 2:{23,3} and 3:{36,4}
Results in {0,1}, {11,2}, {20,35}, {50,5} (note erroneous overlap of 2 and 3), expected: {0,1}, {11,2}, {20,21}, {50,5} covering 0-1 11-13 20-41 50-55

2) Adding a chunk that combines with chunk 1, 2, and 3 (prev, next, next).
Starting list {offset, size}: {0,1}, {11, 2}, {23,3}, {36,4}, {50,5} so it covers 0-1 11-13 23-26 36-40 50-55
CF_ChunkListAdd with {12,25} so it should combine with chunk 1-3
Results in {0,1}, {11,29}, {36,4}, {50,5} (note erroneous overlap of 1 and 2), expected: {0,1}, {11,29}, {50,5} covering 0-1 11-40 50-55

3) Adding a chunk that is a subset of chunk 3
Starting list {offset, size}: {0,1}, {11, 2}, {23,3}, {36,4}, {50,5} so it covers 0-1 11-13 23-26 36-40 50-55
CF_ChunkListAdd with {37,2} so it should just drop since it's a subset of 3
Results in {11, 2}, {23,3}, {36,4}, {37,2}, {50,5} (note numerous issues), expected no change

Observed chunk gap errors (gaps and covers described with non-inclusive end):
1) Misses a leading gap.
Starting list {offset, size}: {5,5}, {20,10}, {50,10} covers 5-10 20-30 50-60 so gaps 0-5, 10-20, 30-50 and anything after 60
CF_ChunkList_ComputeGaps with start 0, total 25
Results in {10,10}, so it missed the 0-5 gap

**To Reproduce**
See scenarios above.

**Expected behavior**
See scenarios above.

**Code snips**
CF_Chunks_EraseRange has problems if start == end and the memmove size is wrong:
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L50-L52

CF_Chunks_CombinePrevious should combine whenever the offset is less than previous range (move ret=1 out of inner if):
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L152-L160

CF_Chunks_CombineNext is overly complex and broken... ended up refactoring completely to get it to work:
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L173-L222

CF_Chunks_ComputeGaps start logic is broken... again just refactored to straighten it out:
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L432-L451

**System observed on:**
CI with #293 incorporated

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/CF/issues/306
Build and run existing ECI unit tests under CFE 6.6,"Since the cFE 6.6 removed the for_build directory in it's cmake build system, we are kind of lost on how to add unit tests for the cFS 6.6 apps using UT assert. Effort needs to be made to figure out what unit test looks like for ECI 6.6 and document it accordingly.",non-bug,https://github.com/nasa/ECI/issues/25
SPARC Leon3 memory alignment sensitivity and handling,"In our CFS_TST/ut699_vxworks6.9 build, I have noted that there are still cfe/osal/psp build warnings (49). On ut699/VxWorks, they are almost all memory alignment warnings. 
""warning: cast increases required alignment of target type""

I understand why we are getting theses, and only on this processor(not linux or PPC-based processors - for these ones, either the processor or compiler will compensate for unaligned accesses).  The SPARC processor is sensitive to memory alignment (in fact neither the processor or compiler will align for you, it just will crash and generate a memory alignment exception).  It is a trade between hardware and compiler complexity and performance.  I enabled the mem align warning in the compiler options.  I have not looked at every single one of these warning cases, but most are something like
char *ptr to a buffer or just a char buf[100], then later there is code that casts a uint32 pointer to the buffer to access it - this is where you get the warning.  The char * or char buf could end up on an odd address, the compiler does not guarantee allocation to an even address.  However, in all of these cases, it has to currently be allocating to even, 32-bit aligned addresses (which is most efficient for memory access).

We need to look at these warning cases(these exit not only in the PSP but in the cFE and OSAL) and see if there is a better way to implement.

The other and probably better option is to develop an exception handler that would trap the alignment exception and then still perform the access, there is a small performance hit if/when this occurs, but it beats crashing any day.
",non-bug,https://github.com/nasa/PSP/issues/45
Remove obsolete comments,"**Is your feature request related to a problem? Please describe.**
End of function comments historically poorly maintained, so not really worth keeping around.  Name of a function in comments also frequently gets out of date.

Example of differences (needs full scrub):
https://github.com/nasa/to_lab/blob/c20250e6fc7ab51cbd9f82329a25be31193cd6a3/fsw/src/to_lab_app.c#L476
https://github.com/nasa/to_lab/blob/c20250e6fc7ab51cbd9f82329a25be31193cd6a3/fsw/src/to_lab_app.c#L493

**Describe the solution you'd like**
Remove obsolete comments

**Describe alternatives you've considered**
None

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/68
"resolve ""-m32"" OSAL classic build issues","The classic OSAL build historically built for 32-bit x86 linux,
on 32-bit x86 linux build machines.

Building on a 64-bit x86 Linux server requires the use of the ""-m32""
flag, but ONLY when the target is the classic 32-bit x86 linux. This
also requires that the server has 32-bit goodies, often ""multilib"" is
the thing you need to google if this is busted.

Currently, inserting this flag where it is missing or removing it where
it is present requires editing files, which is a speedbump for developers
and a blocker for automatic systems when building both 32-bit x86 and
any other target.

Need to set up the classic makefiles so that we default to -m32 not being
present, and allow it to be inserted on demand from the command line or
via an environment variable (at the developer's option, both need support).

",bug,https://github.com/nasa/osal/issues/147
Table services sometimes copies buffers to itself,"Running the TBL unit test in valgrind/memcheck reveals that under certain circumstances, the `CFE_TBL_UpdateInternal()` and `CFE_TBL_GetWorkingBuffer()` functions attempt to copy a buffer onto itself.

This is technically undefined behavior, as `memcpy()` requires that the source and destination not overlap.
",bug,https://github.com/nasa/cFE/issues/246
Add support for RTEMS 5.1 - Cmake updates and pc-rtems PSP readme updates,"**Is your feature request related to a problem? Please describe.**
The cFS Bundle currently supports RTEMS 4.11. Now that RTEMS 5.1 has been released, I would like to update the necessary components to support RTEMS 5.1 on the pc-rtems platform. This involves minor modifications to the cfe repository, the PSP repository, and the OSAL repository. These changes can be done in such a way that preserves the current RTEMS 4.11 support and adds RTEMS 5.1 support.

**Describe the solution you'd like**
I would like to add support for RTEMS 5.1 while maintaining compatibility with the existing RTEMS 4.11 support. For the PSP repository there are a few minor changes needed to allow support of RTEMS 5.1 and RTEMS 4.11:
- Minor changes in the PSP cmake/Modules/Platform/RTEMS.cmake file
- changes to the pc-rtems readme and the addition of an RTEMS 5 specific readme

**Describe alternatives you've considered**
Alternatives include:
- Not supporting newer versions of RTEMS, but several projects will depend on RTEMS 5 support.
- Dropping RTEMS 4.11 support and just making the changes needed for RTEMS 5, but there may be projects that depend on RTEMS 4.11. We can consider dropping RTEMS 4.11 support on a future release.

**Additional context**

**Requester Info**
Alan Cudmore / NASA GSFC Code 582
",non-bug,https://github.com/nasa/PSP/issues/197
Remove dependencies on BIT_ORDER macros,"osal/src/os/inc/common_types.h defines SOFTWARE_BIG_BIT_ORDER and SOFTWARE_LITTLE_BIT_ORDER that are targeted for future deprecation.

Need to remove dependencies in cfe/fsw/cfe-core/src/inc/ccsds.h, which defines CFE_MAKE_BIG* macros, which are used in time services.

Eventually solved by EDS, but need to solve it before actually deprecating these elements.

Slight relation to #92

EDIT -  the macros have been moved to cFE:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_endian.h#L43-L57

- Deprecate these

See also #1209",non-bug,https://github.com/nasa/cFE/issues/351
PDU processing when crc_flag true,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The issue involves a difference in interpretation of the CFDP specification. In particular, the format and processing of CFDP PDUs when the PDU header indicates CRC present.

For FD PDUs, the code ignores 4 bytes instead of 2 bytes for the CRC at the end of the PDU (see context). That will result in ignoring the last 2 bytes of file data from FD PDUs encoded with a CRC.

If an EOF or FIN PDU is received with CRC present, the CRC at the end will (almost always) cause a decoding error in CF_CFDP_DecodeAllTlv called by CF_CFDP_DecodeEof/CF_CFDP_DecodeFin.


**To Reproduce**
Unknown. 
If helpful, I could provide what I believe to be valid CFDP PDUs and show how their processing differs from my expectation.


**Expected behavior**
The software could refuse PDUs with crc_flag true,
or, preferably, it could decrement the data_len of (all) PDUs with crc_flag true by 2 (bytes).


**Code snips**
This code has the per PDU CRC declaration:
https://github.com/nasa/CF/blob/281a94188cd7d885a5aed01ee041f3ece2b0486f/fsw/src/cf_logical_pdu.h#L365
The comments on lines 358-363 do not match my understanding.

File data processing excerpt:
https://github.com/nasa/CF/blob/281a94188cd7d885a5aed01ee041f3ece2b0486f/fsw/src/cf_cfdp.c#L726-737



**System observed on:**
N/A


**Additional context**

Unfortunately, the CFDP standard 4.1 CRC PROCEDURES has an external reference for the CRC and the reference is wrong:
        4.1.3.1 The CRC computation algorithm shall be the standard CCSDS Telecommand CRC
        algorithm specified in 4.2.1.3 of the CCSDS Telecommand Recommendation (reference [4]).
and 232.0-B-3 section 4.2.1.3 does not specify a CRC.
However, the only CRC in 232.0-B-3 is defined in 4.1.4 Frame Error Control Word as a 2 octet field.



**Reporter Info**
Bob Wiegand, NASA/GSFC",bug,https://github.com/nasa/CF/issues/343
CI updates - add static analysis and format in workflow,"**Is your feature request related to a problem? Please describe.**
Travis-CI not transitioned to github actions

**Describe the solution you'd like**
Transition CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/to_lab/issues/80
Remove stray TODO,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/924b2be20a39f17355861396273856caccc8c89f/modules/es/ut-coverage/es_UT.c#L2969

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2125
Could not copy app.so to /cpu1/exe/cf/apps,"Hi
When I delete all app.so in this fold, then I make clean, make config and make again, there are not any app.so in this fold? Is this right? Thanks!
Sincerely",non-bug,https://github.com/nasa/cFE/issues/14
Release Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/16
OSAL CMake script should not force/overwrite CMAKE_C_FLAGS,"**Describe the bug**
The OSAL build script currently configures several compiler flags by directly setting the `CMAKE_C_FLAGS` variable, and also setting it differently for unit test vs. FSW code.

This was originally done for compatibility with very old CMake versions but this is no longer necessary, as any reasonable CMake version (including v2.8.12 distributed in RHEL/Centos6+) have better commands to deal with target-specific flags (e.g. target_compile_definitions, etc).

Overriding this variable is not ideal as it is expected to retain its value from the parent.

**To Reproduce**
Build OSAL using the current script and ENABLE_UNIT_TESTS=TRUE.  CMAKE_C_FLAGS is forcibly reset twice during the CMakeLists.txt evaluation.

**Expected behavior**
`CMAKE_C_FLAGS` should not be modified by the OSAL build script.  It should preserve whatever value the parent had set (if any) and use the preferred commands (e.g. target_compile_options, etc) to manage the different flags required for UT and normal FSW code.

**System observed on:**
Ubuntu 18.04 LTS, 64 bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/312
Add CI tests to start CFS and verify no errors,"In many cases, verifying that code compiles is not sufficient to ensure that it runs as expected. As an extra level of verification, it would be nice to add some CI tests to actually startup the CFS system and verify that the intended apps start and no initialization errors occur.

This would be good to have for both CFE 6.5 and 6.6 on the master and cfe-6.6 branches respectively.",non-bug,https://github.com/nasa/ECI/issues/17
4 different ways of identifying file systems,"**Is your feature request related to a problem? Please describe.**
Unlike other OSAL resources, the File System related calls (OS_mount/unmount/mkfs/rmfs/initfs etc) identify the target by string rather than as a numeric ID.  

Aside from being inconsistent, this is also ambiguous and confusing because the are actually 4 different possible strings use here:
1. Device name (e.g. ""/ramdev0"")
2. Volume name (e.g. ""RAM"")
3. System Mount point (e.g. ""/dev/shm/osal:RAM"")
4. Virtual Mount point (e.g. ""/ram"")

Furthermore not all functions use the same name.  When implementing OS_FileSysStatVolume I noticed that the old OS_fs(Bytes|Blocks)Free() and OS_chkfs use virtual mount point (4), while the others use device name (1).  The OS_FS_GetPhysDriveName() actually returns the system mount point (3) not the actual device (1) that other calls require. 

**Describe the solution you'd like**
Ideally, change these APIs to work with IDs rather than names because IDs are not ambiguous.  One can also find/lookup an ID based on any of the names (lookup functions don't all currently exist but easy to add).

**Describe alternatives you've considered**
If API changes are not possible at this stage, then then we should at least be consistent and choose one name to use.  Probably the device name (1) should be the one, as it seems the one used by most calls currently.

**Additional context**
The fact that `OS_chkfs()` uses a virtual mount point should probably be considered a bug, as it implies the file system is already mounted at the time the call is done.  Most OS's do not permit a file system check of a mounted device.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/719
"remove ""SenderReporting"" from SB private ""global""","The SenderReporting field exists in the SB global struct but is only set once and never used.

https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/src/sb/cfe_sb_priv.h#L285",non-bug,https://github.com/nasa/cFE/issues/933
Erroneous Time Behavior,"**Describe the bug**
Time is jumping to an erroneous value after sending the CFE_TIME_SUB_1HZ_ADJUSTMENT_CC command.  I'm not clear if the erroneous behavior is isolated only to the CFE_TIME_SUB_1HZ_ADJUSTMENT_CC command - the error was just noticed when testing a script that sends that command.

**To Reproduce**
Steps to reproduce the behavior:
1. Set the STCF to a known value
2. Send Add 1HZ Adjustment (In my attached test report I did 1 sec per sec to demonstrate behavior)
3. Send Sub1HZ Adjustment (In my attached test report I did 1 sec per sec to demonstrate behavior)
4. Observe an anomalous time jump (lines 1114-1122 in my attached report)

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-20.10
Versions: cfe v6.8.0-rc1+dev218, osal v5.1.0-rc1+dev109, psp v1.5.0-rc142.

**Reporter Info**
Dan Knutsen
NASA/Goddard
[erroneousTimeBehavior.txt](https://github.com/nasa/cFE/files/6556270/erroneousTimeBehavior.txt)


",bug,https://github.com/nasa/cFE/issues/1587
Create array and loop for software bus subscriptions,"**Is your feature request related to a problem? Please describe.**
Repeated logic/pattern in subscriptions:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_task.c#L242-L264

**Describe the solution you'd like**
Create array and loop.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1470
strncpy triggers a build failure in Ubuntu Focal release builds,"## Describe the issue

`make install` fails on *Focal* RELEASE builds

https://travis-ci.com/github/astrogeco/cFS/builds/201379042

```
In file included from /usr/include/string.h:495,

                 from /home/travis/build/astrogeco/cFS/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:49:

In function ‘strncpy’,

    inlined from ‘CFE_ES_StartAppTask’ at /home/travis/build/astrogeco/cFS/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:554:9:

/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ output may be truncated copying 19 bytes from a string of length 19 [-Werror=stringop-truncation]

  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));

      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

cc1: all warnings being treated as errors
```
_Originally posted by @astrogeco in https://github.com/nasa/cFS/issues/156#issuecomment-727050481_

## Alternative Solution

Use Ubuntu Bionic for builds instead",bug,https://github.com/nasa/cFE/issues/1016
(re)create MacOSX PSP,"The wiki includes OSX as one of the target PSP's, but it was removed a while ago. It should be re-created/updated.",non-bug,https://github.com/nasa/PSP/issues/79
Fix ES unit test failures,"The current ES unit test has a number of failures that need to be addressed.

File attached showing current unit test report file with 27 failures.
",bug,https://github.com/nasa/cFE/issues/88
App should treat CFE_SB_MsgId_t values as opaque,"**Is your feature request related to a problem? Please describe.**
For compatibility going forward, code should not assume that `CFE_SB_MsgId_t` is an integer.

**Describe the solution you'd like**
When dealing with an integer, such as when printing in events/messages or for backward compatibility with MID `#define`'s, the code may use `CFE_SB_ValueToMsgId()` and `CFE_SB_MsgIdToValue()` conversion routines.  

**Additional context**
Architecturally, the `CFE_SB_MsgId_t` is supposed to be an opaque/abstract value that identifies an endpoint on the software bus routing domain.  The specific meaning of integer values is already different in an ""extended header"" (CCSDS v2) build vs. the standard header build.  Therefore apps should never make assumptions regarding the specific integer values, and all introspection of `CFE_SB_MsgId_t` values should be through the CFE SB API only.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/to_lab/issues/28
Update for suggested alignment enforcement pattern (nasa/cFE#1009),"**Is your feature request related to a problem? Please describe.**
See nasa/cFE#1009, inconsistent pattern

**Describe the solution you'd like**
Match suggestion in nasa/cFE#1009, use the ""raw"" message cmd/tlm types in definition.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFE#1009

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/ci_lab/issues/62
CFE cmake toolchain script(s) should set OSAL_SYSTEM_BSPTYPE,"**Is your feature request related to a problem? Please describe.**
The OSAL scripts contain some convoluted logic to deal with the fact that the CFE PSP And OSAL BSP are overlapping in function.  In particular the OSAL script checks `CFE_SYSTEM_PSPNAME` as a fallback if OSAL_SYSTEM_BSPTYPE is unset, in order to decide which BSP to use for unit tests.

It is desired to clean this up and simplify this logic.

**Describe the solution you'd like**
All example toolchains should set OSAL_SYSTEM_BSPTYPE so that OSAL builds a specific BSP for the platform, to be used for unit testing as well as (eventually) the PSP startup as well.

**Additional context**
Having this variable set simplifies the OSAL build considerably and makes it better isolated from the CFE build.  A proposed change to OSAL (as part of issue nasa/osal#312) will make the `OSAL_SYSTEM_BSPTYPE` a required option, failing the build if it is unset

This change to the CFE toolchains should be backward-compatible.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/438
Cppcheck errors reported using latest workflow update,"**Describe the bug**
The latest version of Ubuntu (with cppcheck v2.7) is reporting the following errors in the cFE repo:

| severity | file | line | issue |
| --- | --- | --- | --- |
| error | /home/runner/work/cFS/cFS/source/cfe/modules/tbl/ut-coverage/tbl_UT.c | 2411 | Uninitialized variable: File.TblHeader |
| error | /home/runner/work/cFS/cFS/source/cfe/modules/tbl/ut-coverage/tbl_UT.c | 3067 | Uninitialized variable: File.TblHeader |

**To Reproduce**
Run latest version of static analysis workflow (depends on nasa/cFS#607)

**Expected behavior**
Should run cleanly

**System observed on:**
Ubuntu 22.04, with cppcheck v2.7

**Additional context**
[Summary from workflow run](https://github.com/nasa/cFS/actions/runs/3381576881/attempts/1#summary-9260966589)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/2196
CMake separate flags for C++ builds,"When building OSAL applications that use C++, it is required to use a separate variable for the compiler flags, because sometimes these are incompatible with C compiler flags.

CMake has a separate ""CMAKE_CXX_FLAGS"" variable for C++ compiler commands.

Most importantly this issue becomes apparent if you use `-std=c99`.  g++ rejects this option and it needs to be `-std=c++98` (or whatever) instead.


",bug,https://github.com/nasa/osal/issues/186
CFE_EVS_WriteLogFileCmd requires recursive locking,"**Describe the bug**
The function `CFE_EVS_WriteLogFileCmd` in cfe_evs_log.c locks `CFE_EVS_GlobalData.EVS_SharedDataMutexID` for the entire duration of the function. If an error is encountered, it will call `EVS_SendEvent`, which also tries to lock the mutex. If the OS/OSAL do not support recursive locking on mutexes, this will lead to a deadlock.  

**To Reproduce**
Steps to reproduce the behavior:
1. Cause an error during the execution of `CFE_EVS_WriteLogFileCmd` (by e.g. giving it an invalid filename).

**Expected behavior**
This may be expected behavior, if cFE requires its mutexes to be recursively lockable. If so, this isn't a bug and I'll have to modify our OSAL. But if that is not the expectation, then I would this function should relinquish its lock before calling `EVS_SendEvent`.

More specifically, it looks like the this can be accomplished by moving the line
```
   OS_MutSemGive(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
```
to just before each instance of `EVS_SendEvent()` in the function. By each of these points, this function is done accessing sensitive EVS data.

**Code snips**
* [CFE_EVS_WriteLogFileCmd's release of the lock](https://github.com/nasa/cFE/blob/6aaf5a3244e02af43c8ebb893ef413916dff5ef2/fsw/cfe-core/src/evs/cfe_evs_log.c#L251)

**System observed on:**
 - Capella flight computer
 - OS: FreeRTOS 10.1.1
 - Versions: cFE 6.5.0, OSAL 4.2.0 (plus in-house FreeRTOS port)

**Additional context**
I found this while testing our fix for #372.

**Reporter Info**
Mike Stewart, Capella Space.
",bug,https://github.com/nasa/cFE/issues/373
Move entry point address info from app table to task table,"**Is your feature request related to a problem? Please describe.**
The ES global currently tracks task entry point in the app table, not task table.  As a result only the ""main"" task entry point of an app is tracked in this regard.  As child tasks are created, these all have different entry points, but they aren't stored, and therefore cannot be reported in the telemetry as reported via e.g. QUERY_ALL_TASKS.

**Describe the solution you'd like**
Hold the actual runtime entry point address in the Task table rather than the App table.

**Additional context**
This would simplify the current task entry logic as it would only need to look at the task entry, not the app+task entry combination.
Still would need to hang onto the _configured_ (string version) of entry point for when an app is reloaded/restarted.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/978
Improve `CFE_TIME_GetReference` error handling,"**Is your feature request related to a problem? Please describe.**
Hard coding Retry count to 4 is a bit ""magic"", not clear how much margin this has, not clear statistically how may conflicts are occurring, no error reporting, no way for the calling routine to take action or track, not clear even if these values are always required to be in sync or what happens if they aren't, not obvious what is intended here.

**Describe the solution you'd like**
Clarify design, track/monitor/report performance/errors.  If there's uses where it's critical, may need to deconflict (protect query from update).  Maybe provide API that's slower but always correct, vs faster but possibly invalid if that's really a need.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1544
CFE_ES_DeleteCDS: zero out block when freed,"**Is your feature request related to a problem? Please describe.**
Block not cleared when freed:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L883

**Describe the solution you'd like**
Analyze, clear block if needed or document for future reference why it's not needed

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1340
CFE_MISSION_REV defined in 2 locations,"**Describe the bug**
CFE_MISSION_REVE defined in 2 locations

**To Reproduce**
Inspection

**Expected behavior**
Define in 1 location... if it's for clone and own, version seems to make sense... if it includes configuration versioning then useful in the config file.

**Code snips**
https://github.com/nasa/cFE/blob/db829294eba01b88683e679d58435f65ca02f826/cmake/sample_defs/cpu1_platform_cfg.h#L1797
https://github.com/nasa/cFE/blob/db829294eba01b88683e679d58435f65ca02f826/fsw/cfe-core/src/inc/cfe_version.h#L46

**System observed on:**
N/A

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/877
strncpy may not '\0'-terminate,"cppcheck messages:
{{{
src/os/posix/osfileapi.c:1316: warning: The buffer 'LocalCmd' may not be null-terminated after the call to strncpy().
src/os/posix/osfilesys.c:648: warning: The buffer 'filename' may not be null-terminated after the call to strncpy().
}}}

Joe looked at this during the 2015-12-08 CCB meeting and indicated
that the code involved needs fixing. Joe, I'm sending this to you
in case you want to punch it out; otherwise, just toss it back and
we can queue up the issue normally.

",bug,https://github.com/nasa/osal/issues/153
Missing Documentation on HowTo Build/Run Unit and Functional Tests,"At a minimum a simple readme file should be included under the functional, black box, and white box unit test directories to provide users with some guidance on how to build and run each set of tests.",non-bug,https://github.com/nasa/osal/issues/194
sem-speed-test: deadlocks sometimes when pthread_cancel is called on the threads that are actively using semaphores,"**Is your feature request related to a problem? Please describe.**

This report is similar to #1160 and #1164 because a resource, in this case a thread, gets destroyed by `pthread_cancel` while another thread wants to `sem_wait` or `sem_post` on semaphore that was just before `sem_wait`-d or `sem_post`-d by waiting on by the destroyed thread.

This is how the `pthread_join` called by `OS_TaskDelete` gets deadlocked on macOS:

```
(lldb) thread backtrace 
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x00007fff203b59ee libsystem_kernel.dylib`__ulock_wait + 10
    frame #1: 0x00007fff203eaf60 libsystem_pthread.dylib`_pthread_join + 362
    frame #2: 0x000000010614f389 sem-speed-test`OS_TaskDelete_Impl(token=0x00007ffee9ac08f0) at os-impl-tasks.c:694:15
    frame #3: 0x000000010614ad9d sem-speed-test`OS_TaskDelete(task_id=65537) at osapi-task.c:239:23
    frame #4: 0x000000010613fea1 sem-speed-test`SemRun at sem-speed-test.c:216:14
    frame #5: 0x0000000106142839 sem-speed-test`UtTest_Run at uttest.c:174:17
    frame #6: 0x0000000106141e29 sem-speed-test`OS_Application_Run at utbsp.c:232:5
    frame #7: 0x0000000106154fca sem-speed-test`main(argc=1, argv=0x00007ffee9ac0a08) at bsp_start.c:247:5
    frame #8: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #9: 0x00007fff20404f3d libdyld.dylib`start + 1
```

Is it undefined behavior when a thread gets `pthread_cancelled` while waiting or posting on a semaphore? This at least seems to be the case on macOS where the `pthread_join` deadlocks on a cancelled thread.

**Describe the solution you'd like**

With all due appreciation of the testing setup created in `sem-speed-test`, the thread loops of the task 1 and task 2 could be managed explicitly as to when their job should be finished so that the `pthread_cancel` does not catch both threads while they are still managing the semaphores.

**Describe alternatives you've considered**

For now, I have created a simple hack in the task 1 and task 2: their thread loops both depend on two global variables:

```c
bool      task_1_done = false;
bool      task_2_done = false;

...
while (!task_1_done && task_1_work < SEMTEST_WORK_LIMIT) {
...
}

while (!task_2_done && task_2_work < SEMTEST_WORK_LIMIT) {
...
}
```

And then before actually deleting the tasks:

```c
    /* Give the initial sem that starts the loop */
    SEMOP(Give)(sem_id_1);

    /* Time Limited Execution */
    OS_TaskDelay(5000);

    // Let the threads finish their job.
    task_1_done = true;
    task_2_done = true;
    OS_TaskDelay(1000);

    // TODO: Deleting task is sometimes OS_SUCCESS and sometimes OS_ERR_INVALID_ID
    status = OS_TaskDelete(task_1_id);
    // UtAssert_True(status == OS_ERR_INVALID_ID, ""Task 1 delete Rc=%d"", (int)status);

    status = OS_TaskDelete(task_2_id);
    // UtAssert_True(status == OS_ERR_INVALID_ID, ""Task 2 delete Rc=%d"", (int)status);
```

With this change, the `pthread_cancel` followed by `pthread_join` does not block on macOS.

**Additional context**

This behavior is 100% reproducible on macOS, branch of the #1161.

I have also applied the Clang's Thread Sanitizer to this and other tests. The thread sanitizer immediately complains about possible races related to unprotected access to the global variables managed by the tests. It could become a separate ticket when the more trivial issues reported so far are resolved.

**Requester Info**

Stanislav Pankevich (Personal contribution).
",bug,https://github.com/nasa/osal/issues/1165
Check Return Value of chmod,"**Describe the bug**
Calling chmod(Filename, dststat.st_mode & 0xffffffc0U) without checking return value. This library function may fail and return an error code.

**Expected behavior**
Check the return value of chmod.

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L66

https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L115

**Additional context**
From Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

Possible solution:
```
if (chmod(Filename, dststat.st_mode & ~(S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH)) == 0) 
{
      chmod(Filename, dststat.st_mode & ~(S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH));
      stat(Filename, &dststat);
}
```

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/osal/issues/1171
Document available OSs in trac wiki,"It would be helpful to construct a small Wiki page corresponding
to each Operating System implementation giving a quick overview of
the platform for which support is being provided.

I suggest including hotlinks on each such page back into the doc
subtree of the specific OS for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.",non-bug,https://github.com/nasa/osal/issues/27
"cfe_psp_start timer race condition, leading to undef memory writes","Hi I'm working with cFE in the context of NASA's icarus codebase

We think we found an issue, In psp/fsw/pc-linux/src/cfe_psp_start.c, a timer is setup with this line:
    setitimer (ITIMER_REAL, &timer, NULL);
The timer event ultimately calls CFE_ES_PerfLogAdd after 250ms which starts making assignments on the perf object like so:
    Perf->MetaData.InvalidMarkerReported = TRUE;
 
The problem is there is a time race condition in that CFE_ES_MAIN_FUNCTION’s call to CFE_ES_SetupPerfVariables has not yet initialized the Perf object, depending on your execution speed. This is unlikely but if you are adding initialization code after setitimer it will likely lead to undefined behavior
 



**To Reproduce**
Steps to reproduce the behavior:
after 
   setitimer (ITIMER_REAL, &timer, NULL);
add
   sleep(30);

And undefined behavior will happen (or nothing observable). It was crashing our lengthy DLL initialization that we were running in the place of sleep(30);



**Expected behavior**
No Crash

**Code snips**
N/A

**System observed on:**
 - 64 bit intel
 - OS: vmware workstation 14 running Ubuntu 18 vm, host is windows 10
 - Versions current

**Additional context**
N/A

**Reporter Info**
Reachable at tyler.young@jhuapl.edu. This isn't currently an issue for us but is probably worth reporting
",bug,https://github.com/nasa/PSP/issues/114
Add workflow timeouts and format check,"**Is your feature request related to a problem? Please describe.**
- No timeout in workflow (default is 360 minutes) could consume allocations
- Missing format check
- Remove old travis configuration
- Update badges

**Describe the solution you'd like**
Add timeout and format check

**Describe alternatives you've considered**
None

**Additional context**
Similar to transition in nasa/cFS

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT - was general workflow ticket (duplicate of #232), made specific for remaining changes",non-bug,https://github.com/nasa/PSP/issues/230
Add support for asynchronous console output in shared layer (NG),"On some target boards, the console output from `OS_printf` needs to be buffered and sent to a separate task for output.  This was enabled on several VxWorks targets through the `UTILITY_TASK` directive, but generally was not implemented on POSIX or RTEMS targets, where OS_printf was a simple wrapper around printf.

This console output buffer will become necessary in order to support this paradigm for a VxWorks-NG implementation.

The basic framework for doing this is fairly simple, and may provide immediate benefit for any RTEMS or POSIX boards that might want to enable it, too.",non-bug,https://github.com/nasa/osal/issues/245
OSAL 4.2 Version Description Document Review Cycle,"Attached OSAL 4.2 VDD is open for CCB review.  Please attached any tracked changes/comments with initials included in document filename i.e. ""OSAL 4.2.0.0 Version Description Document-sls.docx"".  Following the CCB review cycle, when all changes have been reviewed/accepted or rejected, the document will be open for signature and release.",non-bug,https://github.com/nasa/osal/issues/181
Remove CFE deprecated code for next release,"**Is your feature request related to a problem? Please describe.**
Now that the ""6.8.x"" release branch has been created, the next release should remove all code/functions that are currently marked as deprecated.

**Describe the solution you'd like**
Removal of all code currently contained within an `OMIT_DEPRECATED` conditional compile switch.

**Additional context**
The removal only applies to ""main"" branch - not the 6.7.x release branch, where it will continue to exist for that release series.  This assumes the next release (main) will become version 7.0.

There are other changes currently in development which do break some deprecated items - hence why I'd like to remove this sooner rather than later, as it saves the work of updating/fixing this old code if the intent is to remove it anyway.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/815
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sch_lab/issues/65
Cast `CFE_SUCCESS` to `CFE_Status_t`,"**Is your feature request related to a problem? Please describe.**
`CFE_SUCCESS` doesn't match pattern for defining other CFE status returns:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L120

**Describe the solution you'd like**
Cast as `CFE_Status_t`

**Describe alternatives you've considered**
Document why not

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1311
Add support for RTEMS 5.1 - RTEMS OSAL and pc-rtems OSAL BSP updates,"**Is your feature request related to a problem? Please describe.**
The cFS Bundle currently supports RTEMS 4.11. Now that RTEMS 5.1 has been released, I would like to update the necessary components to support RTEMS 5.1 on the pc-rtems platform. This involves minor modifications to the cfe repository, the PSP repository, and the OSAL repository. These changes can be done in such a way that preserves the current RTEMS 4.11 support and adds RTEMS 5.1 support.

**Describe the solution you'd like**
I would like to add support for RTEMS 5.1 while maintaining compatibility with the existing RTEMS 4.11 support. For the OSAL repository there are a few minor changes needed to allow support of RTEMS 5.1 and RTEMS 4.11:
- Minor changes in the OSAL pc-rtems BSP
- Minor changes in the RTEMS OSAL implementation files

**Describe alternatives you've considered**
Alternatives include:
- Not supporting newer versions of RTEMS, but several projects will depend on RTEMS 5 support.
- Dropping RTEMS 4.11 support and just making the changes needed for RTEMS 5, but there may be projects that depend on RTEMS 4.11. We can consider dropping RTEMS 4.11 support on a future release.

**Additional context**

**Requester Info**
Alan Cudmore / NASA GSFC Code 582
",non-bug,https://github.com/nasa/osal/issues/608
Make the shared table used in the cFE functional tests configurable ,"**Is your feature request related to a problem? Please describe.**
Projects typically will remove sample_app from their build.  This creates an issue because the cFE functional tests are dependent on it such that tests will fail after removal.  Need a mechanism to easily swap out the sample_app table used in the functional tests such that projects can still run the tests as part of their CI/CD once sample_app is removed. 

**Describe the solution you'd like**
Make the name of the table used in the cFE functional tests configurable such that projects can easily swap out the sample_app table with a table in their project specific build.

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/2352
Check Return Value for setsockopt,"**Describe the bug**
Calling setsockopt(impl->fd, 1, 2, &os_flags, 4U) without checking return value. This library function may fail and return an error code.

**Expected behavior**
Check return value for setsockopt

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/src/os/portable/os-impl-bsd-sockets.c#L199

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Additional context**
Possible solution 
```
if (setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags)) == 0)
{
    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));
}
```

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/osal/issues/1172
Scrub use of () in return statements,"**Is your feature request related to a problem? Please describe.**
Inconsistent use of (), style.  Example below but should fix all.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-no-symtab.c#L50-L60

**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/866
OSAL tests fails under various conditions,"**Describe the bug**

osal_loader_UT would fail while running on the target, since the utmod/* files aren't installed along w/ the test executable to build/exe/*

In addition, under certain circumstances, the following tests may fail, i.e. if another user has run the tests and files are left in /dev/shm (the tests don't clean up the files):
file-api-test
select-test

**To Reproduce**
For the first case, run test out of build/exe/[cpu]

For the second case, run file-api-test/select-test once, chown the files under /dev/shm/RAM[N] to some other user, and run again.  

**Expected behavior**
Tests should succeed

**Code snips**

Should have an install line for the test modules here:
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/unit-tests/osloader-test/CMakeLists.txt#L18-L20

Should test if actual directory is writable, not just if the parent tmp directory is writable,
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/os/posix/src/os-impl-filesys.c#L156-L165

This alone wouldn't solve the issue though, just punt it to the next available tmp directory. You'd probably also want to use mkstemp() or similar to generate a randomly named directory under the tmp folder. 

**System observed on:**
 - Linux

**Reporter Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/osal/issues/760
Remove Test_MSG_PrintMsg in favor of UT_DisplayPkt,"**Is your feature request related to a problem? Please describe.**
Test_MSG_PrintMsg was added with MSG module, but duplicates what UT_DisplayPkt already did.  No need for both.

**Describe the solution you'd like**
Replace Test_MSG_PrintMsg with UT_DisplayPkt and remove.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1030
"ES should use a table for the ""startup script""","**Is your feature request related to a problem? Please describe.**
The ES ""startup script"" file (a CSV-like configuration of which applications and libraries to load at runtime) is not very well designed (using sscanf) and not consistent with how cFS generally manages runtime configurations with tables.

**Describe the solution you'd like**
Replace the .scr code with a table.

**Describe alternatives you've considered**
One alternative is to update the .scr parser, and/or use one/more industry-standard file formats (JSON, YAML) and an open-source parser that we would include (copy into) in our codebase. General consensus is that the CCB prefers going with the standard table mechanism.

**Additional context**
Might be interesting to see if there's a way to change a table without having to re-compile...Otherwise would be helpful to have a document detailing how, post deploy, an operator can update the ES configuration without having to do a full re-deploy.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/583
Remove BUILDDIR from Makefile (breaks if defined),"**Is your feature request related to a problem? Please describe.**
`make BUILDDIR=test prep` fails

**Describe the solution you'd like**
Remove the reference

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1285
Add UtAssert method to verify expected stub argument value(s),"**Is your feature request related to a problem? Please describe.**
In some tests cases it is desired to not only verify that a specific stub function was called, but also to verify the specific arguments that the stub function was called with.

This is currently possible by writing a hook function to check the argument values, but that requires writing a specific hook for every API.

**Describe the solution you'd like**
Provide a more generic facility such that a test case can pre-assemble an object (similar to the Context object which is passed to the hook) that has the _expected_ argument names + values.  Then provide a generic method to compare those to the _actual_ argument values when the function is called.  The latter bit can be done by common code at the same time the user-defined hooks are invoked.

**Describe alternatives you've considered**
A scaled-back alternative might be to provide a facility to register a persistent hook that is called for every function, and is not forgotten/unregistered when the stubs are reset like other hooks are.

This would allow a test case to register a function to be called with _every_ stub on _every_ test without having to re-register it every time.  Calling this an alternative because the test case can then implement its own generic argument value check hook, but this would simplify the process by allowing it to apply universally and persistently.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/968
Time not using Critical Data Store,"**Describe the bug**
The following requirements specify that TIME should be using CDS:

cTIME2502
Upon a Processor Reset the cFE shall verify the Critical Data Store used to store time values.

cTIME2501
Upon a Processor Reset the cFE shall acquire the following time elements from the `<MISSION_DEFINED>` Critical Data Store:
- Time Status Data
- STCF
- Leap Seconds 

cTIME2700
During normal operation, the cFE shall preserve the following time elements in the `<MISSION_DEFINED>` Critical Data Store:
- Time Status Data
- STCF
- Leap Seconds
- MET 

cTIME2502.1 
If the critical data store is not valid, all of the time elements shall be initialized in the same fashion as following a power-on reset.

There is no CDS for time – the respective variables are preserved through the Reset Area.  

**Expected behavior**
The requirements or FSW should be updated to reflect intended implementation.

**Reporter Info**
Dan Knutsen
NASA/Goddard",non-bug,https://github.com/nasa/cFE/issues/989
Remove `extern` from function prototypes,"**Is your feature request related to a problem? Please describe.**
Inconsistently applying extern to function prototypes

**Describe the solution you'd like**
Remove, it makes no difference.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1319
OS_SymbolLookup Function Prototype Variable Names Do Not Match Implementation,"The OS_SymbolLookup function prototype (in osapi-os-loader.h) defines the prototype to be:

int32 OS_SymbolLookup (cpuaddr *symbol_address, const char *symbol_name );

While the implementations of this function declares the function with variable names that do not match the prototype:

int32 OS_SymbolLookup( cpuaddr *SymbolAddress, const char *SymbolName )

This could result in compiler errors/warnings on certain platforms.  It is recommended to update the prototype variable names to match the implementations.",bug,https://github.com/nasa/osal/issues/185
Remove duplicate prototype definition,"**Is your feature request related to a problem? Please describe.**
Duplicated prototypes for OS_NetworkGetId and OS_NetworkGetHostName:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-sockets.h#L385
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-sockets.h#L399
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-network.h#L53
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-network.h#L67

**Describe the solution you'd like**
Remove from osapi-sockets.h

**Describe alternatives you've considered**
Deprecate/remove (see issue #852)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/851
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/sample_lib/blob/5ded3815644e4d7366ce390526c5e9e222b28fdb/fsw/src/sample_lib_internal.h#L33

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_lib/issues/51
"Refactor message header alignment and ""raw"" types to fit a clear pattern","**Is your feature request related to a problem? Please describe.**
Aligned version of message headers currently in SB, shows different handling of the base type.
https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/src/inc/cfe_sb.h#L150-L163

**Describe the solution you'd like**
See discussion below.

**Describe alternatives you've considered**
None.

**Additional context**
Brought up as part of #777/#998 review.

**Requester Info**
Jacob Hageman - NASA/GSFC (from CCB discussion)",non-bug,https://github.com/nasa/cFE/issues/1009
Automate Generation of Integration Candidate Branch,"**Is your feature request related to a problem? Please describe.**
Generating the integration candidate branch is a very straightforward process, although it can be highly time consuming. Automating this process can result in significant time savings.

**Describe the solution you'd like**
Use a GitHub workflow to automatically merge a set of pull requests into the integration candidate branch and push it to GitHub.

**Describe alternatives you've considered**
Scripts can be used to simplify this process as well, but it requires setup by the person maintaining the repository and isn't as portable.

**Requester Info**
Dylan Baker/NASA GSFC 582",non-bug,https://github.com/nasa/cFE/issues/2297
time and timeouts have no consistent type in OSAL,"In OSAL, time and timeouts are represented typically by both int32 or uint32. This convention is used in many places. It might make sense to have a consistent type for time. Perhaps even absolute and relative time. There are Wconversion issues with uses of these types.",non-bug,https://github.com/nasa/osal/issues/571
Only the first item passed to add_cfe_app_dependency() function is actually registered,"**Describe the bug**
The add_cfe_app_dependency() function in the build system is intended to register when one module depends on another module.  It is supposed to accept a list of modules, but only the first item actually gets registered.  If attempting to register more than one, the second item (and anything beyond that) do not have an effect.

**To Reproduce**
Attempting to change the ""BP"" app to depend on the bplib library as well as a input/output layer called ""iodriver"", I changed:

`add_cfe_app_dependency(bp bplib)`
to
`add_cfe_app_dependency(bp bplib iodriver)`

However this did not have any effect, I did not get the iodriver public include path as expected - it did nothing.

**Expected behavior**
All listed dependencies should be registered and public include paths of all dependencies should be added to the app target.

**System observed on:**
Ubuntu 22.04

**Additional context**
This is caused by the wrong variable in the loop.   There _is_ a loop to handle all the listed dependencies, but it registers the first one multiple times, because the wrong variable is referenced inside the loop.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/2128
consider adding PSPs developed at JSC,"JSC has developed a number of PSPs as listed in the attachment.  Consider adding some or all to repo.

",non-bug,https://github.com/nasa/PSP/issues/16
Add functional tests for cFE Miscellaneous APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Miscellaneous APIs
– CFE_ES_CalculateCRC - Calculate a CRC on a block of memory.
– CFE_ES_WriteToSysLog - Write a string to the cFE System Log.
– CFE_ES_ProcessAsyncEvent - Notification that an asynchronous event was detected by the underlying
OS/PSP.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/814
Unable to functionally test app CRC miscompare,"Description:
If the Application's code segment CRC is not equal to the corresponding  Application's baseline code segment CRC, CS shall increment the Application Code Segment CRC Miscompare Counter and send an event message.

Was not able to generate a miscompare when reloading a different version of the reqval_app.  Loaded reqval_v500 which should have incremented the following error counter: AppCSErrCounter and also generated an event

20220324 - Likely resolution will be to verify via ""analysis"", aka unit test if reloading an app can not cause the miscompare.  Future work might support getting the module address, use MM to ""corrupt"" the memory to cause the miscompare.

Imported from GSFCCFS-1906",non-bug,https://github.com/nasa/CS/issues/11
issues:questions cFS Cannot Find Unit-Test Excecutables ,"When attempting to run unit-tests on a cFS project with 1 custom application modeled closely after the Sample_App template the output of running ""make test"" fails as it cannot find the test executable's. It would be great to know if the steps I am following below are insufficient to properly run the unit tests, or if the error in my log files below indicates another issue? 

**To Reproduce**
Steps to reproduce the behavior:
1. make distclean
2. make SIMULATION=native ENABLE_UNIT_TESTS=true prep
3. make
4. make test

**Expected behavior**
All unit-tests pass.

**System observed on:**
 - OS: VMware Ubuntu 22.04
 - Versions: cFS v6.7.0a

**Output of Command**
The actual output I receive is the following for every possible test:

lcov --capture --initial --directory build/native --output-file build/native/coverage_base.info
Capturing coverage data from build/native
Subroutine read_intermediate_text redefined at /usr/bin/geninfo line 2623.
Subroutine read_intermediate_json redefined at /usr/bin/geninfo line 2655.
Subroutine intermediate_text_to_info redefined at /usr/bin/geninfo line 2703.
Subroutine intermediate_json_to_info redefined at /usr/bin/geninfo line 2792.
Subroutine get_output_fd redefined at /usr/bin/geninfo line 2872.
Subroutine print_gcov_warnings redefined at /usr/bin/geninfo line 2900.
Subroutine process_intermediate redefined at /usr/bin/geninfo line 2930.
Found gcov version: 11.2.0
Using intermediate gcov format
Scanning build/native for .gcno files ...
geninfo: WARNING: no .gcno files found in build/native - skipping!
Finished .info-file creation
(cd build/native && ctest -O ctest.log)
Test project /home/daniel/fp_cfs_vrcs/build/native
      Start  1: bin-sem-flush-test
Could not find executable bin-sem-flush-test
Looked in the following places:
bin-sem-flush-test
bin-sem-flush-test
Release/bin-sem-flush-test
Release/bin-sem-flush-test
Debug/bin-sem-flush-test
Debug/bin-sem-flush-test
MinSizeRel/bin-sem-flush-test
MinSizeRel/bin-sem-flush-test
RelWithDebInfo/bin-sem-flush-test
RelWithDebInfo/bin-sem-flush-test
Deployment/bin-sem-flush-test
Deployment/bin-sem-flush-test
Development/bin-sem-flush-test
Development/bin-sem-flush-test
Unable to find executable: bin-sem-flush-test
 1/24 Test  #1: bin-sem-flush-test ...............***Not Run   0.00 sec
      Start  2: bin-sem-test

**Then at the end of 24 messages like this, I receive this message:**

0% tests passed, 24 tests failed out of 24

Total Test time (real) =   0.12 sec

The following tests FAILED:
          1 - bin-sem-flush-test (Not Run)
          2 - bin-sem-test (Not Run)
          3 - bin-sem-timeout-test (Not Run)
          4 - count-sem-test (Not Run)
          5 - file-api-test (Not Run)
          6 - mutex-test (Not Run)
          7 - osal-core-test (Not Run)
          8 - queue-timeout-test (Not Run)
          9 - sem-speed-test (Not Run)
         10 - symbol-api-test (Not Run)
         11 - timer-test (Not Run)
         12 - osal_core_UT (Not Run)
         13 - osal_loader_UT (Not Run)
         14 - osal_filesys_UT (Not Run)
         15 - osal_file_UT (Not Run)
         16 - osal_network_UT (Not Run)
         17 - osal_timer_UT (Not Run)
         18 - my_app-my_app (Not Run)
         19 - cfe_core_default_cpu1_es_UT (Not Run)
         20 - cfe_core_default_cpu1_sb_UT (Not Run)
         21 - cfe_core_default_cpu1_evs_UT (Not Run)
         22 - cfe_core_default_cpu1_tbl_UT (Not Run)
         23 - cfe_core_default_cpu1_time_UT (Not Run)
         24 - cfe_core_default_cpu1_fs_UT (Not Run)
Errors while running CTest
Output from these tests are in: /home/daniel/fp_cfs_vrcs/build/native/Testing/Temporary/LastTest.log
Use ""--rerun-failed --output-on-failure"" to re-run the failed cases verbosely.
make: *** [Makefile:132: test] Error 8 ",non-bug,https://github.com/nasa/cFS/issues/508
Add reference to OSAL user's guide from README.md,"**Is your feature request related to a problem? Please describe.**
User's guide is built and not included in repo

**Describe the solution you'd like**
Reference https://github.com/nasa/cFS/blob/gh-pages/OSAL_Users_Guide.pdf

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/413
Local #defines in cf_cmd.c used as special values in command processing (w/ repeat dfn in tests),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`ALL_CHANNELS`, `ALL_POLLDIRS`, `COMPOUND_KEY` used in command processing shouldn't be defined in a *.c where it's inaccessible and somewhat hidden.  The names aren't great either, better to prefix w/ app.
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/fsw/src/cf_cmd.c#L41-L43

**Describe the solution you'd like**
Move into cfe_msg.h and rename as `CF_ALL_CHANNELS` and similar, which would allow removal from cf_test_utils.h:
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/unit-test/utilities/cf_test_utils.h#L53

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/263
Executive Services Generic Counter facilities not thread safe,"The Executive Services provides a ""Generic Counter"" API (register, delete, increment, decrement, get, set).

The implementation of these functions do not take any sort of mutex when accessing the table or performing these operations.  As a bare minimum, the registration should ensure that two tasks simultaneously creating counters should be protected against collision.",bug,https://github.com/nasa/cFE/issues/301
SB private/internal data structure being written to telemetry dump file,"**Describe the bug**
The `CFE_SB_PipeD_t` structure is defined within `cfe_sb_priv.h` and is internally used to manage the pipe state.

But as part of the ""Send Pipe Info"" command this structure is also directly written to a data dump file - making it effectively into telemetry data.

**Expected behavior**
Code should clearly delineate what is telemetry data intended to be consumed by the ground or other systems, and what is internal data that only resides in local memory.

In particular,  the `CFE_SB_PipeD_t` also contains pointers, so the dump file resulting from a Send Pipe Info command will contain these internal memory address (meaningless outside the current CPU) and it will change size depending on whether it is running on a 32-bit or 64-bit CPU.

**System observed on:**
Ubuntu 20.04

**Additional context**
Whether data is sent directly in a telemetry message in real time or dumped to a file and transferred to the ground system in a deferred fashion, it is all basically telemetry data and the structures used in these data dump files should be defined in consistent (i.e. non platform dependent) terms so the tools on the ground can actually parse the file (or message).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/982
Resolve all compiler warnings,"All compiler warnings need to be resolved prior to the next release.

Requested by Tam via email.",bug,https://github.com/nasa/cFE/issues/296
CI_LAB should put all global variables into a global structure,"**Is your feature request related to a problem? Please describe.**
CI_LAB has several global variables, which are inconsistently named.  Most have a `CI` prefix but the prefix should at least be `CI_LAB` to match the module name.

**Describe the solution you'd like**
All globals  should all be put into a single top-level global structure, similar to the way other modules isolate their global variables.  This consolidates everything and also provides namespace protection.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/36
CFE_ES_OneAppTlm_Payload_t telemetry struct contains non mission-scoped-sized array,"**Is your feature request related to a problem? Please describe.**
Unsure if this is intentional, but 
`CFE_ES_AppInfo_t` is directly used by `CFE_ES_OneAppTlm_Payload_t` which is ground visible. `CFE_ES_AppInfo_t` uses `OS_MAX_*`, whereas all other ground-visible telemetry uses the mission-scoped `CFE_MISSION_MAX_*`.

**Describe the solution you'd like**
`CFE_ES_OneAppTlm_Payload_t` should be structured such that the size is dependent solely on mission-scoped constants and consistent amongst all CPUs. 

This is an enhancement as opposed to a bug report since in practice both constants are likely to be same. 

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
John N Pham, Northrop Grumman


",bug,https://github.com/nasa/cFE/issues/705
Migrate CFE generic integer assert tests to common UT Assert,"**Is your feature request related to a problem? Please describe.**
Recently CFE added a number of useful generic test assertion macros, for greater than / less than, booleans, and other commonly needed checks in the CFE coverage test.

It would be nice to use these same assertions in the functional test too, and perhaps other app/lib tests, since they are pretty generic.

**Describe the solution you'd like**
Migrate the code from CFE coverage test-specific area into general UT Assert to be usable in the full range of test environments.   

Currently the macros and code are in https://github.com/nasa/cFE/tree/main/modules/core_private/ut-stubs, thus private to CFE ""coverage"" test environment.

**Describe alternatives you've considered**
Could copy the macros and functions into `cfe_assert` so it can be used in functional tests, but then there would be two copies, and it would still be limited to CFE (no app/lib tests could use).

**Additional context**
Putting them into UT assert itself allows for the single/common implementation for both coverage and functional and any other app/lib test.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1124
"Updated MAT table assumes ""CommandHeader"" first member name","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Depending on where the message definitions came from, and the type of HDR implementation used, the first element of a structure may or may not be named `CommandHeader`.   This is controlled by the specific MsgHdr implementation that was chosen.

**To Reproduce**
Build the MAT using EDS-generated structs - in these (unfortunately) there is an extra layer of nesting, so this fails.  The first element still is ultimately a command header.

**Expected behavior**
The TBL message definitions are defined by a combination of TBL itself and the MSG HDR module selection.  No assumptions in HS should be made about its structure.

**Code snips**
https://github.com/nasa/HS/blob/94098efff2a6bbde2b0b84f90bbb387cff1c1203/fsw/tables/hs_mat.c#L75

Specifically the "".CommandHeader"" part.

**System observed on:**
Debian

**Additional context**
Should be able to just remove this part of the designated initializer.  Normally I would recommend use of designated initializers, but in this context it introduces a dependency/assumption that may not be correct.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/HS/issues/96
"ES Reports version 5.0.0 in HK telemetry, when built off a development branch","**Describe the bug**
Misidentifies version

**To Reproduce**
Look at version in ES housekeeping packet.

**Expected behavior**
System should report a consistent version number at startup, from noops, and in tlm.  Could go back to the old way where development versions all report a revision of 99.

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L333-L340

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle.

**Additional context**
Got out of sync with new versioning scheme

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/584
Relation between cFE requirements and Unit Test implementation,"Hi all!
I have some doubts about how tests are being implemented. In one hand if we look into a UT file, e.g. es_UT.c we can see that all the Tests there make reference to UT_Report as follows (I took one at random):
`UT_Report(__FILE__, __LINE__,
              UT_PrintfIsInHistory(UT_OSP_MESSAGES[UT_OSP_POR_OTHER]),
              ""CFE_ES_SetupResetVariables"",
              ""Other cause reset"");` 
I tried to have a deeper understanding of what is happening there but if I look for ""CFE_ES_SetupResetVariables"" o ""SetupResetVariables"" or similar I am not able to find extra information neither in cFE_FunctionalRequirements.csv nor in requirements.docx. 
I don't know if maybe I am not looking in the correct place or maybe that files are out of date; anyway I would like to know if there is any file where it is explained why to check ""CFE_ES_SetupResetVariables - Other cause reset"" is performed an UT_PrintfIsInHistory(...) instruction is performed and not another one. 

Thanks in advance and stay safe out there ,    

",non-bug,https://github.com/nasa/cFE/issues/1041
Add UtAssert_MIR macro (similar to UtAssert_NA),"**Is your feature request related to a problem? Please describe.**
Use of UTASSERT_CASETYPE_MIR not standardized like NA, leads to potential for misuse

**Describe the solution you'd like**
Add a similar macro as UtAssert_NA

**Describe alternatives you've considered**
None

**Additional context**
Related to nasa/cFE#1711

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1118
Implementation of CF_CmdCond takes address of inline function,"**Is your feature request related to a problem? Please describe.**
While the compiler does not complain about this, it totally defeats the purpose of making these ""inline"" functions to begin with, as by definition they'll need to be compiled out-of-line in order to be able to call them via a function pointer.

**Describe the solution you'd like**
This complexity of using a function pointer is not necessary and counterproductive.  Make it simple and boring:

```
if (cond == 0)
{
    CF_CmdAcc();
}
else
{
    CF_CmdRej();
}
```

Not fancy, but pretty clear what the above is doing.  What's there now just obfuscates.  Note that the ""cond"" is not a boolean, its the return value of a command function that returns 0 on success.  So the logic is inverted.

**Additional context**
Existing function
https://github.com/nasa/CF/blob/b6de2056f70c6d3eb97664a5cd12a50c4978d5bc/fsw/src/cf_cmd.h#L81-L86

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/CF/issues/155
Quoting issue in doxygen build,"The arch_build.cmake file converts the CMAKE_C_FLAGS variable and translates the defined macros into the Doxygen command line.

However, if the CMAKE_C_FLAGS string is empty, then this fails.  Need to add quotes to make it work with an empty string.",bug,https://github.com/nasa/cFE/issues/356
Use a changelog to keep track of changes instead of having them in the Readme ,"**Is your feature request related to a problem? Please describe.**
The version history in the Readme file clutters useful information

**Describe the solution you'd like**
Move the ""version history"" from `Readme.md` to `CHANGELOG.md` and start following this spec: https://keepachangelog.com/en/1.0.0/

**Describe alternatives you've considered**
Move changelog section in the readme to a section at the very bottom of the file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/52
"Move file system initialization logic out of cFE, should be set up at lower level","**Is your feature request related to a problem? Please describe.**
Related to #589, file system initialization doesn't fit well in the cFE layer:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L465-L471

**Describe the solution you'd like**
Remove/move, should be initialized before getting to cFE

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1356
Add sleep(1) before exit call when printing,"**Is your feature request related to a problem? Please describe.**
User reported OS_print doesn't display before exit, for example:
https://github.com/nasa/PSP/blob/6d40816cfcc2836182f04bacf7d98b7d5cf5163b/fsw/pc-linux/src/cfe_psp_memory.c#L145-L146

**Describe the solution you'd like**
Add sleep(1) between prints and exits to give it a chance

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/299
function declaration is not a prototype,"
cppcheck messages:
{{{
src/ostimer.c:17: warning: function declaration isn't a prototype
}}}

Note that this is the `src/ostimer.c` in the unit-test-coverage tree.
",bug,https://github.com/nasa/osal/issues/161
JSC: Remove unnecessary cast on OS_write,Cleanup - remove unnecessary cast on OS_write() call,bug,https://github.com/nasa/cFE/issues/154
Fix OSAL timer test ID usage,"The OSAL timer test implementation assumes that timer IDs will always be issued in sequential order starting with ""0"".  It incorrectly assumes that the timer ID will be suitable for an array index.

An intermediate lookup table is required here, which has OS_MAX_TIMERS entries, to correctly map the ID supplied during the create call back to a local array index.

",bug,https://github.com/nasa/osal/issues/53
Internal API calls are not const-correct (possible race condition),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Functions that accept a pointer as an input only, and do not modify that structure, should be qualified as `const`.

In particular, this is true of the software bus messages - these could be distributed to multiple subscribers, and these must not be modified by receivers or else race conditions are introduced.  

There is at least one case of FM where the buffer is modified.  This should be corrected along with adding `const` to all messages.

**To Reproduce**
Possible race condition if multiple entities subscribe to the same message (config-dependent)

**Expected behavior**
Should not modify input.  Non-modified input structs should be `const` in the declarations.

**Code snips**
Possible case of input buffer getting modified is here: https://github.com/nasa/FM/blob/c8569975ba4d0a4ab656565b22511812385ad0bb/fsw/src/fm_cmd_utils.c#L350-L354

**System observed on:**
N/A

**Additional context**
Pretty much most/all of the functions in `fm_cmd_utils.h` should accept `const` string inputs.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/FM/issues/76
Improper strncpy to ResetType in pc-linux PSP,"Static analysis noted that the following strncpy in `CFE_PSP_ProcessArgumentDefaults()` is potentially a problem:

{{{
    strncpy(CommandData->ResetType, ""PO"", 2 );
}}}

This is because the string is a constant two character literal and the fixed copy size of ""2"" means that the null terminating byte will never get copied to the output buffer.

In the PSP, because the buffer had been zeroed out by an earlier memset() call, the code still worked OK.  Still, this should be fixed, as the prior path to get to this function might not always be identical to the way it is today.",bug,https://github.com/nasa/PSP/issues/90
uninitialized variables (initial cppcheck detection),"NOTE: as cppcheck gets more interesting stuff in cppcheck.cfg we may uncover more independent instances of uninitialized variables. TBD whether they lump in with this ticket or get a new one. Probably a new one if we close these promptly, which we should ...

cppcheck messages:
{{{
src/unit-tests/oscore-test/ut_oscore_queue_test.c:552: error: Uninitialized variable: queue_data_out
src/unit-tests/oscore-test/ut_oscore_queue_test.c:562: error: Uninitialized variable: queue_data_out
}}}

",bug,https://github.com/nasa/osal/issues/160
Cppcheck flagging BUGCHECK macro as syntax error,"**Describe the bug**
The use of the `BUGCHECK` macro with the second argument blank looks suspicious and it is reported as a syntax error by newer versions of the `cppcheck` tool:

```
Checking src/os/shared/src/osapi-printf.c ...
src/os/shared/src/osapi-printf.c:269:30: error: syntax error [syntaxError]
    BUGCHECK((String) != NULL, )
                             ^
```

**To Reproduce**
Execute a recent version of `cppcheck` against OSAL source code - observed in version 2.7.

**Expected behavior**
Should pass cleanly

**System observed on:**
Ubuntu 22.04

**Additional context**
The second argument being blank here is intentional, because it is a return value and this is a void function, so it needs to be empty.  The syntax is actually valid but it is just a bit unusual.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/1322
strncpy source sizeof,"**Checklist (Please check before submitting)**

* [ ] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [ ] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
While building with **-Werror=sizeof-pointer-memaccess** flag the compiler complains about ""error: argument to ‘sizeof’ in ‘strncpy’ call is the same expression as the source; did you mean to use the size of the destination?""

**To Reproduce**
Steps to reproduce the behavior:
1. Add -Werror=sizeof-pointer-memaccess flag to compiler
2. Build

**Expected behavior**
No errors

**Code snips**
https://github.com/nasa/DS/blob/ce988535edffd6b36cc1083e10988c2d0a4a38db/fsw/src/ds_file.c#L886

**System observed on:**
 - OS: Oracle Linux 8.7

**Additional context**
N/A

**Reporter Info**
Claudio Olmi - NASA/METECS

",bug,https://github.com/nasa/DS/issues/94
Time Services need cleanup relative to requirements,"Per CCB on 3/27/19, Time Services goes way beyond it's requirements.  Need to re-evaluate configuration options and reduce mission specific code.

As part of the cleanup, factor out duplicate code.  Specifically referenced at code review in command handling.
- `CFE_TIME_SetTimeCmd`, `CFE_TIME_SetMETCmd`, `CFE_TIME_SetStcfCmd`, and `CFE_TIME_SetLeapSeconds` are all basically the same logic, etc.
- break of files #1322, specific note from CFS-43 was the lack of a cfe_time_tone.h
- `CFE_TIME_ToneSendGPS` and `CFE_TIME_ToneSendTime` are basically the same logic, refactor
- #1536 
- #1535
- Mutually exclusive defines could just be a boolean (but will likely go away w/ refactor), note cfe_time_verify.h is excessively complex at this point
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_verify.h#L43-L51",non-bug,https://github.com/nasa/cFE/issues/302
Correct return code mismatches in CFE,"**Is your feature request related to a problem? Please describe.**
In several places across CFE, a function is documented as returning a CFE status (e.g. CFE_SUCCESS) but checked against either OS_SUCCESS or CFE_PSP_SUCCESS, or vice versa.

**Describe the solution you'd like**
Functions documented as returning CFE status should check for `CFE_SUCCESS`, where functions documented as returning an OSAL status should check for `OS_SUCCESS`, and functions returning a PSP status should check for `CFE_PSP_SUCCESS`.

**Additional context**
Similar to #1698, but found in more places.  Since the definition of all these symbols is 0, this is no change in practice, but should be fixed for correctness sake.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1705
Provide example for setting processor affinity (SMP example),"**Is your feature request related to a problem? Please describe.**
SMP is a hot topic these days, we keep saying it's easy but no example provided showing how one could set a thread's CPU affinity.

**Describe the solution you'd like**
Provide an example for the ""simplest"" identified method for assigning threads to cores.

**Describe alternatives you've considered**
There's numerous approaches, this just shows one that assigns threads when created.  One could manage threads from a platform specific app, do power management, fault management, etc.

**Additional context**
See https://github.com/nasa/osal/issues/210, https://github.com/nasa/cFS/discussions/427.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/340
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/FM/issues/59
OS_ShellOutputToFile missing functional test,"**Is your feature request related to a problem? Please describe.**
No functional test for OS_ShellOutputToFile

**Describe the solution you'd like**
Add functional test.  Needed for build verification for any system that includes this capability.

**Describe alternatives you've considered**
At one point discussed removing this API, but CCB decided to make it optionally included

**Additional context**
#354

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/416
ES unit test failing on x86_64 due to uint32 memory handle,"Another case of a `uint32` being used to store a memory pool handle, which fails when running the unit tests on a 64-bit build.

Using the `CFE_ES_MemHandle_t` typedef instead solves the problem.
",bug,https://github.com/nasa/cFE/issues/145
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/HS/issues/50
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the sample_app repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/sample_app/issues/135
Define table maximum object name length,"**Is your feature request related to a problem? Please describe.**
Hardcoded length:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl_filedef.h#L60

**Describe the solution you'd like**
Add a local define for reference for cases where sizeoff(ObjectName) isn't appropriate.  Note elf2cfetbl just uses sizeof, so size isn't duplicated anywhere currently.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1498
Randomize location of OSAL temp directories,"**Is your feature request related to a problem? Please describe.**
When running unit tests in parallel or multiple instances of cFS in parallel on Linux, sometimes things break due to /dev/shm/osal:RAM* directories being at a fixed location. This is particularly a problem for our CI server which isn't allowed to spin up a container for each run due to policy reasons. 

**Describe the solution you'd like**
A flag or environment variable or something to randomize/set this directory, and any other directories that may be hardcoded. 

**Describe alternatives you've considered**
We have configured a lock on Jenkins to prevent multiple instances of the tests from being run in parallel. 

**Additional context**

**Requester Info**
John N Pham, Northrop Grumman",non-bug,https://github.com/nasa/osal/issues/1189
Order of operations on OS_DeleteAllObjects,"**Is your feature request related to a problem? Please describe.**
OS_DeleteAllObjects() is used when shutting down the system, such as after an exception, a commanded processor restart, or CTRL+C, etc.

This simply deletes resources based on their numeric `OS_OBJECT_TYPE` value, meaning tasks (1) are first, followed by queues, bin/count, semaphores, mutexes, etc. and eventually timers (9).

A recent issue described in nasa/cfe#701 observed a potential problem with this.  As the task and semaphore are deleted, a timer could still be running.  If that timer executes during shutdown, it may interrupt the deletion, and attempt to use semaphore objects.

Normally this shouldn't be an issue because OSAL will return an error and reject the call.  However due to an underlying issue in Binary Semaphores (#470) after task cancellation, this caused deadlock.

**Describe the solution you'd like**
It would be preferable to delete timers first, then tasks, then semaphores, files, and other resources.  This should be a safer ordering in general, as it will reduce the potential for resources to be used as they are being deleted.

**Describe alternatives you've considered**
Leave as-is.  

**Additional context**
The real fix for #470 prevents deadlock, this is just more future-proofing.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/471
Syntax for Table Dump Command,"When attempting to dump a table the format for the python GroundSystem is unclear.

![image](https://user-images.githubusercontent.com/52501916/67683286-7f0cbe00-f967-11e9-8bb2-ffa3bb4df303.png)

My attempt syntax is as follows.  It appears to concatenate the table and the table file name, making it hard to discern any proper convention for the arguments of the command.

![image](https://user-images.githubusercontent.com/52501916/67683398-b9765b00-f967-11e9-8cc1-3b2475a0db8e.png)



",non-bug,https://github.com/nasa/cFS/issues/21
UtAssert_StringBufCompare output of strings could be put on top of each other for easier problem identification,"**Is your feature request related to a problem? Please describe.**
Differences in strings can be hard to identify when they are side by side.  Current output:
```
[ FAIL] 02.003 tests.c:38 - String: 'Space Error?   ?    ?      ?       ?' == 'Space Error?   ?    ?       ?       ?'
```

**Describe the solution you'd like**
Stack strings for easier identification of malformations.  For example:
```
[ FAIL] 02.004 tests.c:40 - String:
Received:'Space Error?   ?    ?      ?       ?'
Expected:'Space Error?   ?    ?       ?       ?'
```

**Describe alternatives you've considered**
Manual copy and paste into text editor.

**Additional context**
N/A

**Requester Info**
Alan Gibson  NASA/GSFC 587
",non-bug,https://github.com/nasa/osal/issues/1193
Backtrace-tracking feature for debugging OSAL mutexes,"Buggy code that takes a mutex but forgets to release it can be very difficult to debug - when the code is stopped in the debugger, it is clear that the thread is waiting on the mutex, but evidence of the real problem is long gone and it is impossible to tell which thread took the mutex but did not give it up.

glibc has a {{{backtrace()}}} function which can be extremely useful in debugging these situations.

This will add an enhancement to the ""posix-ng"" build to __optionally__ obtain and store a backtrace with each successful ""take"" of a mutex.  

If at some point in the future another thread gets locked trying to obtain the mutex, the backtrace will point exactly to the code that obtained the mutex without releasing it.

Obviously this has some performance/memory implications (although not much) so it will not be enabled by default.  This would be something the developer could enable when actually trying to debug mutex release issues.
",non-bug,https://github.com/nasa/osal/issues/64
APIs missing check for NULL pointer(s),"**Describe the bug**
There are a number of APIs that do not currently check to see if a NULL pointer has been passed in as an input argument.  We should consider adding the additional check in the following APIs:

cfe_es_api.c:CFE_ES_CalculateCRC
cfe_es_api.c:CFE_ES_CopyToCDS
cfe_es_api.c:CFE_ES_CreateChildTask
cfe_es_api.c:CFE_ES_GetAppID
cfe_es_api.c:CFE_ES_GetAppName
cfe_es_api.c:CFE_ES_GetGenCounterIDByName
cfe_es_api.c:CFE_ES_GetTaskInfo
cfe_es_api.c:CFE_ES_ProcessCoreException
cfe_es_api.c:CFE_ES_RegisterCDS
cfe_es_api.c:CFE_ES_RestoreFromCDS
cfe_es_api.c:CFE_ES_RunLoop
cfe_es_api.c:CFE_ES_WriteToSysLog
cfe_esmempool.c:CFE_ES_GetMemPoolStats
cfe_esmempool.c:CFE_ES_GetPoolBuf
cfe_esmempool.c:CFE_ES_GetPoolBufInfo
cfe_esmempool.c:CFE_ES_PoolCreate
cfe_esmempool.c:CFE_ES_PoolCreateEx
cfe_esmempool.c:CFE_ES_PoolCreateNoSem
cfe_esmempool.c:CFE_ES_PutPoolBuf
cfe_evs.c:CFE_EVS_SendEvent
cfe_evs.c:CFE_EVS_SendEventWithAppID
cfe_evs.c:CFE_EVS_SendTimedEvent
cfe_fs_api.c:CFE_FS_InitHeader
cfe_fs_api.c:CFE_FS_ReadHeader
cfe_fs_api.c:CFE_FS_SetTimestamp
cfe_fs_api.c:CFE_FS_WriteHeader
cfe_sb_api.c:CFE_SB_CreatePipe
cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr
cfe_sb_msg_id_util.c:CFE_SB_GetMsgId
cfe_sb_msg_id_util.c:CFE_SB_SetMsgId
cfe_sb_util.c:CFE_SB_GenerateChecksum
cfe_sb_util.c:CFE_SB_GetChecksum
cfe_sb_util.c:CFE_SB_GetCmdCode
cfe_sb_util.c:CFE_SB_GetMsgTime
cfe_sb_util.c:CFE_SB_GetTotalMsgLength
cfe_sb_util.c:CFE_SB_GetUserData
cfe_sb_util.c:CFE_SB_GetUserDataLength
cfe_sb_util.c:CFE_SB_InitMsg
cfe_sb_util.c:CFE_SB_MessageStringGet
cfe_sb_util.c:CFE_SB_MessageStringSet
cfe_sb_util.c:CFE_SB_MsgHdrSize
cfe_sb_util.c:CFE_SB_SetCmdCode
cfe_sb_util.c:CFE_SB_SetMsgTime
cfe_sb_util.c:CFE_SB_SetTotalMsgLength
cfe_sb_util.c:CFE_SB_SetUserDataLength
cfe_sb_util.c:CFE_SB_TimeStampMsg
cfe_sb_util.c:CFE_SB_ValidateChecksum
cfe_tbl_api.c:CFE_TBL_GetAddress
cfe_tbl_api.c:CFE_TBL_GetAddresses
cfe_tbl_api.c:CFE_TBL_GetInfo
cfe_tbl_api.c:CFE_TBL_Load
cfe_tbl_api.c:CFE_TBL_Register
cfe_tbl_api.c:CFE_TBL_Share
cfe_time_api:CFE_TIME_Print
cfe_time_api:CFE_TIME_RegisterSynchCallback

**System observed on:**
 NA - Code review/audit

**Reporter Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/547
Clean-up related to OSAL user's guide scrub,"**Is your feature request related to a problem? Please describe.**
Various fixes/cleanup required related to https://github.com/nasa/osal/issues/364

**Describe the solution you'd like**
- Removed unused osalguide.dox (it just copies the main page, unreferenced)
- Removed unused cfe_usersguide.dox (it just copies part of main page, unreferenced)
- Fixed directory name reported by make osalguide
- Updated OSAL guide name
- Removed OSAL_MISC_ADDITIONS (undefined)
- General consistency/updates of header sections for osalguide
  - OS_TaskRegister note removed from initialization (obsolete)
  - File descriptor section update (don't mix OS/OSAL)
- Changed include order to maintain document order (main dox file added first)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/557
Release 1.1.0 Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_lib/issues/12
Comments/document cleanup relative to ES/ResourceID review (and #1283),"**Is your feature request related to a problem? Please describe.**
Various cleanup:

 - Document `OUTPUT_DIRECTORY` in `generate_config_includefile` parameter list: https://github.com/nasa/cFE/pull/1283#discussion_r611500336
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/global_functions.cmake#L67-L72

- Update parameter list in `read_targetconfig`: https://github.com/nasa/cFE/pull/1283#discussion_r611500919
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/global_functions.cmake#L134-L144

- Add NULL termination documentation on config lists (autogenerated and added via build system):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/target/src/target_config.c#L74

- Fix order of parameter documentation for `CFE_ES_WaitForSystemState`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L390-L396

- Remove OBE child priority comment in `CFE_ES_CreateChildTask`, related to #1033:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L797-L798

- Improve generic counter documentation (example, purpose), really just a thread-safe counter capability (suggested at one point for CFDP throttling):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1469

- Fix typos:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L663
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L700
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L1943
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.h#L192

- Add comment that NULL check is done by CFE_ES_GetAppInfo/CFE_ES_GetLibInfo:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L1080-L1084

- Document load library calls library entry function in ES context (must not halt, etc)

- Remove obsolete comments:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_erlog.c#L254-L257

- Replace obsolete comments, generically ""for initializing and starting cfe""
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_objtab.c#L26

- s/read/printed/
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L99

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
From CFS-40 and #1283 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1306
Recommended lgtm issues,"**Is your feature request related to a problem? Please describe.**
Recommended issue from lgtm:
cfe_ts_crc.c:
```
switch(TypeCRC)
--
114 | {
115 | /*       case CFE_ES_CRC_32:                                                    */
116 | /*            CFE_ES_WriteToSysLog(""CFE ES Calculate CRC32 not Implemented\n""); */
117 | /*            break;                                                            */
118 |  
119 | case CFE_ES_CRC_16:
120 | Crc    =  (int16 )( 0xFFFF & InputCRC );
121 | BufPtr = (uint8 *)DataPtr;
122 |  
123 | for ( i = 0 ; i < DataLength ; i++,  BufPtr++)
124 | {
125 | Index = ( ( Crc ^ *BufPtr) & 0x00FF);
126 | Crc = ( (Crc >> 8 ) & 0x00FF) ^ CrcTable[Index];
127 | }
128 | break;
129 |  
130 | /*       case CFE_ES_CRC_8:                                                    */
131 | /*            CFE_ES_WriteToSysLog(""CFE ES Calculate CRC8 not Implemented\n""); */
132 | /*            break;                                                           */
133 |  
134 | default:
135 | break;
136 | }
  | This switch statement should either handle more cases, or be rewritten as an if statement.


{
--
115 | /*       case CFE_ES_CRC_32:                                                    */
116 | /*            CFE_ES_WriteToSysLog(""CFE ES Calculate CRC32 not Implemented\n""); */
  | This comment appears to contain commented-out code
117 | /*            break;                                                            */
  | This comment appears to contain commented-out code



/*       case CFE_ES_CRC_8:                                                    */
--
131 | /*            CFE_ES_WriteToSysLog(""CFE ES Calculate CRC8 not Implemented\n""); */
  | This comment appears to contain commented-out code
132 | /*            break;                                                           */
  | This comment appears to contain commented-out code



```

**Requester Info**
Anh Van, NASA Goddard
",bug,https://github.com/nasa/tblCRCTool/issues/15
"All CMD/TLM messages should put content in a ""Payload"" sub-structure","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
To match the patterns used in CFE and other modules, all CMD/TLM message definitions should put the content (non-header) parts into a separate struct called ""Payload"".

**Describe the solution you'd like**
Separate message content into a sub structure called ""Payload"".

**Additional context**
This is benefit to tooling that can use the presence of this field to identify where the actual content starts (e.g. something like `offsetof(MsgType, Payload)` would work and be correct, as opposed to checking `sizeof(CFE_MSG_CommandHeader_t)` which may not actually reflect where the content starts due to possible compiler-added padding between them).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/CS/issues/74
Incomplete OSAL error conversion in CFE_ES_ReloadApp,"**Describe the bug**
The CFE_ES_ReloadApp function uses the function OS_stat to perform its work. The error handling in CFE_ES_ReloadApp assumes any failure in OS_stat is due to a file IO issue. This may not be the case because if a null pointer is passed in as the file name OS_stat will return an OS_INVALID_POINTER, but this specific error code will be ignored and CFE_ES_ReloadApp will just output CFE_ES_FILE_IO_ERR instead of a CFE_ES_BAD_ARGUMENT.

**To Reproduce**
Steps to reproduce the behavior:
1. Call CFE_ES_ReloadApp with a null pointer for filename. It will return a CFE_ES_FILE_IO_ERR when the real issue was a bad argument.

**Expected behavior**
CFE_ES_ReloadApp could include a null check itself to provide a more specific error message or the OS_INVALID_POINTER returned by OS_stat could be converted to a specific CFE error code.

**Additional context**
See #1672 for a similar error conversion issue

**Reporter Info**
Niall Mullane - GSFC 582 Intern
",non-bug,https://github.com/nasa/cFE/issues/1723
Static analysis workflow failures due to style warnings,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Strict cppcheck fails in static analysis workflow, see https://github.com/nasa/HS/runs/6355951822?check_suite_focus=true:
'''
[fsw/src/hs_cmds.c:686] -> [fsw/src/hs_cmds.c:701]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/src/hs_custom.c:90] -> [fsw/src/hs_custom.c:95]: (style) Variable 'Status' is reassigned a value before the old one has been used.
'''

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/HS/issues/16
Add OS_QueueGetName(),"**Is your feature request related to a problem? Please describe.**
cFE will have a function to get a pipe's name given its id, which will call down to OSAL to get the name from the queue. Currently this is accomplished with OS_QueueGetInfo() but that requires a pointer to a struct buffer.

**Describe the solution you'd like**
A convenience function should be added to retrieve a queue's name given its id without the need to pass in a struct buffer (instead passing in a string buffer.)

**Describe alternatives you've considered**
Could maintain the status quo, this is a convenience function.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/358
Build fails with deprecated cFE/OSAL elements removed #35,"Describe the bug
Build fails on 7 undeclared errors:
Errors.txt

To Reproduce
make OMIT_DEPRECATED=true prep (requires nasa/cFE#457)

Expected behavior
Clean build

System observed on:

    cFS Dev Server 2
    OS: Ubuntu 18.04
    Versions: mostly 6.7 (+ commit above)

Reporter Info
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/sch_lab/issues/34
Event Services Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
EVS requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cEVS3018 - HK requirement not consistent (update wording)
- cEVS3103.3.1 - filter counter configurable max (change from hard number)
- cEVS3110 - free app resources, done by ES_AppExit (delete EVS req)
- cEVS3200 - initialize ports default config per port (delete, psp/hardware configuration #93 #94)
- cEVS3201 - power on event format configurable (change from long)
- cEVS3207 - preserve log mode on processor reset (clarify requirement, just wording update)
- cEVS3209 - Processor reset default log mode (delete, conflicts with 3207)
- cEVS3300 - support # of message ports (delete, psp/hardware dependent #93 #94)
- cEVS3301 - Event Log Size (delete, mission config)
- cEVS3302 - # of event filters per app (delete, mission config)
- NEW API Requirements:
    - None
- NEW Cmd Requirements:
    - None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/516
"SB - Add ""promiscuous"" pipe option","Particularly when debugging and diagnosing issues, it's useful to have an app that can capture all messages, no matter what is subscribed to by that pipe.",non-bug,https://github.com/nasa/cFE/issues/232
doxygen misc. warning,"**Describe the bug**
osal/src/os/inc/osapi-os-core.h:233: warning: The following parameters of OS_ConvertToArrayIndex(uint32 object_id, uint32 *ArrayIndex) are not documented:
  parameter 'ArrayIndex'

osal/src/os/inc/osapi-os-core.h:311: warning: argument 'milliseconds' of command @param is not found in the argument list of OS_TaskDelay(uint32 millisecond)

osal/src/os/inc/osapi-os-core.h:319: warning: The following parameters of OS_TaskDelay(uint32 millisecond) are not documented:
  parameter 'millisecond'

osal/src/os/inc/osapi-os-core.h:332: warning: The following parameters of OS_TaskSetPriority(uint32 task_id, uint32 new_priority) are not documented:
  parameter 'new_priority'

osal/src/os/inc/osapi-os-filesys.h:247: warning: The following parameters of OS_open(const char *path, int32 access, uint32 mode) are not documented:
  parameter 'mode'


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide
2. See error

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/280
"Revert app info structure modification (#1300, #1911), relative to Draco development cycle","**Is your feature request related to a problem? Please describe.**
`CFE_ES_AppInfo_t` is public so the change in #1911/#1300 is breaking.  Shouldn't have been included in Draco.  Makes CS non-portable between Caelum and Draco.

**Describe the solution you'd like**
Revert.

**Describe alternatives you've considered**
Could add accessor functions or some sort of abstraction/layer or back-port, but the change really is very low priority.  Could be considered in a future major update cycle if there's some actual benefit from the additional structure.

Could make CS adapt also (conditional compilation or whatever), but I don't think it's worth it for this sort of change or carrying that option.

**Additional context**
Need to decide if we want to reopen #1300 as future work or leave closed.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2036
Update wrong comment regarding the value of CFE_SB_INVALID_MSG_ID ,"**Describe the bug**
CFE_SB_INVALID_MSG_ID value is no longer the maximum representable number of type CFE_SB_MsgId_t. Comment needs to be updated.

**Code snips**
[Link to lines of code](https://github.com/nasa/cFE/blob/main/cmake/sample_defs/cpu1_platform_cfg.h#L167-L168)

**Reporter Info**
Jose F. Martinez Pedraza / GSFC 582",non-bug,https://github.com/nasa/cFE/issues/2116
"Convert functional test startup script example to use ""simple"" filenames","**Is your feature request related to a problem? Please describe.**
Don't need directory or extension in https://github.com/nasa/cFE/blob/main/docs/README_functionaltest.md

**Describe the solution you'd like**
Simplify

**Describe alternatives you've considered**
None

**Additional context**
Discussed at CCB for #1242

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1264
CFE_ES_RestartApp() WriteToSysLog Typo,"The first WriteToSysLog() occurrence indicates the message is from CFE_ES_DeleteApp instead of CFE_ES_RestartApp:

CFE_ES_WriteToSysLog (""CFE_ES_DeleteApp: Cannot Restart a CORE Application: %s.\n"",",bug,https://github.com/nasa/cFE/issues/309
"Remove references to ""CCSDS"" structures","**Is your feature request related to a problem? Please describe.**
Applications should NOT refer to the ""CCSDS"" data types and macros, as there should be no assumption of a particular message framing type at this level.

**Describe the solution you'd like**
Use the abstract types provided in `cfe_sb.h` rather than directly using `ccsds.h` types.

**Additional context**
Related to nasa/cfe#554

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/48
Document gatekeeper pattern in internal/local resource ID inline functions,"**Is your feature request related to a problem? Please describe.**
IsMatch functions check for NULL pointer, others don't:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.h#L160-L163
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.h#L173-L176

**Describe the solution you'd like**
Document justification behind pattern (IsMatch is used first, then all other's are ""safe"")

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1355
Wrong type of arguments to snprintf,"**Describe the bug**
Function call with incorrect argument type. This argument should be of type 'unsigned int' but is of type 'PCS_WIND_TCB *'.

**Expected behavior**
Same behavior, fix error

**Code snips**
https://github.com/nasa/PSP/blob/e3d28d85a49c849c79f83e7414be65a318a8f834/fsw/mcp750-vxworks/src/cfe_psp_exception.c#L205-L206

**System observed on:**
VxWorks 6.9/MCP750

**Additional context**
From CodeQL 
 Use ""%08lX"" as the format and explicitly cast the argument as ""(unsigned long)""

**Reporter Info**
Ariel Adams, MCSG Tech",non-bug,https://github.com/nasa/PSP/issues/362
Replace OS_ConvertToArrayIndex() with a macro,"JSC has noted that the compiler for their VxWorks target does not understand the C99 ""inline"" keyword.  

An inline function had been used as a compatibility bridge for the ""-ng"" versions of OSAL that require additional work to convert an OSAL ID to an array index.  Compilation was failing on this declaration.

Rather than making this an out-of-line function (the easiest approach) it would be cleaner and less of a performance hit to replace this direct call with a macro.  The macro can either call the conversion function or be a pass through.  
",bug,https://github.com/nasa/cFE/issues/152
Display extended version information from the build,"The CFE build currently contains a 4-part version number, i.e. ""6.4.1.0"".  This version number is is #define'd in a header file and is manually updated with each official release.

However, git and Cmake (see ticket #32) offer additional build information where the current git commitid and most recent tag name are built into a global object that is accessible at runtime.  When it is available, this extended build information should be displayed along with the manually updated official version number.

The major benefit here is that it updates automatically with __every__ commit, not just official releases.  It also indicates the whether the source code tree has been modified from the pristine version in the commit (""dirty"") or not.  It is extremely useful to have this information built into the executable in order to verify the correct binary is loaded as well as being able to reproduce running binaries when needed.


",non-bug,https://github.com/nasa/cFE/issues/44
Require definition of `CFE_CPU_ID_VALUE`,"**Is your feature request related to a problem? Please describe.**
CPU_ID should be explicitly defined, defaulted here:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/target/src/target_config.c#L48-L50

**Describe the solution you'd like**
Remove default

**Describe alternatives you've considered**
None

**Additional context**
From CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1308
Fork-originated Pull Requests not running github actions workflows,"**Describe the bug**

The current setup for the workflow runs on `push` instead of `pull_request` events so the tests are not running on pull requests from forks. 

**To Reproduce**
Create a pull request from a fork. 
See ""checks"" section for that pull request. 
You will notice that the ""Build and Test"" workflows are not activated.

**Expected behavior**
""Build and Test"" workflows are activated on pull requests and changes to them.

**Code snips**
If applicable, add references to the software.

**Additional context**
Add any other context about the problem here.
",bug,https://github.com/nasa/cFS/issues/169
Unused event ID,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1703] Unused event ID
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Tue Aug 10 20:51:47 2021

_Original Description_:
The event ID CF\_EID\_ERR\_PDU\_BAD\_RX\_MSG\_SIZE appears to be unused.",non-bug,https://github.com/nasa/CF/issues/26
Update EVS optional log requirements (no longer optional),"**Is your feature request related to a problem? Please describe.**
The following are listed as OPTIONAL, #609/#1129 removes the option:
cEVS3013 - EVS: Clear Local Event Log
cEVS3014 - EVS: Set Event Logging Mode
cEVS3015 - EVS: Write Local Event Log To File
cEVS3016 - EVS: Write Local Event Log Order
cEVS3018 - EVS: Housekeeping Message
cEVS3108 - EVS: Store Message In Event Log
cEVS3108.1 - EVS: Store Message In Event Log - Set Full Flag
cEVS3108.2 - EVS: Store Message In Event Log - Increment Overflow Counter
cEVS3108.3 - EVS: Store Message In Event Log - Log Full Behavior
cEVS3202 - EVS: Initialize Full Flag To False On Power On Reset
cEVS3203 - EVS: Initialize Logging Mode On Power On Reset
cEVS3207 - EVS: Preserve Event Log Reset Mode On Processor Reset
cEVS3208 - EVS: Preserve Log Full State On Processor Reset
cEVS3210 - EVS: Preserve Log Overflow Counter On Processor Reset

**Describe the solution you'd like**
Update requirements, not optional.

**Describe alternatives you've considered**
None

**Additional context**
Note once services transition to modules (#972), custom implementations could replicate EVS w/o a log if really needed.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1131
Split out ci_lab platform config from app header,"Originated by abrown4 (59 on babelfish):

The platform-specific config (that I need to change for a deployment) is in the ci_lab_app.h, and thus common to all ci_lab builds. However, I want to build and deploy multiple cfs instances, each with a ci_lab. [It _is_ simple and handy.]
Propose moving the platform-specific info into ci_lab_platform_cfg.h, like the other apps.
",non-bug,https://github.com/nasa/ci_lab/issues/2
Command valid and rejected counters do not increment correctly,"For certain invalid commands CF will increment the valid counter. For certain valid commands CF will increment the invalid counter. The CF_TsnChanAction function does not appear to correctly interpret the return status from certain sub-functions that return the count of matched transactions. It assumes a non-zero return value is failure, but actually it is the count of transaction matches.

This can be seen with the following command opcodes: ABANDON, CANCEL, SUSPEND, RESUME

",bug,https://github.com/nasa/CF/issues/125
Time Services Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
TIME requirements out of date

**Describe the solution you'd like**
Update requirements.  

NOTE 1 - this is not major reworking of the requirements/design (#302), but focused on just bringing the requirements up to date.  Future issues will address significant development/rework.

NOTE 2 - MET functionality still applies here (not all abstracted to PSP) to support the virtual MET capability (hardware MET is not required).

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cTIME2000- HK requirement not consistent (update wording)
- cTIME2001 - wording scrub, remove ""time server and time client"" inconsistent pattern
- cTIME2002 - wording scrub, remove ""time server and time client"" inconsistent pattern
- cTIME2007 - Update summary, it's really compute SCTF given current time
- cTIME2008 - adjust CTF requirement (delete, redundant with add/subtract requirements)
- cTIME2010 - summary: select tone signal source, of PRIMARY vs REDUNDANT (although not explicitly defined), SetSignalCmd
- cTIME2012 - force to flywheel (not just flywheel), then will not update time based on Tone Data/Signal.
- cTIME2012.1 - propagates MET locally (update wording), uses internal best guess for MET.
- cTIME2013 - remove ""second and subsecond"", overdetailed and wrong, really SCTF
- cTIME2014 - remove ""second and subsecond"", overdetailed and wrong, really SCTF
- cTIME23XX - all requests remove extra language (format specified)
- cTIME2701 - time at tone window not handled by TS (delete, hardware), sent by request/cmd
- cTIME2702 - update MET (delete generic functionality requirement, PSP/hardware)
- cTIME2703 - MET resolution (delete, PSP/hardware)
- NEW API Requirements:
    - cTIME2315 - Provide time at tone message functionality given MET, provide in message like HK
    - cTIME2316 - Tone Data given GPS
    - cTIME2317 - Tone Data given Time
    - cTIME2318 - Register synch callback (callback at Tone Signal receipt)
    - cTIME2319 - unregister synch callback  (UnregisterSynchCallback)
    - cTIME2320 - get clock info state flags for TIME (GetClockInfo)
    - cTIME2321 - convert a given MET to SC Time (MET2SCTime)
    - cTIME2322 - Local1HzISR, API to trigger 1 HZ processing
    - cTIME2323 - ExternalTone, API to trigger Tone processing
- NEW Cmd Requirements:
    - cTIME2012.2 - External Time Update Mode - Use Updates (update timekeeping when Tone Signal and Data pair are received)
    - cTIME2015 - ToneSendCmd just sends Tone Data message (no time update)
    - cTIME2016 - ToneData (Cmd), triggers receipt of Tone Data processing
    - cTIME2017 - ToneSignal (Cmd), triggers Tone signal processing
    - cTIME2018 - OneHz (Cmd), triggers 1Hz cycle processing
    - cTIME2019 - set MET, sets abstract MET (not hardware met), SetMETCmd
    - cTIME2020 - (AddDelayCmd)
    - cTIME2021 - (SubDelayCmd)
- NOTE: CFE2FSSeconds/FS2CFESeconds deleted per #519 
- NOTE: SetSourceCmd due refactor/fix per #302

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/518
"CF tests assume ""assert"" is available but do not include assert.h","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1788] CF tests assume ""assert"" is available but do not include assert.h
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 18:48:45 2021

_Original Description_:
Some CF test utility functions call ""assert"" on various items (e.g. Any\_file\_directive\_t\_Except).  
  
Several issues with this:  
- The ""assert.h"" system header was not included  
- The condition ""ERROR\_RETRIEVING\_ANY\_VALUE"" is a constant that is not even 0, so the assert will generally pass (it is boolean true).  
  
Recommendation is to use the UtAssert\_Abort() function instead.",bug,https://github.com/nasa/CF/issues/52
Add support for RTEMS 5.1 - sample_defs toolchain file updates,"**Is your feature request related to a problem? Please describe.**
The cFS Bundle currently supports RTEMS 4.11. Now that RTEMS 5.1 has been released, I would like to update the necessary components to support RTEMS 5.1 on the pc-rtems platform. This involves minor modifications to the cfe repository, the PSP repository, and the OSAL repository. These changes can be done in such a way that preserves the current RTEMS 4.11 support and adds RTEMS 5.1 support.

**Describe the solution you'd like**
For the cFE repository, the only changes needed are to the sample_defs toolchain files. I need to make a small modification to the 4.11 RTEMS toolchain file, and add a new toolchain file for RTEMS 5.

**Describe alternatives you've considered**
Alternatives include:
- Not supporting newer versions of RTEMS, but several projects will depend on RTEMS 5 support.
- Dropping RTEMS 4.11 support and just making the changes needed for RTEMS 5, but there may be projects that depend on RTEMS 4.11. We can consider dropping RTEMS 4.11 support on a future release.


**Additional context**

**Requester Info**
Alan Cudmore / NASA GSFC Code 582",non-bug,https://github.com/nasa/cFE/issues/914
Fix duplicate structure definitions in table unit test,"Similar to trac #55 for the mempool structures --

The dispatch table structure definitions are duplicated in the cfe_tbl_task.c and tbl_UT.h.  The tests will break if these diverge.

A more suitable place for these would be in cfe_tbl_task_cmds.h so the same definitions can be included in both places without duplication.

",bug,https://github.com/nasa/cFE/issues/62
"Implement Doxygen front page concept, clean up documentation, resolve doxygen warnings","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
 - Apply frontpage concept/documentation framework (mainpage can't be included in larger document)
 - Clean up/clarify sections and apply suggested patterns
 - Resolve warnings from building doxygen documentation

**Describe the solution you'd like**
See above.

**Describe alternatives you've considered**
None

**Additional context**
- nasa/cfe#2058
- nasa/cfe#2065
- nasa/osal#1228
- nasa/osal#1232

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/204
VxWorks 6.9 does not provide `uintmax_t` type,"**Describe the bug**
A new compiler error has appeared on the vxworks-6.9 build:
```
/home/jphickey/cfecfs/github/osal/ut_assert/src/utstubs.c: In function 'UT_Hook_GetArgPtr':
/home/jphickey/cfecfs/github/osal/ut_assert/src/utstubs.c:602: error: expected specifier-qualifier-list before 'uintmax_t'
```

**To Reproduce**
Build using the VxWorks 6.9 toolchain

**Expected behavior**
Should build successfully

**System observed on:**
VxWorks 6.9, gcc 4.3.3 on gs582w-cfelnx lab machine.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/509
HK Count track times packet is not found,"In file hk_utils.c function HK_SendCombinedHkPacket recommendation:

HK app hk packet could keep track of number of times packet is not found. HK_AppData.MissingDataCtr could be repurposed for this.

Finding from code review

Imported from GSFCCFS-991",non-bug,https://github.com/nasa/HK/issues/4
Expand use of the BSP specific configuration registry across the rest of the resources,"**Is your feature request related to a problem? Please describe.**
#1155 implements use of the registry for vxworks tasks but generically supports all resources.

**Describe the solution you'd like**
Add to all implementations/resources where implementation layer flags can be passed in.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA?GSFC
",non-bug,https://github.com/nasa/osal/issues/1156
"Use %s, _func_ for all syslog messages","**Is your feature request related to a problem? Please describe.**
Function name copy/paste mistakes and various reporting formats used in `CFE_ES_SysLogWrite_Unsync` and `CFE_ES_SysLogWrite`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L238

**Describe the solution you'd like**
Use a common format `%s: message, _FUNCTION_, ...`

**Describe alternatives you've considered**
Could use a macro

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @dmknutsen - may require test update when checking for specific messages
",non-bug,https://github.com/nasa/cFE/issues/1325
Static analysis issues relative to flight code,"Handful of static analysis issues in the ""red"" identified (non-Style issues).  Need to resolve these.

Filter: -file:elf -file:ut -file:cfe -file:os -file:cf_ -file:_lab_app.c !(significance:style)

should resolve and/or disposition the higher ranked ones at minimum.

Note license restricts publishing issues.

Imported from GSFCCFS-1958",bug,https://github.com/nasa/FM/issues/19
Unit test fails when VER_2 headers are used,"**Describe the bug**
Event test strings are different when the MsgId size changes, but test looks for explict message:
https://github.com/nasa/sample_app/blob/c1348d6fcb7f911396c9928a1779ddad6fe0c339/fsw/src/sample_app.c#L274-L277

https://github.com/nasa/sample_app/blob/c1348d6fcb7f911396c9928a1779ddad6fe0c339/unit-test/coveragetest/coveragetest_sample_app.c#L290

https://github.com/nasa/sample_app/blob/c1348d6fcb7f911396c9928a1779ddad6fe0c339/unit-test/coveragetest/coveragetest_sample_app.c#L549

!VER_2 = `0xffff`, VER_2 =`0xffffffff` (or capitalized based on the format string)

**To Reproduce**
Set MESSAGE_FORMAT_IS_CCSDS_VER_2, build and run unit tests.

**Expected behavior**
Unit tests should pass with either configuration

**Code snips**
See above.

**System observed on:**
 - Hardware: cFS Dev VM
 - OS: Ubuntu 18.04
 - Versions: main bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/87
Make OSAL tests more autonomous,"The OSAL tests (in the ""tests"" directory, NOT ""unit-test"") provide reasonable ""black-box"" style testing of the OSAL features via the public API.  However they are currently implemented with the expectation of being explicitly run by a user at the console, not from an automated script:
* Most run infinitely, requiring a CTRL+C to stop the test
* They do not count errors or provide a status code to indicate whether the test worked as expected or not.

In order to integrate with a continuous integration system, these tests need to be more automated.

This ticket is to add a ""script-mode"" feature to the tests which:
* Checks for the expected conditions and maintains an error counter of any tests that did not satisfy expected conditions
* Limits the time of execution and exits the test automatically (no CTRL+C)
* Returns a non-zero exit code if any errors occurred (for scripting)

(Note: this does not apply to the ""unit-tests"" directory which is more white-box style code coverage testing -- this will possibly need other tweaks to work with a CI system and that is a separate ticket)
",bug,https://github.com/nasa/osal/issues/29
Report PSP version info in ES HK telemetry,"**Is your feature request related to a problem? Please describe.**
Currently the ES HK TLM message includes the CFE and OSAL versions, but not PSP.

Also, as noted in nasa/osal#821, using preprocessor macros to get OSAL/PSP version info means its evaluated when CFE source code is compiled, and the result actually compiled into CFE.

**Describe the solution you'd like**
Add PSP version info to HK TLM.

Also CFE should use the runtime API to get the version info, such that the info actually comes from the PSP/OSAL library, respectively.

**Additional context**
See also nasa/cfs#200

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1206
CI updates - add static analysis and format in workflow,"**Is your feature request related to a problem? Please describe.**
Travis-CI not transitioned to github actions

**Describe the solution you'd like**
Transition CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/66
CFE_TBL_Load should produce clearer message when it has a file header mismatch,"**Is your feature request related to a problem? Please describe.**
CFE_TBL_LoadFromFile compares the application's name + table name with the string in the header of the file. If you configure the cfe_es_startup.scr with a different application name than what is expected in the header, you get an obtuse ""Fail to load Tbl '<app>.<tbl>' from '/cf/<file>.tbl'"" not making it clear that it's purely a mismatch of the header.

**Describe the solution you'd like**
At minimum it should indicate that the matter is a mis-match of the header and the expected header (which means that the file is there, for example). Better would be to report the actual contents of the header and the expected value. The EID for the error is unique so CFE_TBL_Load can produce an event with more specific text.

**Describe alternatives you've considered**
Could have CFE_TBL_LoadFromFile generate the event, but that's an ""internal"" fn so probably not.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/503
Const correctness on input parameters,"**Is your feature request related to a problem? Please describe.**
Missing const for a few parameters.

OSAL_set:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L75

final_id (need to confirm):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L1106

**Describe the solution you'd like**
Add const

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/854
Please provide va_list variants of variadic functions,"Variadic functions in C can't easily be wrapped in another variadic function. To resolve this issue, the C standard library provides variants of its variadic functions that take a {{{va_list}}}. For example, {{{printf}}} has the {{{vprintf}}} variant.

Please provide similar variants for the OSAL's variadic functions. The implementation would be simple: the majority of the function's logic can reside in the {{{va_list}}} version, and the variadic function can become thin a wrapper around the {{{va_list}}} version.

At the time of submitting this issue, the only variadic function in OSAL is `OS_printf`.

See also [cfs_cfe:218 cFE issue 218].",non-bug,https://github.com/nasa/osal/issues/216
Allow SCH_LAB to schedule faster than 1Hz,"**Is your feature request related to a problem? Please describe.**
Some FSW apps require a wakeup event faster than 1Hz.  When debugging these apps it is not ideal to be forced to deploy the full SCH, since its configuration is much more involved.

**Describe the solution you'd like**
Keep using SCH LAB which is intended for debugging apps, but be able to send wakeups faster than 1Hz.

**Describe alternatives you've considered**
Deploy full SCH (complicated, and a distraction from the real objective of debugging some other app).

**Additional context**
If CF is run at only 1Hz wakeup it would take a long time to transfer files.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/sch_lab/issues/103
Static analysis issues relative to flight code,"Handful of static analysis issues in the ""red"" identified (non-Style issues).  Need to resolve these.

Filter: -file:elf -file:ut -file:cfe -file:os -file:cf_ -file:_lab_app.c !(significance:style)

should resolve and/or disposition the higher ranked ones at minimum.

Note license restricts publishing issues.

Imported from GSFCCFS-1958",bug,https://github.com/nasa/LC/issues/24
Utilize CMake interface libraries,"**Is your feature request related to a problem? Please describe.**
See conversation around https://github.com/nasa/cFE/pull/585#discussion_r411528313

Interface libraries may be a cleaner approach than current implementation

**Describe the solution you'd like**
Consider utilizing interface libraries

**Describe alternatives you've considered**
Leave as-is

**Additional context**
See #585 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/626
Broken links to example code in documentation,"At some point the links to the example code have been broken and now appear empty. This problem, on first glance, only seems to affect the `eci_interface.h` file referenced for the [creating eci interface](https://nasa.github.io/ECI/creating_eci_interface.html) but we should probably check to make sure this didn't affect anything else.",non-bug,https://github.com/nasa/ECI/issues/49
Remove get message checksum requirement,"**Is your feature request related to a problem? Please describe.**
As part of the message module refactor the CFE_SB_GetChecksum external API was determined to have no use case.

**Describe the solution you'd like**
Remove associated requirement:
cSB4326 - SB: Get Checksum

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1714
Remove device driver requirements,"**Is your feature request related to a problem? Please describe.**
Device driver requirements are unimplemented.  Hardware libraries or apps already cover the required functionality.  Unloading a library is risky/complex, better to remove from startup script and restart.

**Describe the solution you'd like**
Remove device driver requirements.

**Describe alternatives you've considered**
Requirements were debated, no solid use case to justify the additional complexity.

**Additional context**
NA

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/377
Commands using files should utilize new filename parser,"**Is your feature request related to a problem? Please describe.**
Issue #981 + PR #1156 introduces a new FS utility API to parse a filename which is aware of the expected path and extension, and will default to these if unspecified in the input.  The initial PR only applies it to ES startup script.

But this creates an inconsistency; now you can put just a basename e.g. `ci_lab` in the startup script, but passing the same string as the filename to `CFE_ES_START_APP_CC` command will __not__ work, which doesn't seem right.

**Describe the solution you'd like**
For consistency in operation CFS should also employ the same filename parser in all commands that accept a filename.  

**Additional context**
It is (intentionally, by design) fairly trivial to update a current call to `CFE_SB_MessageStringGet()` to use the filename-aware alternative instead.  

The only minor issue/concern is that the new function has more input validation than `CFE_SB_MessageStringGet()` does, so it is more important to check the return status.  So doing this generally introduces another check + path to generate the error event, so a UT test case needs to be added.  But that's about it.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1164
Some symbols not making it into final core executable file,"In the current ""cmake""-based build scripts, the final cfe core executable file is missing symbols that are not directly referenced in other parts of CFE.  A notable example of this is {{{CFE_TBL_Register}}}.

Because these are defined in a shared library, the linker is simply not including them as they do not serve to define any unresolved symbols from the linker's point of view.

The {{{-rdynamic}}} option is already being used, but it does not apply since the CFE core code is in a static library.

There are several approaches to this problem:

1. Use the {{{MODULE}}} library type instead of making a static library for the CFE core.  This way the {{{-rdynamic}}} export option will be applied to all the cfe code as it should be and therefore all functions included in the final link.  **This is the correct, officially supported solution** but it requires cmake v2.8.8+ (released 2012).  However RHEL still includes a very old version of cmake from 2009 with their distribution so going this route forces users of RHEL to go to other sources for a newer cmake.

2. Use the {{{--whole-archive}}} linker option to force the linker to include all objects from the CFE core, PSP, and OSAL libraries during the link.  This works, but the {{{--whole-archive}}} is specific to the GNU ld linker and is unlikely to be supported on any other linkers.  However, it appears that all targets supported by CFE use the GNU ld linker so this may not be a problem.

3. Create a ""fake"" function that calls all external functions, which causes them to be undefined and therefore included in the link.  This does not change linker options or build scripts so should work with ANY linker and the old version of cmake, but it wastes some memory as this function is still loaded into memory, and it will require maintenance to keep it up to date.





",bug,https://github.com/nasa/cFE/issues/96
Critical tables do not preserve filename of last loaded table file,"Table services issue reported by OCI:

cFE Table Services provides a feature for having critical tables. These tables preserve their information across processor and application resets. The TO application assumed that this included the filename of the last loaded table file. However, it does not. This should be fixed in the CFE_TBL application. Also, there was an MKS DCR that addressed this issue but it was never implemented. ",bug,https://github.com/nasa/cFE/issues/282
CFE_SB_ReceiveBuffer does not return when the provided pipe is destroyed,"**Describe the bug**
If a pipe is destroyed while `CFE_SB_ReceiveBuffer()` is waiting with `CFE_SB_PEND_FOREVER`, `CFE_SB_ReceiveBuffer()` either blocks indefinitely or returns `CFE_SUCCESS` (non-deterministically). This behavior is demonstrated in the proposed test case in PR #1777.

This is situation is only realizable in a multi-task context. The functional tests included in #1651 / #1657 do not test this behavior because they do not create multiple tasks in which one task is waiting on a blocking call to `CFE_SB_ReceiveBuffer()` while the pipe provided to it is deleted.

**To Reproduce**
See test case in PR #1777 

**Expected behavior**
The expectation (albeit not documented) is that if a pipe is deleted while waiting on `CFE_SB_ReceiveBuffer()`, that `CFE_SB_ReceiveBuffer()` would return immediately with an error code.

**Code snips**
See PR #1777 

**System observed on:**
See PR #1777 

**Additional context**
See PR #1777 

**Reporter Info**
Jonathan Bohren, Honeybee Robotics",non-bug,https://github.com/nasa/cFE/issues/1799
PC-RTEMS fixes from psp-1.3/cfe-6.5 testing,"During testing of psp-1.3/cfe-6.5 candidate, found a few things in need of attention in the pc-rtems PSP.",bug,https://github.com/nasa/PSP/issues/67
Incomplete coverage test for cfe_es_api.c,"**Is your feature request related to a problem? Please describe.**
current coverage: 97.7 %
Missing coverage for the following:

CFE_ES_SetAppState

```
     197             :         /* Caller error - invalid state */
     198           0 :         return;
```

CFE_ES_ReloadApp

```
     314           0 :            CFE_ES_SysLogWrite_Unsync (""CFE_ES_ReloadApp: Cannot Reload Application %s, File %s does not exist.\n"",
     315           0 :                                   CFE_ES_Global.AppTable[AppID].StartParams.Name,
     316             :                                   AppFileName);
     317           0 :            ReturnCode = CFE_ES_FILE_IO_ERR;
```

CFE_ES_ExitApp

```
     471           0 :           CFE_ES_SysLogWrite_Unsync (""Application %s called CFE_ES_ExitApp\n"",
     472           0 :                                  CFE_ES_Global.AppTable[AppID].StartParams.Name);
     473           0 :           CFE_ES_SetAppState(AppID, CFE_ES_AppState_STOPPED);
     474             : 
     475             :           /*
     476             :           ** Unlock the ES Shared data before suspending the app 
     477             :           */
     478           0 :           CFE_ES_UnlockSharedData(__func__,__LINE__);
     479             : 
     480             :           /*
     481             :           ** Suspend the Application until ES kills it.
     482             :           ** It might be better to have a way of suspending the app in the OS
     483             :           */
     484             :           while(1)
     485             :           {
     486           0 :              OS_TaskDelay(500);
```

CFE_ES_DeleteChildTask

```
    1272           0 :        CFE_ES_WriteToSysLog(""CFE_ES_DeleteChildTask Error: Invalid Task ID: %u\n"",(unsigned int)OSTaskId );
    1273           0 :        ReturnCode = CFE_ES_ERR_TASKID;
```

CFE_ES_GetAppIDInternal

`    1758           0 :       *AppIdPtr = 0;`

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/465
TBL - Dump Table Registry Data Command Can Hog CPU (GSFC DCR 23031),"The GSFC NICER FSW team discovered that it takes approximately 1 second to process the Dump Table Registry command when there are 250 RTS tables and that lower priority tasks generate various error events related to not getting an opportunity to run. Adding a platform configuration definition to insert task delays into the process loop will increase the time necessary for CFE_TBL to finish the command but will allow lower priority tasks to run while the command is being processed.

Also, creating some test code that puts performance markers around the file i/o calls within the command processor may identify where the bulk of the command process time is spent. It may be possible to reduce the command execution time by optimizing the command handler code if the bulk of the execution time is not being spent inside the file system.",bug,https://github.com/nasa/cFE/issues/139
OSAL public/private data structure delineation,"This ticket was originally part of ticket #36 but the change was independent and significant enough to warrant breaking this out into a separate review item.

This will fix some issues with the OS Module API:
* CPU addresses must be stored using the ""cpuaddr"" type, not uint32.

* The ""OS_module_record_t"" should be made into an OS-dependent structure, as the different OS layers may have different sets of data that they need to retain for loaded modules.  This will also make it more consistent with the other APIs -- e.g. Tasks, Queues, Semaphores all define their internal record structures in the OS-specific implementation and not part of the public API.

* The OS_ModuleInfo() call should return a standardized structure and not the direct internal record.  This will also be more consistent with the way the other APIs do this where they have a separate ""prop"" structure that is returned that is defined as part of the public API.




",non-bug,https://github.com/nasa/osal/issues/54
API header documentation doesn't match c file documentation,"**Is your feature request related to a problem? Please describe.**
Currently the API's are documented in both the .h and .c, and they aren't always consistent.  See:

https://github.com/nasa/cFE/blob/5802d229ce047185e9247192f0fa328219d54b78/fsw/cfe-core/src/inc/cfe_sb.h#L947-L968

vs

https://github.com/nasa/cFE/blob/5802d229ce047185e9247192f0fa328219d54b78/fsw/cfe-core/src/sb/cfe_sb_util.c#L228-L241

**Describe the solution you'd like**
Document in header only (remove duplicated info in .c), and reference from c files

**Describe alternatives you've considered**
None

**Additional context**
Requested by JP/PACE

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/528
Mismatched Variable Types in Data Structures ,"**Describe the bug**
While auditing cFE tlm packets for 64 bit alignment issues, I noticed that we have instances of mismatched variable types in data structures.  This results in data being truncated/corrupted.

Example:
In cfe_es.h::CFE_ES_AppInfo_t
There are multiple addresses (StartAddress, CodeAddress, etc) declared as uint32.  They should be declared as cpuaddr variables - similar to CFE_ES_AppStartParams_t:StartAddress and OS_module_address_t:code_address.  

Another example is the priority, stackSize, and Exception Action variables.  See below for declaration trace:

CFE_ES_ParseFileEntry:
unsigned int Priority
unsigned int StackSize
unsigned int ExceptionAction

CFE_ES_AppCreate:
uint32  Priority
uint32  StackSize
uint32  ExceptionAction

CFE_ES_AppStartParams_t:
uint16  ExceptionAction
uint16  Priority
uint32  StackSize

CFE_ES_AppInfo_t:
uint16   Priority
uint16   ExceptionAction
uint32   StackSize

**Reporter Info**
Dan Knutsen
NASA/Goddard
",bug,https://github.com/nasa/cFE/issues/663
CMake script cleanup,"The CMake build scripts could benefit from some general cleanup prior to release of CFE 6.6.  In particular:

- Some comments are obsolete or incorrect
- There is some dead code or broken options present
- Some refactoring would improve readability and maintenance

The GHAPS project did some cleanup here and I will push a commit under this ticket containing the modifications",non-bug,https://github.com/nasa/cFE/issues/234
 Parameter CommandData hides a global variable with the same name. [lgtm],"**Describe the bug**

cfe_psp_start.c
```
void CFE_PSP_ProcessArgumentDefaults(CFE_PSP_CommandData_t *CommandData)
--
  | Parameter CommandData hides a global variable with the same name.
```

**To Reproduce**
Steps to reproduce the behavior:
1. build against lgtm

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/PSP/issues/122
Tables are not built for static apps,"**Describe the bug**
Tables are not built for static apps, only dynamic apps.
(only for apps in TGT\<x\>_APPLIST, not for apps in TGT\<x\>_STATIC_APPLIST)

**Expected behavior**
Tables should be built for both types of apps

**Code snips**
add_cfe_tables() loops over APP_INSTALL_LIST:
cfs/cmake/arch_build.cmake/line:120:
```
    foreach(TGT ${APP_INSTALL_LIST})
     <... snip ...>
      # IMPORTANT: This rule assumes that the output filename of elf2cfetbl matches
      # the input file name but with a different extension (.o -> .tbl)
      # The actual output filename is embedded in the source file (.c), however
      # this must match and if it does not the build will break.  That's just the
      # way it is, because NO make system supports changing rules based on the
      # current content of a dependency (rightfully so).
      add_custom_command(
        OUTPUT ""${TABLE_DESTDIR}/${TBLWE}.tbl""
        COMMAND ${CMAKE_C_COMPILER} ${TBL_CFLAGS} -c -o ${TBLWE}.o ${TBL_SRC}
        COMMAND ${MISSION_BINARY_DIR}/tools/elf2cfetbl/elf2cfetbl ${TBLWE}.o
        DEPENDS ${MISSION_BINARY_DIR}/tools/elf2cfetbl/elf2cfetbl ${TBL_SRC}
        WORKING_DIRECTORY ${TABLE_DESTDIR}
      )
      # Create the install targets for all the tables
      install(FILES ${TABLE_DESTDIR}/${TBLWE}.tbl DESTINATION ${TGT}/${INSTALL_SUBDIR})
    endforeach(TGT ${APP_INSTALL_LIST})
```
But, process_arch() doesn't populate APP_INSTALL_LIST for static apps:
cfs/cmake/arch_build.cmake/line:445:
```
  set(APP_INSTALL_LIST)
  foreach(APP ${TGTSYS_${SYSVAR}_STATICAPPS})
    message(STATUS ""Building Static App: ${APP}"")
    add_subdirectory(""${${APP}_MISSION_DIR}"" apps/${APP})
  endforeach()
```
only for dynamic apps:
cfs/cmake/arch_build.cmake/line:473:
```
  foreach(APP ${TGTSYS_${SYSVAR}_APPS})
    set(APP_INSTALL_LIST ${TGTLIST_${APP}})
    message(STATUS ""Building App: ${APP} install=${APP_INSTALL_LIST}"")
    add_subdirectory(""${${APP}_MISSION_DIR}"" apps/${APP})
  endforeach()
```
**System observed on:**
- cFE 6.7

**Reporter Info**
David DeGroote
Flight Software Engineer
1016 N.Lincoln Avenue
Pittsburgh, PA 15233
Dave.DeGroote@astrobotic.com",bug,https://github.com/nasa/cFE/issues/835
Add typedef and nonzero base for resource identifiers,"**Is your feature request related to a problem? Please describe.**
App IDs, Task IDs, Library IDs, and other resources are all represented by a basic `uint32` identifier, which starts at 0.

**Describe the solution you'd like**
There should be a separate `typedef` for these identifiers, and 0 should be reserved as an ""undefined"" value (like OSAL) such that:

- Control structures and globals which are `memset()` to zero will not alias valid entries if they contain IDs.
- Alleviates the need for a separate `RecordUsed` boolean - 0 can indicate an unused entry, nonzero indicates a used entry 

This makes everything consistent as well as being simpler and safer.

**Additional context**
Type should initially be a `uint32` which makes this backward compatible for apps.
After this change IDs can no longer be directly used as array indices.  This has already been removed/fixed in CFE itself in previous PRs.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/894
Apply style formatting (release candidate prep),"**Is your feature request related to a problem? Please describe.**
Code has diverged from automated style.

**Describe the solution you'd like**
Apply automated style formatting.

**Describe alternatives you've considered**
None

**Additional context**
Suggest adding as a check in workflow until release.  Style has been very stable, should be manageable to enforce at least in the short term (release candidate and release prep).  Could enforce just on RC branch(es) if there's an issue w/ general enforcement.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/769
pc-linux64,"Create a PSP for x86_64 on Linux. This can serve as a development platform for code targeting the ARM Cortex-A53, for example.",non-bug,https://github.com/nasa/PSP/issues/86
Add pc-rtems PSP,"""pc-rtems"" is a PSP implemented for running CFE on standard PC hardware using the RTEMS OS.

It is mainly targeted at debugging or proof-of-concept validation using QEMU as an emulator to provide a virtual PC hardware.

It can also potentially be used as a build target for bamboo builds to ensure that all code builds, links, and runs properly using RTEMS.

",non-bug,https://github.com/nasa/PSP/issues/13
CMake-based source selection for RTEMS toolchain,"Do a CMake-based source selection for

```
 cmake/sample_defs/toolchain-i686-rtems5.cmake
SET(OSAL_SYSTEM_OSTYPE                  rtems)

# This is for RTEMS 5 specific ifdefs needed by the OSAL
ADD_DEFINITIONS(-D_RTEMS_5_)
```

Note that we should only need to set `CFE_SYSTEM_PSPNAME` in the current build scripts. The others are implied. Could simplify here.

```
cmake/sample_defs/toolchain-i686-rtems5.cmake
SET(CFE_SYSTEM_PSPNAME                  pc-rtems)
SET(OSAL_SYSTEM_BSPTYPE                 pc-rtems)
SET(OSAL_SYSTEM_OSTYPE                  rtems)
```




_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/1031#discussion_r534336113_",non-bug,https://github.com/nasa/cFE/issues/1044
Update CI_LAB to use osal_id_t typedef,"**Is your feature request related to a problem? Please describe.**
CI_LAB is using `uint32` type to hold its OSAL socket ID.

**Describe the solution you'd like**
Should use the `osal_id_t` typedef instead.

**Additional context**
Part of ongoing effort to update all framework code to use the typedef for OSAL IDs.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/54
CFE_SB_ValidateChecksum implementation does not match description,"**Describe the bug**
CFE_SB_ValidateChecksum claims it returns true if not supported:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/inc/cfe_sb.h#L1314-L1316

but also claims it returns false:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/inc/cfe_sb.h#L1321-L1323

and then implements a false return:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_util.c#L398-L401

**To Reproduce**
Read the code.

**Expected behavior**
Consistency

**Code snips**
See above

**System observed on:**
N/A

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/733
Posix message queues leak.,"During testing, I notice that I sometimes get MSGQ test failures
despite having the ""queues per process"" configuration set to
a high enough value, and rebooting fixes the issue.

After one spate of reboots, I went and did some digging, and we
do seem to be actively leaking Posix Message Queues, at least
during testing: posix message queues have identities, and can
stick around when nobody has them open, and of course there is
a finite limit to them in the system.

Fortunately, /dev/mqueue shows us all of the queues that exist
in the system, and if you remove the entry in /dev/mqueue, the
message queue itself is removed.

I have implemented code in my testing scripts that aggressively
watches for message queue leaks during testing.

What I am seeing so far:

 - The CFE ""Run the Core until the deadman timer trips"" test
   can leave behind many queues.

 - The OSAL ""queue timeout test"" can leave behind a queue. 

It would be worthwhile to assure that only operations unique
to unit testing (such as ""kill -9 $CFECORE"" ...) leak these.
",bug,https://github.com/nasa/osal/issues/122
Update CFE_MSG_Message_t conversions to use CFE_MSG_PTR macro,"**Is your feature request related to a problem? Please describe.**
In nasa/cfe#1966 introduces a `CFE_MSG_PTR` macro which converts a cmd/tlm header object to a `CFE_MSG_Message_t*` pointer, which is intended to be used rather than assuming a specific member name (e.g. `.Msg`).

**Describe the solution you'd like**
Use the macro instead of assuming `.Msg` member name.

**Additional context**
Required when using generated headers, as the member name may not be ""Msg"" or may be further encapsulated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/ci_lab/issues/94
Subscribes to MsgId 0x0 256-actual_msgids times,"**Describe the bug**
Loops through the entire table of subscriptions and subscribes, any unset values in the table are 0 so subscribes to MsgId 0 over 200 times.

Shows up multiple times on startup:
`EVS Port1 42/1/CFE_SB 7: Duplicate Subscription,MsgId 0x0 on TO_LAB_TLM_PIPE pipe,app TO_LAB_APP`

**To Reproduce**
Any normal run.

**Expected behavior**
Only subscribe to requested message IDs.

**Code snips**
https://github.com/nasa/to_lab/blob/5adf513cb0211d51e25278258fd2dd9b64d5459a/fsw/src/to_lab_app.c#L227-L238

**System observed on:**
 - Hardware: cFS Dev 3
 - OS: Ubuntu 18.04
 - Versions: current bundle

**Additional context**
Likely due to subscription table conversion to a cFS table.

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/to_lab/issues/50
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2069
Comments/document cleanup relative to EVS/FS review (and #1294),"**Is your feature request related to a problem? Please describe.**
`CFE_FS_ReadHeader` parameter descriptions out of order:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs.h#L60-L72

""primary header"" not clear in `CFE_FS_Header_t` description, really it's the size of this header so tools can be agnostic: 
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_extern_typedefs.h#L216

s/Kog/Log/:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_private/fsw/inc/cfe_evs_log_typedef.h#L43

Typo, but could also just simplify: Get null terminated name for reporting, example below but in 10 copy/paste locations:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L752


**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1391
Replace questionable enum use,"**Is your feature request related to a problem? Please describe.**
Could conflict configurable OS_MAX_COUNT_SEMAPHORES and OS_OBJECT_TYPE_OS_COUNTSEM 
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-countsem.c#L55-L59

**Describe the solution you'd like**
Adjust implementation.

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/874
`CFE_PSP_TIMER_LOW32_ROLLOVER` defined but not used in vxworks timebase implementation ,"**Is your feature request related to a problem? Please describe.**
Defined here:
https://github.com/nasa/PSP/blob/4bf1eefc81738de9ed03d6ea0eb018ce03b0d92b/fsw/modules/timebase_vxworks/cfe_psp_timebase_vxworks.c#L55-L62

Expected use here:
https://github.com/nasa/PSP/blob/4bf1eefc81738de9ed03d6ea0eb018ce03b0d92b/fsw/modules/timebase_vxworks/cfe_psp_timebase_vxworks.c#L166-L185

**Describe the solution you'd like**
Use the define or delete it.  Note it's defined as 0 and the function returns 0 so behavior wouldn't change.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @superolmo",non-bug,https://github.com/nasa/PSP/issues/348
DS_AppProcessCmd - cyclomatic complexity of 20,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/DS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15. [ds_app.c::DS_ProcessCmd](https://github.com/nasa/DS/blob/04c01548a8eaaf5a1b4abb2b7d7548140e0cd6c0/fsw/src/ds_app.c#L343) unnecessarily violates the recommendation with a cyclomatic complexity of 20.

**Describe the solution you'd like**
Clean up DS_ProcessCmd such that it has a cyclomatic complexity of 15 or less.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/DS/issues/84
SCH_LAB does not support sending commands with arguments,"**Is your feature request related to a problem? Please describe.**
sch_lab does not support sending commands with arguments.  This is needed when scheduling messages such as LC's sample action point command & HK's send combined packet command.

**Describe the solution you'd like**
sch_lab supports sending commands with arguments.

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/sch_lab/issues/143
Connect compiler warnings to test results parser,"After compiling, scan the resulting log for warning messages, and produce an output file presenting the warnings as ""test failures"" that can be observed (and quarantined) from within the Bamboo interface.

Interesting Design Goals:

 * Ability to configure patterns that group warnings
   that are closely related but scattered through the
   build logs (I'm OK with doing this by editing the
   warning-detecting AWK script, at least initially).

 * Ability to report ""test now passing"" for groups of
   warnings previously identified.

 * Fall back to a reasonably sane organizational method
   to present any warnings not captured by patterns above;
   GCC's ""-Wsome-warning-type"" tags are suggested.

Requirements too obvious to state:
 * Input is the ""warning"" lines from a compile
 * Build area path needs to be stripped from the input
 * Output is ""XML-ish"" files for Bamboo's JUnit parser


Yes, I'm already tinkering with a prototype ;)
",non-bug,https://github.com/nasa/osal/issues/62
Support for segment metadata on File Data PDU,"According to CCSDS 727.0-B-5, table 5-14, a file data PDU may have segment metadata included.  This is indicated by a flag being set in the main PDU header, which means the data PDU has two extra fields as well as the specified number of segment metadata information blocks.

Currently CF does not even check for this bit or the presence of these fields.  

While it may not be required to support it, on the receive side CF should be required to check for and actively discard/reject packets for which these bits are set (and therefore it does not understand).  Instead, as it stands right now, it will read the extra fields as part of the offset, and generally corrupt the entire file, if this flag is set by a sender.  Hopefully the CRC check would detect the corruption, but it shouldn't do that to begin with.

Current code that receives the file data header only reads a single offset field, there is no provision to check for and handle the extra fields here, just the offset:

https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L1003

",bug,https://github.com/nasa/CF/issues/129
Possible OSAL bug in OS_FileSysAddFixedMap not allowing FS_BASED mapping on VxWorks ,"**Describe the bug**
Unable to add a arbitrary filesystem path mappings with OS_FileSysAddFixedMap

**To Reproduce**
Call OS_FileSysAddFixedMap w/ parameters &fsid,""/"", ""/"", and it'll fail

**Expected behavior**
Entry added to OS_filesys_table

**Code snips**
 It looks like the error code from line 516 is propagated improperly to line 530 instead of just being used to set flags on 524, causing the finalization step to fail. 
https://github.com/nasa/osal/blob/9c74b1b5207b0eb40662731eb205dba3014de5ed/src/os/shared/src/osapi-filesys.c#L511-L530

**System observed on:**
 - SP0-s
 - OS: VxWorks 6.9
 - CFE 6.7.0+dev292, OSAL 5.0.0+dev247, PSP 1.4.0+dev76 (w/ additions for SP0-s)

**Additional context**
Attempting to add a mapping to / for netbooting off of FTP on SP0-s PSP. Mapping /cf/ to /cf/ used to work earlier this year. In addition, OS_FileSys_FindVirtMountPoint appears to fail to map to ""/"" if it's in the table (although I suppose it's not desirable to map / in production anyway, since it'd override all other mappings). 

**Reporter Info**
John N Pham, Northrop Grumman",bug,https://github.com/nasa/osal/issues/580
RTEMS silently discards non-selectable file handles in OS_SelectMultiple(),"**Describe the bug**
The conversion from the `OS_FdSet` to the internal `fd_set` inside OS_FdSet_ConvertIn_Impl() will ignore filehandles for which the `selectable` flag is not set.  The select() is then called _without_ this file included in the set, and the result is returned.

This is misleading because the user is not aware that the implementation ignored one (or more) if the filehandles in the set.    If the user requested it by including in the set, it should return an error to the caller, not silently ignore.

**To Reproduce**
Now exposed by unit tests in the current IC (this makes the function no longer return OS_ERR_OPERATION_NOT_SUPPORTED and the test that should be skipped is not actually skipped because of this).

**Expected behavior**
Return an error instead of silently ignoring the handle for which select() cannot be done.

**System observed on:**
RTEMS 4.11.3

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/921
Add UINT8 and UINT16 equivalents for UtAssert_UINT32_<Comparison> macros,"**Is your feature request related to a problem? Please describe.**
Using a UINT32 comparison for smaller uint types does not allow for roll-over situations that are considered a pass condition:
```
UtAssert_UINT32_EQ(Some_uint8_ValueUnderTest, UnknownStartValueThatHappensToBeMax_uint8 + 1);
```
outputs:
 &#x1F534;[ FAIL] 01.001 a_test.c:5 - Some_uint8_ValueUnderTest (0) == UnknownStartValueThatHappensToBeMax_uint8 + 1 (256)


**Describe the solution you'd like**
A UINT8  comparison could provide an output like this:
&#x1F7E2;[ PASS] 01.001 a_test.c:5 - Some_uint8_ValueUnderTest (0) == UnknownStartValueThatHappensToBeMax_uint8 + 1 (0)

Additionally, use could be made of the _desc_ argument in the actual call (UtAssert_GenericUnsignedCompare) to distinguish it from a UINT32 call and add pertinent information for the developer:
&#x1F7E2;[ PASS] 01.001 a_test.c:5  - Compare UINT8: SomeValueUnderTest (0) == UnknownStartValueThatHappensToBeMax + 1 (0)

**Describe alternatives you've considered**
Adding a typecast to every assert:
```
UtAssert_UINT32_EQ((uint8)SomeValueUnderTest, (uint8)(UnknownStartValueThatHappensToBeMax + 1));
```
which does provide decent output:
&#x1F7E2;[ PASS] 01.001 a_test.c:5 - (uint8)SomeValueUnderTest (0) == (uint8)(UnknownStartValueThatHappensToBeMax + 1) (0)

**Additional context**
The requirement for adding a typecast becomes cumbersome over time, but writing a line like this is simpler:
```
UtAssert_UINT8_EQ(SomeValueUnderTest, UnknownStartValueThatHappensToBeMax + 1);
``` 
and will provide just as much clarity, if not more.

**Requester Info**
Alan Gibson 
NASA/GSFC 587",non-bug,https://github.com/nasa/osal/issues/1196
Time Base API test introduced new format warnings,"**Describe the bug**
New warnings noted when building for RTEMS:
```
/home/joe/code/cfecfs/github/osal/src/tests/time-base-api-test/time-base-api-test.c:110:5: error: format '%d' expects argument of type 'int', but argument 4 has type 'int32' [-Werror=format=]
     snprintf(overMaxTimeBase, 12, ""TimeBase%d"", TimeBaseNum);
     ^
```

**To Reproduce**
Build code using `i686-rtems4.11` toolchain.

**Expected behavior**
Should build cleanly.

**System observed on:**
Cross compile for `i686-rtems4.11` on Ubuntu 20.04 host.

**Additional context**
Needs cast whenever fixed-width types are used with printf.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/505
cFE Application developer's guide hardware servicing app section out of date,"**Is your feature request related to a problem? Please describe.**
cFE Application Developers Guide.md has references to generic ISR APIs and other functionality that is not supported.

**Describe the solution you'd like**
Update https://github.com/nasa/cFE/blob/main/docs/cFE%20Application%20Developers%20Guide.md#412-hardware-servicing-application, section 4.1.2 ""Hardware Servicing"" Application

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFS#296

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1658
Posix Does Not Alert Users of Undefined Symbol During Load,"The posix OSAL implementation of the OS_ModuleLoad API simply returns OS_ERROR when a bundle fails to load.  This return error code provides no information for users to troubleshoot the cause of the load failure.  In many cases the load error is due to an undefined symbol in the load bundle.  The undefined symbol name may be captured in the string returned by the dl_error() function.  The information captured in the call to dl_error() should be printed via the OS_printf function and/or easily made accessible to users for troubleshooting.    

Note: The VxWorks OSAL implementation of the OS_ModuleLoad API (when OS_DEBUG_PRINTF is defined) will print information to the console when a module cannot be loaded.  Specifically the following OS_printf statement is used:

OS_printf(""OSAL: Error, cannot open application file: %s\n"",translated_path);

  ",non-bug,https://github.com/nasa/osal/issues/193
Transmit messages with sequence number updates,"**Is your feature request related to a problem? Please describe.**
Currently the `SCH_LAB_AppMain()` function invokes `CFE_SB_TransmitMsg()` to send the messages but the `IncrementSequence` parameter is set to `false`.  This means that all commands generated from SCH_LAB have the same sequence number - whatever was in the table, probably 0.

**Describe the solution you'd like**
Should increment sequence counter so the recipient sees a properly incrementing count on each message.   This can be used to detect a missed message among other things.

**Additional context**
Suggesting just changing this line (2nd parameter) from false to true:
https://github.com/nasa/sch_lab/blob/882846bb778432c8780555b9d4bef45535584174/fsw/src/sch_lab_app.c#L123

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sch_lab/issues/67
Support for multiple user-defined commands,"The current way the ECI handles commands by using the ECI_CMD_MID doesn't support any more than 1 custom command. This problem has to do with the limitation that when declaring the buffer/object to store the received command data, the ECI can't determine which object to use by only using the ECI_CMD_MID.

In particular, the problem can be isolated to the behavior for non-ECI_CMD_MID values in the default of the [switch statement processing commands](https://github.com/nasa/ECI/blob/master/fsw/src/eci_app.c#L1567). Changing the default behavior of this switch statement to always call `rcv_msg(msg, messageID, ActualLength, CMDPIPE)` rather than rejecting all command messages should give the desired behavior. Internal to the `rcv_msg` function, the same checks for the length and updates to the CmdErrorCounter still happen so no other changes should be needed.",bug,https://github.com/nasa/ECI/issues/50
CFE_SB_CreatePipe: Improve message when OS_QueueCreate fails,"Currently if `OS_QueueCreate` fails in `CFE_SB_CreatePipe`, the message is just `""CreatePipeErr:OS_QueueCreate returned %d,app %s""`. It would be valuable to show the name of the error rather than (or in addition to) the numeric error code. The `OS_GetErrorName` function may help here if it's available in all of the OSAL implementations.

It may be valuable to provide other details depending on the error. For example, the message in the case of `OS_ERR_NAME_TAKEN` could indicate the name of the pipe that was requested (and is already in use).",non-bug,https://github.com/nasa/cFE/issues/308
MM `int32` return codes and variables should be converted to `CFE_Status_t`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
MM has a few return codes (as well as local `status`/`return` variables which hold CFE return codes) that can be easily converted over to the `CFE_Status_t` typedef.

**Expected behavior**
Use the more expressive `CFE_Status_t` and improve consistency with cFS.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/MM/issues/72
Fix missing const warning with -Wdiscarded-qualifiers enabled,"**Is your feature request related to a problem? Please describe.**
Initialization discards const qualifier... warning in sb_UT.c with the following flags enabled:
`-Wall –Wstrict-prototypes –std=c99 –D_XOPEN_SOURCE=600 –pendantic –Wcast-align –Wwrite-strings`

**Describe the solution you'd like**
Add const (the internal variables are not modified).

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/429
DS file header should include additional metadata," DS currently stores a number of fields in the DS file header (DS_FileHeader_t), namely the time the file was closed, the file name, the file table index, and the file name type.

When reading DS-created files on other platforms with other configurations, it is possible to tease apart platform/mission-specific information but it would be easier to store the configuration in the header for easier analysis of DS files.

Additional information should include, at least, the CCSDS time format (CFE_SB_PACKET_TIME_FORMAT), the CCSDS secondary header (CC, timestamp) endian-ness, byte alignment, even the DS file header endian-ness for the close timestamp.

Also, as this will break compatibility with any DS-generated files from previous versions, including a DS header format version # should be included.

Imported from GSFCCFS-759",non-bug,https://github.com/nasa/DS/issues/6
vxWorks OSAL implementation should use static initialization where possible,"OSAL has a concept of tables of resources, where the user can configure some maximum amount of those resources. 

For example, the binary semaphore table could contain the static bytes of memory for the semaphore itself (using VX_BINARY_SEMAPHORE or an array of size VX_SEMAPHORE_SIZE taking care to maintain proper alignment) and then use semBInitialize on that memory when the OSAL wants to create a binary semaphore instead of allocating one from the resource pool. The user configures the maximum number of resources of each type, so it's ok to use the memory.

This enhancement would increase determinism in the system while maintaining the current API.",non-bug,https://github.com/nasa/osal/issues/172
Remove dependencies on deprecated SB APIs,"**Is your feature request related to a problem? Please describe.**
SB APIs deprecated in nasa/cFE#777

**Describe the solution you'd like**
Update to use MSG module.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sch_lab/issues/54
Remove addrlen switch duplication,"**Is your feature request related to a problem? Please describe.**
Switch to get addrlen repeated multiple times:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L188-L201
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L248-L262
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L484-L498
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L545-L561

**Describe the solution you'd like**
Calculate once and store or implement once and inline

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/864
"OS_TimerCreate() ""Unfreed"" Table Entries after failure","In ostimer.c, OS_TimerCreate(), ln 318, if the timer_connect() fails, the code attempts to delete the timer created by timer_create, but there is still an ""unfreed"" timer entry in the OS_timer_table.  This is a potential resource leak that would exhaust the timer table.

{{{
...picking up at ostimer.c, OS_TimerCreate(), line 306...
   status = timer_create(CLOCK_REALTIME, NULL, (timer_t *)&(OS_timer_table[possible_tid].host_timerid));
   if (status < 0) 
   {
      /* Commentary: here this table entry is properly freed up. */
      OS_timer_table[possible_tid].free = TRUE;
      return ( OS_TIMER_ERR_UNAVAILABLE);
   }

   status = timer_connect((timer_t)(OS_timer_table[possible_tid].host_timerid), OS_TimerSignalHandler, possible_tid );
   if (status < 0 )
   {
      status = timer_delete((timer_t)(OS_timer_table[possible_tid].host_timerid));
      /* Commentary: no cleanup here before the return! */
      return(OS_TIMER_ERR_UNAVAILABLE);
   }  
}}}

Also noted: the timer_delete status is unused, and may not matter at this point.",bug,https://github.com/nasa/osal/issues/89
MM clarify names of constants,"mm configuration parameters for sizes often don't include the word SIZE, making their purpose a little less clear.

Imported from GSFCCFS-1570",non-bug,https://github.com/nasa/MM/issues/11
Integrate CFE_TIME with OSAL timebase API,"The enhancement that adds ""timebase"" functions to OSAL was approved and merged in [cfs_osal:15].

With this feature, CFE_TIME can now set up its own 1Hz callback function.  This is the final/complete solution to the race condition issue described in [cfs_psp:23], because CFE TIME can request the 1Hz callbacks after the rest of initialization is fully complete (and not before that time).

",non-bug,https://github.com/nasa/cFE/issues/111
CF invokes CFE_MSG_Init with size of 0,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The 3rd parameter of `CFE_MSG_Init()` is supposed to indicate the actual size of the structure/buffer being initialized.  In general, this must be _at least_ the size of the primary header in order to be valid.

CF (at first) passes this as 0, then overwrites this with the real size later on.

The problem is, a size of 0 is totally invalid, and to be correct, `CFE_MSG_Init()` should not be writing any values into a structure that is smaller than the size of a primary header, as this is an error.  Writing any value into a struct of size 0 is a write-beyond-bounds error, and thus the fact that the default CFE_MSG_Init() even allows this is a bug.

**To Reproduce**
Run CF with a proper implementation of `CFE_MSG_Init()` - i.e. one that verifies the size is valid.  When passed a size of 0, none of the header fields will be set (correct behavior).  This results in the buffer being in an indeterminate state, and the MsgId will not be set.

**Expected behavior**
The MsgId needs to be set by the call to `CFE_MSG_Init`

**Code snips**
https://github.com/nasa/CF/blob/38cfee8a2284fc7605e6fb2b2556b528dcf62499/fsw/src/cf_cfdp_sbintf.c#L120-L121

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/CF/issues/401
Update the cmake/sample_defs/default_osconfig.cmake to be just overrides/changes from osal/default_config.cmake,"**Is your feature request related to a problem? Please describe.**
default_osconfig.cmake repeats many of the settings with the same selection as in default_config.cmake, confusing dependency

**Describe the solution you'd like**
Remove duplication, document in default_osconfig.cmake that it's for overriding values in default_config.cmake.

**Describe alternatives you've considered**
None

**Additional context**
Came up when trying to figure out why OSAL coverage test results were different at the bundle level vs osal level, wasn't clear that default_config.cmake was being used and hard to sort out what's actually being changed in default_osconfig.cmake

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1343
Question: do you notify contributors when their contribution first takes flight?,"I'm thinking of finding something simple to fix for fun, and this would be a huge motivation 😄 ",non-bug,https://github.com/nasa/cFS/issues/128
CFE_SB_GetPipeName stub doc references UT_pipename?,"The documentation for the CFE_SB_GetPipeName stub references setting UT_pipename...which AFAICT is not defined/used. I'm assuming that users should use UT_SetDataBuffer(UT_KEY(CFE_SB_GetPipeName)...).

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L204",non-bug,https://github.com/nasa/cFE/issues/1059
Unreachable code in posix OS_BinSemCreate_Impl,"**Is your feature request related to a problem? Please describe.**
Can't reach:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/posix/src/os-impl-binsem.c#L217-L220

**Describe the solution you'd like**
Refactor to eliminate dead code.

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/803
User Guide Doxygen cutting parts out ,"**Describe the bug**
There are parts of the User Guide that when formatted by Doxygen are causing parts of the content to get cut out and not included. I happened to find one but imagine there are others. 

**To Reproduce**
The one example I found was on page 317 for 37.30.2.1 CFE_TBL_Register() The TblOptionFlags is missing the last 2 sentences of CFE_TBL_OPT_CRITICAL.  

The User guide says 
• CFE_TBL_OPT_CRITICAL- When this option is selected, the Table
Service will automatically allocate space in the Critical Data Store (CDS)
for the table and insure that the contents in the CDS are the same as the
contents of the currently active buffer for the table. This option is mutually
exclusive of the CFE_TBL_OPT_USR_DEF_ADDR and
CFE_TBL_OPT_DUMP_ONLY options. It should also be noted that the


**Expected behavior**
No information should be lost by Doxygen formatting.

**Code snips**
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/inc/cfe_tbl.h#L226-L235

**System observed on:**
 - Adobe Acrobat Reader 2017

**Reporter Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1183
Consider making the CRC size configurable,"There are two CRC algorithm types specified in the platform config. Are both of these using 32-bit CRC? What if we add another CRC algo later that isn't 32-bit? It might make sense to define the type that holds a CRC result in platform config as well.

Comment is on the CS_ComputeEepromMemory function regarding the uint32 ComputedCSValue parameter.

Imported from GSFCCFS-1326",non-bug,https://github.com/nasa/CS/issues/15
Provide a walk through of the main components of the ECI,We've had a large amount of questions asking for an introduction to how to configure the ECI. This should be part of a larger scale effort to document ECI up to a standard of basic usability.,non-bug,https://github.com/nasa/ECI/issues/27
Incorrect Documentation for CFE_TBL_ReleaseAddress,"Reported by Mark Pallone GSFC PACE/OCI project on 1/11/18:

The documentation for CFE_TBL_ReleaseAddress says that if you get the return code CFE_TBL_ERR_NEVER_LOADED, 

""This pointer must be released with the CFE_TBL_ReleaseAddress API before the table can be loaded with data.""

I think this is a copy/paste error, likely from CFE_TBL_GetAddress.
",non-bug,https://github.com/nasa/cFE/issues/261
Ensure memory is set in OS_stat handler,"**Is your feature request related to a problem? Please describe.**
Risk of uninitialized variable use if buffer isn't set in OS_stat handler:
https://github.com/nasa/osal/blob/4cc6dbb5019d0589d5ce52e3755a0b7a012ade3c/src/ut-stubs/osapi-file-handlers.c#L199-L202

**Describe the solution you'd like**
Initialize to zero if not fully set (provides default behavior)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1210
"Too strict of check before calling ""Init"" function of module","**Describe the bug**
For PSP modules the initialization is only called if the module type is ""SIMPLE"" - but this is not necessary to enforce, because the intent is to allow this to be extended to other module types as the mission requires.

Since the ""Init"" function pointer is a fixed/defined entry (so all modules have it, regardless of type) and it is already permitted to be NULL if it is not needed, then there is no real reason to restrict calling it to the ""SIMPLE"" module type.

**To Reproduce**
Define an extension module type and try to use it with Caelum.  It will not be initialized as expected, the init call is skipped.

**Expected behavior**
If a module provides an init function, it should be called, regardless of whether the module type is ""SIMPLE"" or something else.

**Code snips**
Check is here: https://github.com/nasa/PSP/blob/6d40816cfcc2836182f04bacf7d98b7d5cf5163b/fsw/shared/src/cfe_psp_module.c#L67

Through some form of evolution it was checking specifically for `CFE_PSP_MODULE_TYPE_SIMPLE` only, but it would be better to check that `ModuleType != CFE_PSP_MODULE_TYPE_INVALID` instead.

**System observed on:**
Ubuntu

**Additional context**
Only breaks when trying to add modules of other types (extensions).  Could theoretically be fixed in other ways, but still, the intent of this code is only to confirm that the module structure is initialized to something before invoking a function pointer.  So it is more correct to check that it is not invalid, rather than checking specifically for one value.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/PSP/issues/303
skeleton app,"**Is your feature request related to a problem? Please describe.**
sample_app is great for showing a variety of capabilities that cFS provides to an application, but folks will likely come to sample_app thinking it's a good starting place for them to develop their new apps. I suggest we also have a ""skeleton_app"" either as a separate GIT repository (and referenced in the sample_app docs) or contained in the sample_app folder.

**Describe the solution you'd like**
a skeleton_app which has the barest of minimums to make it a valid cFS application.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/sample_app/issues/50
CFE_ES_GenPoolInitialize: Error if AlignSize is not a power of 2,"**Is your feature request related to a problem? Please describe.**
`CFE_ES_GenPoolInitialize` handles when `AlignSize` isn't a power of 2, but may be more appropriate as an error:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.c#L253-L269

**Describe the solution you'd like**
Analyze, make it an error or document why it's ok as-is for future reference

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1346
Update grut699-vxworks6 cfe_psp_memory.c per white box unit testing results,"During white box testing a number of functions were identified which return CFE_PSP_ERROR rather than CFE_PSP_INVALID_POINTER for NULL pointers.  Functions include:
CFE_PSP_GetCDSSize
CFE_PSP_WriteToCDS
CFE_PSP_ReadFromCDS
CFE_PSP_GetResetArea
CFE_PSP_GetUserReservedArea
CFE_PSP_GetVolatileDiskMem
CFE_PSP_GetKernelTextSegmentInfo
CFE_PSP_GetCFETextSegmentInfo

Other issues:
Several functions take two pointer arguments, but only check if one is a NULL pointer.

Should check calling functions to see if changes to the return values may potentially cause issues.

Issues identified during #14  white box testing commit: [changeset:612f00f3]
",bug,https://github.com/nasa/PSP/issues/37
Replace loop with single `memset` in `CFE_SB_SendStatsCmd`,"**Is your feature request related to a problem? Please describe.**
Loop not needed
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_task.c#L796-L802

**Describe the solution you'd like**
Just `memset` the sizeof*count.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1472
should PSP have byte-swapping utilities for endian conversions?,"We're constantly running into code needing to swap bytes in 16- and 32-bit data for big-endian data on little-endian platforms and I think it might be a convenience if CFS provided byte-swapping utilities. (Theoretically, some platforms may have the ability to perform byte swaps more efficiently using CPU instructions or the like.)

This may be more appropriately housed in OSAL or elsewhere. CFS code should be reviewed for redundancies such as the FS code has CFE_FS_ByteSwapUint32 that could utilize a more generic function. (I can take on writing the patch once I receive concurrence that this is a wise update and the right location to house the code.)",non-bug,https://github.com/nasa/PSP/issues/47
POSIX: Your queue depth may be too large,"Update documentation to show Posix fix:

Edit /etc/sysctl.conf and add the lines:

```bash
	# Increase message queue
	fs.mqueue.msg_max = 256
```

## Or 

Edit as root  `/proc/sys/fs/mqueue/msg_max` is set to 256 or some value appropriate.

```bash
root# echo 256 > /proc/sys/fs/mqueue/msg_max
```
",non-bug,https://github.com/nasa/cFE/issues/12
CFE_ES_GetPoolBufInfo Header has incorrect return description,"**Describe the bug**
The return in the header says it returns Execution status but it actually returns the buffer size or error code. 

**Expected behavior**
Header file should be changed to match the implementation. 

**Additional context**
The code that does this has a comment saying it's not workable so we could also change the implementation 

https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_mempool.c#L541-L550

**Reporter Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1606
Pipename refactor removed it from the send pipe info file dump,"**Describe the bug**
#404 removed pipename from the structure that is written when the send pipe info command is sent.  Need to add this information back in.  Also related to #982.  Likely need to reconsider what is output (memory addresses likely not helpful).

**To Reproduce**
Observe file output from a CFE_SB_SEND_PIPE_INFO_CC command before and after #404 merge.

**Expected behavior**
#404 shouldn't have changed output file.

**Code snips**
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/sb/cfe_sb_task.c#L1015-L1029

**System observed on:**
All.

**Additional context**
Observed in build verification test of 6.8

**Reporter Info**
Jacob Hageman - NASA/GSFC

Ping @wmoleski
",bug,https://github.com/nasa/cFE/issues/995
Add SP0 PSP,"Add the AiTech SP0 PSP developed at JSC.  It is still under development, but the basics appear to work.
- watchdog and exception handling code not done yet",non-bug,https://github.com/nasa/PSP/issues/32
Auto Increment Telemetry Sequence Count Overflow,"**Describe the bug**
The API (called by CFE_SB_TransmitMsg) CFE_SBR_IncrementSequenceCounter has no protection to ensure the sequence counter doesn't exceed the maximum value dictated by the size of the field in the CCSDS primary header (14-bits w/ max value 16384.

**To Reproduce**
Create a for-loop that calls CFE_SB_TransmitMsg with the IncrementSequenceCount flag set to true. Have the loop repeat this at least 16385 times. View the resultant messages and verify that the sequence count stops incrementing and is stuck at the maximum value.

**Expected behavior**
CFE_SBR_IncrementSequenceCounter (or the caller CFE_SB_TransmitMsg) should check that the sequence counter does not exceed the maximum value dictated by the size in the header (16384). The sequence counter should be reset to 0 when it reaches the maximum.

**Code snips**
In CFE_SB_TransmitMsg:
```
/* For Tlm packets, increment the seq count if requested */
CFE_MSG_GetType(MsgPtr, &MsgType);
if((MsgType == CFE_MSG_Type_Tlm) && IncrementSequenceCount)
{
    CFE_SBR_IncrementSequenceCounter(RouteId);
    CFE_MSG_SetSequenceCount(MsgPtr, CFE_SBR_GetSequenceCounter(RouteId));
}
```
In CFE_SBR_IncrementSequenceCounter:
```
if (CFE_SBR_IsValidRouteId(RouteId))
{
    CFE_SBR_RDATA.RoutingTbl[CFE_SBR_RouteIdToValue(RouteId)].SeqCnt++;
}
```
**System observed on:**
 - Hardware: N/A
 - OS: N/A
 - Versions: cFE: 24f7b319

**Additional context**
N/A

**Reporter Info**
PJ Chapates
Gateway VSM Flight Software Production
JSC, ER6
",bug,https://github.com/nasa/cFE/issues/1419
Suggestion: Documentation rework,"I've started working on Markdown-izing documentation on my fork of this repository so it's easier to navigate via GitHub's interface. I plan to convert all plain-text, PDF, and Word documents to Markdown, but leave Doxygen docs intact since they're generated (However, on that subject, on the [CACTUS fork of cFE](https://github.com/CACTUS-Mission/cFE) I made a Travis job that automatically builds Doxygen docs and deploys them to GitHub Pages).
I can open a PR here once the conversion is complete if the cFE team would like to integrate that change in the main repo.",non-bug,https://github.com/nasa/cFS/issues/1
"Add OSAL library build, coverage test, and functional tests to CI","**Is your feature request related to a problem? Please describe.**
CI doesn't build or execute tests for OSAL

Related to conversation on https://github.com/nasa/osal/issues/23

**Describe the solution you'd like**
Ideally create a Makefile with a set of rules to cover building, running tests, and reporting coverage (pattern after bundle build) which allows for users to easily do the same thing
Once created, put into CI

**Additional Info**
Some of the actions are detailed in https://github.com/nasa/cFS/blob/dev-vdd/VDD.md

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/346
Suggest enhanced version information reporting (at init and noop),"At build put the response from `git describe --tags --always --dirty` (similar to version.cmake in cfe/cmake) into a define and report by the code if defined in addition to the manual version number.

Can do it at build -D_ENHANCED_V_NAME_=response from git, or generate a header file on the fly and poke in the #define, and include from the code.

cFS app guide will eventually say something like this, it's the direction we are going with version reporting to eliminate all the manual changes to the version header (only required at release with this update), or the confusion it causes when it's not updated.  Since before every merge to master really was a new version but not tracked well.",non-bug,https://github.com/nasa/ECI/issues/8
Sample makefile should use strict compiler flags and treat warnings as errors,"**Describe the bug**
The default makefiles / CMake scripts do not enforce any strict compiler warning flags and do not treat warnings as errors.  This means issues like #22 can more easily slip past.

**To Reproduce**
Building the `rc-6.7.0` branch as a ""release"" (-O3) using the default settings/sample config/makefile wrapper by preparing as:

`make SIMULATION=native BUILDTYPE=release prep`

Then run make and you do get some warnings, at least when using gcc 7.x and above:

```
[ 56%] Building C object cfe_core_default_cpu1/CMakeFiles/cfe_core_default_cpu1.dir/src/es/cfe_es_task.c.o
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_task.c: In function ‘CFE_ES_TaskInit’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_task.c:374:64: error: array subscript is below array bounds [-Werror=array-bounds]
        strncat(EventBuffer, VersionBuffer, sizeof(EventBuffer)-strlen(EventBuffer-1));
                                                                ^~~~~~~~~~~~~~~~~~~~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_task.c:380:64: error: array subscript is below array bounds [-Werror=array-bounds]
        strncat(EventBuffer, VersionBuffer, sizeof(EventBuffer)-strlen(EventBuffer-1));
                                                                ^~~~~~~~~~~~~~~~~~~~~
```

However, the build continues and completes the process with no error results.

**Expected behavior**
The build should stop, because warnings are problems that need to be resolved.  If the build does not stop then it is very easy to not notice these issues.

**System observed on:**
Ubuntu 18.04 (64-bit), kernel 5.0.0-23-generic, gcc 7.4.0

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/24
App Dev Guide - interrupt handling section update to indicate deprecated,"**Is your feature request related to a problem? Please describe.**
Related to https://github.com/nasa/osal/issues/385, need to keep guide up-to-date

**Describe the solution you'd like**
Update guide

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/571
Re-add CFE_SB_DeletePipe requirement,"**Is your feature request related to a problem? Please describe.**
The requirement for the `CFE_SB_DeletePipe` API, cSB4302 was mistakenly deleted in #789.

**Describe the solution you'd like**
Re-add.

**Describe alternatives you've considered**
None

**Additional context**
Got mistakenly cancelled in JIRA, un-cancelled.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1702
"CF Build failure on systems where int32 is ""long""","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
On a system where the `int32` type is defined as `long` (rather than `int`), the CF unit tests fail to build with the following error:

```
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c: In function 'Test_CF_CFDP_DecodeHeader':
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:730:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == CFE_SUCCESS, ""CF_CFDP_DecodeHeader returned %d and should be 0"", ret_val);
     ^
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:748:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == CFE_SUCCESS, ""CF_CFDP_DecodeHeader returned %d and should be 0"", ret_val);
     ^
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:755:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == -1, ""CF_CFDP_DecodeHeader returned %d and should be -1"", ret_val);
     ^
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:762:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == -1, ""CF_CFDP_DecodeHeader returned %d and should be -1"", ret_val);
     ^
```


**To Reproduce**
Build on any system where `int32` is not equivalent to `int`

**Expected behavior**
Should build successfully

**System observed on:**
RTEMS

**Additional context**
This is using UtAssert_True - problem would not exist if the `UtAssert_INT32_EQ` were used as intended.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/CF/issues/317
Use Resource ID type for SB Pipe ID,"**Is your feature request related to a problem? Please describe.**
The CFE SB pipe ID table is not safe from aliasing or other issues.

**Describe the solution you'd like**
Redefine the CFE_SB_PipeID_t type to be a form of CFE_ES_ResourceID_t like many other resources have already been converted (mem pool handles, CDS blocks, etc).

Re-Use all the same management patterns of this structure.

**Additional context**
The only potential downside is that Resource IDs are defined as 32 bit values but Pipe IDs were only 8 bits.  So this will make `sizeof(CFE_SB_PipeId_t)` into 4 instead of 1.  But as long as apps are properly using the typedef and not assuming `uint8` or otherwise depending on this being a single byte, this shouldn't be noticeable.

This is somewhat related to previous issue #100 - implementing this would be a good step in the right direction for that issue too.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/985
CreatePipeErrorCounter only incremented for CFE_SB_CR_PIPE_BAD_ARG_EID or in CFE_SB_DeletePipeFull,"**Is your feature request related to a problem? Please describe.**
CreatePipeErrorCounter logic doesn't seem to make all that much sense since it's only incremented for one error case, and also incremented as part of deleting a pipe.

Note the trivial switch below is a static analysis warning, might be more appropriate to count warnings for more cases:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_api.c#L227-L235

**Describe the solution you'd like**
Trace design to requirements, confirm current implementation makes sense.

**Describe alternatives you've considered**
None

**Additional context**
Uncovered due to static analysis warning, any change will be easier after #972

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1187
Implement user-selectable compiler warning switches,"It has become apparent that a ""one-size-fits-all"" approach to compiler warnings may not be sufficient going forward.

In general, most developers should be using ""-Werror"" in addition to ""-Wall"", ""-pendantic"", etc to catch any coding issues at first sight.  

However, the specific set of warnings for any given piece of code is dependent on the specific compiler version, target architectures, and optimization level in use at the time of build.  This can mean code that builds without warnings on one build can fail miserably on a different build.

This could be an major issue for a novice who clones the latest code from the community repository, and builds it with the latest version of GCC (i.e. one that we may not have tested yet) and finds a new warning that causes the entire build to fail unexpectedly.

As a compromise, the following is proposed:
* Always use ""-Wall"" switch to enable the most reasonable warnings (incidentally, this is not __all__ warnings, it leaves out the ones most likely to generate false positives).  
* Do not put ""-Werror"" in the official build scripts, so if compiling with a new GCC version or a different target architecture than the what has been officially tested, the build will not fail if a new warning is triggered.
* Also leave out ""-pedantic"" from the official build as this, by definition, tends to warn on constructs that are generally OK in practice but violate some (possibly esoteric) aspect of the C standard.  The thought behind this is that plenty of old existing code out there may work fine but might not compile cleanly using ""-pedantic"", so we should not force this switch upon users by default.
* Add a mechanism by which developers can easily add extra CFLAGS to a build, without modifying a Makefile (or CMakeLists) file.  This way, any users that want to may enable ""-Werror"" or ""-pedantic"" on their own builds, all the time, without having to maintain a private branch of the build script.

The automatic builds done by Bamboo, these will be built __without__ ""-Werror"" but the build log will be checked for warnings, and the presence of any new warnings will be logged as a unit test error so they can be fixed before moving the code forward.





",non-bug,https://github.com/nasa/osal/issues/60
Size and alignment of CFE_ES_MemHandle_t vary depending on platform; ground-visible structures affected,"`CFE_ES_MemHandle_t` is [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_es.h#5098 defined] as
`typedef cpuaddr CFE_ES_MemHandle_t;` and the size and alignment of `cpuaddr` vary by platform.

This type is used as a member in (at least) the following telemetry structures:

* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_sb_msg.h#8870 CFE_SB_HousekeepingTlm_Payload_t]
* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_tbl_msg.h#10547 CFE_TBL_HousekeepingTlm_Payload_t]
* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_es_msg.h#45469 CFE_ES_PoolStatsTlm_Payload_t]

It is also used in (at least) the following command structure:

* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_es_msg.h#45416 CFE_ES_SendMemPoolStatsCmd_Payload_t]

On 64-bit platforms which require self-alignment (e.g. x86_64, aarch64), the presence of a `CFE_ES_MemHandle_t` member causes the structure to require 8 byte alignment. This results in a 4 byte hole between the 12 byte telemetry header and payload when the payload is defined as a separate structure, such as the cases noted above.

Note that unlike the various address values in `CFE_ES_AppInfo_t`, the actual value of these handles is needed on the ground for use in the ES ""send MemPool stats"" command, which takes a handle as its argument. In addition, these telemetry structures don't have a field indicating the validity of the handle. 

Both of these factors suggest the fix accepted by the CCB for `CFE_ES_AppInfo_t`, populating the fields with the low bytes of the value and marking them invalid when the fields are too small to hold the actual value, may not be viable for these structures.",non-bug,https://github.com/nasa/cFE/issues/322
SC: ATP Control Block Data has compiler added padding,"//The below update to sc_tbldefs.h would explicitly add padding

typedef struct
{

    uint8  AtpState;       /* execution state of the ATP */
    uint8  AtsNumber;      /* current ATS running if any */
//uint16 Padding;        /* Alignment Padding  */
    uint32 CmdNumber;      /* current cmd number to run if any */
    uint16 TimeIndexPtr;   /* time index pointer for current cmd */
    uint16 SwitchPendFlag; /* indicates that a buffer switch is waiting */

} SC_AtpControlBlock_t;

Imported from GSFCCFS-1891",non-bug,https://github.com/nasa/SC/issues/18
Implement OS_printf/console at shared OSAL level,"**Is your feature request related to a problem? Please describe.**
Entire OS_printf/OSAL console implementation could be handled at the OSAL level and not via implementation. Every OS needs a thread, a circular buffer, and a semaphore to wake that thread and write to console. All we really need is for that thread to call printf(). There's a vxWorks specific impl and there's a POSIX impl, etc. It seems it could be OSAL only using all OSAL primitives and standard C.

**Describe the solution you'd like**
Use OSAL primitives at shared level

**Describe alternatives you've considered**
Leave as-is (future work)>

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/849
ApexSim for Arinc653 Posix simulator,"Effort has been made at JSC to build an ""ApexSim"" which is a arinc653 OS simulator that runs in POSIX.  

The tool was development by Guy de Carufel and Mathew Benson.  

It is not complete, but should be a good starting point for Arinc653 development.  The Arinc Modules that have been implemented are fully tested.  It can be a good resource for any Arinc653 OSAL development.  The Arinc653 OSAL Timer has been tested with this tool.

Eventually, this could be adapted into a PSP layer.

Here are things missing:
- Add partition scheduling for multi-partition build
- Add Missing modules (Queuing Port, Events, Error Handler, blackboard)
- XML parsing tool to turn XML config file into ApexSim tables
- Documentation
- Develop a PSP layer
",non-bug,https://github.com/nasa/PSP/issues/54
No examples of using ECI for CDS management,None of the examples provided give any insight on how to manage the CDS using the internal ECI mechanisms.,non-bug,https://github.com/nasa/ECI/issues/33
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/ci_lab is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/ci_lab while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/ci_lab/issues/74
Build failure when using std=c99,"A recent code change pushed to development may break the build for in certain configurations.  On my projects we generally build using the `-Wall -Werror -std=c99 -pedantic` flags, which used to work.  However the introduction of a binary constant broke it:

{{{
cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_SendMsgFull’:
cfe/fsw/cfe-core/src/inc/cfe_sb.h:78:36: error: binary constants are a GCC extension [-Werror]
 #define CFE_SB_PIPEOPTS_IGNOREMINE 0b00000001 /**< \brief Messages sent by the app that owns this pipe will not be sent to this pipe. */
                                    ^
cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1320:31: note: in expansion of macro ‘CFE_SB_PIPEOPTS_IGNOREMINE’
         if(PipeDscPtr->Opts & CFE_SB_PIPEOPTS_IGNOREMINE)
                               ^
cc1: all warnings being treated as errors
cfe_core_default/CMakeFiles/cfe_core_default.dir/build.make:494: recipe for target 'cfe_core_default/CMakeFiles/cfe_core_default.dir/src/sb/cfe_sb_api.c.o' failed

}}}

",bug,https://github.com/nasa/cFE/issues/229
Update app dev guide and unit tests to use `CFE_MSG_PTR` instead of `&(x).Msg`,"**Is your feature request related to a problem? Please describe.**
`&(x).Msg` still used in UT and docs where `CFE_MSG_PTR` should be used to avoid dependency on internal CFE_MSG_Message_t elements.

**Describe the solution you'd like**
Replace with `CFE_MSG_PTR`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2057
JSC updated API tests,"Integrate JSC updates to API (black-box) tests.  Originally implemented as part of trac #45, split off for CCB review purposes",non-bug,https://github.com/nasa/osal/issues/134
Wrap/remove old backwards compatibility in cfe_psp_start,"Comments say cfe_platform_cfg.h include is only for old makefiles, can this be removed now that classic build is deprecated?

Remove backward compatibility for old OSAL - CFE_PSP_SetupLocal1Hz and associated call.",bug,https://github.com/nasa/PSP/issues/105
Noncompliance with the concept of informative variable names,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
A style thing, but pretty obscure one character names all over.  Good practice to use useful names that a new reader can easily pick up on and/or easier to maintain.  Example use of c, q, p, and t all in one line:
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/fsw/src/cf_utils.c#L370

**Describe the solution you'd like**
c -> chan
t -> txn
q -> queue_idx/q_index or whatever.
p -> priority (or whatever it is)
and so on.

**Describe alternatives you've considered**
May just be another one for the lesson's learned bucket.  Not sure how this got through code review.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/265
CI - add test build/run with elevated privileges ,"**Is your feature request related to a problem? Please describe.**
CI only builds/runs with user privileges

**Describe the solution you'd like**
Add an elevated privileges build/run

**Describe alternatives you've considered**
None.

**Additional context**
See #95 for additional update request

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/107
"OSAL ""common_types.h"" is not completely reliable","On some systems (particularly 64-bit) the types defined in OSAL ""common_types.h"" file do not always match their expected widths.

There is currently a very helpful compile-time assert to catch this if it does go wrong but we need it to not go wrong in the first place.

The best way to solve this is to leverage the C ""stdint.h"" file - this has been standard since C99.  For any C library that does not have this header it can fall back to using the existing defines.",bug,https://github.com/nasa/osal/issues/24
Support multiple/alternative table definitions,"**Is your feature request related to a problem? Please describe.**
Some users have requested the ability to generate multiple different table files/configurations as part of the build, to represent different hardware configurations.  This way, they can choose the active configuration at install time (by choosing which file gets copied to the target) or at run time, by loading a different table file.

**Describe the solution you'd like**
Currently the ""add_cfe_tables"" does not directly support this, but with a little work it should be able to.  This requires adding an ""install"" hook so the user has a proper place to call this function to generate customized table files.

**Describe alternatives you've considered**
While this is possible to some degree with the current build system, all decisions are made at build time.  For instance the C preprocessor can be used (via e.g. add_definitions) to select different table values based on build-time configurations.  Alternatively, the user can write their own script to compile a C file and call `elf2cfetbl` on it, but it can be difficult to determine the proper include paths and compile definitions.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1538
Error code documentation updates related to enforcement/test,"**Is your feature request related to a problem? Please describe.**
See #331 for related issue/discussion.
Lacking documented approach for return code checking across functional tests.

**Describe the solution you'd like**
1. Update the error code list in API documentation to state:
`The specific error code definitions may be extended or refined in future versions of the software.  Users should avoid unique error code handling except where required and documented explicitly in the API.  Typical implementations should just check for OS_SUCCESS or report the error.`
1. Typical return code documentation (for just execution status):
`\return Execution status. Success and error codes below are verified by test, but users should not assume the error code list is exhaustive. Precedence is not defined/enforced, calls with multiple errors may return any one of the related the error codes.`
1. Scrub API error code documentation with the concept functional tests will verify the error codes explicitly defined, should just be a general set (not implementation unique).

**Describe alternatives you've considered**
See discussion in #331 

**Additional context**
Coverage tests are expected to verify every implemented return code (white box).  Functional tests are API based.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/399
Add sample vxworks toolchain file,"**Is your feature request related to a problem? Please describe.**
No example toolchain file to build for MCP750 included.

**Describe the solution you'd like**
Add the toolchain file used for testing.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/381
Refactor LC_SampleAPReq and LC_HousekeepingReq,"The functions LC_SampleAPReq and LC_Housekeeping Req could be refactored to use a loop instead of the multiple switch statements.

The final if condition in LC_SampleAPReq could also be refactored to reduce the nesting.

Imported from GSFCCFS-1368",non-bug,https://github.com/nasa/LC/issues/15
Apply standard code style,"**Is your feature request related to a problem? Please describe.**
Inconstant style

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/pull/30 and https://github.com/nasa/ci_lab/pull/28

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/elf2cfetbl/issues/32
Shorter name for ES_BackgroundTask,"**Describe the bug**
With the recent addition of setting the name at the Linux OS kernel in nasa/psp#199, task names are mostly shown in the debugger but not for the ES background task.  This is because the glibc/Linux has a hard limit of 16 characters for this name.  So even though OS_MAX_API_NAME is 20, names need to be less than 16 chars in order to show up properly.

**To Reproduce**
Run CFE in debugger and look at task names - ""ES_BackgroundTask"" does not show up.

**Expected behavior**
Should show the name.

**System observed on:**
Ubuntu 20.04

**Additional context**
Recommend keeping CFE task names to be all less than 16 chars even if OS_MAX_API_NAME is set to a larger limit.  OSAL is fine with longer names, but they just don't show up in the debugger due to the underlying glibc/linux limit.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/976
OSAL Timer UT failing intermittently,"**Describe the bug**
On my virtual machine running Ubuntu 20.04, OSAL_timer_UT fails roughly 50% of the times I run it. Specifically the OS_TimerSet test. 


**To Reproduce**
Run Make test

**Expected behavior**
It should pass 100% of the time. 

**Code snips**
Here is the printout 

BEGIN] 05 OS_TimerSet
[ PASS] 05.001 ut_ostimer_timerio_test.c:525 - #1 Invalid-id-arg
[ INFO] 05.002 ut_ostimer_timerio_test.c:532 - #2 Internal-error
[ INFO] ut_ostimer_timerio_test.c:553:
OS_TimerSet() - #3 Interval-too-short (clk_accuracy=10000)

[ PASS] 05.003 ut_ostimer_timerio_test.c:560 - #3 Interval-too-short
[ INFO] ut_ostimer_timerio_test.c:591:
OS_TimerSet() - #1 Nominal condition (clk_accuracy=10000)

[ FAIL] 05.004 ut_ostimer_timerio_test.c:600 - #4 Nominal
[  END] 05 OS_TimerSet          TOTAL::4     PASS::2     FAIL::1 

**System observed on:**
Ubuntu 20.04

**Reporter Info**
ALex Campbell GSFC",non-bug,https://github.com/nasa/osal/issues/943
Update CRC Algorithm Documentation,"**Is your feature request related to a problem? Please describe.**
It would be useful to update the documentation in CFE_ES_CalculateCRC function to include information on the CRC algorithms used, specifically CRC-16 as that is currently the only one implemented.

**Describe the solution you'd like**
Include the following information that describes the CRC16 algorithm
- Name: CRC-16/ARC
- Polynomial: 0x8005
- Initialization: 0x0000
- Reflect Input/Output: true
- XorOut: 0x0000

**Additional context**
While the specific algorithm has several aliases (some listed here https://reveng.sourceforge.io/crc-catalogue/16.htm) this at least provides enough information for one to recreate the lookup table/perform their own sanity checks on the CRC calculations.

**Requester Info**
Mathew McCaskey
HX5 / NASA-GRC
Regenerative Fuel Cell Project",non-bug,https://github.com/nasa/cFE/issues/1094
Return OS_ERROR if OS_TimerSet is called with both parameters as zero,"**Is your feature request related to a problem? Please describe.**
Related to the discussion in #9

**Describe the solution you'd like**
See title, as described in https://github.com/nasa/osal/issues/9#issuecomment-528071853

**Describe alternatives you've considered**
See #9 comment thread

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC",non-bug,https://github.com/nasa/osal/issues/11
qnx osal,Does such exists in nature?,non-bug,https://github.com/nasa/osal/issues/7
Directory polling does not clean up open directory file descriptors,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF_CFDP_PlaybackDir is called by CF_CFDP_ProcessingPollingDirectories when the interval for the CF_Poll_t structure has expired. This function will attempt to reopen the directory. If the polling directory does not continuously receive new files to process, then the OS_DirectoryOpen call happens without a corresponding OS_DirectoryClose call, exhausting the amount of available file descriptors and causing this error.
`CF: failed to open playback directory /cf/dl , error=-14`

**To Reproduce**
Steps to reproduce the behavior:
1. Launch CF with a configured polling directory
2. Let ticker expire and attempt to reopen directory
3. Wait until FDs are exhausted and error appears

**Expected behavior**
I expect the directory file descriptor to be cleaned up before each OS_DirectoryOpen call. 

**Code snips**
Configuration table used:
```
CF_ConfigTable_t CF_config_table = {
    10,       /* ticks_per_second */
    33554432, /* max number of bytes per wakeup to calculate r2 recv file crc */
    24,       /* temp local id */
    {{
         32,   /* max number of outgoing messages per wakeup */
         512, /* max number of rx messages per wakeup */
         5,   /* ack timer */
         5,   /* nak timer */
         30,  /* inactivity timer */
         8,   /* ack limit */
         8,   /* nak limit */
         CF_PDU_CMD_MID,
         CF_PDU_TLM_MID,
         512,
         {{1, 0, CF_CFDP_CLASS_1, 21, ""/cf/dl"", ""."", 1}, {0}, {0}, {0}, {0}},
         """", /* throttle sem for channel 1, empty string means no throttle */
         1,
     }},
    1253, /* outgoing_file_chunk_size */
    ""/ram"",
};
```

**System observed on:**
 - SC3M, Microblaze
 - OS:  Linux 5.4
 - cFS 7.0, CF commit bff67f87

**Additional context**
I added a check in [CF_CFDP_PlaybackDir](https://aetd-git.gsfc.nasa.gov/epg/missions/stp-h9/fsw/cf/-/blob/e6c75da9af2847e3d2e7e50df12455be9a2a8c4b/fsw/src/cf_cfdp.c#L1347) that looks to see if the FD is 0. If it isn't, I close the directory and reopen it. This gets rid of the problem. 

**Reporter Info**
Dennis Afanasev, NASA Goddard Code 587
",bug,https://github.com/nasa/CF/issues/321
"URL to ""cFE Users Guide"" in the top-level README.md returns a 404","**Describe the bug**
This is the URL to the `cFE_Users_Guide.pdf` given on the front page README.md: https://github.com/nasa/cFS/blob/gh-pages/cFE_Users_Guide.pdf

The URL returns a 404.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://github.com/nasa/cFE/blob/main/README.md
2. Follow the link given by:
> The detailed cFE user's guide can be viewed at https://github.com/nasa/cFS/blob/gh-pages/cFE_Users_Guide.pdf.

3. Click the link and see the 404.

**Expected behavior**
The document should exist at the given URL.

**Reporter Info**
Alex Carrillo",non-bug,https://github.com/nasa/cFE/issues/2104
Test_OS_ConvertToArrayIndex: tautological assertion,"**Describe the bug**
Unit test ` Test_OS_ConvertToArrayIndex` implements the following assertion: 
https://github.com/nasa/osal/blob/7d9c4c8a470d3906050c5cf93203c4a9a9c09089/src/unit-test-coverage/shared/src/coveragetest-idmap.c#L610-L611

This is a tautological assertion as it compares `local_idx1` with itself.

**To Reproduce**
N/A (code analysis)

**Expected behavior**
`local_idx1` should be compared with `local_idx2`:
```
UtAssert_True(local_idx1 == local_idx2, ""local_idx1 (%lu) == local_idx2 (%lu)"",
            (unsigned long)local_idx1, (unsigned long)local_idx2);
```

**Code snips**
See above.

**System observed on:**
N/A (code analysis)

**Additional context**
N/A

**Reporter Info**
Guillaume Lethuillier - Personal
",bug,https://github.com/nasa/osal/issues/425
CCSDS APID Name Space Expansion,"Expand the cFS Software Bus topic name space using extensions to the CCSDS Space Packet secondary header. Within the cFS architecture the CCSDS Primary Header APID is used as a unique system-wide topic identifier.
This ticket is intended to address several issue with the current CCSDS Space Packet APID topic name space
1) Difficulties allocating and managing the limited number of APIDs during development
2) Insufficient number of APIDs for large systems
3) APID allocations for formation flying, distributed systems, multi-core, and partitioned systems
4) Loss of spacecraft and subsystem identifying information as packets traverse the network stacks

Implementation of the extended header will include a compile time directive to include or disable extended header support. See attached file for header format.

",non-bug,https://github.com/nasa/cFE/issues/206
Need to dynamically determine whether extra flag prefix is required when linking CFE,"On platforms that link executables via gcc, these need to have an extra ""-Wl,"" prefix on linker options.

However, on platforms that call ""ld"" directly, these do not need the prefix, and using the prefix causes an error.
",bug,https://github.com/nasa/cFE/issues/354
Clarify OS_GetLocalTime/OS_SetLocalTime use in relation to OSAL_GETTIME_SOURCE_CLOCK,"**Is your feature request related to a problem? Please describe.**
Not really clear/consistent on OS_SetLocalTime and OS_GetLocalTime in relation to OSAL_GETTIME_SOURCE_CLOCK.  Currently defaulted to CLOCK_MONOTONIC, so a OS_SetLocalTime may fail.  Really need to clarify intent of the design/APIs to be more clear on how they should be used since the OSAL_GETTIME_SOURCE_CLOCK is used in both and the setting has different impacts in the different contexts.

**Describe the solution you'd like**
May benefit from individual configuration parameters, or maybe OS_SetLocalTime should never be CLOCK_MONOTONIC.  Add a bit more context to API/configuration documentation.  Use cases?

**Describe alternatives you've considered**
Anything to clarify/explain intent.

**Additional context**
Debated ""bug"", could switch.

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/844
Refactor ingest to utilize zero copy (can reduce two copy to one),"**Is your feature request related to a problem? Please describe.**
CI copies the data into a local buffer and then uses CFE_SB_TransmitMsg (which does a second copy into the SB buffer):
https://github.com/nasa/ci_lab/blob/296d12cde4f90d112d1578cb584ddae200a2d282/fsw/src/ci_lab_app.c#L359-L374

**Describe the solution you'd like**
Could use zero copy to get a buffer, write directly to the buffer and CFE_SB_TransmitBuffer (single copy)

**Describe alternatives you've considered**
None

**Additional context**
We don't have a functional example of zero copy, just documentation.  This would support user request for a working example as well as improve performance.

**Requester Info**
Jacob Hageman - NASA/GSFC (from stakeholder request)",non-bug,https://github.com/nasa/ci_lab/issues/73
Deprecate osalbool and boolean in favor of C99 bool,Eliminates unnecessary redefines.,bug,https://github.com/nasa/osal/issues/251
"Argument checks in internal functions (CFE_SB_TransmitMsgValidate, etc)","**Is your feature request related to a problem? Please describe.**
As discussed in #1197 we need to have some consensus on the proper level of argument checking for internal helper functions.

Sometimes internal functions have tests to validate their inputs (range check etc) on behalf of the caller, in the case where several public APIs need to repeat the same tests -- putting these in a helper can reduce repeated code and make all APIs consistent in their validation (a good thing).

But in other cases the helper is invoked from contexts where the inputs are never out of range or pointers can never be NULL.  Testing for such inputs can be redundant.

**Describe the solution you'd like**
Need to confirm/reach consensus on whether functions like CFE_SB_TransmitMsgValidate() in CFE SB need to validate all their arguments.  Probably should better document _which_ args are tested and _why_ - and if there are limitations on other args (e.g. certain args are assumed to be non-null).

**Additional context**
This just causes some confusion during review and probably some additional comments/documentation could help.

See thread here: https://github.com/nasa/cFE/pull/1197#discussion_r585070230

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1198
Add cFE Time Current Time API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Time APIs
– CFE_TIME_GetTime
– CFE_TIME_GetTAI
– CFE_TIME_GetUTC
– CFE_TIME_GetMET
– CFE_TIME_GetMETseconds
– CFE_TIME_GetMETsubsecs

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1298
PSP build fails for GRUT699,"Steve Duran reports that he is encountering errors in the GRUT-699 PSP
as follows:

{noformat}

/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:209: error: conflicting types for 'CFE_PSP_GetResetArea'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:287: error: previous declaration of 'CFE_PSP_GetResetArea' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: In function 'CFE_PSP_GetResetArea':
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:219: warning: cast increases required alignment of target type
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: At top level:
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:248: error: conflicting types for 'CFE_PSP_GetUserReservedArea'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:294: error: previous declaration of 'CFE_PSP_GetUserReservedArea' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: In function 'CFE_PSP_GetUserReservedArea':
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:258: warning: cast increases required alignment of target type
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: At top level:
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:287: error: conflicting types for 'CFE_PSP_GetVolatileDiskMem'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:300: error: previous declaration of 'CFE_PSP_GetVolatileDiskMem' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: In function 'CFE_PSP_GetVolatileDiskMem':
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:297: warning: cast increases required alignment of target type
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: At top level:
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:363: error: conflicting types for 'CFE_PSP_GetKernelTextSegmentInfo'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:306: error: previous declaration of 'CFE_PSP_GetKernelTextSegmentInfo' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:405: error: conflicting types for 'CFE_PSP_GetCFETextSegmentInfo'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:311: error: previous declaration of 'CFE_PSP_GetCFETextSegmentInfo' was here

{noformat}

These appear to be due to the changes to some of the PSP functions, to go from
using `void*` to indicate where to store a pointer, to using `(cpuaddr*)` which
is slightly better.

I have a place I am currently building GRUT-700 VxWorks images, so I should be
able to make this change and verify that it builds.

This should be able to get done, tested, and integrated in time to be part of
the next PSP release (PSP 1.3).
",bug,https://github.com/nasa/PSP/issues/56
Add functional tests step to continuous integration,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**

The cFE repository has a suite of functional tests. These tests can sometimes fail when introducing new osal dependencies. These failures can be shown to be fixed at the bundle level when combining the right set of submodule references. 

**Describe the solution you'd like**
Port the functional test workflow as an extra job to the build test and run workflows. 

**Describe alternatives you've considered**
Make a separate workflow

**Additional context**
None
",non-bug,https://github.com/nasa/cFS/issues/334
TOCTOU Bug for chmod,"**Describe the bug**
Calling function chmod that uses Filename after a check function. This can cause a time-of-check, time-of-use race condition.

**Expected behavior**
Use fchmod as seen in OS_FileChmod_Impl.

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L62-L69

https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L111-L117

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/osal/issues/1175
OS_TimedRead and OS_TimedWrite missing functional tests,"**Is your feature request related to a problem? Please describe.**
OS_TimedRead and OS_TimedWrite missing functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None.

**Additional context**
Certification issue

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/378
vxworks OS_TranslatePath() doesn't handle truncated path properly,"The vxworks OS_TranslatePath() in osfilesys.c doesn't detect and properly handle when the mount point and given VirtualPath arg are too long.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].",bug,https://github.com/nasa/osal/issues/112
OS_FileSysAddFixedMap missing functional test,"**Is your feature request related to a problem? Please describe.**
Missing functional test for OS_FileSysAddFixedMap

**Describe the solution you'd like**
Add test

**Describe alternatives you've considered**
None

**Additional context**
Certification issue

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/379
Refactor to avoid possible uninitialized local variables,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/ut-stubs/osapi-utstub-idmap.c#L137-L152
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-tests/osfile-test/ut_osfile_dirio_test.c#L519
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-tests/osfile-test/ut_osfile_dirio_test.c#L651

Note the only one in non-test code is a false alarm so I'm not marking as a bug and not critical, but easy to squash:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-idmap.c#L678

**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warnings

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/783
Remove undefined error defines in cfe_error.h,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/f1be0482d7a9493cb35613a8e43020a66a4a64d3/fsw/cfe-core/src/inc/cfe_error.h#L757-L763

neither of these exist in OSAL

**Describe the solution you'd like**
Delete

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/552
Remove custom fixed size types option,"Custom fixed size types in common_types.h requires assumptions outside required standards.  Remove this code in favor of stdint.h.  For any platform without stdint.h the resolution is platform dependent and outside the scope of the cFS framework.

Remove _HAVE_STDINT_ logic from cmake recipe, and custom defines in common_types.h.

See also [cfs_cfe:306] in cfs_cfe.",bug,https://github.com/nasa/osal/issues/249
Header guard update to match osal pattern,"**Is your feature request related to a problem? Please describe.**
Current header guards utilized reserved leading `_`, likely also inconsistent

Helpful if it also catches endif comment (typically comments the matching define)

**Describe the solution you'd like**
Apply OSAL pattern

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1239
RPi4 make process throws alignment error,"Following the ""quick start"" section of the README, generates an error and make failure:
```
Scanning dependencies of target msg
[ 83%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_ccsdspri.c.o
[ 83%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_init.c.o
[ 84%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_msgid_shared.c.o
[ 85%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_sechdr_checksum.c.o
/home/pi/src/NASA/cFS/cfe/modules/msg/src/cfe_msg_sechdr_checksum.c: In function ‘CFE_MSG_GenerateChecksum’:
/home/pi/src/NASA/cFS/cfe/modules/msg/src/cfe_msg_sechdr_checksum.c:82:49: error: cast increases required alignment of target type [-Werror=cast-align]
     cmd->Sec.Checksum = CFE_MSG_ComputeCheckSum((CFE_MSG_Message_t *)cmd);
                                                 ^
cc1: all warnings being treated as errors
make[7]: *** [msg/CMakeFiles/msg.dir/build.make:102: msg/CMakeFiles/msg.dir/src/cfe_msg_sechdr_checksum.c.o] Error 1
make[6]: *** [CMakeFiles/Makefile2:613: msg/CMakeFiles/msg.dir/all] Error 2
make[5]: *** [Makefile:141: all] Error 2
make[4]: *** [CMakeFiles/native_default_cpu1-all.dir/build.make:57: CMakeFiles/native_default_cpu1-all] Error 2
make[3]: *** [CMakeFiles/Makefile2:298: CMakeFiles/native_default_cpu1-all.dir/all] Error 2
make[2]: *** [CMakeFiles/Makefile2:177: CMakeFiles/mission-all.dir/rule] Error 2
make[1]: *** [Makefile:214: mission-all] Error 2
make: *** [Makefile:120: all] Error 2
pi@renegade:~/src/NASA/cFS $ 
```
At first I thought this was because I was running on the 64-bit Beta Raspberry Pi OS, so I tried it on a different Pi4, this one running the stable 32-bit distribution (Buster, latest release (8/20), updated yesterday (8/30)). It fails on the 32-bit version also. ",non-bug,https://github.com/nasa/cFE/issues/851
Use more accurate return codes,"In cfe_psp_memory.c, original code returns OS_ERROR(-1) error code, modified at some point to return CFE_PSP_ERROR(-1), but really should more acurratley use CFE_PSP_INVALID_POINTER(-2).  However, this would basically change the API though by returning -2 instead of -1.  Need to determine not sure how well any calling code checks return value and assess the impacts of this potential change.",non-bug,https://github.com/nasa/PSP/issues/43
Add socket shutdown API,"**Is your feature request related to a problem? Please describe.**
No support for graceful shutdown of TCP sockets

**Describe the solution you'd like**
Add shutdown API

**Describe alternatives you've considered**
None

**Additional context**
Stakeholder request

**Requester Info**
Jacob Hageman - NASA/GSFC

ping @excaliburtb
",non-bug,https://github.com/nasa/osal/issues/960
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/tblCRCTool/issues/61
"Should not use ""HK"" packet data elements as active/runtime control values","The `cf_hk_packet_t` values should be used strictly for reporting housekeeping status of CF out to external entities.  However, CF uses some values within this structure for some active control purposes as well. 

For example, the `hk.channel_hk[c].q_size` member is used for checking whether the soft limit is reached yet:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L1429

Note that these HK structures are currently marked as ""packed"" (see #41) so reading/writing from these structs is more costly than normal structures.  Furthermore, tracking depth using a single integer can be somewhat error prone (it is possible to ""miss"" an increment/decrement, and it will never self-correct).

",non-bug,https://github.com/nasa/CF/issues/92
osfilesys.c mixed return types,"In osfilesys.c, some functions return OS_SUCCESS (from osapi.h) and some functions return OS_FS_SUCCESS (from osapi-os-filesys.h).",non-bug,https://github.com/nasa/osal/issues/118
"ES missing coverage in cfe_es_apps.c, CFE_ES_CleanupTaskResources","**Is your feature request related to a problem? Please describe.**
`CFE_ES_CleanupTaskResources` function contains a hard to reach line (1723 below) that remains untested, preventing us from reaching 100% coverage in file.

```
        -: 1709:    /*
        -: 1710:    ** Delete the task itself
        -: 1711:    **
        -: 1712:    ** Note, if the task self exited, then the ID becomes invalid.
        -: 1713:    ** In this case the OS_ERR_INVALID_ID status is returned, but
        -: 1714:    ** that is OK, there is nothing else needed to do.
        -: 1715:    */
       74: 1716:    Result = OS_TaskDelete(OsalId);
       74: 1717:    if (Result == OS_SUCCESS || Result == OS_ERR_INVALID_ID)
        -: 1718:    {
       66: 1719:        Result = CleanState.OverallStatus;
      132: 1720:        if (Result == CFE_SUCCESS && CleanState.FoundObjects > 0)
        -: 1721:        {
        -: 1722:            /* Objects leftover after cleanup -- resource leak */
    #####: 1723:            Result = CFE_ES_APP_CLEANUP_ERR;
        -: 1724:        }
        -: 1725:    }
```

**Describe the solution you'd like**
Add coverage for line to complete 100% coverage in file.

**Additional context**
It's really difficult to recreate a case were CleanState.FoundObjects is greater than 0 since it always gets set to 0 in while(1)

https://github.com/nasa/cFE/blob/main/modules/es/fsw/src/cfe_es_apps.c#L1667-L1732

**Requester Info**
Jose F. Martinez Pedraza / NASA GSFC
",non-bug,https://github.com/nasa/cFE/issues/1696
DS and FM use the same default subtype,"DS and FM both use ""12345"" as the default file subtype

ds/fsw/platform_inc/ds_platform_cfg.h:#define DS_FILE_HDR_SUBTYPE 12345
fm/fsw/platform_inc/fm_platform_cfg.h:#define FM_DIR_LIST_FILE_SUBTYPE 12345

Imported from GSFCCFS-1735",non-bug,https://github.com/nasa/DS/issues/10
Clarify pipe name scope in documentation,"**Is your feature request related to a problem? Please describe.**
From https://github.com/nasa/cFE/issues/650#issuecomment-622570638

> Although the Pipe names will not collide with other Application Pipe names in the cFE

This not correct, because pipe names WILL conflict with other application pipe names within the cFE.  It is actually OSAL that enforces uniqueness of queue names which underpin the SB pipes.

**Describe the solution you'd like**
Update the line in the documentation.

**Describe alternatives you've considered**
None

**Additional context**
See discussion on #650

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/665
"Pointer arguments to functions that are input only should be declared ""const""","Marking the pointer parameter as ""const"", particularly for string arguments, allows them to be called using string literals or other data that is already constant.

This may make a substantial difference on some targets where the executable can actually be linked to put the read-only data section in ROM rather than RAM.  However, in order to do this properly/safely the code must treat this as read-only data.  By declaring it ""const"" the compiler will flag any writes to it.

Changing the prototypes should not affect current usage.

",non-bug,https://github.com/nasa/cFE/issues/59
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/sch_lab/issues/60
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen warnings for `multiple @param documentation settings`

**Describe the solution you'd like**
Resove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MM/issues/39
CFE_SB_GetTotalMsgLength return type doesn't support max packet size,"**Is your feature request related to a problem? Please describe.**
CFE_SB_GetTotalMsgLength returns an uint16, max packet CCSDS packet size can be slightly bigger (65542 vs 65536).  Note the c documentation claims the max return doesn't include the primary header (#528), but the API (h file documentation) claims it's the full packet.  The code actually returns the full packet size (the length field in the CCSDS packet + 7).

**Describe the solution you'd like**
Support full CCSDS packet size.

**Describe alternatives you've considered**
None

**Additional context**
Initiated by JP/PACE

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/529
Expand resource object query options  ,"While integrating File Manager app 2.5.2 with cFE 6.7.1 (OSAL 5.0.1) I ran into an issue. FM has a
command that allows users to receive a telemetry packt listing all of the open files. In order to do this FM needs to be able to query OSAL's file stream resource objects. The current implementation only allows a creator to query all of the resources objects by using OS_ForEachObject(). I think having a more general query feature would be helpful. I added a new function OS_QueryObjectType() that allows anyone (not restricted to the creator) to query a resource type. The specific OSAL changes are below followed by the FM code that uses the function. These changes were made for OpenStaKit 2.1 that can be found at https://github.com/OpenSatKit/OpenSatKit.


## osapi-os-core.h:

/* 
** Typedef for object query OSAL callback functions. A query does not
** have to be performed by  the object creator. All fields of the 
** query_record are completed.
**
** This may be used by multiple APIs
*/

typedef struct
{
   const char *name_entry;
   uint32     creator;
   uint16     refcount;
} OS_query_record_t;

typedef void (*OS_ObjQueryCallback_t)(OS_query_record_t *query_rec, void *callback_arg); //dcm - Added for OSK

/*-------------------------------------------------------------------------------------*/
/**
 * @brief Query an object resource type maintained by the OSAL  
 *
 * User supplied callback is called for all active resources of a particular type
 * regardless of whether the caller created the object.
 *
 */
uint32 OS_QueryObjectType (uint32 obj_type, OS_ObjQueryCallback_t callback_ptr, OS_query_record_t *query_rec, void *callback_arg);  // dcm - Added for OSK


## osapi-idmap.c:

/*----------------------------------------------------------------
 *
 * Function: OS_QueryObjectType
 *
 * Purpose: Implemented per public OSAL API
 *          See description in API and header file for detail
 *
 *-----------------------------------------------------------------*/
uint32 OS_QueryObjectType (uint32 obj_type, OS_ObjQueryCallback_t callback_ptr, OS_query_record_t *query_rec, void *callback_arg)
{

    uint32 obj_index;
    uint32 obj_max;
    uint32 obj_id;
    uint32 active_obj_cnt = 0;
    OS_common_record_t  *obj_rec;
    
    obj_max = OS_GetMaxForObjectType(obj_type);
    if (obj_max > 0)
    {
        OS_Lock_Global_Impl(obj_type);
        obj_index = OS_GetBaseForObjectType(obj_type);
        while (obj_max > 0)
        {
            obj_rec = &OS_common_table[obj_index];
            obj_id = obj_rec->active_id;
            if (obj_id != 0) 
            {

                query_rec->name_entry = obj_rec->name_entry;
                query_rec->creator    = obj_rec->creator;
                query_rec->refcount   = obj_rec->refcount;
                
                /*
                 * Handle the object - Note that we must UN-lock before callback.
                 * The callback function might lock again in a different manner.
                 */
                 OS_Unlock_Global_Impl(obj_type);
                 (*callback_ptr)(query_rec, callback_arg);
                 OS_Lock_Global_Impl(obj_type);
                 
                 ++active_obj_cnt;

            }
            ++obj_index;
            --obj_max;
        }
        OS_Unlock_Global_Impl(obj_type);
    }

   return active_obj_cnt;

} /* End OS_QueryObjectType() */



## fm_cmd_utils.c:

static uint32 open_file_cnt = 0;
static void LoadOpenFileData(OS_query_record_t *query_rec, void *callback_arg)
{

    FM_OpenFilesEntry_t *OpenFilesData = (FM_OpenFilesEntry_t *)callback_arg;
    CFE_ES_TaskInfo_t   TaskInfo;
 
    if (OpenFilesData != (FM_OpenFilesEntry_t *) NULL)
    {
        /* FDTableEntry.Path has logical filename saved when file was opened */
        strcpy(OpenFilesData[open_file_cnt].LogicalName, query_rec->name_entry);

        /* Get the name of the application that opened the file */
        CFE_PSP_MemSet(&TaskInfo, 0, sizeof(CFE_ES_TaskInfo_t));
        if (CFE_ES_GetTaskInfo(&TaskInfo, query_rec->creator) == CFE_SUCCESS)
        {
            strcpy(OpenFilesData[open_file_cnt].AppName, (char *) TaskInfo.AppName);
        } 
    }
    ++open_file_cnt;
       
} /* End LoadOpenFileData() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* FM utility function -- get open files data                      */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

uint32 FM_GetOpenFilesData(FM_OpenFilesEntry_t *OpenFilesData)
{

    OS_query_record_t query_rec;
   
    open_file_cnt = 0;
    OS_QueryObjectType (OS_OBJECT_TYPE_OS_STREAM, LoadOpenFileData, &query_rec, (void *)OpenFilesData);
       
    return open_file_cnt;
    
} /* End FM_GetOpenFilesData */

",non-bug,https://github.com/nasa/osal/issues/293
Remove all mentions of ASIST or ITOS artifacts from documentation,"Some of our doxygen docs still reference ASIST or ITOS artifacts. 

See 
cfs_mm repo: fsw/src/mm_msgdefs.h:l28

Imported from GSFCCFS-1929",non-bug,https://github.com/nasa/SC/issues/20
"CF Code Style - use of side-effects statements within ""if"" ","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1793] CF Code Style - use of side-effects statements within ""if"" 
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 08:55:11 2021

_Original Description_:
CF uses many statements such as this to check the status of a call and store in a local variable:  
  
    if ((status = CFE\_SB\_CreatePipe(&CF\_AppData.cmd\_pipe, CF\_PIPE\_DEPTH, CF\_PIPE\_NAME)) != CFE\_SUCCESS)  
  
Most other CFS code break this out into separate statements, i.e.  
  
   status = CFE\_SB\_CreatePipe(&CF\_AppData.cmd\_pipe, CF\_PIPE\_DEPTH, CF\_PIPE\_NAME)  
   if (status != CFE\_SUCCESS)  
  
I believe GSFC coding standards also prefer the latter form. Recommend updating these statements for readability.  
",non-bug,https://github.com/nasa/CF/issues/56
Could not find the directory ../cfe/inc,"In each app directory, such as sample_app/fsw/for_build/Makefile, there is ""-I../cfe/inc"", but I could find this sub directory in cFE/build/cpu1/cfe, where I can get sample_app int the directory /cFE/build/cpu1. Thanks!
Sincerely",non-bug,https://github.com/nasa/cFE/issues/13
"Older versions of make do not support ""abspath""","**Describe the bug**
The table build procedure uses the GNU make function `$(abspath <file>)` as documented here: https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html#index-abspath-1

However, older versions of make (e.g. 3.8) appear to not support this function as described - although make itself does not throw an error about this function, the result is an empty string.  This in turn causes the command being executed to fail because its missing the argument, which is supposed to be a file name.

**To Reproduce**
Build the software using an older version of GNU make, an error such as this occurs:

```
cd elf/lx_es1_stub/ && /usr/bin/ar x  cfe_test_tbl.c.o
/usr/bin/ar: cfe_test_tbl.c.o: No such file or directory
```

**Expected behavior**
There should be a library filename between the ""x"" and the object filename.

**Code snips**
The command in the makefile here is: https://github.com/nasa/cFE/blob/8852743153ddafcc7b12054f59bc86a361480f99/cmake/tables/elf2cfetbl_rules.mk#L5

Note that the `$(abspath $(<))` evaluated to the empty string.  Whereas on GNU make 4.x this works as described in the documentation.

**System observed on:**
VxWorks 6.9, which ships a binary version of GNU make v3.8.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/2423
doxygen illegeal command,"**Describe the bug**
cfecmdmnems:6: warning: Illegal command \dd as the argument of a \dd command ....
....
cfetlmmnems:211: warning: Illegal command \SB_PIPEOPTSEC as the argument of a \c command

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/289
Confirm valid PERF_ID use,"Originated by abrown4 (69 on babelfish):

cFE reserves 0-31 perf-ids.  Need to confirm ci_lab does not use these.",non-bug,https://github.com/nasa/ci_lab/issues/3
Graceful shutdown for VxWorks/MCP750,"**Is your feature request related to a problem? Please describe.**
When the CFE ""Restart"" command is executed, it calls `CFE_PSP_Restart()`.  In the MCP750 implementation, this ultimately just invokes the `reboot()` kernel API.

This is rather extreme -- all apps/tasks are still running when this command comes in, and this just suddenly reboots the CPU with no notice.  Those tasks could have been doing something important when they suddenly get the carpet ripped out from underneath.

**Describe the solution you'd like**
Should do some sort of graceful shutdown like Linux does with CTRL+C handling.  Cancel or suspend all running tasks first so that when the ""reboot()"" is called there shouldn't be any other activity going on.

**Describe alternatives you've considered**

**Additional context**
During CFE 6.8 testing there was some occasional spurious exceptions observed when issuing the CFE Restart command - causing it to effectively execute a PROCESSOR restart instead of the intended POWERON Reset.

I was not able to reproduce that with the core framework distro, but my hypothesis is that there were possibly some apps running and doing something when the reboot was initiated and this set the stage for indeterminate behavior.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/PSP/issues/216
Clean up table services comments,"**Is your feature request related to a problem? Please describe.**
Inconsistent comments found on line 1368 in cfe_tbl_internal.c '.  



**Describe the solution you'd like**
'cfe_tbl_internal.h' should be replaced with 'cfe_private.h'

**Describe alternatives you've considered**


**Additional context**
General scrub recommended.

**Requester Info**
Dan Knutsen 
NASA GSFC
",non-bug,https://github.com/nasa/cFE/issues/412
Declare leap seconds as unsigned,"**Is your feature request related to a problem? Please describe.**
`int16` type used for `LeapSeconds` in command payload:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L749-L752

also in HK:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L922-L926

API's:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_api.c#L298

**Describe the solution you'd like**
Convert to `uint16`.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1533
Unit test doesn't get installed,"**Is your feature request related to a problem? Please describe.**
Missing unit test from install directory

**Describe the solution you'd like**
Install

**Describe alternatives you've considered**
N/A

**Additional context**
Same as nasa/sample_app#81

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_lib/issues/26
Add Testing Tools to the Security Policy ,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/to_lab is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/to_lab while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/to_lab/issues/87
"Submit cFE 6.4.2 Test Artifacts, User's Guide, and Documentation","Submitting:

1. cFE 6.4.1 test report, log, and data files to the /test-and-ground/test-review-packages/Results directory

2. Update test procedures to the /test-and-ground/asist/local/prc directory

3. Updated doxygen user's guide files to the /docs/CFE UsersGuide/Doxygen directory

4. Unit test results to the /fsw/cfe-core/unit-test/XXResults directories (where XX is the name of the cFE service)

5. Version Description Document to the /docs directory",non-bug,https://github.com/nasa/cFE/issues/106
"`cfe_time_verify.h`, sample platform and sample mission headers require stdbool.h to appropriately evaluate `true` and `false`","**Describe the bug**
Without stdbool.h included, both true and false evaluate to 0 for the preprocessor, so tests in `cfe_time_verify.h` will fail to check for exclusive settings.

**To Reproduce**
```
cd modules/time/fsw/src
ln -s ../../../../cmake/sample_defs/cpu1_platform_cfg.h cfe_platform_cfg.h
ln -s ../../../../cmake/sample_defs/sample_mission_cfg.h cfe_mission_cfg.h 
gcc -E cfe_time_verify.h
```
results in:
```
# 1 ""cfe_time_verify.h""
# 1 ""<built-in>""
# 1 ""<command-line>""
# 31 ""<command-line>""
# 1 ""/usr/include/stdc-predef.h"" 1 3 4
# 32 ""<command-line>"" 2
# 1 ""cfe_time_verify.h""
# 35 ""cfe_time_verify.h""
# 1 ""cfe_mission_cfg.h"" 1
# 36 ""cfe_time_verify.h"" 2
# 1 ""cfe_platform_cfg.h"" 1
# 37 ""cfe_time_verify.h"" 2
cfe_time_verify.h:45:2: error: #error Cannot define both CFE_PLATFORM_TIME_CFG_SERVER and CFE_PLATFORM_TIME_CFG_CLIENT as true!
 #error Cannot define both CFE_PLATFORM_TIME_CFG_SERVER and CFE_PLATFORM_TIME_CFG_CLIENT as true!
...
```

**Expected behavior**
Should only fail if both `CFE_PLATFORM_TIME_CFG_CLIENT` and `CFE_PLATFORM_TIME_CFG_SOURCE` are defined as `true`

**Code snips**
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_verify.h#L43-L51

**System observed on:**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
Note fairly hidden, since `stdbool.h` is included in osal/src/os/inc/common_types.h.  Only observable if these headers are included from a file that doesn't already include osal standard headers.

Also `cfe_time_verify.h` isn't actually included anywhere (#1548)

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1547
"Add ""const"" to function prototypes where appropriate","In particular, this should be done at least for functions that accept char * strings but do not modify them.  If a string literal (by definition a const char *) is passed into function argument that is declared a non-const char *, a compiler warning may be generated and the build will fail if compiled with strict settings.

This ticket will add ""const"" to function parameters where appropriate.",bug,https://github.com/nasa/cFE/issues/40
Always initialize file descriptor in OS_OpenCreate,"**Is your feature request related to a problem? Please describe.**
Numerous false alarms on possible uninitialized variable with OS_OpenCreate use.

**Describe the solution you'd like**
Initialize the file descriptor to OS_OBJECT_ID_UNDEFINED:
https://github.com/nasa/osal/blob/98a251618c4f54e343ff9e2e52d55671cf26a91e/src/os/shared/src/osapi-file.c#L106-L115

**Describe alternatives you've considered**
Could initialize before passing in from each call, but this would provide consistency

**Additional context**
Static analysis warnings (on use)

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/833
Alter the sample app compiler flag to satisfy the cFS-GroundSystem,"The latest commit of the cFS-Groundsystem includes glibc specific features specifically the inclusion of the `struct addrinfo`. The addrinfo struct definition is only exposed in gcc when passed a gnu compliant standard (the current test cmake definition uses `-std=c99`).

More information on the topic of C standard compliance vs the GNU libraries can be found on this stack overflow post: https://stackoverflow.com/questions/33076175/why-is-struct-addrinfo-defined-only-if-use-xopen2k-is-defined",bug,https://github.com/nasa/ECI/issues/39
Add generic circular buffer implementation,"**Is your feature request related to a problem? Please describe.**
Console circular buffer not unique, could utilize a generic implementation

**Describe the solution you'd like**
Implement generic circular buffer

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/865
Option to drop oldest message when msg limit on pipe reached (keep newest),"**Is your feature request related to a problem? Please describe.**
Looks like SB rejects newest message when message limit reached

https://github.com/nasa/cFE/blob/f1be0482d7a9493cb35613a8e43020a66a4a64d3/fsw/cfe-core/src/sb/cfe_sb_api.c#L1577-L1588

In some cases newest message is of higher priority

**Describe the solution you'd like**
Add option (maybe part of QOS?) to remove oldest message from queue when limit reached.  Easy if the message limit is 1, likely need trade study if more than one (reorder queue? Replace oldest w/ newest would put them out of order, add new to queue remove oldest and remove gap? etc).  Performance cost to find/replace/reorder/etc.

**Describe alternatives you've considered**
Just subscribe with enough space to hold all, and chew through entire pipe to get the latest then process.

**Additional context**
Requested by 587

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/541
Construction of CDS Name inconsistent with other named elements,"**Is your feature request related to a problem? Please describe.**
For the api functions dealing with the CDS the variable name has multiple meanings. For RegisterCDS() it wants the CDSName. 
GetCDSBlockIDByName() and GetCDSBlockName() both use the full cds name (of the format ""AppName.CDSName""). The header file for these don't explain the difference very well either. 

Also there is no easy way to get a full CdsName from the CdsName because the function that does that CFE_ES_FormCDSName() is not public. 

**Describe the solution you'd like**
There should be more clarity in the differences  as well as a way to get the full CdsName, like having the register function pass back the full name or making the formCDSName function public. 

**Describe alternatives you've considered**
They could all use the same thing. 

**Requester Info**
Alex Campbell GSFC
",non-bug,https://github.com/nasa/cFE/issues/1401
CFE_TBL_LoadFromFile() should automagically add extension,"One issue that is quite an annoyance with the text-based startup file is that it lists the fully-qualified file name, including extension.  The issue is that the extension varies from system to system, so when I build with e.g. `SIMULATION=native` the extensions need to be `.so`, but when building for RTEMS it needs to be `.obj`.  

Ideally I'd like to see a solution that only lists the basename of the app file in the user-maintained source file, and the extra info, in particular the extension, is attached by the build system based on the file type of loadable modules for the particular platform you are building.

However the first step to any of this would be to get this table-based change in place, then smarter translation on the build side could be a follow-on.

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/588#issuecomment-613030439_",non-bug,https://github.com/nasa/cFE/issues/611
Define and use a version structure for the cFE/OSAL/PSP reporting in tlm,"**Is your feature request related to a problem? Please describe.**
Repeated individual MajorVersion, MinorVersion, Revision elements for cFE/OSAL/PSP
See https://github.com/nasa/cFE/pull/1283#discussion_r611872298

**Describe the solution you'd like**
Use a common structure.

**Describe alternatives you've considered**
None

**Additional context**
From code review #1283

**Requester Info**
Jacob Hageman - NASA/GSFC, submitted by @stashakk
",non-bug,https://github.com/nasa/cFE/issues/1303
Remove/replace/deprecate questionable macros in SB,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_sb.h#L122-L138

**Describe the solution you'd like**
Consider replacing or removing (deprecating).

**Describe alternatives you've considered**
None

**Additional context**
Trying to write specific tickets related to #172 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/843
"Report entry index on event log write error, and possibly total for context","**Is your feature request related to a problem? Please describe.**
Current entry index and total expected not reported in log write error event:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L233-L235

**Describe the solution you'd like**
Would be helpful to provide context for the error `""on entry %d of %d"", i, LogCount`.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1409
Add checks to make sure each required macro is set,"In addition to the documentation mentioning what macros need to be set in the interface file for an app, there should be a compile time warning alerting the user to undefined values.

It might also be prudent to add validity checks against the entered values (for example when a bad MID was provided or a name exceeds a max value for the cfe).",non-bug,https://github.com/nasa/ECI/issues/32
DS should use CFE_FS_InitHeader,"DS initializes and populates the CFE FS header itself (see ds_file.c, lines 273-278)
This requires DS to understand the details of the header structure and could break if that structure changes.
It should instead use the CFE_FS_InitHeader function which is designed to do exactly this.


Imported from GSFCCFS-1018",non-bug,https://github.com/nasa/DS/issues/8
tblCRCTool hardcodes table file header size,Maintenance issue with hardcoded header size in tblCRCTool,non-bug,https://github.com/nasa/tblCRCTool/issues/3
OS_API_Init() should be called before any OSAL calls are used in the unit tests,The unit tests vary in how (or if) they call OS_API_Init() before any OSAL calls are used.,bug,https://github.com/nasa/osal/issues/168
"DataToCopy argument of CFE_ES_CopyToCDS should be ""const""","**Is your feature request related to a problem? Please describe.**
This pointer argument is read-only, the data is passed to PSP which is (correctly) a `const void*`

**Describe the solution you'd like**
Prototype should be:

    CFE_Status_t CFE_ES_CopyToCDS(CFE_ES_CDSHandle_t Handle, const void *DataToCopy)

**Additional context**
Should not cause any issue for existing code (OK to pass non-const to const, just not the other way).  Making const-correct avoids issue/warning if called from an app using `const` data.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1726
"""host_module_id"" in OS_module_prop_t might be too small on 64-bit machines","The `OS_module_prop_t` structure (output by `OS_ModuleInfo`) contains a field ""host_module_id"" which is a `uint32` type.  This is possibly too small for some machines and can cause a warning, notably on 64-bit builds where the host module is tracked natively as a `void*`.

Suggest to either use a `cpuaddr` type instead, or to remove this field altogether as it is really a crutch that shouldn't be needed (a good abstraction means that the app shouldn't ever need to know this, and if the app actually does use it, then the app isn't portable).
",bug,https://github.com/nasa/osal/issues/247
Add a tutorial on how to build the docs locally,"Even though the new documentation automatically gets pushed into github pages, we still need instructions to build locally.",non-bug,https://github.com/nasa/ECI/issues/41
Refactor for logic duplication in CFE_ES_AppCreate and CFE_ES_LoadLibrary,"**Is your feature request related to a problem? Please describe.**
First part of CFE_ES_AppCreate:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L669

and CFE_ES_LoadLibrary:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L835

duplicate logic

**Describe the solution you'd like**
Refactor to reduce duplication

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1331
option to not receive messages I send?,"I would like to have an app (detailed description below) that can publish messages with ID's that the same app is subscribed to. This would create loops and the app would have to mark messages to identify which it sent versus which were sent by other apps.

Given that the pipe has an app id, it would be easy to (in SendMsgFull) skip any pipes that have the same app ID as the caller. Can SB have a pipe option to not receive messages from the owning app?

Detailed description: I am writing a voting application for redundant processor/sensor environments. As a test framework, I would like to read packets on the SB and to make duplicate copies so that the voter would have redundant messages to vote on. I'd like the duplicate packets may have the same ID as the original message.",non-bug,https://github.com/nasa/cFE/issues/221
Add input and output parameters to SAMPLE_LIB_Function to show more advanced generic stubs/hooks,"**Is your feature request related to a problem? Please describe.**
SAMPLE_LIB_Function takes no parameters, so can't show example of registering them and using a hook.

**Describe the solution you'd like**
Add parameters (both pass by value and reference), update stubs to use suggested pattern:
`UT_Stub_RegisterContextGenericArg(UT_KEY(SAMPLE_LIB_Function), param);`

Follow on add a hook (likely from sample_app), register and show use of `UT_Hook_GetArgValueByName`.

**Describe alternatives you've considered**
There are plenty of implementations in core already, but hard to tell what the ""gold standard"" is.  Need to trade complexity/simplicity though...

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_lib/issues/56
add support for 64-bit builds,"cFE should build and run on 64-bit platforms such as x86_64 and ARM Cortex-A53. This should be implemented by making pointer types more generic than ""int32"".",non-bug,https://github.com/nasa/cFE/issues/262
Clean up ES startup object table,"In reviewing #159 it was determined that a better approach to changing the type of the ""StackPtr"" field would be to do some more general cleanup here and remove the unused field.

",non-bug,https://github.com/nasa/cFE/issues/170
"Strict aliasing issue in vxWorks ""intLib"" stub","**Describe the bug**
When compiling with strict aliasing mode (gcc w/ `-O3 -fstrict-aliasing -Wstrict-aliasing=2`), a warning gets triggered in `vxworks-intLib-stubs.c` as follows:

```
osal/src/unit-test-coverage/ut-stubs/src/vxworks-intLib-stubs.c: In function ‘OCS_INUM_TO_IVEC’:
osal/src/unit-test-coverage/ut-stubs/src/vxworks-intLib-stubs.c:60:61: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
   60 |         UT_GetDataBuffer(UT_KEY(OCS_INUM_TO_IVEC), (void **)&VecTbl, &VecTblSize, NULL);
      |                                                             ^~~~~~~
cc1: all warnings being treated as errors
```

**To Reproduce**
Build with new-ish gcc (10.3) w/ `-O3 -fstrict-aliasing -Wstrict-aliasing=2` options and tests enabled (so stubs are built).

**Expected behavior**
Should be clean.

**System observed on:**
Ubuntu

**Additional context**
Could be argued that stubs should not be built with optimization+strict aliasing rules, but the fix is relatively easy to avoid this warning.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1167
Report CFE_ES_WaitForSystemState timeouts,"**Is your feature request related to a problem? Please describe.**
Timeouts aren't reported when using `CFE_ES_WaitForSystemState`.
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/es/fsw/src/cfe_es_api.c#L621-L625

**Describe the solution you'd like**
Syslog from within the API.

**Describe alternatives you've considered**
Note the syslog from within the API provides the minimal amount of notification only, expectation is apps/services would handle the return for any local/additional actions that may be required (like system heath/synchronization status reporting)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT - updated possible solutions.",non-bug,https://github.com/nasa/cFE/issues/1467
Enhanced version numbering,"Use CI_LAB_VERSION from cfecfs_version_info.h if available and report on NOOP and startup (along with classic version numbering""

Classic version numbering can then just be updated on release, vs for every commit.",non-bug,https://github.com/nasa/sample_app/issues/5
Update the documentation for each of the ECI structures,"Even though everything was converted into auto-doc comments for Doxygen, the content has been lacking. Specifically, we need to document the members of the structures provided for use in the `eci_interface.h` file since it's more user facing. For maintainability, each structure should have a good explanation of it's intended use and a brief explanation of it's members.",non-bug,https://github.com/nasa/ECI/issues/29
Update OS_U32ValueWrapper_t name and consider using uintptr_t,"**Is your feature request related to a problem? Please describe.**
Confusion in name where `U32` is used for a union that'll hold a `void *`.  Also recommendation to consider using `uintptr_t`

**Describe the solution you'd like**
Consider rename/`uintptr_t` use.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/869
CFE_PSP_MemValidateRange() always fails on 64-bit targets,"**Describe the bug**
When attempting to telemeter Memory Pool stats, CFE ES calls `CFE_PSP_MemValidateRange()` on the address of the pool data.  However on 64 bit Linux this function ends up always returning an error, because the internal table is not set up for 64 bit address

**To Reproduce**
Run CFE on a 64-bit pc-linux platform, then issue CFE ES command code `CFE_ES_SEND_MEM_POOL_STATS_CC` (22) with a valid Pool ID.

This always fails and says invalid handle, even though the handle is actually fine, because it is not passing the `CFE_PSP_MemValidateRange()` check.

**Expected behavior**
Check should pass.

**Code snips**
If applicable, add references to the software.

**System observed on:**
Ubuntu 20.04 (64-bit)

**Additional context**
This table is still using `uint32` sizes.  It must have been missed in the previous updates that changed much of this to `size_t`.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/281
OS_unmount() & OS_chkfs() don't catch OS_TranslatePath() failures,"in osfilesys.c OS_unmount(), the return value from OS_TranslatePath isn't checked.",bug,https://github.com/nasa/osal/issues/117
Doxygen warnings,"**Describe the bug**
Doxygen warnings due to lack of documentation in the following files:

- `cFS/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c`
- `cFS/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.h`

Specifically for function `CFE_TBL_LoadFromFile` in both files

**To Reproduce**
Steps to reproduce the behavior:
1. Build documentation using `make doc`
2. Observe relevant warnings in `../cFS/build/doc/warnings.log`

**Expected behavior**
Functions should be properly documented to avoid warnings

**Reporter Info**
Leor Bleier, NASA GSFC\Code 582",non-bug,https://github.com/nasa/cFE/issues/681
Add better support for pointer return values in UT assert,"**Is your feature request related to a problem? Please describe.**
Currently, UT assert only as built-in support for 32-bit integer return values, in the form of `UT_SetDefaultReturnValue` and `UT_SetDeferredRetcode`.   The majority of CFE/CFS APIs have a 32-bit integer return value, so this has been good enough.

However, there are also a fair number of CFE functions that return pointer values, and these `int32` APIs do not currently work for pointer returns.  Any stub that returns a pointer must have its own custom handler function to help set the return value, and so support is spotty.  Every function that has a pointer return may have a slightly different way to control the return value, and a different range of things that can be done by the test to modify its behavior.

**Describe the solution you'd like**
Add two new APIs to UT assert:
- `UT_SetDefaultReturnObject`
- `UT_SetDeferredReturnObject`

These would work like the current integer functions, respectively, but accept pointers with a size instead of an integer.  This type of signature could support ALL types of return values, including 8-bit, 16-bit, 64-bit, and potentially even larger structures (even though code should not output large structures via return value, it could be done).

**Describe alternatives you've considered**
A halfway point could be to just add generic reusable handlers that return a pointer, and could be registered to any function.  But that would not be as clean, and would still need a separate function for each type.

**Additional context**
This can be added without breaking any currently-existing tests or stubs, because its only a new type of return record.  It would not change anything about the existing logic, just extend it.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1344
Combine loops in SC_BuildTimeIndexTable,"There are two loops in SC_BuildTimeIndexTable that appear to be easily combinable.  

Imported from GSFCCFS-1466",non-bug,https://github.com/nasa/SC/issues/10
Enforce Strict ASCII,Replace all non-ASCII characters (i.e. copyright symbol) with ASCII equivalent.,bug,https://github.com/nasa/cFE/issues/70
Add unit test example,"The sample app should include an example of how to use the ut_assert, and link/build/run.",non-bug,https://github.com/nasa/sample_app/issues/8
Add OS_DEBUG warning if task locks a mutex multiple times,"**Is your feature request related to a problem? Please describe.**
As noted in nasa/CFE#948, there are cases in CFE where a mutex may be taken by the same task more than once.  This is technically allowed because OSAL enables recursive mutexes for all supported OS types.

But my concern is that:

- recursive mutexes aren't guaranteed to be provided - i.e. some minimal RTOS's might not have this facility at all. 
- if recursive mutexes are provided, they are slower than the normal (non-recursive) counterpart.
- anything that depends on recursive mutexes generally indicates deeper code design flaws - i.e. insufficient separation of internal vs. external APIs, function loops, circular subsystem dependencies, etc.

**Describe the solution you'd like**
Start by introducing an `OS_DEBUG` warning if the same task takes a mutex more than once.  This can help identify the issues, and it is very easy to add.  It also won't be displayed unless OSAL is compiled with debug messages enabled.

**Additional context**
A future / follow up change, once dependencies on recursive mutexes are fix, could be to allow the user to optionally elect to use non-recursive/fast mutexes via an osconfig option.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/623
inttypes.h-style printf format strings for common types,"**Is your feature request related to a problem? Please describe.**
For Message ID's, cFS generally use 0x%08X but sometimes it's printed with 0x%08x (lowercase a-f), or without the 0x, or even as %d or %u. (Although I don't know if that's used anymore.) 

**Describe the solution you'd like**
Per https://en.wikipedia.org/wiki/C_data_types#Printf_and_scanf_format_specifiers C99 added printf format string macros for int types and it would be keen to follow this practice. I suggest PRIxMSG or PRIdMSG for printing (generally, sending an event message) a message ID in hex or decimal (defined as `""0x%08X""` and `""%u""` for unsigned integer (32-bit) MsgIds. So instead of:

`...SendEvent(...""Error: unable to process message (MsgId=0x%08X)"", MsgId)`

it would be:

`...SendEvent(...""Error: unable to process message (MsgId="" PRIxMSG "")"", MsgId)`

**Describe alternatives you've considered**
Leave well enough alone...:D

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/2010
Use of globals to store ephemeral / in-transit data,"CF stores its current working pointers in a global variable called `CF_AppData.engine`:

In particular:
`CF_AppData.engine.in.msg` has a pointer to the buffer last received from SB
`CF_AppData.engine.in.bytes_received` has the size of that buffer (and is actually updated during the course of processing)
`CF_AppData.engine.in.src` and `CF_AppData.engine.in.dst` have the data extracted from the header of the most recent message.
and so forth...

Importantly: __none of these values are supposed to be carried across wakeups__.  All values are reset in their entirety on every wakeup, and in fact with each channel.  All data is ephemeral and is only valid while the CFDP app is actively processing that packet.  As soon as processing of the current packet completes, the data is no longer valid.    When the wakeup cycle completes, only the `CF_AppData.engine.in.msg` is actively cleared.  All other fields will be left with whatever data was in them.

Also notable - there is a mixture of API calls where sometimes the pointer to the packet data is passed in directly, as it is here via the `ph` argument:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_r.c#L436-L447

The call to `CF_CFDP_R_ProcessFd` also needs the packet data, but it does not pass it along.  Instead, this function grabs it from the global (theoretically the same packet):

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_r.c#L221-L224

This inconsistency should be addressed.  If the intent is to _always_ store the current packet in a global, then code needing to access it should _always_ retrieve it from the global.  There should not be some APIs which pass a pointer to the structure, mixed with others that get it directly from the global (where they are supposed to be acting on the same data), as this creates the opportunity that they could diverge.  

For ephemeral data, it is fine to pre-allocate a buffer in a global to avoid dynamic allocation, but the pointer to this data should be passed consistently down through the API where needed.  This design allows for safer evolution, permitting the use of multiple buffers or even multiple threads should that become a requirement (e.g. create a child task per CFDP channel to make them more independent).
",non-bug,https://github.com/nasa/CF/issues/91
Possible bug in os/posix/osapi.c when running osal-core-test / BSEM tests.,"**Describe the bug**

I apologize in advance in case the issue I am reporting is caused by my misunderstanding of the OSAL POSIX code and the problem is rather somewhere on my end.

I am trying to port the POSIX OSAL code to macOS. It is a rather long adventure but it looks like there can be a happy end. By now I am going through all of the unit and integration tests in this repository in order to see which things have to be changed in order to run on macOS.

This issue I have first reported on StackOverflow because I thought the problem was on the macOS side: [Calling pthread_cond_destroy results in “Function not implemented” ENOSYS on macOS](https://stackoverflow.com/questions/59560940/calling-pthread-cond-destroy-results-in-function-not-implemented-enosys-on-mac).

```c
if (pthread_cond_destroy(&(sem->cv)) != 0) {
    printf(""pthread_cond_destroy %d %s\n"", errno, strerror(errno)); // my addition
    ...
}
```

results in `pthread_cond_destroy 78 Function not implemented` as I am running it on macOS.

Looking at the code further I have found that there might be a bug in the `OS_BinSemCreate_Impl` function along these lines:

```
        /*
         ** Initialize the condition variable
         */
        ret = pthread_cond_init(&(sem->cv), NULL);
        if (ret != 0)
        {
            OS_DEBUG(""Error: pthread_cond_init failed: %s\n"",strerror(ret));
            return_code = OS_SEM_FAILURE;
            break;
        }

        cond_created = 1;

        /*
         ** fill out the proper OSAL table fields
         */

        memset(sem, 0, sizeof (*sem));
        sem->current_value = initial_value;

        return_code = OS_SUCCESS;
```

I would like to highlight that the `memset(sem, 0, sizeof (*sem));` happens AFTER the `ret = pthread_cond_init(&(sem->cv), NULL);` line which means that `memset` corrupts the work that is done by `pthread_cond_init`. 

If I put the `memset` string BEFORE the `pthread_cond_init` line, the `BSEM` test passes.

**To Reproduce**

I am reproducing this on a private fork of `nasa/osal` and it is a very hacky branch to make it work on macOS. At the moment I can only suggest to do a mental reasoning about the critical lines: `memset...` and `pthread_cond_init...` lines as I described above.

**Expected behavior**

This is how the test log looks like with my change above and this is what I expect to always happen:

```
/Users/stanislaw/workspace/code/cfs-osal-posix-mac/cmake-build-debug/tests/osal-core-test

[BEGIN] PC-LINUX UNIT TEST

[BEGIN] 01 BSEM
[ PASS] 01.001 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.002 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.003 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.004 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.005 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.006 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.007 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.008 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.009 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.010 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.011 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.012 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.013 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.014 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.015 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.016 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.017 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.018 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.019 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.020 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.021 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.022 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.023 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.024 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.025 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.026 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.027 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.028 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.029 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.030 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.031 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.032 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.033 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.034 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.035 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.036 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.037 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.038 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.039 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.040 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.041 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.042 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.043 osal-core-test.c:334 - OS_BinSemCreate, recreate 0
[ PASS] 01.044 osal-core-test.c:338 - OS_BinSemCreate, dupe name 0
[ PASS] 01.045 osal-core-test.c:342 - OS_BinSemCreate, recreate 2
[ PASS] 01.046 osal-core-test.c:346 - OS_BinSemCreate, recreate 3
[ PASS] 01.047 osal-core-test.c:353 - OS_BinSemGetIdByName, Bin 0
[ PASS] 01.048 osal-core-test.c:357 - OS_BinSemGetIdByName, Bin 1
[ PASS] 01.049 osal-core-test.c:361 - OS_BinSemGetIdByName, Bin 2
[ PASS] 01.050 osal-core-test.c:365 - OS_BinSemGetIdByName, Bin 3
[ PASS] 01.051 osal-core-test.c:371 - OS_BinSemDelete, Old ID
[ PASS] 01.052 osal-core-test.c:375 - OS_BinSemDelete, Bin 0
[ PASS] 01.053 osal-core-test.c:380 - OS_BinSemDelete, Bin 1
[ PASS] 01.054 osal-core-test.c:383 - OS_BinSemDelete, Bin 2
[ PASS] 01.055 osal-core-test.c:386 - OS_BinSemDelete, Bin 3
[  END] 01 BSEM                 TOTAL::55    PASS::55    FAIL::0      MIR::0      TSF::0      N/A::0   

COMPLETE: 1 tests Segment(s) executed


Process finished with exit code 0
```

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)
 - OS: macOS Mojave 10.14.6 (18G87)
 - Versions OSAL repository build from this commit:

```
commit 155e9ebcd6d1930890231a44237e6883d229d22c
Author: Jake Hageman <jacob.hageman@nasa.gov>
Date:   Sat Nov 30 13:47:11 2019 -0500

    Update version and README
```


**Additional context**

This is how the issue manifests itself (I am only running the related tests).

```
/Users/stanislaw/workspace/code/cfs-osal-posix-mac/cmake-build-debug/tests/osal-core-test

[BEGIN] PC-LINUX UNIT TEST

[BEGIN] 01 BSEM
[ PASS] 01.001 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.002 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.003 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.004 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.005 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.006 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.007 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.008 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.009 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.010 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.011 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.012 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.013 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.014 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.015 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.016 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.017 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.018 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.019 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.020 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.021 osal-core-test.c:312 - OS_BinSemCreate, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.022 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.023 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.024 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.025 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.026 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.027 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.028 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.029 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.030 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.031 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.032 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.033 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.034 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.035 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.036 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.037 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.038 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.039 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.040 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.041 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.042 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ FAIL] 01.043 osal-core-test.c:334 - OS_BinSemCreate, recreate 0
[ PASS] 01.044 osal-core-test.c:338 - OS_BinSemCreate, dupe name 0
[ FAIL] 01.045 osal-core-test.c:342 - OS_BinSemCreate, recreate 2
[ FAIL] 01.046 osal-core-test.c:346 - OS_BinSemCreate, recreate 3
[ PASS] 01.047 osal-core-test.c:353 - OS_BinSemGetIdByName, Bin 0
[ FAIL] 01.048 osal-core-test.c:357 - OS_BinSemGetIdByName, Bin 1
[ PASS] 01.049 osal-core-test.c:361 - OS_BinSemGetIdByName, Bin 2
[ PASS] 01.050 osal-core-test.c:365 - OS_BinSemGetIdByName, Bin 3
pthread_cond_destroy 78 Function not implemented
[ PASS] 01.051 osal-core-test.c:371 - OS_BinSemDelete, Old ID
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.052 osal-core-test.c:375 - OS_BinSemDelete, Bin 0
pthread_cond_destroy 78 Function not implemented
[ PASS] 01.053 osal-core-test.c:380 - OS_BinSemDelete, Bin 1
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.054 osal-core-test.c:383 - OS_BinSemDelete, Bin 2
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.055 osal-core-test.c:386 - OS_BinSemDelete, Bin 3
[  END] 01 BSEM                 TOTAL::55    PASS::28    FAIL::27     MIR::0      TSF::0      N/A::0   

COMPLETE: 1 tests Segment(s) executed


Process finished with exit code 2
```

This is the original StackOverflow report:

```
I am trying to make some Linux-based code run on macOS. It is the POSIX OSAL layer for NASA Core Flight System as found here: https://github.com/nasa/osal.

I am observing that the code uses POSIX conditions and in particular, there is a call like the following:

    if (pthread_cond_destroy(&(sem->cv)) != 0) {
        printf(""pthread_cond_destroy %d %s\n"", errno, strerror(errno)); // my addition
        ...
    }

On macOS, the tests related to this code provided in the OSAL repository always fail because the call to `pthread_cond_destroy` always results in:

    pthread_cond_destroy 78 Function not implemented

I have found an example in the Apple documentation which shows an example of [Using Conditions](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW4) (Threading Programming Guide / Synchronization / Using Conditions) and in that example there is no call to `pthread_cond_destroy` but I cannot make any conclusions on whether that call should be there or not because the example is simplified.

This is how the header looks like on my machine:

    __API_AVAILABLE(macos(10.4), ios(2.0))
    int pthread_cond_destroy(pthread_cond_t *);


I am wondering if `pthread_cond_*` functionality is simply missing on macOS and I have to implement a replacement for it or there is some way to make it work.

EDIT: The minimal example is working fine for me. The problem should be somewhere around the problematic code. What I still don't understand is why I am getting ENOSYS/78 error code, for one thing it is not mentioned on the man page [man/3/pthread_cond_destroy](https://linux.die.net/man/3/pthread_cond_destroy): 

    #include <iostream>
    #include <pthread.h>

    int main() {
      pthread_cond_t condition;
      pthread_cond_init(&condition, NULL);
      int result = pthread_cond_destroy(&condition);
      assert(result == 0);
      assert(errno == 0);
      std::cout << ""Hello, World!"" << std::endl;
      return 0;
    }
```

**Reporter Info**
Stanislav Pankevich
",bug,https://github.com/nasa/osal/issues/337
TBL unreachable branch in CFE_TBL_GetWorkingBuffer and CFE_TBL_UpdateInternal (memcpy overlap avoidance),"**Is your feature request related to a problem? Please describe.**
Can't hit ever hit the second false condition below since it only sets the buffer to inactive or a working buffer (never the same as active):
```
     789 [ +  + ][ +  - ]:         22 :             if ((*WorkingBufferPtr) != NULL &&
     790                 :         17 :                 (*WorkingBufferPtr)->BufferPtr != RegRecPtr->Buffers[RegRecPtr->ActiveBufferIndex].BufferPtr)
     791                 :            :             {
     792                 :            :                 /* In case the file contains a partial table load, get the active buffer contents first */
     793                 :         17 :                 memcpy((*WorkingBufferPtr)->BufferPtr, RegRecPtr->Buffers[RegRecPtr->ActiveBufferIndex].BufferPtr,
     794                 :            :                        RegRecPtr->Size);
     795                 :            :             }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L789-L795

Same pattern in CFE_TBL_UpdateInternal
```
    1009         [ +  - ]:          6 :                 if (RegRecPtr->Buffers[0].BufferPtr != CFE_TBL_Global.LoadBuffs[RegRecPtr->LoadInProgress].BufferPtr)
    1010                 :            :                 {
    1011                 :          6 :                     memcpy(RegRecPtr->Buffers[0].BufferPtr,
    1012                 :          6 :                            CFE_TBL_Global.LoadBuffs[RegRecPtr->LoadInProgress].BufferPtr, RegRecPtr->Size);
    1013                 :            :                 }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L1008-L1013

**Describe the solution you'd like**
Trade ""defensive"" programming (avoids memcpy overlap which is undefined behavior) w/ removing the impossible condition check since the only way to reach it would be to introduce a bug.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1899
Use CFE_MSG_CMD_HDR_INIT macro in Message Action Table implementation,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Current raw buffer/command implementation in MAT table isn't portable across different endian systems and is somewhat challenging/messy to implement.

**Describe the solution you'd like**
Similar to nasa/SC#35, the message action table could use the `CFE_MSG_CMD_HDR_INIT` macro and real command types to simplify table implementation.

Suggestion:
Typedef a union that contains each of the message types in the table, then define the array w/ the MAT info and unioned element

```
typedef union {cmda, cmdb} cmdbuff;
typedef struct {mat_info, cmdbuff} mat_element;
then mat_element[X] = ... where cmdbuff.cmda can set the header w/ the macro and actual elements of command directly
```

**Describe alternatives you've considered**
None

**Additional context**
Similar possible approach with SCH

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/HS/issues/43
cppcheck for cfe-core/src,"**Is your feature request related to a problem? Please describe.**
Resolve cpp check warning. 

```
[fsw/cfe-core/src/es/cfe_es_api.c:724] -> [fsw/cfe-core/src/es/cfe_es_api.c:731]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_api.c:1473] -> [fsw/cfe-core/src/es/cfe_es_api.c:1481]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_api.c:1553] -> [fsw/cfe-core/src/es/cfe_es_api.c:1555]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_api.c:1568] -> [fsw/cfe-core/src/es/cfe_es_api.c:1570]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_apps.h:177] -> [fsw/cfe-core/src/es/cfe_es_apps.c:671]: (style, inconclusive) Function 'CFE_ES_LoadLibrary' argument 2 names different: declaration 'Path' definition 'FileName'.
[fsw/cfe-core/src/es/cfe_es_apps.h:179] -> [fsw/cfe-core/src/es/cfe_es_apps.c:673]: (style, inconclusive) Function 'CFE_ES_LoadLibrary' argument 4 names different: declaration 'Name' definition 'LibName'.
[fsw/cfe-core/src/es/cfe_es_cds.c:152] -> [fsw/cfe-core/src/es/cfe_es_cds.c:160]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_cds.c:515] -> [fsw/cfe-core/src/es/cfe_es_cds.c:518]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_cds.c:699] -> [fsw/cfe-core/src/es/cfe_es_cds.c:705]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_start.h:96] -> [fsw/cfe-core/src/es/cfe_es_perf.c:62]: (style, inconclusive) Function 'CFE_ES_SetupPerfVariables' argument 1 names different: declaration 'StartType' definition 'ResetType'.
[fsw/cfe-core/src/es/cfe_es_shell.c:285] -> [fsw/cfe-core/src/es/cfe_es_shell.c:289]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_shell.c:359] -> [fsw/cfe-core/src/es/cfe_es_shell.c:379]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_start.h:95] -> [fsw/cfe-core/src/es/cfe_es_start.c:483]: (style, inconclusive) Function 'CFE_ES_InitializeFileSystems' argument 1 names different: declaration 'StartType' definition 'start_type'.
[fsw/cfe-core/src/es/cfe_es_start.c:51] -> [fsw/cfe-core/src/es/cfe_es_start.c:961]: (style, inconclusive) Function 'CFE_ES_MainTaskSyncDelay' argument 1 names different: declaration 'AppMinState' definition 'AppStateId'.
[fsw/cfe-core/src/es/cfe_es_log.h:254] -> [fsw/cfe-core/src/es/cfe_es_syslog.c:352]: (style, inconclusive) Function 'CFE_ES_SysLogSetMode' argument 1 names different: declaration 'LogMode' definition 'Mode'.
[fsw/cfe-core/src/es/cfe_es_log.h:277] -> [fsw/cfe-core/src/es/cfe_es_syslog.c:376]: (style, inconclusive) Function 'CFE_ES_SysLog_vsnprintf' argument 4 names different: declaration 'ArgPtr' definition 'ap'.
[fsw/cfe-core/src/fs/cfe_fs_api.c:169] -> [fsw/cfe-core/src/fs/cfe_fs_api.c:176]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/fs/cfe_fs_decompress.c:206]: (style) Variable 'stamp' is assigned a value that is never used.
[fsw/cfe-core/src/fs/cfe_fs_priv.c:66] -> [fsw/cfe-core/src/fs/cfe_fs_priv.c:68]: (style) Variable 'Stat' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:354] -> [fsw/cfe-core/src/sb/cfe_sb_api.c:2107]: (style, inconclusive) Function 'CFE_SB_ReadQueue' argument 1 names different: declaration 'pd' definition 'PipeDscPtr'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:355] -> [fsw/cfe-core/src/sb/cfe_sb_api.c:2109]: (style, inconclusive) Function 'CFE_SB_ReadQueue' argument 3 names different: declaration 'time_out' definition 'Time_Out'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:355] -> [fsw/cfe-core/src/sb/cfe_sb_api.c:2110]: (style, inconclusive) Function 'CFE_SB_ReadQueue' argument 4 names different: declaration 'message' definition 'Message'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:369] -> [fsw/cfe-core/src/sb/cfe_sb_buf.c:60]: (style, inconclusive) Function 'CFE_SB_GetBufferFromPool' argument 2 names different: declaration 'size' definition 'Size'.
[fsw/cfe-core/src/sb/cfe_sb_init.c:88] -> [fsw/cfe-core/src/sb/cfe_sb_init.c:93]: (style) Variable 'Stat' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/sb/cfe_sb_init.c:220]: (style) Unused variable: KeyVal
[fsw/cfe-core/src/sb/cfe_sb_priv.h:405] -> [fsw/cfe-core/src/sb/cfe_sb_priv.c:793]: (style, inconclusive) Function 'CFE_SB_AddDest' argument 2 names different: declaration 'Dest' definition 'NewNode'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:406] -> [fsw/cfe-core/src/sb/cfe_sb_priv.c:841]: (style, inconclusive) Function 'CFE_SB_RemoveDest' argument 2 names different: declaration 'Dest' definition 'NodeToRemove'.
[fsw/cfe-core/src/sb/cfe_sb_priv.c:708]: (style) Variable 'Val' is assigned a value that is never used.
[fsw/cfe-core/src/sb/cfe_sb_task.c:140] -> [fsw/cfe-core/src/sb/cfe_sb_task.c:142]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/sb/cfe_sb_util.c:112]: (style) Unused variable: size
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:65] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:74]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:519] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:527]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1051] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1058]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1206] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1213]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1419] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1425]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1524] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1531]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1568] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1576]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1645] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1651]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_internal.c:380] -> [fsw/cfe-core/src/tbl/cfe_tbl_internal.c:383]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_internal.c:540] -> [fsw/cfe-core/src/tbl/cfe_tbl_internal.c:545]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_internal.c:1463] -> [fsw/cfe-core/src/tbl/cfe_tbl_internal.c:1466]: (style) Variable 'Status' is reassigned a value before the old one has been used.
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/425
Reference autogenerated docs,"**Is your feature request related to a problem? Please describe.**
See #61 
No current references to the generated documents

**Describe the solution you'd like**
Once the docs are deployed the first time (after push of #61 to master and CI completes) add references from at least README.md.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/63
Implement exception logging/capture in PSP,"**Is your feature request related to a problem? Please describe.**
Exception handling in CFE is not possible due to race conditions and differences between platforms, so the PSP needs to take a greater role in handling these events.

**Describe the solution you'd like**
PSP should capture exception contexts locally, and provide a more abstract API for CFE to poll and retrieve them rather than pushing direct.

**Additional context**
Related to nasa/cfe#411, nasa/cfe#76

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/158
Variables declared mid-function,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A few cases of variables declared mid-function left here.
Copy of https://github.com/nasa/CF/issues/109

**Expected behavior**
All variables should be declared at the top of the function.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/LC/issues/49
Copy of Overlapping Memory in snprintf,"**Describe the bug**
In the call to function snprintf, the object pointed to by argument local->volume_name may overlap with the object pointed to by argument local->system_mountpt.

local->system_mountpt is 64 bytes off of the address of OS_filesys_table[OS_ObjectIndexFromToken(token)].

local->volume_name is 32 bytes off of the address of OS_filesys_table[OS_ObjectIndexFromToken(token)]

**Expected behavior**
Resolve possible overlap. 

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/src/os/posix/src/os-impl-filesys.c#L175

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/osal/issues/1173
Auto increment sequence on CMD packets,"**Is your feature request related to a problem? Please describe.**
The `CFE_SB_TransmitMsg()` function has a boolean parameter to indicate if the sequence number should be incremented automatically based on the route.  This route-based sequence number overrides whatever was in the buffer.

However, this only works on telemetry packets.  There is a test that checks specifically if the packet is TLM, and only updates the sequence number if so.

This means that all locally-generated messages of the ""CMD"" variety - which includes the various TIME messages e.g. 1Hz, and all ""SEND_HK"" packets generated by SCH - always have a sequence number of 0 in their header.

**Describe the solution you'd like**
The sequence number should probably be valid on all these - otherwise there is no way to tell if a message was missed.

**Additional context**
It is not clear why only locally-generated TLM packets would have a valid sequence, but not locally-generated CMD packets.

Note SCH_LAB currently calls `CFE_SB_TransmitMsg()` with the value set `false` -- so this would have to change too in order to get valid sequence numbers in SEND_HK packets.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1157
New compile warnings with GCC 11.x,"**Describe the bug**
The newer versions of GCC report new warnings.  These appear to be mostly false alarms, but easy to fix nonetheless.

**To Reproduce**
Build OSAL using recent GCC

**Expected behavior**
Should compile without warnings or errors

**Code snips**

```
osal/src/unit-test-coverage/vxworks/src/coveragetest-tasks.c: In function ‘Test_OS_TaskDetach_Impl’:
src/unit-test-coverage/vxworks/src/coveragetest-tasks.c:151:28: error: ‘token’ may be used uninitialized [-Werror=maybe-uninitialized]
src/unit-test-coverage/shared/src/coveragetest-clock.c: In function ‘Test_OS_SetLocalTime’:
src/unit-test-coverage/shared/src/coveragetest-clock.c:55:26: error: ‘time_struct’ may be used uninitialized [-Werror=maybe-uninitialized]
osal/src/unit-tests/oscore-test/ut_oscore_task_test.c: In function ‘UT_os_task_getid_by_sysdata_test’:
osal/src/unit-tests/inc/ut_os_support.h:112:28: error: ‘sysdata’ may be used uninitialized [-Werror=maybe-uninitialized]
```

**System observed on:**
Ubuntu 21.10, gcc 11.2.0

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1199
Questionable address adjustment in SB buffers may break alignment requirements,"**Describe the bug**
Software bus message buffers should handle most restrictive alignment requirements for a message.  Address arithmetic used in manipulating buffers may break this alignment on some systems.  Even if not broken, a maintenance issue since an update to `CFE_SB_BufferD_t` could break things unexpectedly.

https://github.com/nasa/cFE/blob/32f3deeebf136ac427a6b779cb9e4854e73826f1/fsw/cfe-core/src/sb/cfe_sb_api.c#L1637-L1641
https://github.com/nasa/cFE/blob/32f3deeebf136ac427a6b779cb9e4854e73826f1/fsw/cfe-core/src/sb/cfe_sb_buf.c#L84-L88
https://github.com/nasa/cFE/blob/32f3deeebf136ac427a6b779cb9e4854e73826f1/fsw/cfe-core/src/sb/cfe_sb_buf.c#L119

**To Reproduce**
Not confirmed, but likely won't meet alignment requirement for a message with long double.

**Expected behavior**
Safer to use the real buffer type (instead of `void *`) in the descriptor along with offsetof to size the buffer correctly (CFE_SB_Msg_t for now, or maybe CFE_SB_Buffer_t from #1019)

**Code snips**
See above

**System observed on:**
NA - inspection

**Additional context**
#1019, #1009 

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1020
Why does CFE_SB_SendMsg stub not save the passed in MsgPtr like CFE_SB_TimeStampMsg stub does?,"**Describe the bug**
CFE_SB_SendMsg copies from local the contents of the passed in message pointer, but CFE_SB_TimeStampMsg copies from local the value of MsgPtr.  

**To Reproduce**
Steps to reproduce the behavior:
1. https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L474-L494

2. Compare with https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L709-L715

**Expected behavior**
Default CFE_SB_SendMsg stub behavior should be like CFE_SB_TimeStampMsg.  A hook should be required to provide extra behavior.

**Code snips**
See above.

**System observed on:**
RHEL 7.6

**Additional context**
N/A

**Reporter Info**
Alan Gibson NASA GSFC/587
",non-bug,https://github.com/nasa/cFE/issues/818
Global build options no longer global,"**Describe the bug**
Deprecation flags not showing up in build for cFE/apps/PSP

**To Reproduce**
Prep with SIMULATION=native ENABLE_UNIT_TEST=true OMIT_DEPRECATED=true
make VERBOSE=true and see the DEPRECATED flags not applied to cFE/apps/PSP

**Expected behavior**
Global flags should be global

**Code snips**
None

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle (was testing fix to #484)

**Additional context**
Critical for CI testing...

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/644
Update grut699-vxworks6 cfe_psp_start.c per white box unit testing results,"During white box testing the following issue was identified with the grut699-vxworks6 version of cfe_psp_start.c

* In CFE_PSP_GetRestartType, the input pointer is not checked for NULL prior to dereferencing it.

Issue identified during #14  white box testing, commit: [changeset:ad4e7c5f]",bug,https://github.com/nasa/PSP/issues/41
OSAL API Documentation Should Be Doxygen Based,"The OSAL API documents are currently available as separate word and .pdf documents.  The API's are defined and maintained in the source code.  Any changes or new findings to the API's can easily get left undocumented, creating a disconnect between the source code and what is stated in the OSAL API word and .pdf documents.  It is highly recommended to couple the documentation with the source code via doxygen. ",non-bug,https://github.com/nasa/osal/issues/144
OSAL should separate task allocation from task activation,"**Is your feature request related to a problem? Please describe.**
Currently `OS_TaskCreate()` both allocates and activates a task.  However in embedded software it is often useful to pre-allocate a task - which creates the stack and ID and anything else that might fail - but hold it stopped in the kernel scheduler while other initialization is completed.  When the app is ready, it makes a separate call to activate the previously-allocated task.  

The benefit is that the activation step doesn't do any new allocation so it is very unlikely to fail (simplifying error clean up), as well as being fast to execute as it just unblocks the task.

Most RTOS's actually do it this way internally, where VxWorks uses `taskInit` followed by `taskActivate`, and RTEMS uses `rtems_task_create` followed by `rtems_task_start`.  Notably POSIX/pthreads does not separate these two actions, but easy to mimic/replicate via the new OS_WaitForStateChange() function.

**Describe the solution you'd like**
Add two new functions:
 - `int32 OS_TaskAllocate(...)`, similar to OS_TaskCreate but without starting the task
 - `int32 OS_TaskActivate(...)`, which starts the task

The existing `OS_TaskCreate()` becomes just a combination of the two.  Which it really as it is today anyway, but the two are coupled down in the `OS_TaskCreate_Impl` layer and therefore cannot be invoked separately in OSAL user applications.  This would bring it up one layer and (optionally) allow the app developer to leverage it, if they want.

**Additional context**
The ""timebase"" objects on VxWorks also would benefit from having a separate allocate/start. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/693
Add compile time assert that int size is 32 bit,"**Is your feature request related to a problem? Please describe.**
Per discussion 2/26/2020 there's likely breakage in multiple places on a system where int != 32 bit (standard minimum is 16 bit)

**Describe the solution you'd like**
Along with #204, cFE not really designed to work on a system without char of 8 bit size and int of 32.  Enforce/warn on build.

**Describe alternatives you've considered**
Improve documentation?  Still nice to bail on compile for those who don't read documentation.

**Additional context**
#504, and many other places convert int32 to int or the unsigned equiv.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/534
"Deprecate CFE_PLATFORM_CPU_ID, CFE_PLATFORM_CPU_NAME, and CFE_MISSION_SPACECRAFT_ID ","**Is your feature request related to a problem? Please describe.**
Got bit by this again (used CFE_MISSION_SPACECRAFT_ID when CFE_PSP_GetSpacecraftId() should have been used).  They also currently return different numbers since the define has historically been 0x42, but the setting in targets.cmake is 42 (decimal).

Related to #710

**Describe the solution you'd like**
Deprecate, actually suggest this error out at compile if defined since it leads to bugs (mismatch of IDs) in favor of CFE_PSP_GetSpacecraftId() and CFE_PSP_GetProcessorId() (and eventually CFE_PSP_GetProcessorName(), See nasa/PSP#165)

**Describe alternatives you've considered**
None.

**Additional context**
#710 

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/827
Pipe Name Collision Discussion,"**Describe the bug**
In https://github.com/nasa/cFE/blob/master/docs/cFE%20Application%20Developers%20Guide.md
> Although the Pipe names will not collide with other Application Pipe names in the cFE, the Developer/Operator could become confused if every Application named their Pipe(s) ""MY_PIPE"". It should be noted, however, that all Pipes for a single Application must have unique names.

This doesn't seem to be true since when I add two apps that try to have the same pipe name I get a failure.

**To Reproduce**
If I use the same .so file in my startup script but change the app name of the second one:
```
CFE_APP, /cf/App.so, AppMain, App,    80,  16384, 0x0, 0;
CFE_APP, /cf/App.so, AppMain, App2,  80,  16384, 0x0, 0;
```

I get the following error:
```
EVS Port1 66/1/CFE_SB 62: CreatePipeErr:OS_QueueCreate failed, name taken (app=App2, name=App_PIPE)
```
as they are both trying to make the same ""App_PIPE"".

**Expected behavior**
I thought given the text that the pipe names would still be unique to that application.

**Code snips**
N/A

**System observed on:**
Laptop
Distributor ID: Ubuntu 18.04.4 LTS
Versions:cFE 6.7.7.0, OSAL 5.0.6.0, PSP 1.4.4.0

**Additional context**
N/A

**Reporter Info**
Philip Cooksey
NASA Ames (KBR)
",non-bug,https://github.com/nasa/cFE/issues/650
"Applications should use all-inclusive ""cfe.h"" header","**Is your feature request related to a problem? Please describe.**
The CFE documentation recommends that applications use the supplied `cfe.h` header which in turn provides all CFE core, PSP, and OSAL APIs as well as mission config.

Because some header names are getting changed in nasa/cfe#1203, including the headers individually becomes a problem.  

**Describe the solution you'd like**
Change to using the `cfe.h` all-inclusive header, which makes ci_lab work with the new directory structure, and should avoid future issues, and it matches what the documentation recommends.

**Describe alternatives you've considered**
Change `cfe_msg_api.h` -> `cfe_msg.h`

**Additional context**
Needed for nasa/cfe#1203

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/77
API Prototype/implementation mismatch scrub,"**Is your feature request related to a problem? Please describe.**
Example from `CFE_MSG_Init`, `CFE_Status_t` vs int32:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/msg/fsw/src/cfe_msg_init.c#L32
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_msg.h#L63

Note numerous others, some noted in TBL.

**Describe the solution you'd like**
General scrub, prototypes across all the headers should match implementation.  Also could remove `extern` per #1319.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1474
Nonmonotonicity with CFE_TIME_GetTime,"**Describe the bug**
The time returned by CFE_TIME_GetTime() is not monotonically increasing.

**To Reproduce**
Steps to reproduce the behavior:
Create a new app (add the appropriate configuration to startup script and targets.cmake) with the following files:

runner.c:
```C
#include ""cfe.h""
#include ""cfe_error.h""
#include ""cfe_es.h""
#include ""cfe_evs.h""
#include ""cfe_sb.h""
#include ""unistd.h""

void TIME_AppMain(void)
{
    uint32_t prevSeconds;
    uint32_t prevSubseconds;
    long     counter = 0;

    while (true)
    {
        CFE_TIME_SysTime_t currTimestamp = CFE_TIME_GetTime();

        uint32_t currSeconds    = currTimestamp.Seconds;
        uint32_t currSubseconds = currTimestamp.Subseconds;

        if (counter > 0)
        {
            if (prevSeconds > currSeconds || (prevSeconds == currSeconds && prevSubseconds > currSubseconds))
            {
                CFE_ES_WriteToSysLog(""Timestamp Discrepancy"");

                CFE_ES_WriteToSysLog(""Previous Timestamp: Seconds: %u\tSubseconds: %u"", prevSeconds, prevSubseconds);

                CFE_ES_WriteToSysLog(""Current Timestamp: Seconds: %u\tSubseconds: %u"", currSeconds, currSubseconds);

                CFE_ES_WriteToSysLog(""timestamp count: %ld "", counter);
            }
        }
        usleep(1000);
        counter++;
        prevSeconds    = currSeconds;
        prevSubseconds = currSubseconds;
    }
}
```

analyze_time/CMakeLists.txt:
```cmake
project(CFE_ANALYZE_TIME C)

add_cfe_app(analyze_time runner.c)
```

**Expected behavior**
There should never be any case when a timestamp has the same Seconds but lower Subseconds field than an earlier timestamp.

**Code snips**
see above

**System observed on:**
 - OS: 5.4.0-100-generic Ubuntu


**Additional context**
The frequency with which the time discrepancy is printed decreases when the input to the usleep() function is increased.  Still, there is always one timestamp discrepancy printed regardless of the input to usleep(). We first noticed the behavior while trying to read data from an IMU sending values at roughly 125Hz.",non-bug,https://github.com/nasa/cFE/issues/2063
Add information about planned component versions to Caelum roadmap,"**Is your feature request related to a problem? Please describe.**
The Caelum plan does not have information on the component version targetted for inclusion in that release

**Describe the solution you'd like**
Add a list of planned component versions for Caleum to the readme. For example

```
Caleum includes
- cFE 7.0
- osal 6.0
- PSP 1.5
- etc.
```

**Describe alternatives you've considered**
Have a separate file, Roadmap.md, that details the plans

**Additional context**
none

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC",non-bug,https://github.com/nasa/cFS/issues/131
CFS make error 2,"**Checklist (Please check before submitting)**

* [☑] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [☑] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
I am trying to work on  this repository for the NASA CFS CS challenge and I am implementing it using Ubuntu and Debian Operating System. I am getting a make error when I follow the below steps.
I have uploaded the picture of the error for your reference. Thanks.

**To Reproduce**

Steps to reproduce the behavior:
1. git clone https://github.com/nmullane/amp-cfs-cs-challenge.git
2. cd cfs_checksum_patched/cFS/
3. git submodule update --init --recursive
4. make
5. make install

**System observed on:**
 - Raspberry pi / Beagleboneblack
 - Ubuntu 18.04 / Debian 9.5


**Reporter Info**
Kaushik Varma Rudraraju
Colorado State University
![make error 2](https://user-images.githubusercontent.com/98132394/150443089-c6e32c14-9549-40db-b559-527f39f71fa3.jpg)

",non-bug,https://github.com/nasa/cFS/issues/411
Remove last-gen OSALs and replace with next gen,Removing last-gen with OSAL 5.0.0,bug,https://github.com/nasa/osal/issues/236
Direct use of POSIX permission setting in UT assert,"**Describe the bug**
The UT assert framework is supposed to be portable, and this should adhere to strict C99.

However, in the goal of squelching a bogus CodeQL warning - some POSIX-specific logic got added in #827.  This seemed to work (likely because it was never run on a non-POSIX OS) until it was changed to use a different POSIX API (fstat/fchmod) to address another bogus CodeQL warning.

Now, builds are failing because the APIs used are marked as POSIX-specific but we are not compiling this code with `_POSIX_C_SOURCE` (nor should we, because its supposed to be pure C99).

This is currently breaking the mainline build.

**To Reproduce**
Build UT assert - get the error:
```
/home/runner/work/CF/CF/osal/ut_assert/src/uttools.c: In function ‘UtMem2BinFile’:
/home/runner/work/CF/CF/osal/ut_assert/src/uttools.c:63:14: error: implicit declaration of function ‘fileno’; did you mean ‘fopen’? [-Werror=implicit-function-declaration]
         fd = fileno(fp);
              ^~~~~~
              fopen
/home/runner/work/CF/CF/osal/ut_assert/src/uttools.c:66:13: error: implicit declaration of function ‘fchmod’; did you mean ‘chmod’? [-Werror=implicit-function-declaration]
             fchmod(fd, dststat.st_mode & ~(S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH));
             ^~~~~~
             chmod
```

This is directly from the validation workflow on a recent CF change.

**System observed on:**
Ubuntu (various)

**Additional context**
The CodeQL warnings about file permissions ""not being set"" are not really valid.  UNIX still allows file permissions to be set by the user, in the form of the umask setting.  So the permissions on a file created using pure C99 stdio calls (`fopen`) are not ""unset"" - they are just not set directly by the application, they are controlled externally.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/1300
MD - consider reporting number of addresses being collected in MD3001,"Typically MD3000 will need to have a fixed total size of bytes such that the creation of the message (MD3001) will result in the same size.  That means MD3001 item c) number of bytes sampled will typically always be the same on systems that required fixed size telemetry packets (assuming a database change is not made every time a new table is needed) and the address count will always be the max number of entries.

Consider FSW update to report the actual used address count (those with nonzero byte counts). 

Imported from GSFCCFS-1769",non-bug,https://github.com/nasa/MD/issues/4
fails to build under Raspbian and VxWorks,"**Describe the bug**
Building elf2cfetbl under Raspbian (the Debian variant released for the popular Raspberry Pi SBC's by the Raspberry Pi organization) it fails with a long laundry list of printf type mismatch errors.

```
/home/pi/cFS/tools/elf2cfetbl/elf2cfetbl.c:2211:67: error: format ‘%ld’ expects argument of type ‘long int’, but argument 5 has type ‘size_t’ {aka ‘unsigned int’} [-Werror=format=]
             printf(""strstr[%d] = %s; strlenSN = %ld; strlenON = %ld\n"",i,strstr(SymbolNames[i], TblFileDef.ObjectName),
                                                                 ~~^
                                                                 %d
```

**To Reproduce**
Build elf2cfetbl under Raspbian.

**Expected behavior**
Should be casting types to what printf expects.

**Code snips**
If applicable, add references to the software.

**System observed on:**
Raspberry Pi Zero W.

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/elf2cfetbl/issues/33
Remove use of OS_PACK,"**Is your feature request related to a problem? Please describe.**
OS_PACK shouldn't be used.

**Describe the solution you'd like**
Remove it.

**Describe alternatives you've considered**
None

**Additional context**
nasa/osal#644

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/ci_lab/issues/59
Use `CFE_TIME_ClockState_Enum_t` in cmd/tlm and handling,"**Is your feature request related to a problem? Please describe.**
Defined as int16 even though a type is available:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L764
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L712
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.h#L192
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.h#L404
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L768-L770
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L887
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L919-L920
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L990-L991
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L396
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L710
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.h#L398

**Describe the solution you'd like**
Use `CFE_TIME_ClockState_Enum_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1546
Wrap CFE_PSP_SUBMINOR_VERSION in deprecated ifndef,fsw/pc-rtems/inc/psp_version.h has CFE_PSP_SUBMINOR_VERSION marked as only for backward compatibility.  ,bug,https://github.com/nasa/PSP/issues/104
Apply style formatting (release candidate prep),"**Is your feature request related to a problem? Please describe.**
Code has diverged from automated style.

**Describe the solution you'd like**
Apply automated style formatting.

**Describe alternatives you've considered**
None

**Additional context**
Suggest adding as a check in workflow until release.  Style has been very stable, should be manageable to enforce at least in the short term (release candidate and release prep).  Could enforce just on RC branch(es) if there's an issue w/ general enforcement.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1130
"A uint16 is used for defining the input/output apids in the config table, doesn't support full sized message IDs","CF defines apid inputs/outputs as uint16's, then uses these with the CFE_MSG_Init API which expects message ID's of type `CFE_SB_MsgId_t`.
https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/platform_inc/cf_tbldefs.h#L50-L51
",bug,https://github.com/nasa/CF/issues/148
"UT stub library missing ""shell"" API","**Describe the bug**
The `osapi-shell-stubs.c` file was not included in the `ut_osapi_stubs` library, and hence apps needing to test shell functions will get a linker error due to this missing function.

**To Reproduce**
Attempt to build the unit test for an app that calls `OS_ShellOutputToFile` API.  Link fails with the missing symbol.

**Expected behavior**
Build should succeed.

**Code snips**
List is here.  The ""shell"" stub file is there (generated from header) but was missed/omitted from the library somehow.
https://github.com/nasa/osal/blob/f11d04961d0410af1adb6a2202549b195be3fa5a/src/ut-stubs/CMakeLists.txt#L55-L97

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1120
[MOVED] Document nested usage of UT_ADD_TEST and clarify nomenclature for individual versus groups of tests,"## Describe the problem

The `UT_ADD_TEST` call has some limitations as addressed in nasa/cFE#840.  Some solutions are discussed in that PR. 

## Proposed Solutions
 
1. Have `UT_ADD_TEST` handle ""nested"" unit tests, OR
2. Develop a nomenclature for unit test functions that explicitly indicates whether there are nested unit tests and then rename unit tests accordingly, OR
3. Document the anti-pattern, OR
4. Split up all unit tests to ensure only one test per function and make this a design pattern.



## Additional Context

_Originally posted by @skliper in https://github.com/nasa/cFE/pull/840#issuecomment-680193849_

>Related to nasa/osal#577.  Individual tests are added w/ the UT_ADD_TEST call.  Some tests are grouped at a lower level (Test_MSG_CCSDSExt is a group of tests), and those functions are called directly.  Same pattern is used in `sb`:
>
>https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/unit-test/sb_UT.c#L134-L135

",bug,https://github.com/nasa/osal/issues/578
update cFE unit tests,"The version of the unit tests currently included with cFE 6.4.1 were developed and tested against cFE 6.3.2.  Due to cFE changes, all of the tests no longer pass.

Also, the tests have only been tested with the Linux OSAL/pc-linux PSP and ARINC653 OSAL/OrionSCP PSP.

JSC has updated the tests to work fully with cFE 6.4.1.  JSC is also updating the tests to build and run on VxWorks 6.7 (on the SPARC LEON3 processor).

These updates are being tracked in the JSC subversion repo and need to be pushed into a proper git branch and further work continued from there.
",bug,https://github.com/nasa/cFE/issues/65
Fix non-compliant header guards,"**Is your feature request related to a problem? Please describe.**
Leading `_` is reserved

**Describe the solution you'd like**
Replace with pattern used in OSAL

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/142
Enhanced build version.h collisions,"The CMAKE build system CFE/cmake/version.cmake code generates a version.h file that overrides the version.h required to build for VxWorks. 

Suggested fix is to change the generated filename to cmake_version.h, and make the change to CFE/cmake/target/src/target_config.c to include the new filename ",bug,https://github.com/nasa/cFE/issues/186
Doxygen warning:  file argument matching multiple files,"**Describe the bug**
Doxygen produces multiple ambiguous file warnings when building the documentation using `make doc` at the bundle level. For example:

```
/cfs/cFS/osal/src/os/posix/inc/os-impl-binsem.h:22: warning: the name `os-impl-binsem.h' supplied as the second argument in the \file statement matches the following input files:
   /cfs/cFS/osal/src/os/posix/inc/os-impl-binsem.h
   /cfs/cFS/osal/src/os/rtems/inc/os-impl-binsem.h
   /cfs/cFS/osal/src/os/vxworks/inc/os-impl-binsem.h
Please use a more specific name by including a (larger) part of the path!
```

See more warnings in this log
[warnings.log](https://github.com/nasa/osal/files/4976617/warnings.log)

**To Reproduce**
Checkout cFS bundle with submodules. 

Copy the `sample_defs` from cFE into the cfs root directory as well as the Makefile then

```
make prep
make doc
```

examine `cFS/build/doc/warnings.log`


**Expected behavior**
No warnings about multiple files

**Code snips**

This code 

```c
/**
 * \file     os-impl-binsem.h
 * \ingroup  rtems
 * \author   joseph.p.hickey@nasa.gov
 *
 */
```
can be replaced with
```c
/*!
 * \file     rtems/inc/os-impl-binsem.h
 * \ingroup  rtems
 * \author   joseph.p.hickey@nasa.gov
 *
 */
```

**System observed on:**
Ubuntu running on Docker 

**Additional context**
None

**Reporter Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/osal/issues/551
Instantiating globals in header files (FSW version),"The FSW has a macro called ""DECLARE_FIELD"" which creates a constant at global scope:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_field.h#L54-L55

The constant is scoped as ""static"" so it doesn't create a linker error, but it still creates a _separate_ instance of this global variable for each time the header is included.  

Confirmed by checking `cf.so` and observing that _each_ of these 8 fields occur in the binary file 8 times:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_pdu.h#L73-L80

",bug,https://github.com/nasa/CF/issues/94
"Mixture of different return types, and many use ""int""","CF has a variety of different return types from its internal functions, and many are just `int`, and return 0 on success, or -1 on failure:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp.h#L432

But some, for example the ""send"" routines, have a dedicated enum:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp.h#L417

These can be tricky because it is still fundamentally an `int` (enum) but while the success is still a value of ""0"", the error codes are in positive values, not negative like the others.

Sometimes the return type is `int` but it indicates a size:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp_pdu.h#L107

And in other cases the return type is `int` but it indicates a boolean value, where 0 is false and 1 is true:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_timer.h#L52

This latter case is also easy to confuse with the first case, where 0 is success on many functions but a logical ""false"" here.

**Recommendation**:
CF should have a return code paradigm that is more consistent with CFE and other apps.

- If the return value is a boolean true/false then use `bool`
- If the return value is a size, then use `size_t`
- General helper functions should return a type based on `int32` (may be a typedef like `CFE_Status_t`) and have a set of predefined constants for use as return values, and use them consistently throughout the code.




",non-bug,https://github.com/nasa/CF/issues/145
New GCC warnings causing build failure [-Werror=stringop-overflow=],"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
I believe these are newly triggered GCC warnings (treated as errors) that are now causing the standard MM Build + Run workflow to fail.
```
In function ‘strncat’,
    inlined from ‘MM_DumpInEventCmd’ at /home/runner/work/MM/MM/apps/mm/fsw/src/mm_dump.c:530:25:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:136:10: error: ‘__builtin___strncat_chk’ specified bound depends on the length of the source argument [-Werror=stringop-overflow=]
  136 |   return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/MM/MM/apps/mm/fsw/src/mm_dump.c: In function ‘MM_DumpInEventCmd’:
/home/runner/work/MM/MM/apps/mm/fsw/src/mm_dump.c:530:25: note: length computed here
  530 |                         strncat(EventString, TempString, strlen(TempString));
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/string.h:495,
...
In function ‘strncat’,
    inlined from ‘MM_DumpInEventCmd’ at /home/runner/work/MM/MM/apps/mm/fsw/src/mm_dump.c:539:21:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:136:10: error: ‘__builtin___strncat_chk’ specified bound depends on the length of the source argument [-Werror=stringop-overflow=]
  136 |   return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/MM/MM/apps/mm/fsw/src/mm_dump.c: In function ‘MM_DumpInEventCmd’:
/home/runner/work/MM/MM/apps/mm/fsw/src/mm_dump.c:539:21: note: length computed here
  539 |                     strncat(EventString, TempString, strlen(TempString));
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
```

**To Reproduce**
Run the Build + Run GitHub Action on the current main branch MM source code.

**Expected behavior**
Build + Run workflow should run without errors.

**Reporter Info**
Avi @thnkslprpt",non-bug,https://github.com/nasa/MM/issues/55
"low CFE_MISSION_MAX_FILE_LEN and CFE_TBL_FILEDEF(..., ""sample_app_table.tbl"") causes silent non-truncation","**Describe the bug**
I was scratching my head why my table file was named ""sample_app_table.tbl\004""  until I realized that CFE_MISSION_MAX_FILE_LEN is defined as ""20"" and ""sample_app_table.tbl"" is exactly 20 characters. If I had one more char, the compiler would err. But it accepts static definition of structs using strings that are the exact length, which loses the null terminator.

**Expected behavior**
Should allow file names of CFE_MISSION_MAX_FILE_LEN chars.

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/cFE/issues/730
DS file header values should be big-endian,"As with CCSDS, which is standardizing on big-endian for message headers, the fields in the DS file header (close time, FileTableIndex, FileNameType) should be stored in big-endian order. (Should the same be true for the CFS file header?)

(originally submitted to babelfish on 10/24/2016)

Imported from GSFCCFS-737",non-bug,https://github.com/nasa/DS/issues/4
update cfe_error.h to use the CFE_Status_t type,"**Is your feature request related to a problem? Please describe.**
As a followon to #888 all of the const defines currently cast to `int32` and they should be `CFE_Status_t`.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/922
Buffer overrun in stub implementation of CFE_TIME_Print,"For unit testing an alternate ""stub"" implementation of CFE_TIME_Print exists in unit-tests/ut_time_stubs.c

The CFE_TIME_Print() function outputs the passed-in time value to a small fixed-size buffer.  The UT stub version of this function uses the wrong size for its call to snprintf and is way too wordy in its output, easily overrunning the real size of the buffer.

This is one thing causing unit tests to crash in 6.4.1",bug,https://github.com/nasa/cFE/issues/82
Scrub for mismatched function prototype/implementation parameter names,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Noticed a couple of mismatched parameter names between function prototypes and their implementations. A quick scrub of OSAL turned up 13 cases in total.

**Expected behavior**
While not a risk to behavior, these mismatched parameter names may cause compiler errors in the future on some systems, and can be confusing for maintenance and application programming.

**Code snips**
Cases identified:
![image](https://user-images.githubusercontent.com/9024662/213946583-558ec838-1eba-4edb-9703-8d0cd27a8565.png)

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/osal/issues/1353
Release Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/tblCRCTool/issues/13
CFE_ES_SEND_MEM_POOL_STATS_CC Issues,"**Describe the bug**
There are multiple issues with the CFE_ES_SEND_MEM_POOL_STATS_CC command:
1.	The command/function(s) used are fundamentally flawed in that a user can send a seemingly benign command that can result in a segmentation fault if one of the command parameters is incorrect.  For example, if the PoolHandle parameter is set to zero a segmentation fault will result (pretty much any value below xFFFFFE28 faults on my machine).  This occurs when handle is validated via the CFE_ES_ValidateHandle function.  Should consider modifying the CFE_ES_ValidateHandle function + updating the unit test to test command on boundary/extreme conditions.
2.	On a 64-bit machine if the PoolHandle parameter is set to a valid value the function will fail.  This is because CFE_PSP_MemValidateRange – which is called via the CFE_ES_ValidateHandle function as part of the validation process, limits the max memory range of the handle to xFFFFFFFE.
3.	On a 64-bit machine - compiler added padding will be applied to the command.  The order of variable declaration should ideally be descending in size to avoid future conflicts.

**Expected behavior**
Command works nominally and is vetted via combination of unit/functional tests.

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.13.0, OSAL 5.0.12.0, PSP 1.4.9.0

**Reporter Info**
Dan Knutsen
NASA/Goddard
",bug,https://github.com/nasa/cFE/issues/651
Setting highest valid message ID's to 0xFFFF hangs cfe,"**Describe the bug**
Given max number of message keys is 1+ highest valid msgid:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/sb/cfe_sb_priv.h#L107

and message key is uint16:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/sb/cfe_sb_priv.h#L122

Setting CFE_PLATFORM_SB_HIGHEST_VALID_MSGID to 0xFFFF results in forever loop in:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/sb/cfe_sb_init.c#L219-L224

**To Reproduce**
Set CFE_PLATFORM_SB_HIGHEST_VALID_MSGID to 0xFFFF and build/run.

**Expected behavior**
Full 16 bits of message id should be usable.

**Code snips**
See above

**System observed on:**
 - Hardware: cFS Dev 3
 - OS: Ubuntu 18.04
 - Versions: master bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC (per JSC identification of the issue)",bug,https://github.com/nasa/cFE/issues/707
Create Separate Document for Code of Conduct,"**Is your feature request related to a problem? Please describe.**
The code of conduct takes up a lot of space in the contributing guide. 

**Describe the solution you'd like**
Create a separate document for the code of conduct and link to it in the contributing guide.

**Additional context**
References: https://github.com/atom/atom/blob/master/CONTRIBUTING.md#code-of-conduct

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/216
PSP cppcheck warning stricter flag,"**Is your feature request related to a problem? Please describe.**
[psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:90] -> 
[psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:136]: (style, inconclusive) Function 'CFE_PSP_ExceptionHook' argument 3 names different: declaration 'pEsf' definition 'vpEsf'.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:679] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:680]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:680] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:681]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:681] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:682]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:686] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:687]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:687] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:688]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:688] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:689]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-rtems/src/cfe_psp_exception.c:138]: (warning, inconclusive) The buffer 'TaskName' may not be null-terminated after the call to strncpy().
[psp/fsw/modules/eeprom_mmap_file/cfe_psp_eeprom_mmap_file.c:191]: (style) Variable 'Status' is assigned a value that is never used.
[psp/fsw/shared/cfe_psp_module.h:106] -> 
[psp/fsw/shared/cfe_psp_module.c:111]: (style, inconclusive) Function 'CFE_PSP_Module_FindByName' argument 1 names different: declaration 'ModuleName' definition 'DriverName'.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:192]: (style) The scope of the variable 'i' can be reduced.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:193]: (style) The scope of the variable 'cfNameFound' can be reduced.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:194]: (style) The scope of the variable 'tempFd' can be reduced.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:195]: (style) The scope of the variable 'CompactFlashName' can be reduced.
[psp/fsw/shared/cfe_psp_module.c:57]: (style) The scope of the variable 'ApiPtr' can be reduced.


**Describe the solution you'd like**
Resolve warning


**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/PSP/issues/117
Add OS_ModuleLoad flags to indicate symbol table visibility,"**Is your feature request related to a problem? Please describe.**
On POSIX platforms with a real dynamic loader/shared object implementation, using the `RTLD_GLOBAL` flag to dlopen() can make it tricky or impossible to unload modules later.  This flag makes the symbols globally available to satisfy other relocations, and unloading of the module will be deferred or prevented entirely as long as the runtime loader thinks a symbol is being used.

This ultimately causes a requirement failure on this platform as documented in nasa/cfe#952 - because the module isn't _actually_ unloaded when `dlclose()` is called, and even though the new/replacement app module was loaded, CFE will end up restarting the original code, not the new (reloaded) code.

Loading a module with `RTLD_LOCAL` instead seems to prevent this issue - because the symbols are simply not made available for other modules/entities to use.  This ensures that when the time comes to unload the module, nothing else is referencing the module, and `dlclose()` actually does unload it.

But this LOCAL flag cannot be used for all modules, because libraries do need their symbols added to the global table, or else it will not be possible to load apps that depend on those libraries 


**Describe the solution you'd like**
Add a ""flags"" parameter onto the existing `OS_ModuleLoad()` API, so it becomes:

    int32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)

The ""flags"" parameter can be used to indicate the symbol visibility.  A flag value of 0 should map to ""global"" - which is what the current implementation does - to make an easy transition for existing code.

In order to be able to look up an entry point in a module loaded with this option, this necessitates another new API:

    int32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *SymbolAddress, const char *SymbolName)

Which is the same as `OS_SymbolLookup()` but accepts a module ID value and operates on that module, rather than on the global scope.  This should be the ID that was returned from the OS_ModuleLoad call.

For RTOS implementations that do not have this symbol visibility option they can ignore the flag, continue to map everything into the global symbol table as they currently do, and `OS_ModuleSymbolLookup` and `OS_SymbolLookup` become equivalent.

**Additional context**
Note that most all other OSAL ""create"" functions (tasks, queues, semaphores, etc) already have a ""flags"" parameter on the API, reserved for future use.  Unfortunately, this flags parameter was not part of the original `OS_ModuleLoad()` API definition, making it an exception to the pattern.  So by adding this, although it is a breaking change, it makes it more consistent with the rest of the APIs.

The alternative would be to define a separate `OS_ModuleLoadWithFlags()` API, but this pattern does not exist anywhere else, so it would continue to be an exception with respect to the overall OSAL API.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/641
CFE_PSP_MemCpy/Set not checking for NULL pointer args,"In the psp/fsw/shared/cfe_psp_memutils.c, the **CFE_PSP_MemCpy()** and **CFE_PSP_MemSet()** do not check for null pointer arguments.

If a null pointer is passed then a segfault occurs.  Both function signatures already have a return value for an error code.  

**However, we have an API problem in practice:**

**CFE_PSP_MemCpy()** is called by these CFS apps: **CF, CI, CS, FM, HK, io_lib, MD, MM, SBN, SBN653, and SC**, by the cFE **ES, EVS, FS, SB, and TBL** but the function return value is not checked by **any** of them.  The same goes for **CFE_PS_MemSet()**, it is also called by CFS apps: **CF, CI, CS, DS, FM, io_lib, LC, LCX, MD, MM, SBN653, SC, SCH and TO**.  It is also called by cFE **ES, EVS, FS, SB, TBL and TIME** where none of them check the return value.

It appears that either the PSP return value was added later than most of the client development OR client developers just assumed a C-like behavior with no return values.",bug,https://github.com/nasa/PSP/issues/35
"Reports ""desc test = OK"" in DS_FLT_TBL_EID even though no validation is being performed","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/DS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Initiated from the following comment: https://github.com/nasa/DS/issues/18#issuecomment-1132263963.  Basically just could imply there's some validation of the descriptor text going on, which there currently isn't.

**Describe the solution you'd like**
Could just remove that text, it's not added value.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/DS/issues/25
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/tblCRCTool/issues/33
Resolve SEM_VALUE_MAX not defined test issue,"**Is your feature request related to a problem? Please describe.**
Was a FIXME:

https://github.com/nasa/osal/blob/5a8f0afa3a6ef6945661d6fc893d4592d9360b5a/src/unit-tests/oscore-test/ut_oscore_countsem_test.c#L123-L136

**Describe the solution you'd like**
Address/disposition as an issue.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/632
Consistent use of `CFE_EVS_EventType_Enum_t` (and clarify vs mask),"**Is your feature request related to a problem? Please describe.**
Numerous locations where EventType is declared as uint16, but there's a defined type `CFE_EVS_EventType_Enum_t`

**Describe the solution you'd like**
Use CFE_EVS_EventType_Enum_t everywhere

**Describe alternatives you've considered**
Use uint16 everywhere

**Additional context**
Code review
#1447 - need to sort out enum vs mask use

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1398
Most commands only generate DEBUG event for successful completion,"**Is your feature request related to a problem? Please describe.**
Most commands will increment the command counter for the application and send a debug event after they are processed.  However, in the default/sample config, debug events are filtered out, so these will NOT be visible to the operator.  As such there is really no way to confirm a specific command was accepted - since _any_ command will increment the command counter (including noop, etc) the counter by itself is not a reliable means to check if a particular command was accepted.

**Describe the solution you'd like**
Generally, the fact that a command was accepted and processed is useful and necessary information for operators, so it should not be classified only as ""DEBUG"".  Consider making all these events to be of type `CFE_EVS_EventType_INFORMATION`.

Note that some commands, such as no-op, already send an INFORMATION event (so not fully consistent as it is).

**Additional context**
Noted when reviewing command documentation in #1396.  For Caelum will just document the EID that is currently being generated (debug or information) but will not change it.  For next release should try to make this more consistent.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1712
Add Contributing Guide ,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the tblCRCTool repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/tblCRCTool/issues/46
CFE_ResourceId_FindNext can Seg Fault,"**Describe the bug**
If you pass a null for the CheckFunc argument then CFE_ResourceId_FindNext will Segmentation Fault. Also the Comments in the c file mention how it is an internal function which it currently isn't.

**Expected behavior**
There should be a null check. 
A Functional Test for that null check. 
Update the header file for the new return code

**Additional context**
new functional test should plan with https://github.com/nasa/cFE/pull/1782 

**Reporter Info**
Alex Campbell GSFC
",non-bug,https://github.com/nasa/cFE/issues/1840
"Refactor TBL to reduce complexity, improve maintainability, reduce technical debt","**Is your feature request related to a problem? Please describe.**
TBL functions are complex and utilize many modes.  Complex enough that minor maintenance  is avoided due to the high likelihood of breaking something.

Other code review notes to address as part of the refactor:
- If block could go inside else at line 214
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L225-L230

- Free handle is consumed even if status is already an error (and not returned to the pool)
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L236

- Similar logic in `CFE_TBL_Register` for single and double buffered tables, factor out duplication
- May be able to shorten lock in `CFE_TBL_Register` to just the resource allocation parts (although since it's typically just part of startup shouldn't be an issue)
- Multiple returns in `CFE_TBL_Load` should be refactored out
- `CFE_TBL_Manage` loop could be a do/while and only loop if additional management required, although really the only two things that could be done in one manage are validate and dump (if an update is scheduled it's first and exits loop), although these are globals so it seems like a validate could run before an update... related to #1493
- Consider using `CFE_TBL_Load` from `CFE_TBL_LoadFromFile`
- `CFE_TBL_LoadCmd` should use `CFE_TBL_LoadFromFile`

**Describe the solution you'd like**
Break down large complex functions.

**Describe alternatives you've considered**
Note grouped all the suggested refactor changes here, could break out smaller tasks and implement one by one but that may result in extra work.

**Additional context**
Code review, related to #1493 in that sharing isn't clearly defined

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1504
Split out to_lab platform config from app header,"Originated by abrown4 (60 on babelfish):

The platform-specific config (that I need to change for a deployment) is in the to_lab_app.h, and thus common to all to_lab builds. However, I want to build and deploy multiple cfs instances, each with a to_lab. [It _is_ simple and handy.]

Propose moving the platform-specific info into to_lab_platform_cfg.h, like the other apps.",non-bug,https://github.com/nasa/to_lab/issues/2
