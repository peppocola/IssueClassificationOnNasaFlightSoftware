title,body,label,url
Define file subtype value behavior/expectations,"**Is your feature request related to a problem? Please describe.**
Not clear if the CFE_FS_InitHeader SubType needs to be one of the FS enums or if it can be user defined by apps.  Note there is no longer a shell file created by ES:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_extern_typedefs.h#L101-L108

**Describe the solution you'd like**
Need to determine if FS should define all file subtypes, or treat it as an extendable field (or whatever).  That will affect if the SHELL subtype gets removed or renamed (since there is still an app that would create it).  Note right now apps don't even use `CFE_FS_InitHeader`, but they do currently set unique values.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1394
Disambiguate command vs message requirements ,"**Is your feature request related to a problem? Please describe.**
""Command"" terminology has been used for both ground commands (that increment command counters) and inter-app commands (that typically do not increment command counters).  So it's unclear in the requirement which sort of use case is intended.

**Describe the solution you'd like**
""Command"" is ground command with additional associated behavior (increments command counters), ""Message"" is typical sb message that does not increment command counter.

**Describe alternatives you've considered**
None

**Additional context**
Discovered during requirements scrub, helps clarify what impacts command counter.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/525
CFE_PLATFORM_ES_PERF_MAX_IDS not fully deprecated,"**Describe the bug**
CFE_PLATFORM_ES_PERF_MAX_IDS was superseded by CFE_MISSION_ES_PERF_MAX_IDS as noted in this comment: https://github.com/nasa/cFE/search?q=CFE_PLATFORM_ES_PERF_MAX_IDS. However, sample cpu1_platform_cfg.h still contains the definition for CFE_PLATFORM_ES_PERF_MAX_IDS is still referenced in es_UT.c and comments in cfe_es_events.h and sample_perfids.h

**To Reproduce**
N/A

**Expected behavior**
Either CFE_PLATFORM_ES_PERF_MAX_IDS should be totally deprecated and all references should be replaced by CFE_MISSION_ES_PERF_MAX_IDS or (if deemed necessary) support for platform-specific max values should be re-added in the perf-log implementation.

**Code snips**
cfe/cmake/sample_defs/cpu1_platform_cfg.h:1978
cfe/fsw/cfe-core/src/inc/cfe_es_events.h:1046
cfe/fsw/cfe-core/unit-test/es_UT.c:3664

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
PJ Chapates Gateway Vehicle System Manager FSW Production, JSC
",bug,https://github.com/nasa/cFE/issues/945
Improve table handling,"**Is your feature request related to a problem? Please describe.**
Doesn't actually allow table management within the task loop

**Describe the solution you'd like**
Actually follow the table management pattern, allowing updates (should be a decent example)

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sch_lab/issues/27
ADT table size limit,"Hello, 

I would like to know if it is possible to increase the WDT table size (LC_MAX_ACTIONPOINTS). How much I can extend the size of WDT table ? How many AP I can define? Is there any limit?

Thanks.",non-bug,https://github.com/nasa/LC/issues/2
CF Purge Queue Command Opcode Not Defined,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1765] CF Purge Queue Command Opcode Not Defined
_Originally submitted by_: Maldonado, Sergio E. (GSFC-580.0)[Arctic Slope Technical Services, Inc.] on Fri Oct 29 11:03:57 2021

_Original Description_:
The command opcode for Purge Queue is not present in the CF\_CMDS enumeration in cf\_msg.h. It should be present with a value of 21. The command dispatch table in cf\_cmd.c does have an entry for the command, as well as the implementation. Without the opcode defined, the command cannot be verified at the functional level. ",bug,https://github.com/nasa/CF/issues/36
File age check logic is wrong,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Produces ~17 files in 10 minutes when requesting 1 file per minute

**To Reproduce**
1. Enable a 1 file per minute config
2. Watch ~17 files get produced

**Expected behavior**
1 file per minute when configured to do so

**Code snips**
The problem is how file age is accumulated.  W/ the default config, 4 seconds are added every HK message, and another second is added every 1 second SB timeout.  So within the typical 4 second scheduled HK request the file age gets incremented by 7 seconds (4 from HK processing and 3 from SB timeouts).

https://github.com/nasa/DS/blob/ce988535edffd6b36cc1083e10988c2d0a4a38db/fsw/src/ds_app.c#L124
https://github.com/nasa/DS/blob/ce988535edffd6b36cc1083e10988c2d0a4a38db/fsw/src/ds_app.c#L520

Really the time accumulation logic is broken since it's going to vary based on receiving any other command that would cause SB not to timeout.

Likely needs a functional test update to catch this issue.

**System observed on:**
Independent of system

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/DS/issues/93
"""Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr"" when running a sample cpu1 application","**Is your feature request related to a problem? Please describe.**

I apologize in advance if the following issue that I am reporting is caused by my misunderstanding of the cFS/cFE CMake build system.

The issue is that I am getting the following issue when 1) I run the `make` command from the CFS repository and also 2) if I run it from CLion with the changes described in #478.
 
**1)**

```bash
cp cfe/cmake/Makefile.sample Makefile
cp -r cfe/cmake/sample_defs sample_defs
make && ./build/cpu1/cpu1/core-cpu1
```

The log:

```
...
Current working dir: /home/stanislaw/workspace/code/cFS
open(./cf/cfe_es_startup.scr): No such file or directory
1980-012-14:03:20.25202 zES Startup: Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr EC = 0xFFFFFFFF
1980-012-14:03:20.25205 ES Startup: CFE_ES_Main entering APPS_INIT state
1980-012-14:03:20.25206 ES Startup: CFE_ES_Main entering OPERATIONAL state
EVS Port1 42/1/CFE_TIME 21: Stop FLYWHEEL
```

**2**

```bash
cp cfe/cmake/Makefile.sample Makefile
cp -r cfe/cmake/sample_defs sample_defs
# Building cpu1-all and then core-cpu1 in CLion
```

The log:

```
1980-012-14:03:20.25314 ES Startup: CFE_ES_Main entering CORE_READY state
Current working dir: /home/stanislaw/workspace/code/cFS/cmake-build-debug-cfs-cpu1/cfe/cpu1
open(./cf/cfe_es_startup.scr): No such file or directory
1980-012-14:05:45.46664 zES Startup: Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr EC = 0xFFFFFFFF
1980-012-14:05:45.46666 ES Startup: CFE_ES_Main entering APPS_INIT state
1980-012-14:05:45.46667 ES Startup: CFE_ES_Main entering OPERATIONAL state
EVS Port1 42/1/CFE_TIME 21: Stop FLYWHEEL```
```

Looking for a missing file indicates that there is no way a running CFS can find a file because it is neither copied to a predetermined location nor the relative file `./cf/cfe_es_startup.scr` points to a meaningful location.

```bash
$ find . | grep cfe_es_startup.scr
./cfe/cmake/sample_defs/cpu1_cfe_es_startup.scr
./sample_defs/cpu1_cfe_es_startup.scr
```

**Describe the solution you'd like**

Our understanding is that the `cfe_es_startup.scr` is an important file and without loading its contents CFS does not work properly. We would expect some action to exist in the CMake script files that would copy this file and make it available to the running cFS.

**Describe alternatives you've considered**

We assume that there is no other way of having CFS to run properly. There should be a procedure or instructions on how to make the `.scr` file available to CFS.

**Additional context**

None.

**Requester Info**

Stanislav Pankevich (PTS, private German space company)
",non-bug,https://github.com/nasa/cFE/issues/482
Provide standard byte swap functionality via EDS utilities,As discussed on [cfs_psp:43],non-bug,https://github.com/nasa/cFE/issues/334
Buffer overflow in unit tests when using default config,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/LC/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The unit test code sets the `EventText` member with a call to strncpy and a hardcoded size here:
https://github.com/nasa/LC/blob/779b903faef553299d8130aded0b9f5133ffa8c5/unit-test/lc_action_tests.c#L233

However in the default platform config the size is only 32:
https://github.com/nasa/LC/blob/779b903faef553299d8130aded0b9f5133ffa8c5/fsw/inc/lc_platform_cfg.h#L228

**To Reproduce**
Build and run using default/out-of-box config.

**Expected behavior**
Example configuration should not trigger buffer overflow

**Additional context**
Consider using `sizeof()` operator here, to adapt the `strncpy` call to the real size of the target buffer.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/LC/issues/66
Apply latest contributor license agreement links,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Applies links to the latest contributor license agreements.

**Describe the solution you'd like**
Working links

**Additional context**
Depends on https://github.com/nasa/cFS/pull/448

**Requester Info**
Justin Figueroa, ASRC Federal
",non-bug,https://github.com/nasa/CF/issues/220
Consider atomic assignments vs locking for a single variable (possible performance improvement),"**Is your feature request related to a problem? Please describe.**
In once case `volatile sig_atomic_t` is used with a simple assignment:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_global.h#L154
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L214

others have a lock for a single assignment:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L263-L266

**Describe the solution you'd like**
Consider using atomic types/assignments

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1410
Build failure of ut_time_stubs with BUILDTYPE=release,"**Describe the bug**
Matrix build fails with: BUILDTYPE=release OMIT_DEPRECATED=false
See also https://github.com/nasa/cFS/pull/40/ (enhanced CI)

**To Reproduce**
Steps to reproduce the behavior:
1. See CI process/results

**Expected behavior**
Successful build

**Error text**
```
home/travis/build/nasa/cFS/cfe/fsw/cfe-core/ut-stubs/ut_time_stubs.c: In function ‘CFE_TIME_Print’:
/home/travis/build/nasa/cFS/cfe/fsw/cfe-core/ut-stubs/ut_time_stubs.c:106:25: error: ‘ -’ directive output may be truncated writing 2 bytes into a region of size between 0 and 18 [-Werror=format-truncation=]
              ""UT %lu.%lu -"",
                         ^~
In file included from /usr/include/stdio.h:862:0,
                 from /home/travis/build/nasa/cFS/cfe/fsw/cfe-core/ut-stubs/ut_time_stubs.c:35:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:64:10: note: ‘__builtin___snprintf_chk’ output between 9 and 27 bytes into a destination of size 24
   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        __bos (__s), __fmt, __va_arg_pack ());
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
```

**System observed on:**
 - CI system, integration candidate bundle

**Additional context**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/487
os-impl-no-sockets.c out of date,"**Describe the bug**
Conflicting types for the implementations

**To Reproduce**
Attempt to compile w/ os-impl-no-sockets.c: OSAL_CONFIG_INCLUDE_NETWORK FALSE

**Expected behavior**
Should compile

**Code snips**
Many of the implementations don't match, sample:
```
src/os/portable/os-impl-no-sockets.c:52:7: error: conflicting types for ‘OS_SocketOpen_Impl’
 int32 OS_SocketOpen_Impl(uint32 sock_id)
src/os/shared/inc/os-shared-sockets.h:54:7: note: previous declaration of ‘OS_SocketOpen_Impl’ was here
 int32 OS_SocketOpen_Impl(const OS_object_token_t *token);
```

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions cFS Bundle

**Additional context**
Seen when adding a coverage test for this code (#795)

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/796
Include element that caused write error in event reporting in `CFE_EVS_WriteAppDataFileCmd`,"**Is your feature request related to a problem? Please describe.**
Element that caused error not included in event, so not obvious how much of the write was completed
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1746-L1748

**Describe the solution you'd like**
Add the element number

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1432
Resolve Klocwork issues found in 1.3.0,See attached spreadsheet.,bug,https://github.com/nasa/PSP/issues/96
Fix use of uint32 to store a memory address,"In many places a uint32 is used to store a memory address which breaks horribly on 64-bit architectures.

The new version of OSAL ""common_types.h"" introduced a ""cpuaddr"" type to address this -- it is defined as an integer type large enough to store a memory address on the local processor.

This ticket is to replace all uses of a uint32 to store a memory address with the cpuaddr type for better portability.  This is a requirement for a native 64-bit build to work.",bug,https://github.com/nasa/cFE/issues/38
Add check of sem_wait/rtems_semaphore_obtain in console  loop,"**Is your feature request related to a problem? Please describe.**
Console loop could spin if the semaphore returns error.

**Describe the solution you'd like**
Check for real errors (not just interrupted), and exit loop if needed.

**Describe alternatives you've considered**
None.

**Additional context**
Mentioned in #667

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/668
Table CRC Tool Fails to Close File Descriptor,"Analysis of the 27b VPU FSW code revealed that there is a potential leak of an allocated resource in the file cfe_ts_crc.c. The resource ""fd"" is opened but never closed before the function returns.

VpuTopProject/cfs/CFE/tools/tblCRCTool/cfe_ts_crc.c
143 /* open the input file if possible */
-->144 fd = open( argv[1], O_RDONLY );
145 if ( fd < 0 )
146 {
147 printf(""\ncfe_ts_crc error: can't open input file!\n"");
148 exit(0);
149 }
150 /* seek past the number of bytes requested */
151 lseek( fd, skipSize, SEEK_SET );
152 
153 /* read the input file 100 bytes at a time */
154 while ( done == 0 )
155 {
156 readSize = read(fd, buffer, 100);
157 fileCRC = CFE_ES_CalculateCRC(buffer, readSize, fileCRC, CFE_ES_CRC_16);
158 fileSize += readSize;
159 if (readSize != 100) done=1; 
160 }
161 /* print the size/CRC results */
162 printf(""\nTable File Name: %s\nTable Size: %d Bytes\nExpected TS Validation CRC: 0x%08X\n\n"", argv[1], fileSize, fileCRC);
163
164 return(fileCRC);
165 }",bug,https://github.com/nasa/tblCRCTool/issues/1
Clean up ES task/app registration,"**Is your feature request related to a problem? Please describe.**
In nasa/osal#853 it is proposed that `OS_TaskRegister()` be finally deprecated/removed.

But this function is invoked by two places in CFE ES that follow a similar pattern: `CFE_ES_RegisterApp()` and `CFE_ES_RegisterChildTask()`.

**Describe the solution you'd like**
At a minimum, calls to `OS_TaskRegister()` must be removed to allow the function to be deprecated.

Furthermore there is already a task startup wrapper in ES that can be used to call/handle setting up environment (`CFE_PSP_SetDefaultExceptionEnvironment()`) meaning that these two functions themselves can also be deprecated - basically using the same design pattern as OSAL uses such that we don't need to burden apps with calling this extra function.  This design is simpler and less error prone.

**Additional context**
See nasa/osal#853

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1215
CFE_ES_WriteToSysLog stub write to UtDebug,"**Is your feature request related to a problem? Please describe.**
CFE_ES_WriteToSysLog stub isn't informative when debugging

**Describe the solution you'd like**
Add debug output in CFE_ES_WriteToSysLog stub

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1134
sample_table.c -- relocate?,"**Is your feature request related to a problem? Please describe.**
Tables are a component of applications that are expected to be customized by the user. The cFS build process supports this customization (for example, by creating `sample_defs/tables/cpu1_sample_table.c`). Currently `sample_table.c` is in `fsw/src` but everything else in `fsw/src` is not expected to be customized by the user.

I consider sample_app to be the ""style template"" for applications, so this should be clear not just for users of the sample_app but for folks who model their code on sample_app.

**Describe the solution you'd like**
I would like to see a clearer indication that `sample_table.c` is expected to be customized--whether it be relocated to a different folder (`fsw/tables`?) or possibly rename it to `sample_table.c.sample`?

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/sample_app/issues/70
SysLog Support for Incremental Reads,"The concept is to use logs for forensic analysis, so yes as debug, but not as an exception more as always there. Problem is, by the time you know you want a log it will be gone if you don’t get it to a persistent, accessible storage place.

Algorithm I’m trying to support is:
On Timer:
-	Extract un-read logs
-	If enough logs have been extracted, package and send

The current API supports reading all the logs in the buffer at once and then clearing the logs (with the race condition that any logs that occur during the reading out will be lost, OR need to lock out all loggers during the read which is not acceptable).

The proposed update to the API is the addition of a single function that instead of setting the Buffer size based of EndIdx, sets the Buffer size based on the difference between the Buffer->LastOffset passed in and the writeIdx. This is a traditional circular buffer interface and is well supported within the code as it stands, just needs an API to initialize the Buffer correctly.

Advantages are:
-	Traditional circular buffer interface so supports a well established model
-	Allows readings of logs without loss of logs or undesirable locking
-	No impact to current code, so introduces no risk to current systems

",non-bug,https://github.com/nasa/cFE/issues/956
Include PSP unit test stub functions,"Per the UT assert framework design, each component should include basic stubs for the same public API calls provided by the component.

This adds those stubs for the PSP.",non-bug,https://github.com/nasa/PSP/issues/83
OSAL event callback framework for platform-specific handling,"**Is your feature request related to a problem? Please describe.**
Many platforms support extra non-standardized features, but OSAL cannot make use of these.  This includes items such as setting the processor affinity in a multi-processor system, or propagating the user-friendly task name at the OS level, as was suggested in #532. 

**Describe the solution you'd like**
An event callback framework could help solve this problem, allowing those platform-specific features to be invoked from the PSP/BSP layer while keeping OSAL itself standards-compliant.

**Describe alternatives you've considered**
Use `#ifdef` conditional compiles for platform-specific features (ugly and not as maintainable).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/540
Change UT_ClearForceFail to UT_ClearDefaultReturnValue,"**Is your feature request related to a problem? Please describe.**
UT_ClearForceFail was refactored to UT_ClearDefaultReturnValue for nasa/osal#724. It needs to have its name changed here as well.

**Additional context**
Part of nasa/osal#724

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1052
Update CFE_SB_GetUserData unit test to catch padding differences between header/payload,"**Is your feature request related to a problem? Please describe.**
CFE_SB_GetUserData returns the location right after the header, which isn't always the start of the payload if padding gets inserted.

**Describe the solution you'd like**
Add generic packets with all width types, and ensure the correct location is returned.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/903
network_includes.h needs to include sioLib.h for VxWorks target,"**Describe the bug**
When using RS-422 in io_lib under VxWorks, sioLib.h needs to be included.

**To Reproduce**
1. Use the 6.8.x tag to build a cFS system for VxWorks. 
2. Include io_lib in your apps
3. Ensure io_lib builds trans_rs422.c
4. Observe build failure:

```
[ 60%] Building C object apps/io_lib/CMakeFiles/io_lib.dir/fsw/src/services/trans_rs422.c.obj
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c: In function 'IO_TransRS422Init':
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'SIO_HW_OPTS_SET' undeclared (first use in this function)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: (Each undeclared identifier is reported only once
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: for each function it appears in.)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'CS8' undeclared (first use in this function)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'CLOCAL' undeclared (first use in this function)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'CREAD' undeclared (first use in this function)
make[7]: *** [apps/io_lib/CMakeFiles/io_lib.dir/fsw/src/services/trans_rs422.c.obj] Error 1
make[6]: *** [apps/io_lib/CMakeFiles/io_lib.dir/all] Error 2
make[5]: *** [all] Error 2
make[4]: *** [CMakeFiles/cpu1_default_cpu1-all] Error 2
make[3]: *** [CMakeFiles/cpu1_default_cpu1-all.dir/all] Error 2
make[2]: *** [CMakeFiles/mission-all.dir/rule] Error 2
make[1]: *** [mission-all] Error 2
make: *** [all] Error 2
```

**Expected behavior**
Build should succeed.

**Code snips**
cfe/fsw/cfe-core/src/inc/network_includes.h should look like this (note the added sioLib.h line)

```
+++ b/fsw/cfe-core/src/inc/network_includes.h
@@ -42,6 +42,7 @@
     #include <arpLib.h>
     #include <netinet/in.h>
     #include <netinet/tcp.h>
+    #include <sioLib.h>
```

**System observed on:**
 - building under Ubuntu 18.04 host with VxWorks 6.9
 - Versions 
    - cFE 6.8.x
    - custom PSP and OSAL for PPC target
    - io_lib master

**Reporter Info**
Morgan Redfield, Astrobotic
",non-bug,https://github.com/nasa/cFE/issues/802
Race conditions / dependencies between CFE core apps,"The ""core"" applications have significant dependencies between them that need to be more pro-actively satisfied.  There are some race conditions during the startup phase that can pose some serious problems if things are not executed in the right order.

The summary of what happened is below, but here is a list of the basic problems:

* Start up code should synchronize at least the ""core"" applications and ensure that each one has reached it's respective ""RunLoop"" before starting the next one, regardless of what the platform config sets the priority to (likely depends on #71).
* EVS_IsFiltered should range check before doing the table lookups based on passed-in values
* CFE SB and EVS (at least) populate different values into their own ""AppID"" global variable before initialization.  SB does nothing (0 by default, which is in fact a valid AppID for a different app) but EVS initializes this to 0xFFFFFFFFF, which has very ill-effects if actually used for something, and nothing really checks for this.

For those interested, here are the details of the specific sequence of events discovered when debugging application startup on the Microblaze processor used by the EVA team at GRC:

1. As dictated by the table within ""cfe_es_objtab.c"", the CFE core applications are started (Tasks Created) in the order of EVS, SB, ES, TIME, BL.  
2. In the default/example platform configuration, these have respective priorities of 61(EVS), 64(SB), 68(ES), 60(TIME), and 70(TBL).
3. TIME task will run it's TaskMain first even though it is 4th in the start sequence.  
4. As part of this init sequence, it calls CFE_SB_CreatePipe() which in turn calls CFE_EVS_SendEventWithAppID() in several places (for errors as well as an unconditional ""debug event"" at the end).  The AppId supplied is ""CFE_SB.AppId"" which is uninitialized since SB has not executed yet.  In this case the value used is actually 0.
5. In turn this eventually calls EVS_NotRegistered() (since CFE_EVS_TaskInit has not run) and then EVS_SendEvent() as part of that.  
6. EVS_SendEvent() calls EVS_IsFiltered() with the contents of CFE_EVS_GlobalData.EVS_AppId, which is also uninitialized but set to ""0xFFFFFFFF"", not zero like CFE_SB.AppId.  
7. This appID value is not range-checked by EVS_IsFiltered and ultimately segfaults and crashes CFE core.

",bug,https://github.com/nasa/cFE/issues/73
Split message definitions from headers,"All of the cFS messages are currently defined in C structures.  As a first step toward moving to ""electronic data sheets"" to describe the external data format, these need to be slightly modified to better separate the header portion of the structure from the payload portion of the structure.

Currently, message structures are typically defined by reserving a block of space for the header as a uint8 array of size CFE_SB_CMD_HDR_SIZE or CFE_SB_TLM_HDR_SIZE.  This approach has several issues:

* Using a fixed-size block assumes only a single type of encapsulation (CCSDS) will ever occur.  This may not be the case, as other non-CCSDS encapsulations may be a requirement for some missions.
* The fixed size block is not guaranteed to be properly aligned for a CCSDS header.  Since it is declared as a uint8 array, the compiler will not ensure any alignment this structure.  It is technically not valid to cast this as a CCSDS header since that contains uint16's.
* This is unlikely to be compatible with electronic data sheets (EDS) no matter what specific implementation is used.  Since the definition of the message content (payload) and the message header (CCSDS or other format) will come from different data sheets, it becomes very problematic to have them mixed together like this.  

To solve this problem requires a bit of restructuring: instead of declaring the format of the payload directly within the message structure, declare a separate ""Payload"" structure and define it in there.

This adds one extra layer to the structure tree but will improve flexibility going forward, and it will **NOT** change the external data format, so compatibility with ground systems is unaffected.  It only affects the syntax of code accessing members of the payload structure.",non-bug,https://github.com/nasa/cFE/issues/35
"RTS table file load ""failure"" event at startup misnomer causes build run workflow failure","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/SC/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/SC/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The build and run workflow checks for err|warn|fail, but SC nominally sends the following event:
`EVS Port1 66/1/SC 21: RTS table file load failure count = 62`

See error here: https://github.com/nasa/SC/runs/6327781812?check_suite_focus=true

**Describe the solution you'd like**
Really this isn't a failure.  It's just than only 2 of up to 64 RTS tables were loaded automatically.  Maybe just change to say 'RTS table files not loaded automatically at startup = 62' or similar.

**Describe alternatives you've considered**
Could set the configuration just to load the 2 existing RTS's... but it may be handy to leave as somewhat larger to avoid requiring recompile to add more default RTS's.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/SC/issues/25
"""network-api-test"" does not run successfully on VxWorks","**Describe the bug**
Running the ""network-api-test"" on VxWorks fails with several issues.  The fcntl `F_GETFL`/`F_SETFL` calls return errno `EINVAL` followed by other failures.

**To Reproduce**
Run the ""network-api-test"" program on MCP750 w/VxWorks 6.9.  Various failures are reported.  Eventually the test hangs because a timeout test is reached, but timeouts do not function correctly due to issues with the previous fcntl F_GETFL calls.

**Expected behavior**
Test should pass.

**System observed on:**
MCP750 w/VxWorks 6.9

**Additional context**
This is partly related to modifications in PR #910/issue #863 which was a product of the CFS-38 review.  Previously it would not check the result of the `fcntl` calls so the ""selectable"" flag was always set.  Now the result is checked and the ""selectable"" flag only gets set if the flags were set.  So the fcntl was always failing on VxWorks but it was previously ignored.  But even if the O_NONBLOCK flag doesn't get set, `select()` should still be usable.  The flag is mainly set as a protection in case two tasks call a blocking API at the same time.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.  (on behalf of JSC team)",bug,https://github.com/nasa/osal/issues/988
Missing registering contexts in stub functions,"I’ll work this issue

The issue causes seg faults cause by not registering contexts. I resolved this by adding the missing registrations.
 

cfe/fsw/cfe-core/ut-stubs/ut_evs_stubs.c:
int32 CFE_EVS_SendEvent(uint16 EventID,
                        uint16 EventType,
                        const char *Spec,
                        ...)
{
    int32 status;
    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), &EventID);
    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), &EventType);  <----- missing
    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), Spec);              <----- missing
..
}
 
cfe/fsw/cfe-core/ut-stubs/ ut_es_stubs.c:
int32 CFE_ES_WriteToSysLog(const char *pSpecString, ...)
{
    int32   status;
    UT_Stub_RegisterContext(UT_KEY(CFE_ES_WriteToSysLog), pSpecString);  <----- missing
 ...}


Expected behavior
Return register buffer size=3 when using CFE_EVS_SendEvent and buffer size =1 when using CFE_ES_WriteToSysLog.

System observed on:

Hardware
OS: Centos 7
Versions:cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.8.0, chksm 9194


Reporter Info
Jose Tovias CACI/LZT Technology",bug,https://github.com/nasa/cFE/issues/657
File created without restricting permissions in unit test tools,"**Is your feature request related to a problem? Please describe.**
CodelQL security warnings against following code:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/src/uttools.c#L60
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/src/uttools.c#L102-L124

**Describe the solution you'd like**
https://github.com/nasa/elf2cfetbl/blob/6d1d12ea2d4ab7bcc7044f8e4c60a268d7a1f640/elf2cfetbl.c#L1455-L1464

**Describe alternatives you've considered**
None

**Additional context**
CodeQL analysis results

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/780
Remove dependencies on deprecated cFE elements,"With:
`cfe/CMakeLists.txt:add_definitions(""-D_ENHANCED_BUILD_ -DCFE_OMIT_DEPRECATED_6_6"")`
build errors:
```
n file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:80:0:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/platform_inc/to_lab_sub_table.h:81:14: error: ‘CFE_EVS_EVENT_MSG_MID’ undeclared here (not in a function)
             {CFE_EVS_EVENT_MSG_MID, {0,0},  32},
              ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_Lab_AppMain’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:120:40: error: ‘CFE_ES_APP_RUN’ undeclared (first use in this function)
    uint32                  RunStatus = CFE_ES_APP_RUN;
                                        ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:120:40: note: each undeclared identifier is reported only once for each function it appears in
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:120:40: warning: initialization makes integer from pointer without a cast [-Wint-conversion]
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_init’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:187:22: error: ‘CFE_EVS_BINARY_FILTER’ undeclared (first use in this function)
                      CFE_EVS_BINARY_FILTER);
                      ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:187:22: warning: passing argument 3 of ‘CFE_EVS_Register’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:162:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_Register (void                 *Filters,           /* Pointer to
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:203:47: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
        CFE_EVS_SendEvent(TO_CRCMDPIPE_ERR_EID,CFE_EVS_ERROR, ""L%d TO Can't crea
                                               ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:203:47: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:209:45: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
        CFE_EVS_SendEvent(TO_TLMPIPE_ERR_EID,CFE_EVS_ERROR, ""L%d TO Can't create
                                             ^
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:222:51: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
            CFE_EVS_SendEvent(TO_SUBSCRIBE_ERR_EID,CFE_EVS_ERROR,""L%d TO Can't s
                                                   ^
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:231:41: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
     CFE_EVS_SendEvent (TO_INIT_INF_EID, CFE_EVS_INFORMATION,
                                         ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:231:41: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_StartSending’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:251:44: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
     CFE_EVS_SendEvent(TO_TLMOUTENA_INF_EID,CFE_EVS_INFORMATION,""TO telemetry ou
                                            ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:251:44: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_process_commands’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:289:59: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
                        CFE_EVS_SendEvent(TO_MSGID_ERR_EID,CFE_EVS_ERROR, ""L%d T
                                                           ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:289:59: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_exec_local_command’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:314:47: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
             CFE_EVS_SendEvent(TO_NOOP_INF_EID,CFE_EVS_INFORMATION, ""No-op comma
                                               ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:314:47: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:344:49: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
             CFE_EVS_SendEvent(TO_FNCODE_ERR_EID,CFE_EVS_ERROR, ""L%d TO: Invalid
                                                 ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:344:49: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_openTLM’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:433:50: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
        CFE_EVS_SendEvent(TO_TLMOUTSOCKET_ERR_EID,CFE_EVS_ERROR, ""L%d, TO TLM so
                                                  ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:433:50: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_AddPkt’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:454:44: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
        CFE_EVS_SendEvent(TO_ADDPKT_ERR_EID,CFE_EVS_ERROR, ""L%d TO Can't subscri
                                            ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:454:44: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:457:44: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
        CFE_EVS_SendEvent(TO_ADDPKT_INF_EID,CFE_EVS_INFORMATION, ""L%d TO AddPkt
                                            ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:457:44: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_RemovePkt’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:475:47: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
        CFE_EVS_SendEvent(TO_REMOVEPKT_ERR_EID,CFE_EVS_ERROR,""L%d TO Can't Unsub
                                               ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:475:47: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:478:47: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
        CFE_EVS_SendEvent(TO_REMOVEPKT_INF_EID,CFE_EVS_INFORMATION,""L%d TO Remov
                                               ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:478:47: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_RemoveAllPkt’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:498:57: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
              CFE_EVS_SendEvent(TO_REMOVEALLPTKS_ERR_EID,CFE_EVS_ERROR, ""L%d TO
                                                         ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:498:57: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:506:49: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
        CFE_EVS_SendEvent(TO_REMOVECMDTO_ERR_EID,CFE_EVS_ERROR, ""L%d TO Can't Un
                                                 ^
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:511:48: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
        CFE_EVS_SendEvent(TO_REMOVEHKTO_ERR_EID,CFE_EVS_ERROR, ""L%d TO Can't Uns
                                                ^
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:514:48: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
     CFE_EVS_SendEvent(TO_REMOVEALLPKTS_INF_EID,CFE_EVS_INFORMATION, ""L%d TO Uns
                                                ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:514:48: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
       ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c: In function ‘TO_forward_telemetry’:
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:556:54: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
              CFE_EVS_SendEvent(TO_TLMOUTSTOP_ERR_EID,CFE_EVS_ERROR,
                                                      ^
/home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:556:54: warning: passing argument 2 of ‘CFE_EVS_SendEvent’ makes integer from pointer without a cast [-Wint-conversion]
In file included from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.h:49:0,
                 from /home/jhageman/cFS/cFS-dev/apps/to_lab/fsw/src/to_lab_app.c:50:
/home/jhageman/cFS/cFS-dev/cfe/fsw/cfe-core/src/inc/cfe_evs.h:233:7: note: expected ‘uint16 {aka short unsigned int}’ but argument is of type ‘TO_subsciption_t * {aka struct <anonymous> *}’
 int32 CFE_EVS_SendEvent (uint16 EventID,
 ```",non-bug,https://github.com/nasa/to_lab/issues/7
sb-stats telemetry packet is not time-stamped," A line was deleted at some point in the cfe_sb_task.c file that used to timestamp the sb-stats message before going out on the s/w bus.

The CFE_SB_SendStats() routine merely needs a line added back in:

    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_SB_TaskData.StatTlmMsg);",bug,https://github.com/nasa/cFE/issues/222
Enums should not be used in tlm (portability),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The end of transaction tlm message `CF_EotPacket_t` uses enums which we tend to avoid due to portability issues:
https://github.com/nasa/CF/blob/fa06c37225b82da2935e73e9c4ff0def4e338441/fsw/src/cf_msg.h#L136-L138

**Describe the solution you'd like**
Replace with fixed size types

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

Reported/requested by stakeholder.",non-bug,https://github.com/nasa/CF/issues/311
Remove use of message storage in CF_AppData global,"Should this be a follow-on cleanup issue (if it isn't already)?

_Originally posted by @skliper in https://github.com/nasa/CF/pull/135#r771683338_

Related to https://github.com/nasa/CF/issues/91

Might depend on #87 

",non-bug,https://github.com/nasa/CF/issues/139
Transition CFE tests to use UtAssert macros (moved from CFE),"**Is your feature request related to a problem? Please describe.**
In pull request nasa/osal#1125, a number of CFE coverage assert macros and generic functions were ported into the base UtAssert library.  Usage of the macro is equivalent.

**Describe the solution you'd like**
After merging that PR, remove the local CFE definitions of the macros and functions, and search/replace all references to use the UtAssert version instead.

**Describe alternatives you've considered**
Leave duplicate

**Additional context**
Requires nasa/osal#1125 to be merged first (or at the same time)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1743
Overrun warnings false alarm for CFE_MSG_Message_t,"**Describe the bug**
Out-of-bounds access (OVERRUN)

**Expected behavior**
Fix overruns 

**Code snips**
Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 159 using argument 160UL. 
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/evs/fsw/src/cfe_evs_task.c#L75-L76

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 47 using argument 48UL.
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/evs/fsw/src/cfe_evs_utils.c#L412-L413

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 31 using argument 32UL.
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_task.c#L868

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 43 using argument 44UL. 
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_task.c#L207-L208

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 299 using argument 300UL.
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/tbl/fsw/src/cfe_tbl_task.c#L241

Overrunning struct type CFE_MSG_Message_t of 8 bytes by passing it to a function which accesses it at byte offset 27 using argument 28UL. 
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/time/fsw/src/cfe_time_utils.c#L355-L356

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFE/issues/1992
Add requirements to cover IsValidMsgId and GetPktType,"**Is your feature request related to a problem? Please describe.**
Exposing CFE_SB_IsValidMsgId and CFE_SB_GetPktType needs to flow from a requirement given the current cFE requirements pattern.

**Describe the solution you'd like**
Add the requirements

**Describe alternatives you've considered**
None

**Additional context**
#263 #543

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/587
Provide a tutorial describing what's needed to build an app with ECI,"The previous approach of directing people to the automated build system leaves some holes when trying to explain how to integrate an app with ECI. To combat this, we should provide an explanation of how to build an ECI app in both the cFE make and cmake build systems.

Information for building a 6.5 ECI app can be found [here](https://github.com/nasa/ECI/blob/master/doc/ECI_FSW_Integration_Guide.docx) but there isn't any explanation of how to build with cmake.",non-bug,https://github.com/nasa/ECI/issues/28
Clarify CFE_TBL_NotifyByMessage should not use ground command MID,"**Is your feature request related to a problem? Please describe.**
CFE_TBL_NotifyByMessage should use a separate MID from ground commands to avoid command counter increments (and any other ground specific processing).

**Describe the solution you'd like**
Update documentation to explicitly recommend NOT using ground command MID.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT* - changed per comments below from a command code issue",non-bug,https://github.com/nasa/cFE/issues/531
Update CFE unit tests after rebase of OSAL ticket 17,"Previously, CFE ticket #63 was implemented which was based on the proposed unit test framework implemented within OSAL [cfs_osal:17].

The unit test framework has since been revisited and the related OSAL ticket has been rebased accordingly.

Unfortunately, this broke some items that had been done originally within trac #63.  Trac 32 can no longer be rebased since it is merged in ""development"" already, so this ticket will fix the unit test breakage.",bug,https://github.com/nasa/cFE/issues/103
Requirements scrub for Caelum development cycle,"**Is your feature request related to a problem? Please describe.**
Caelum development included API additions, need updated requirements.

**Describe the solution you'd like**
Update:
ES: Report Task and Application Name,cES1305 -> ES: Get Task Information

New:
ES: Get Library Information,cES1344
ES: Delete Memory Pool,cES1345
ES: Get Generic Counter Name,cES1346
FS: Filename Auto-Complete,cES1605
FS: Background File Dump,cES1606
SB: Delete Pipe,cSB4302
SB: Set Packet Type,cSB4346
SB: Get Header Field,cSB4347
SB: Set Header Field,cSB4348
SB: Get Sequence Count,cSB4349
SB: Set Sequence Count,cSB4350
SB: Get Next Sequence Count,cSB4351
SB: Get Type From MsgId,cSB4352

**Describe alternatives you've considered**
None

**Additional context**
Note - resource ID APIs and *_ToIndex APIs were categorized as ""Design"" so they aren't associated directly with requirements (a different implementation may not require these).  Of similar note, the message implementation supports user defined header fields, so the requirement is generic where there isn't internal dependencies on the field.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1717
PSP API for onboard devices,"This has been split off from #6 
PSP needs to define some common API/framework for communication with onboard devices.  This would present a consistent API so CFS code can be better abstracted from the hardware implementation details.

For instance, if a serial controller device is present on the board, it would speak the same protocol regardless of whether the physical devices is connected over RS232, RS485, an LVDS link, or some other link.  However the configuration API and the means to communicate over these different types of interfaces differs.  Some boards might have dedicated hardware channels, others might ""bit bang"" with GPIO, etc.

The PSP should abstract this difference and present a similar API so the CFS code that talks to these devices can be portable.  The standardization work being performed by the CCSDS SOIS working group may be relevant here as well.",non-bug,https://github.com/nasa/PSP/issues/33
"OSAL should have a ""OS_GetVersionString()"" function","**Is your feature request related to a problem? Please describe.**
Currently the OSAL version is a string that is made available as a macro - `OS_VERSION_STRING` - which defined in `osapi-version.h`

The problem with this is that because its a preprocessor macro - the replacement is done at the point the macro is _referenced_ and therefore the value ends up getting built into the binary code for whatever referenced this (in CFE use case this is `cfe_es_task.o`)

This means if that code is later linked with a different/updated OSAL library (but the CFE code using OSAL is **not** recompiled) it will still report the original OSAL version string, which is wrong.

**Describe the solution you'd like**
There should be a function call into OSAL to get the version string, rather than a macro in a header.  Therefore if/when re-linking without recompilation, it will report the correct value.

**Additional context**
In summary - the OSAL version string should be stored within the OSAL library binary file, rather than stored within the CFE library binary file.  This is confirmed via the ""strings"" tool that right now its in the wrong place:

    $ strings build/native/default_cpu1/cfe-core/libcfe-core.a | grep osal
    cFS Versions: cfe v6.8.0-rc1+dev348, osal v5.1.0-rc1+dev262, psp

This shows that the actual string showing the OSAL version as reported by the cFE event is baked into the CFE library, not the OSAL library where it should be.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/821
Missing test cases for software bus API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the software bus functional test:

```
 + condition: CFE_SB_CreatePipe[any]=>CFE_SB_MAX_PIPES_MET
 + condition: CFE_SB_DeletePipe[CFE_SB_PipeId_t@0]=>ERROR_RESOURCEID_INVALID
 + condition: CFE_SB_GetPipeIdByName[<null-pointer>@1]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringGet[<null-pointer>@0]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringGet[<null-pointer>@1]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringSet[<null-pointer>@0]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringSet[<null-pointer>@1]=>ERROR_NULL_POINTER
 + condition: CFE_SB_ReceiveBuffer[any]=>CFE_SB_NO_MESSAGE
 + condition: CFE_SB_ReceiveBuffer[any]=>CFE_SB_PIPE_RD_ERR
 + condition: CFE_SB_Subscribe[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_Subscribe[any]=>CFE_SB_MAX_DESTS_MET
 + condition: CFE_SB_Subscribe[any]=>CFE_SB_MAX_MSGS_MET
 + condition: CFE_SB_SubscribeEx[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_SubscribeEx[any]=>CFE_SB_MAX_DESTS_MET
 + condition: CFE_SB_SubscribeEx[any]=>CFE_SB_MAX_MSGS_MET
 + condition: CFE_SB_SubscribeLocal[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_SubscribeLocal[any]=>CFE_SB_MAX_DESTS_MET
 + condition: CFE_SB_SubscribeLocal[any]=>CFE_SB_MAX_MSGS_MET
 + condition: CFE_SB_TransmitBuffer[any]=>CFE_SB_MSG_TOO_BIG
 + condition: CFE_SB_TransmitMsg[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_Unsubscribe[any]=>CFE_SB_INTERNAL_ERR
 + condition: CFE_SB_UnsubscribeLocal[any]=>CFE_SB_INTERNAL_ERR
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1812
API additions to formalize common routines in OSAL,"During unit testing and for ""restart"" actions in a real system (either processor or power-cycle restarts) it is necessary to have a method of cleanly shutting down the system.  

Currently, support for shutdown operations is left up to the BSP, and it is not consistently handled between the various BSPs or not handled at all in some cases.

OSAL needs to have formal procedures for a normal shutdown since there is often some clean up work to do, including but **not limited to**:
* Sanely exit all running tasks, or collect resources from tasks that have exited already
* Delete queues, mutexes and semaphores (this is particularly necessary on systems where this is a limited resource and may affect the ability to implement a warm restart)
* Unmount any non-volatile filesystems that may have been mounted
* Delete shared memory segments

This ticket will add some basic API calls to formalize the procedure and provide the hooks necessary to do this cleanup.  

The POSIX layer needs this with the highest priority, as it is used extensively for testing where a sane shutdown/restart procedure is important.



",non-bug,https://github.com/nasa/osal/issues/56
Improper Null Termination on Software Bus Message handling,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
It is not guarenteed that the source or destination arguments of `strncpy` for software bus message uses in ds/apps/fsw/src assure Null termination. Many standard functions such as strcpy, strlen, strcmp among others rely on arrays of characters to be Null terminated.

**To Reproduce**
From local ds repo, command `grep -r strncpy` and view uses where argument is a software bus message.

**Expected behavior**
No expected behavior changes. Replace `strncpy` with  [`CFE_SB_MessageStringGet`](https://github.com/nasa/cFE/blob/e35c3da83a7b3adf20ac2d909cf4c36f4370632c/modules/sb/fsw/src/cfe_sb_util.c#L169)

**Code snips**
The below code snips are DS strncpy uses that do not guarentee null-termination
https://github.com/nasa/DS/blob/04c01548a8eaaf5a1b4abb2b7d7548140e0cd6c0/fsw/src/ds_cmds.c#L742
https://github.com/nasa/DS/blob/04c01548a8eaaf5a1b4abb2b7d7548140e0cd6c0/fsw/src/ds_cmds.c#L809
https://github.com/nasa/DS/blob/04c01548a8eaaf5a1b4abb2b7d7548140e0cd6c0/fsw/src/ds_cmds.c#L876

This strncpy example in FM may help with null-terminated destination but does not guarentee null-terminated source:
[FM strncpy example](https://github.com/nasa/FM/blob/2be3511211e756058236b30abe40b0de372bd2f1/fsw/src/fm_child.c#L1227-L1228)

**System observed on:**
 imported from JSC static analysis audit

**Additional context**
The FM example above proves to assure Null termination for the destination, however, it may be best approach to replace `strncpy` with [`CFE_SB_MessageStringGet`](https://github.com/nasa/cFE/blob/e35c3da83a7b3adf20ac2d909cf4c36f4370632c/modules/sb/fsw/src/cfe_sb_util.c#L169) to consolidate handling of strings.

**Reporter Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/DS/issues/83
Add at least one conditional for unit testing,"**Is your feature request related to a problem? Please describe.**
In the process of providing useful examples for unit testing, the sample lib should contain
at least one ""if"" statement to demonstrate how the alternate paths can be exercised in UT.

**Describe the solution you'd like**
Add a call to a simple C library function during `SAMPLE_LibInit`, and have an alternate return code (not CFE_SUCCESS) as based off the result.  Unit test can then force the alternate path to execute.

**Describe alternatives you've considered**
N/A

**Additional context**
This will add considerable value to the UT examples

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_lib/issues/8
Improve consistency when working with OSAL status codes,"**Is your feature request related to a problem? Please describe.**
Quite often in the CFE implementation, OSAL status codes are mixed with CFE status codes, often times sharing a single stack variable to hold either one, and even switching back and forth.

To improve clarity and consistency, OSAL status codes should be stored in a _separate_ stack variable from the CFE status codes.  Ideally, in the future, these should also migrate to a separate type (e.g. `osal_status_t`, as in nasa/osal#1108, or `CFE_Status_t`, as in nasa/cfe#921).  

**Describe the solution you'd like**
- Anywhere that an OSAL status code is stored on the stack, make a _separate_ variable.
- Always use a consistent name for that variable, e.g. `OsStatus`  (as opposed to ""Status"" or ""ReturnCode"" etc, which are vague).
- Avoid intermixing CFE status codes and OSAL status codes whenever possible (there will still be some times its necessary, when calling generic functions).  When it is necessary, make conversions between these types explicit/obvious via comments and/or type casting.
- When printing OSAL status codes in a log or event message, print it as long decimal (%ld), not as hex as the CFE status codes are.  This is because OSAL defines its status codes as decimal numbers, so logs/events should match this.

**Additional context**
This can be considered a prerequisite to nasa/cfe#921 (cannot introduce a unique `CFE_Status_t` type until it is no longer being used to store OSAL codes).

This would be a fix for next release (not 7.0.0).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1755
OS_TaskDelete fails if the task (pthread) has already terminated on its own,"I am creating tasks with functions that execute for a period of time, then return (terminate) on their own. OS_TaskDelete tries to call pthread_cancel on the thread id, which fails.

This results in the task table entry remaining and I am unable to re-use that task name.",bug,https://github.com/nasa/osal/issues/79
CFE_ES_ShellOutputCommand is Truncating Output Filename,"In the CFE_ES_ShellOutputCommand, when a filename is passed into the function, the call to CFE_SB_MessageStringGet is truncating the input filename into the output filename variable.  

The truncation is occurring due to the sizeof the pointer to the input filename being used as the SourceMaxSize input in the call to the CFE_SB_MessageStringGet function on lines 99-102:

int32 CFE_ES_ShellOutputCommand(const char * CmdString, const char *Filename)
{

...

    else
    { 
        (void) CFE_SB_MessageStringGet(OutputFilename, Filename, NULL, sizeof(OutputFilename), sizeof(Filename));  
    }
",bug,https://github.com/nasa/cFE/issues/193
OS_open and file-api-test in conflict,"The test for OS_open includes a clause that explicitly
attempts to open, using OS_READ_WRITE, a file that
has never existed -- and expects an error. That is, the
test presumes that OS_open does not by default create
files that do not exist.

The implementation, on the other hand, includes O_CREAT
except when opening read-only.

The test needs to use OS_READ_ONLY mode, if we want it
to pass with the current implementation.
",bug,https://github.com/nasa/osal/issues/91
UtAssert_Abort should support a format string like other calls do,"**Is your feature request related to a problem? Please describe.**
Sometimes, the UtAssert test macros are used to test not just the output of the unit under test, but to check for sanity in the test cases themselves (e.g. that the appropriate preconditions were set, etc).  If the condition is not true, then the user gets a regular failure report in the test log.  This looks just like any other test failure, which is generally good enough in most cases (attention is brought to it, so it can be fixed).

But when using `UtAssert_Failed` or equivalent for this purpose, if checks fail, the test still continues to run.  On occasion the value being check is critical enough that the test should actually stop early, such as if a pointer is NULL or a value would cause divide by zero, etc.

UtAssert provides a `UtAssert_Abort()` function, but this is an oddball in that in only accepts a single preformatted string message, NOT a printf-style format string like all other asserts do.

**Describe the solution you'd like**
Extend UtAssert_Abort() to make it accept a printf-style format string like other assert 

**Additional context**
Test code should not use the system `assert.h` for this, because a failure will not go through the proper reporting channels.  UtAssert_Abort() is basically the equivalent idea, but its use was limited to some degree by the fact that it can't include detail information in the message (at least not easily).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1195
Missing test cases for Event Services API parameter/return status combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return combinations are not exercised by the Event Services functional test:

```
 + condition: CFE_EVS_Register[any]=>CFE_ES_BAD_ARGUMENT
 + condition: CFE_EVS_Register[any]=>CFE_EVS_APP_FILTER_OVERLOAD
 + condition: CFE_EVS_Register[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_Register[any]=>CFE_EVS_UNKNOWN_FILTER
 + condition: CFE_EVS_Register[any]=>CFE_SUCCESS
 + condition: CFE_EVS_ResetAllFilters[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_ResetAllFilters[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_ResetFilter[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_ResetFilter[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_SendEvent[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_SendEvent[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_SendEventWithAppID[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_SendTimedEvent[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_SendTimedEvent[any]=>CFE_EVS_APP_NOT_REGISTERED
```

**Describe the solution you'd like**
Ideally should be tested, but this may be difficult with the current cfe_testcase app because it uses event services to report test results.

**Describe alternatives you've considered**
Document why these cannot be tested in the current Caelum release, and rely on coverage testing to test these responses (which is already implemented)

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

These should generally not be marked as `covtest` in the doxygen because they (theoretically) _can_ be tested in a functional test, its just that the cfe_testcase app uses and registers with event services before starting tests, so any interference with this would prevent/conflict with normal test reporting.  This is true for all calls to `CFE_EVS_Register` (because its already registered), and all items that return  `CFE_EVS_APP_ILLEGAL_APP_ID` or `CFE_EVS_APP_NOT_REGISTERED`  (which is really everything in the above list).  These would all need a _separate_ app/task that is not registered with EVS to accomplish.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1817
"The ""sample_app"" should call into ""sample_lib""","**Is your feature request related to a problem? Please describe.**
The sample_app only calls CFE functions; it does not call any OSAL, PSP, or additional library functions like a real app might do.

This makes a difference for Unit Testing.  The framework should contain a useful example of UT for apps and libs (related to #21) and the example would be more useful if it called something other than CFE.

**Describe the solution you'd like**
The sample_app should invoke the `SAMPLE_Function` as provided in the example `sample_lib` library.

**Describe alternatives you've considered**
N/A

**Additional context**
This change would demonstrate two things:

- demonstrate at runtime that the dynamic linking worked correctly for the libraries (i.e. an app can successfully call into a lib like it is supposed to)
- demonstrate linking to the stubs provided by the library for unit testing

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/23
Exclude unit-tests from lcov report (skews results),"**Is your feature request related to a problem? Please describe.**
Unit test coverage results skewed by unit-test directory inclusion (shows uncovered stub lines)

**Describe the solution you'd like**
lcov --remove unit-test (or whatever) from the coverage.info line in Makefile.sample

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/380
"CFE_TIME state saved in CDS does not include ""DelayDirection""","CFE_TIME has some features to save the current state of the reference to CDS, which is then restored after reset.  This includes the ""delay"" value that is used by time clients to adjust/compensate for distribution delays in the time signal.

While the delay amount is saved in CDS, the accompanying delay direction value is not saved.  It is always reset to ""ADD"" after booting.  So, for instance, if a time client had been running with a delay compensation value of e.g. -10ms before reboot, it would become +10ms after reboot and restore from CDS.

This seems incorrect.
",bug,https://github.com/nasa/cFE/issues/312
OSAL Select APIs missing functional test,"**Is your feature request related to a problem? Please describe.**
OS_SelectMultipe, OS_SelectSingle, OS_SelectFdZero, OS_SelectFdAdd, OS_SelectFdClear, OS_SelectFdIsSet all missing functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None

**Additional context**
Certification issue.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/377
Follow temporary file + rename pattern for all files,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently, there is a special case to handle situations where the MD PDU arrives out of order.  A temporary file is opened, and then renamed once the MD packet does arrive.

However, because this is only done for off-nominal cases, it is likely not as well tested as other paths (see bug #131). 

**Describe the solution you'd like**
This pattern of using a temp file should be standard operating procedure, not just something for special cases.  Reasons/advantages for always doing it this way described in my comment here: https://github.com/nasa/CF/issues/131#issuecomment-1183239857

This improves atomicity of file updates, prevents clobbering files and avoids cases where other apps might see partial files or other bad content.

**Describe alternatives you've considered**
N/A

**Additional context**
As the fix for #131 strictly only fixed the issue described, this is a more general enhancement that would improve CF.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/CF/issues/280
Remove CFE_EVS_Unregister API,"**Is your feature request related to a problem? Please describe.**
There's no use case for apps to unregister themselves from EVS using `CFE_EVS_Unregister`, ES cleans them up when an app is being terminated using `CFE_EVS_CleanUpApp`.

**Describe the solution you'd like**
Remove the `CFE_EVS_Unregister` public API, confirm requirements also match up.

Requirement is cEVS3101 - delete.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1386
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/168
CFE_ES_GetAppName() undefined output when failure occurs,"The `CFE_ES_GetAppName()` function is reasonably well defined - it sets the AppName output buffer and returns `CFE_SUCCESS` when everything went well, and it also nicely ensures that the output buffer is null terminated with the specified output buffer size (all good things).

== PROBLEM: ==
Most callers of this function do not check the return code.

`CFE_ES_GetAppName()` does not touch the output buffer in case of failure (any return code other than `CFE_SUCCESS`) and this would mean that the output may not be null terminated at all, or may be left with garbage from a previous value.

Some callers explicitly add a null char to the buffer at the last position in the buffer, but this still leaves the possibility of treating a buffer full of garbage (or the previous value) as the correct value.

== PROPOSAL ==
As a near term fix `CFE_ES_GetAppName()` should return an empty string in addition to the error code.

",bug,https://github.com/nasa/cFE/issues/148
Simplify handling/checking of event type in commands and use a defined mask,"**Is your feature request related to a problem? Please describe.**
Inconsistent handling/checking of event type when input by command.

There is no type mask defined, so some places it's constructed and other's hardcoded:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/inc/cfe_evs_msg.h#L898-L902

Internal functions `EVS_EnableTypes` and `EVS_DisableTypes` both **silently** mask and use a variable with a constructed value where the value should be const, fragile since each individual value is used (twice) so easy to get out of sync:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L337-L344
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L356-L363

All the command handlers that actually use the above helpers already check against a hard coded value and report out of range bit mask:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1080
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L932
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L982
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1152

**Describe the solution you'd like**
At minimum define a mask (near bit definitions) and use it.  Helpers could check the range and return an error, then handler could just report on failure.  

**Describe alternatives you've considered**
Could leave the check in the handler and remove the helpers since they'd just be an | or &~, not really worth a helper for this approach.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1438
Keep local subscription status with subscription info so only one unsubscribe API is needed,"**Is your feature request related to a problem? Please describe.**
Don't need a special unsubscribe if the setting is available:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L388

**Describe the solution you'd like**
Store local setting so single unsubscribe API can just do the right thing based on the setting.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1454
Potential for recursive loop if Event TLM MsgId is incorrect,"**Describe the bug**
If the software bus `CFE_SB_TransmitMsg()` fails to send a message due to a validation failure, it will send an event through EVS.

Event Services, in turn, generates a message (LongEventTlm/ShortEventTlm) which is broadcast via software bus.

However if the Event Telemetry MID value (`CFE_EVS_LONG_EVENT_MSG_MID`) is not set correctly (or some other EVS config is bad) such that EVS tries to send event messages which do not validate, a recursive loop ensues and the software eventually segfaults.

**To Reproduce**
(Mis)configure `CFE_EVS_LONG_EVENT_MSG_MID` to a value which will not pass the CFE_SB_TransmitMsgValidate tests.  Run CFE, it will get in a recursive loop and eventually segfault/crash as soon as any app sends an event.

**Expected behavior**
Should not do a recursive loop

**System observed on:**
Ubuntu

**Additional context**
Should be protection against recursive event loops like this, where if an event fails to send, it should not cause another event to be sent.   This protection appears this is not working correctly right now, at least not for EVS messages.

__NOTE__: To be absolutely clear - the issue described here is a mis-configuration issue.  It will not happen in a properly configured system, so long as EVS generates messages which are ""transmittable"".  BUT - there are other events that might be triggered by a CFE_SB_TransmitMsg call, such as a MsgLim error, and its not clear of a similar recursive loop might be possible there (have not tested/investigated).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1952
App should treat CFE_SB_MsgId_t values as opaque,"**Is your feature request related to a problem? Please describe.**
For compatibility going forward, code should not assume that `CFE_SB_MsgId_t` is an integer.

**Describe the solution you'd like**
When dealing with an integer, such as when printing in events/messages or for backward compatibility with MID `#define`'s, the code may use `CFE_SB_ValueToMsgId()` and `CFE_SB_MsgIdToValue()` conversion routines.  

**Additional context**
Architecturally, the `CFE_SB_MsgId_t` is supposed to be an opaque/abstract value that identifies an endpoint on the software bus routing domain.  The specific meaning of integer values is already different in an ""extended header"" (CCSDS v2) build vs. the standard header build.  Therefore apps should never make assumptions regarding the specific integer values, and all introspection of `CFE_SB_MsgId_t` values should be through the CFE SB API only.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sch_lab/issues/37
Apply standard formatting,"**Is your feature request related to a problem? Please describe.**
Various formatting styles in codebase

**Describe the solution you'd like**
Apply standard formatting, if it's an improvement then submit for fasttrack (minimize impacts to open work).  If standard format requires hand mods, update such that application of standard format in the future doesn't require repeat modification.

**Describe alternatives you've considered**
Leave as-is if not an improvement.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/210
Limit SBR message id loops for reasonable test times,"**Is your feature request related to a problem? Please describe.**
Loops over CFE_PLATFOR_SB_HIGHEST_VALID_MSGID can take a long time on some systems (many minutes).  Unit tests that cover the full range for the default setting is sufficient to show proper operation.
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c#L55-L61
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c#L77-L83
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c#L74-L80

**Describe the solution you'd like**
Limit the loops.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman NASA/GSFC

@excaliburtb
",non-bug,https://github.com/nasa/cFE/issues/2022
Add reference to deployed cFE user's guide in README.md,"**Is your feature request related to a problem? Please describe.**
User's guide is not included in repo

**Describe the solution you'd like**
Add reference to https://github.com/nasa/cFS/blob/gh-pages/cFE_Users_Guide.pdf

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/604
Fix potential issues in ES_CleanUpApp(),"In `CFE_ES_CleanUpApp()` there are two issues:
* The `MainTaskId` may be deleted twice.  It may first be deleted when deleting the child tasks, then it is deleted again later in the function.
* It calls `OS_ModuleUnload` unconditionally.  It is possible that this is //not// an external application, for instance if it is a core application then it was not loaded from a module and the contents of the `ModuleId` field are not valid.



",bug,https://github.com/nasa/cFE/issues/157
Remove cFE logic to support backwards compatibility to last gen OSAL,"Opening for discussion making OSAL_OPAQUE_OBJECT_IDS the only option (removes support for last-gen OSAL) in 7.0, and need to agree to plan for end of summer release.

Notes - users not updating cFE and OSAL together, as well as updating to cmake may have challenges with end-of-summer release.  Shouldn't be a surprise.",non-bug,https://github.com/nasa/cFE/issues/345
Add assert for FD_SET_SIZE in relation to OSAL_set,"**Is your feature request related to a problem? Please describe.**
FD_SET has limits:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L97

**Describe the solution you'd like**
Should respect the FD_SET_SIZE limit (prefer compile time error)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/855
os-impl-no-symtab.c out of date,"**Describe the bug**
Conflicting types for the implementations

**To Reproduce**
Attempt to compile w/ os-impl-no-symtab.c:  OSAL_CONFIG_INCLUDE_DYNAMIC_LOADER FALSE

**Expected behavior**
Should compile

**Code snips**
Many of the implementations don't match, sample:
```
src/os/portable/os-impl-no-symtab.c:55:7: error: conflicting types for ‘OS_ModuleSymbolLookup_Impl’
 int32 OS_ModuleSymbolLookup_Impl(uint32 local_id, cpuaddr *SymbolAddress, const char *SymbolName)
src/os/shared/inc/os-shared-module.h:115:7: note: previous declaration of ‘OS_ModuleSymbolLookup_Impl’ was here
 int32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName);

```

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions cFS Bundle

**Additional context**
Seen when adding a coverage test for this code (#795), #796

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/797
Investigate whether Eeprom and Symtable handing belongs in MM,"Some discussion needed in the future to reevaluate whether Eeprom and symbol table handling belongs in MM since not every platform has them. 

Imported from GSFCCFS-1546",non-bug,https://github.com/nasa/MM/issues/3
Incomplete coverage test for  cfe_es_apps.c,"**Is your feature request related to a problem? Please describe.**
Current coverage for cfe_es_apps.c = 96.9 %
Missing coverage test for the following:

CFE_ES_AppCreate

```
    646           0 :                 CFE_ES_WriteToSysLog(""ES Startup: Error removing temp RAM disk file, EC = 0x%08X\n"",
     647             :                                      (unsigned int) ReturnCode);
```

CFE_ES_CleanupObjectCallback
```
    1363           0 :     case OS_OBJECT_TYPE_OS_MODULE:
    1364           0 :         Status = OS_ModuleUnload(ObjectId);
    1365           0 :         break;
    1366           0 :     default:
    1367           0 :         ObjIsValid = false;
    1368           0 :         Status = OS_ERROR;
    1369           0 :         break;
```

CFE_ES_CleanupTaskResources
`1467           0 :             Result = CFE_ES_APP_CLEANUP_ERR;`


CFE_ES_CountObjectCallback
 ```
   1495           0 : void CFE_ES_CountObjectCallback(uint32 ObjectId, void *arg)
    1496             : {
    1497             :     uint32                 *CountState;
    1498             :     uint32                 idtype;
    1499             : 
    1500           0 :     CountState = (uint32 *)arg;
    1501           0 :     idtype = OS_IdentifyObject(ObjectId);
    1502           0 :     if (idtype < OS_OBJECT_TYPE_USER)
    1503             :     {
    1504           0 :         ++CountState[idtype];
    1505             :     }
    1506           0 : }
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/469
Race Condition in CFE_AppCreate() function,"This has been split to a separate ticket from #173.

Per email from Preston Faiks on 2018-06-04, there is an actual observed race condition issue with `CFE_ES_AppCreate()` out in the field:

   When ES is loading and starting apps, one app might fail initialization and call CFE_ES_ExitApp()  If that occurs, its app state will be set to CFE_ES_APP_STATE_STOPPED.  

  When apps are scanned, it will be removed from the app table and that table entry set to not in use.

  As ES continues to load apps, it will make use on the now unused app table entry. It will not change the app state in the entry until it has successfully loaded the app into memory. 

  The process of loading an app into memory can cause the task to pend on file system (or network file system) and allow other tasks to run.  

  As that app continues to be loaded, another app scan can occur and detect the app entry as both in use and stopped, and will unload it.

  When ES finishes loading the app, it will spawn a task at an entry point which was just unloaded by the scanning task, causing it to execute from unloaded memory and crash.


I have reviewed this code again and the race condition risk described is definitely still present in the current development branch, but this isn't the only example.  There are other similar race conditions that are possible regarding the use if the `RecordUsed` boolean field.

Having an observed failure should escalate this in priority now.
",bug,https://github.com/nasa/cFE/issues/279
TTF (test teardown failure) not reported in individual or full test summary,"**Is your feature request related to a problem? Please describe.**
TTF only indicated during the test run, not included in the individual or full summary.

**Describe the solution you'd like**
Include TTF in summaries

**Describe alternatives you've considered**
FAIL/TSF/TTF are all failures...

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/591
External CFE message definitions should not depend on values from cfe_platform_cfg.h or osconfig.h,"Some structure definitions that define specific ground commands and telemetry messages use array sizes for strings that are either defined in osconfig.h (e.g. OS_MAX_PATH_LEN) or cfe_platform_cfg.h (e.g. CFE_ES_MAX_APPLICATIONS).  

However, by definition, these header files contain parameters that are tunable to the specific CPU.  For instance, a resource-constrained CPU may need to reduce CFE_ES_MAX_APPLICATIONS to a small number to save memory.  It is therefore problematic to use these values to define messages that serve as a data definition across processors, particularly in a multi-board setup.

External message definitions must be limited to **mission-wide** configuration parameters only, such as cfe_mission_cfg.h, where all CPUs as well as the ground system will have the same values.  
",bug,https://github.com/nasa/cFE/issues/43
Spacecraft ID sample setting in targets.cmake should be 0x42,"**Is your feature request related to a problem? Please describe.**
Historically sample spacecraft ID has been 0x42, when converting to cmake it became 42 (decimal)... this leads to errors in toolchains expecting the historical value.

**Describe the solution you'd like**
Change to 0x42

**Describe alternatives you've considered**
None

**Additional context**
#710

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/828
SB Timeout Receive Unit Test Failure,"When running the SB unit tests via the ""classic build"", the SB is failing due to an unexpected return:

Unexpected return in timeout receive test, exp=-905969663, act=-905969662

The failure appears to be due to the unit test not setting the proper return value before the call to CFE_SB_RcvMsg.  In the sb_UT.c source code file in the Test_RcvMsg_Timeout function there is an #ifndef statement around the UT_SetRtnCode function that is blocking the return code from being set properly.",bug,https://github.com/nasa/cFE/issues/185
Allow C99 code in PSP.,"Update compiler flags to allow C99 code to be used
everywhere in PSP.

Just removing `-ansi` tells GCC to allow GNU extensions in the
source code, which gets us most of what we want from C99 but
not actually everythying. Using `-std=c99` tells GCC that the
code is expected to be INCITS ISO/IEC 9899:1999 (aka C99), and
any other extensions as explicitly requested in the code.
",bug,https://github.com/nasa/PSP/issues/52
Update to use OSAL socket API,"**Is your feature request related to a problem? Please describe.**
Currently uses cFE supplied network_includes.h and not the abstracted OSAL calls

**Describe the solution you'd like**
Update to use OSAL

**Describe alternatives you've considered**
None

**Additional context**
See osapi-os-net.h and/or OSAL API.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/ci_lab/issues/23
Support platform-endian byte order in WDT,"LC should support numerical telemetry data types that are platform-endian. While it would be possible to get the same effect with an #if macro block, it would make the table very hard to read.

Imported from GSFCCFS-770",non-bug,https://github.com/nasa/LC/issues/7
SMP: CFE TIME uses OSAL IntLock/IntUnlock for mutual exclusion,"Interrupt locking simply prevents incoming interrupts; is not a mutual exclusion mechanism and will __NOT__ achieve ""exclusive access"" on all types of processors.  Mutual exclusion is more of a side-effect that occurs on a single-core processor that uses a timer interrupt to perform task switching duties.  On a multi-core processor, this will not work.

Furthermore, in the POSIX OSAL, IntLock/Unlock are no-ops, and interrupt control is a kernel-level function and not something that user space tasks can do (even as root).

This should be replaced with a Mutex, as this is what the code is really trying to do.",bug,https://github.com/nasa/cFE/issues/74
"CI LAB ""PDUMsgID"" checking depends on SB macro","Originated by jphickey (22 on babelfish): 

The CI LAB application attempts to verify that the PDUMsgId is within range by comparing it to the CFE_SB_HIGHEST_VALID_MSGID macro.
Unfortunately, this is a configuration macro that is specific to the SB implementation and may not be available in future builds. It makes assumptions about the way SB dispatches/handles messages that CI really should not be making.
This check also does not provide any real benefit - if the MsgID is out of range there is no major problem, it simply will not match any packets.
To improve compatibility with future SB improvements this extra check should be removed. Calling this a ""defect"" as it actually does break the build with the EDS branch.",non-bug,https://github.com/nasa/ci_lab/issues/1
Release Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- added standard Apache 2.0
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/124
Use SVG Image for Workflows ReadMe,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The README.md for cFS/.github/workflows/ uses an image that may not be easily edited. 

**Describe the solution you'd like**
Convert the image to SVG. 

**Describe alternatives you've considered**
Keep as is. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFS/issues/400
Temporary files possible filename conflict,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The temporary filenames are created based on the sequence number in the PDU (in the CF_CFDP_R_Init()).

Imagine that two different CFDP entities are sending a PDU with the same sequence number (which can happen since this number is managed by each CFDP entity and it can be the same) to the same CFDP destination entity. For instance, the sequence number in this case is 'x'. For the first PDU the CF app would create the x.tmp file and store it in the temporary folder. Upon arriving the second PDU the CF app would also create a x.tmp file and then would store it in the temporary folder. This would create a conflict.

Wouldn't it be better if the temporary filename is the concatenation of the source entity ID and the sequence number? This would guarantee that each temporary file would be unique since each sequence number is unique for each entity ID.",bug,https://github.com/nasa/CF/issues/334
OS_QueueDelete() has too small of a char name buffer,"Looks like a copy/paste error but the ""name"" variable used to figure out a unique name for mq_open() & mq_unlink() calls is of different sizes between OS_QueueCreate() and OS_QueueDelete(). 

In OS_QueueDelete(), change:
char name[OS_MAX_API_NAME+1];
to:
char name[OS_MAX_API_NAME*2];

The result is memory clobbering when deleting a queue of a longer name.",bug,https://github.com/nasa/osal/issues/218
Links broken in cFE Application Developers Guide from broken code highlighting,"**Describe the bug**
The links at the top of the cFE Application Developers Guide on the main branch quit working after heading 6.7. This seems to be caused by an extra character added to the closing code highlighting marks, which you can see here: https://github.com/nasa/cFE/commit/2af49e33fc861e2629e05d21e8192f30c77848a2#diff-1d63579569d1325687a1bfdbfe8c660e157ce1387c41dc3b015f38d006347eaaR2036

Note that the format of the document is also messed up because it highlights normal text as code and vice versa after section 6.7.

**To Reproduce**
Steps to reproduce the behavior:
1. Open up the cFE Application Developers Guide on the main branch on Github
2. Click on the heading for 6.8 in the table of contents.
3. It doesn't scroll down to that heading for you.

**Expected behavior**
The link for section 6.8 should take me to that section and the document should not have flipped highlighting in section 6.8 and beyond.

**Code snips**
None

**System observed on:**
Use Github to view the file

**Additional context**
None

**Reporter Info**
Jeffrey Royer, JSC ER6
",non-bug,https://github.com/nasa/cFE/issues/1421
Update RC4 tag descriptions to include equivalent dev tags ,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**

Need a mapping between tags and build numbers to reduce confusion

**Describe the solution you'd like**
Include RC information in update history on readme and tag description

**Describe alternatives you've considered**
Finish official release and add official numbers

**Additional context**
Raised in stakeholder meeting 

**Requester Info**
@astrogeco
",non-bug,https://github.com/nasa/cFS/issues/398
cppcheck coverage check warning,"**Describe the bug**
reference issue #283 

[osal/src/os/posix/osapi.c:1832]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/shared/src/coveragetest-time.c:175]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:111]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/ut-stubs/src/libc-stdio-stubs.c:145]: (error) Uninitialized variable: actual
[osal/src/unit-test-coverage/ut-stubs/src/libc-stdio-stubs.c:167]: (error) Uninitialized variable: actual

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/287
Add syslog for CFE_ES_DeleteApp and CFE_ES_ReloadApp ID failures,"**Is your feature request related to a problem? Please describe.**
CFE_ES_DeleteApp is required to log a bad id (ES: Delete Application - Reject Undefined,cES1309.1), and CFE_ES_RestartApp has a requirement and does syslog.  CFE_ES_ReloadApp doesn't have an associated requirement, but should be consistent.

**Describe the solution you'd like**
Add syslog for CFE_ES_DeleteApp and CFE_ES_ReloadApp

**Describe alternatives you've considered**
Remove syslog write from the requirements and remove from CFE_ES_RestartApp...

**Additional context**
#1773

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1775
generate_stubs.pl generated files put the comments from the .h file instead of identifying the stub file name,"**Is your feature request related to a problem? Please describe.**
The top commenting from the header file being put into the stub file is stating that the generated stub file is the .h, because that is what the header states.

**Describe the solution you'd like**
Have the generated file identify itself as the stub file and if the .h comments are to be kept, have it identify them as such.

**Describe alternatives you've considered**
Manually fixing it on every generated file

**Additional context**
N/A

**Requester Info**
Alan Gibson  NASA/GSFC 587
",non-bug,https://github.com/nasa/osal/issues/1192
Update grut699-vxworks6 cfe_psp_timer.c per white box unit testing results,"During white box testing the following issue was identified with the grut699-vxworks6 version of cfe_psp_timer.c

* CFE_PSP_Get_Timebase - possible divide by zero in the calculation:

lower /= sysTimestampFreq() / 1000000UL

if sysTimestampFreq() returns a number less than 1000000UL.

Issue identified during #14  white box testing commit: [changeset:eade737]
",bug,https://github.com/nasa/PSP/issues/40
OS_TaskDelete is not synchronous on POSIX,"**Describe the bug**
The current POSIX implementation of `OS_TaskDelete()` uses `pthread_cancel()`.  This is a cancellation _request_ but the target thread continues to run until it hits a cancellation point.  As a result, when the OS_TaskDelete() function returns, it is likely that the target thread is actually still running for a short period of time.

But if the intent is to actually unload the module, as is done in the CFE ""restart"" and ""reload"" commands, it is critical to ensure that all uses/references to code within the to-be-unloaded module have actually been released.  So it is important to make sure that the cancellation request has been executed and the task is actually deleted before proceeding to the `OS_ModuleUnload()` call.

Currently with the POSIX implementation, there is no way to guarantee this, so this becomes a race condition during restart/reload operations on this platform.

**To Reproduce**
Not directly reproducible in current code - this race condition is currently masked by the fact that modules are loaded with `RTLD_GLOBAL`, so if the runtime loader still sees the module being referenced using its internal refcount, it doesn't actually unload it when `dlclose()` is called.  So in this case the task finishes up normally and there is no apparent problem.

But when this is fixed - such as when using `RTLD_LOCAL` as suggested in #641 - then this race condition becomes a problem, and as a result a CFE reload or restart command sometimes triggers a segmentation fault in the event that `OS_ModuleUnload()` gets called before the task has fully been deleted.

**Expected behavior**
`OS_TaskDelete()` should  ensure that the task has been fully removed, not just pending removal, before it returns to the caller.

Suggestion to achieve this:

- Keep threads in the attached (joinable) state by default
- Use `pthread_join()` to wait for the cancelled task to actually exit.

**System observed on:**
Ubuntu 20.04

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/642
UT_SetDeferredRetcode doesn't work as explained in ut_support.c,"**Describe the bug**
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/unit-test/ut_support.c#L153-L166

Description above makes it sound like calls to CFE_SB_RcvMsg will return: 0, CFE_SB_TIME_OUT, -1.  In practice it returns 0, CFE_SB_TIME_OUT, 0, 0, -1 since each call to UT_SetDeferredRetcode sets up another entry in the table, and each entry is processed until complete before moving on to the next (which restarts the counter).

The osal description is clear, it's just not used correctly in cFE:
https://github.com/nasa/osal/blob/5a8f0afa3a6ef6945661d6fc893d4592d9360b5a/ut_assert/inc/utstubs.h#L120-L139

**To Reproduce**
Set more than one UT_SetDeferredRetcode on the same key, observe response.

**Expected behavior**
Set up so it will do 0, CFE_SB_TIME_OUT, -1:
```
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 2, CFE_SB_TIME_OUT);
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, -1);
```
 
**Code snips**
See above

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions Bundle main

**Additional context**
None.

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/997
Fix EDS discrepancies after #175 merge,"After merging #206, this changed some things in the CCSDS header and there needs to be a corresponding update to the EDS XML files and related items to ensure that the EDS actually matches the running code.

This change circles back to the EDS side and updates the XML files so they correspond to the code.",bug,https://github.com/nasa/cFE/issues/248
CFE_PSP_GetTime conversion to MET,"**Is your feature request related to a problem? Please describe.**

We have a hardware clock in our system that we plan to use as the source clock for `CFE_PSP_GetTime`.

We also have an FPGA system that latches the hardware clock into a register on certain events. We'd like to read the register value after it's latched, and then convert it to a cFS MET. Does CFE Time services already have a routine for converting PSP Times to METs?

**Describe the solution you'd like**

A function that I can pass an old LatchClock time value into and get back a valid `CFE_TIME_Reference_t` value. Something similar to `CFE_TIME_GetReference(CFE_TIME_Reference_t *Reference)`, but with an additional input that replaces `Reference->CurrentLatch`.

**Describe alternatives you've considered**

Our primary alternative at this point is to add code to the PSP that updates our hardware clock via TATT commands. Any other ideas would also be welcome.

**Requester Info**

Morgan Redfield
Morgan.Redfield@astrobotic.com
Astrobotic
",non-bug,https://github.com/nasa/cFE/issues/1293
Fix input options handling dashes,"**Describe the bug**
The ""help"" option is triggered by `-help` which only uses one dash. Full-word options should use double dashes.

**To Reproduce**
See code

```
if ((argc != 2) || (strncmp(argv[1], ""-help"", 100) == 0))
    {
        printf(""\ncFE TS CRC calculator: \%s\n"", CFE_TS_CRC_VERSION_STRING);
        printf(""\nUsage: cfe_ts_crc [filename]\n"");
        exit(0);
    }
```

**Expected behavior**
Use `--help` instead

**Code snips**
If applicable, add references to the software.

**System observed on:**
Source code

**Additional context**
None

**Reporter Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC",non-bug,https://github.com/nasa/tblCRCTool/issues/19
Improve compliance with public coding standards (and document non-compliance),"**Is your feature request related to a problem? Please describe.**
cFS Core has been developed and maintained utilizing internal coding standards, which isn't much help to the wider community when the question of coding standards come up.  Lacking documented compliance and there's a few easy fixes that could be implemented to improve compliance.

**Describe the solution you'd like**
Could document compliance against public standards (JPL/power of 10/etc).

Some easy updates where we could improve compliance:
 - () around **all** macros: currently not on constants 
 - () for precedence: currently rely on precedence rules in many cases
 - a handful of elements could be file static
 - a handful of elements could be local static
 - side effects in expressions: there's a handful that could be expanded

Warnings we monitor and minimize occurrences:
 - Conditional compilation: still have cases to support alternate configurations
 - Recursion: avoided in general, carefully analyzed (current identified cases are 1 level of recursion in debug support and one other that is protected from occurring)
 - Pointer type inside typedef: in general minimized (function pointers, etc)
 - Complex macros: minimized (although utilized in debugging/testing)
 - Definitely use function pointers (callbacks, etc), but to satisfy requirements

Areas we don't comply and debatable value:
 - unchecked parameter dereferences in helper functions and ""false alarms"" based on status return checks (we check status return and skip logic, but don't explicitly check a provided pointer isn't NULL)
 - function too long: could be a topic of future refactor but heritage/working code should trade value vs risk
 - not enough assertions: style difference
 - Basic Numerical Types Used: we use fixed width types where appropriate, but don't strictly disallow basic types where they make sense

Other non-compliances identified are analyzed and dispositioned (internally), examples:
 - Cast Alters Value: all over in print statements to print hex (unsigned) status (signed) values
 - Many false alarms for various rules (all confirmed false)
 - Redundant conditions, unreachable code, useless assignments to support configurability (wouldn't be if configuration changes)

**Describe alternatives you've considered**
None

**Additional context**
Note - marking for discussion to trigger input.  Nothing ""breaking"" or ""critical"" identified.

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @dmknutsen 
",non-bug,https://github.com/nasa/osal/issues/933
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1162
CFE_EVS_Register - error on truncation and factor out FilterLimit,"**Is your feature request related to a problem? Please describe.**
1. `FilterLimit` variable isn't needed, just use `NumEventFilters`
2. Too many filters are reported in the system log, but should also report an error since this is a significant problem (won't perform as designed/implemented)

**Describe the solution you'd like**
Refactor and report

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1424
Remove stray terminators,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/HS/blob/003f38d8d451fb869b70655d69cf2590ba157ec7/unit-test/hs_app_tests.c#L857
https://github.com/nasa/HS/blob/003f38d8d451fb869b70655d69cf2590ba157ec7/fsw/src/hs_monitors.c#L571

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/HS/issues/39
Implement generic runtime configuration registry for CFE,"**Is your feature request related to a problem? Please describe.**
Rather than compiling-in various values (e.g. via `cfe_platform_cfg.h` or `cfe_mission_cfg.h`) it would be more flexible and more useful to put many of these configuration items into some type of simple runtime registry.

The registry would be a simple key/value store, where the key is the configurable item ID, and the value is either an integer or a pointer to a global data object (ideally const, to avoid sharing/concurrent access issues).

The registry can be somewhat dynamic, allowing registry items to be easily added/extended.  Default values and text-based descriptions can also be potentially included.  

**Describe the solution you'd like**
User API that works something like:
- `uint32 CFE_ES_RegistryGetInt(uint32 Key);`
- `const void* CFE_ES_RegistryGetPointer(uint32 Key);`

**Additional context**
This would reduce dependency on `cfe_platform_cfg.h` and `cfe_mission_cfg.h` for keeping this type of value, and also provide a place for the version info currently in `cfe_version.h`.   Thereby consolidating the current bunch of different types of info with different access methods into one generic registry with a common, simple access method.

Similar model exists in UNIX/POSIX in the `sysconf` facility - so certain platform-specific values do not need to be compiled into binaries, thereby improving binary portability (i.e. compile once for a CPU arch, run anywhere that has that arch).  This would make the long-desired feature of separate CFE core and app builds closer to reality.

Of course Windows has its well-known registry, which is huge and unwieldy - this should _not_ turn into that.  More like UNIX sysconf, but with pointers/strings also supported, not just integers.

Other issues with `#define`-ed config values:
- Value is effectively compiled-into the binary, so if the value ever changes, modular binaries become incompatible (but this is _not_ actively detected - its a subtle, silent incompatibility).
- Works OK for integers, but not as well for strings, even less well for structured data
- Requires that the `cfe_mission_cfg.h` / `cfe_platform_cfg.h` be kept in sync with the source code.  New variables added in new builds must be manually propagated to the user build.


**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1979
cFE ES Child Task API functional tests,"**Is your feature request related to a problem? Please describe.**
The functional test currently only test the base cases of the API functions. More in depth tests still need to be written.

**Describe the solution you'd like**
Write tests for all the possible cases

**Additional context**
Follow up to #1289

**Requester Info**
Alex Campbell",non-bug,https://github.com/nasa/cFE/issues/1477
OSAL boolean should use actual C99 bool type,"On C99+ platforms that have the builtin `_Bool` type, this should be used for the OSAL boolean typedef rather than `unsigned char`.

Two major benefits:
1. Smarter implicit conversion semantics.  During CFE 6.6 testing there was one case discovered where an (nonzero) `int` was directly passed to a function taking `osalbool`, which was implicitly truncated to 8 bits and became zero (false) because the LSB was zero.  When using the actual builtin boolean type, this remains true.
2. Better warnings.  In newer version of GCC it will flag warnings on suspicious expressions used as truth values (such as an assignment).
",non-bug,https://github.com/nasa/osal/issues/215
linkage problem on macOS: ld: symbol(s) not found for architecture x86_64,"**Is your feature request related to a problem? Please describe.**

There is a solvable linkage problem on macOS: `ld: symbol(s) not found for architecture x86_64`. 

```
Undefined symbols for architecture x86_64:
  ""_OS_impl_filehandle_table"", referenced from:
      _Test_OS_SocketConnect_Impl in coveragetest-bsd-sockets.c.o
      _Test_OS_SocketAccept_Impl in coveragetest-bsd-sockets.c.o
      _Test_OS_SocketRecvFrom_Impl in coveragetest-bsd-sockets.c.o
      _OS_SocketOpen_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketBind_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketConnect_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketShutdown_Impl in os-impl-bsd-sockets.c.o
      ...
  ""_OS_stream_table"", referenced from:
      _Test_OS_SocketOpen_Impl in coveragetest-bsd-sockets.c.o
      _Test_OS_SocketBind_Impl in coveragetest-bsd-sockets.c.o
      _Osapi_Test_Setup in coveragetest-bsd-sockets.c.o
      _OS_SocketOpen_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketBind_Impl in os-impl-bsd-sockets.c.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[3]: *** [unit-test-coverage/vxworks/coverage-vxworks-bsd-sockets-testrunner] Error 1
make[2]: *** [unit-test-coverage/vxworks/CMakeFiles/coverage-vxworks-bsd-sockets-testrunner.dir/all] Error 2
make[1]: *** [all] Error 2
```

**Describe the solution you'd like**

The issue seems to be coming from the differences between `gcc` on Linux and `clang` on macOS. The following simple modification makes the error to go away for the `OS_module_table` symbol.

```diff
-OS_module_internal_record_t OS_module_table[OS_MAX_MODULES];
+OS_module_internal_record_t OS_module_table[OS_MAX_MODULES] = {0};
```

```diff
-OS_timecb_internal_record_t OS_timecb_table[OS_MAX_TIMERS];
+OS_timecb_internal_record_t OS_timecb_table[OS_MAX_TIMERS] = {0};
```

and so on...

This change is implemented consistently in https://github.com/nasa/osal/pull/1161.

**Describe alternatives you've considered**

It doesn't seem to be possible to implement it differently on macOS / clang.

**Additional context**

This solution makes sense only if the macOS OSAL is integrated into the OSAL CI. Otherwise, it will not be obvious to a Linux programmer that the practice of initializing the global variables has to be followed.

**Requester Info**
Stanislav Pankevich (Personal contribution)
",non-bug,https://github.com/nasa/osal/issues/1162
Check Return Value of CFE_SB_CreatePipe ,"**Describe the bug**
Calling CFE_SB_CreatePipe without checking return value (as is done elsewhere 9 out of 10 times).

**Expected behavior**
Check return value of CFE_SB_CreatePipe. Should also check return value of CFE_EVS_Register and CFE_SB_Subscribe as seen in sample_app.

**Code snips**
https://github.com/nasa/ci_lab/blob/12b8cdd5cc8945fe4dfd4423e57f48114f1948d8/fsw/src/ci_lab_app.c#L149-L154

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Additional context**
Examples of how return value is checked for CFE_SB_CreatePipe:

https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_task.c#L182-L187

https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/time/fsw/src/cfe_time_task.c#L181-L186

https://github.com/nasa/sample_app/blob/d009197df721af1f430d173584fa64a507a94a13/fsw/src/sample_app.c#L172-L177

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/ci_lab/issues/96
"CFE_SB_RcvMsg stub clears buffer, then copies the msg","It appears that the CFE_SB_RcvMsg() stub, when it has a buffer defined, clears the buffer, THEN copies the message pointer.

Backwards?

See: https://github.com/nasa/cFE/blob/deeb2942b0766a87d7b399bd8c11c2d5c8deffc0/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L441",non-bug,https://github.com/nasa/cFE/issues/791
Implement OS_ModuleGetInfo_Impl on RTEMS,"**Is your feature request related to a problem? Please describe.**
ES ""query application"" command cannot provide loaded object section addresses and sizes in RTEMS since the implementation of OS_ModuleGetInfo_Impl is a stub. 

**Describe the solution you'd like**
Add an implementation of this using the RTEMS Runtime Loader API.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Eric Pollack - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1220
"Add msg module stubs, update SB to use them, and no longer include actual msg target in unit test builds","**Is your feature request related to a problem? Please describe.**
Follow on to #726, since it leaves the msg module as ""internal"" in the context of unit tests (it includes the target).  This was done such that it could be shown all the old SB unit tests would pass (w/ minor updates for the bug fixes and reorg).

**Describe the solution you'd like**
Add the stubs, rework the SB unit tests, and remove the msg target from UT builds.

**Describe alternatives you've considered**
N/A

**Additional context**
#726

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/794
(pc-linux) psp should not use signals (1hz timer),"The PSP 1hz timer uses SIGALARM and setitimer. There is a proposal ticket:76 to use timer_create() instead. This still has the problem  of using asynchronous signal delivery. Asynchronous signal delivery does not belong in realtime applications. We should remove this and instead us timerfd_create() and create a thread to wait on the timer event. This tracks overruns as well as removes the danger of calling thread-unsafe functions in signal handlers (which pc-linux does.)

In order to avoid the race condition specified in ticket:23 the PSP API should be changed for the user to register a callback rather than depeding on an external dependency from TIME. This would allow PSP to start the timer relative to ""bootup"" and it would allow the user to avoid the race condition by registering itself with the timer. If we made it a blocking call the user could call from their own thread, it also would let the user control the priority of the thread receiving the timer event.

I believe the point of the 1hz timer is for platforms where there is a hardware timer that can be used with better granulatiry than OS timers. If that is no longer true, then we should just get rid of this and use an OS timer. ",bug,https://github.com/nasa/PSP/issues/88
CI updates - add static analysis and format in workflow,"**Is your feature request related to a problem? Please describe.**
Travis-CI not transitioned to github actions

**Describe the solution you'd like**
Transition CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/ci_lab/issues/69
Schedule App not using CFE Table,"**Is your feature request related to a problem? Please describe.**
No

**Describe the solution you'd like**
Schedule lab App is not using cFE table service. Recommend implementing cFE table service.

**Describe alternatives you've considered**
None

**Additional context**
none

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/sch_lab/issues/11
CF function CF_CFDP_IsSender(transaction_t *ti) is odd one out because it uses ti,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1728] CF function CF_CFDP_IsSender(transaction_t *ti) is odd one out because it uses ti
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Tue Sep 14 10:58:59 2021

_Original Description_:
Every other function in cfdp.c that uses a transaction\_t* as an argument names it 't', but CF\_CFDP\_IsSender uses ti.",non-bug,https://github.com/nasa/CF/issues/30
Update TIME tests to use bitmask check macros,"**Is your feature request related to a problem? Please describe.**
With nasa/osal#1136, UtAssert now provides a better macro for testing bit fields/masks.  The updated macro provides better/more concise information in the test log.

**Describe the solution you'd like**
Replace the UtAssert_UINT32_EQ checks with the new macros - UtAssert_BITMASK_SET/UtAssert_BITMASK_UNSET.

**Additional context**
Depends on nasa/osal#1136 and nasa/cfe#1860 (both currently in IC but not in main, as of this writing).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1912
UtAssert improvements for multiple test invocations,"**Is your feature request related to a problem? Please describe.**
UtAssert currently assumes that there will only be one test set to execute.  After booting, a set of tests is collected, then executed, and once the test is complete the process will end (either by simply exiting the process on Linux debug environment, or stopping the parent VM/container, or doing a processor reset if on real hardware).

The newly added CFE functional test now permit more than one test set to run, based on commands.  A test can be started, completed, and then another test can be started, all in one ""lifetime"" of the UtAssert global data structures.

Although this generally works there could be some improvements

**Describe the solution you'd like**
At the end of a test run the list is destroyed, and it leaves the list pointer as NULL.  This means no additional tests can be registered after a call to UtTest_Run.  (Luckily re-invoking UtTest_EarlyInit is a workaround - this is risky though because if any tests were in the list already, early init will drop them and leak the memory, it does not check for this).  Preferably this should leave the structure in a state where more tests can be registered without a complete re-init.

**Additional context**
Neither of these suggestions are critical at this time - would be nice to have, but nothing that prevents CFE functional test from basically running, using the workaround of re-invoking `UtTest_EarlyInit()` between every test cycle.

The biggest risk is the fact that re-invoking UtTest_EarlyInit does not protect against clobbering already-registered tests, but this shouldn't happen if the proposed test pattern is followed (its more of something that isn't protected against happening, not something actually happening).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/955
Consider replacing switch statement with jump table in CS_BackgroundCheckCmd,"Finding from code review

Imported from GSFCCFS-1324",non-bug,https://github.com/nasa/CS/issues/16
gui/menu/wizard configuration,"**Is your feature request related to a problem? Please describe.**
For noobs, it can be daunting to configure a cFS environment, or to find ""that one parameter that changes the size of the pipe tables"", for example.

**Describe the solution you'd like**
It would be nice to have a configuration ...generator...? that a user could use to quickly run through the configuration options (conditional code options, platform selection, sizing options) and generates the appropriate CMake files, .h files, startup scripts, etc.

**Describe alternatives you've considered**
menuconfig/kconfig (https://en.wikipedia.org/wiki/Menuconfig) is a popular option and provides a menu-based configuration system. Alternatively, a ""wizard"" style configuration (like Perl's Configure script) that steps through all of the configuration options, asking questions and providing default answers.

Whatever option is chosen, it should *not* replace the existing build process but should be a front-end to it, and provide human-readable/editable files as output that are equivalent to the current files.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFS/issues/71
Add build number and baseline to version file,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/sch_lab/issues/46
"ES - CreateChildTask API Function Does Not Use ""Flags"" Input Parameter","The API definition of the CFE_ES_CreateChildTask API function is:

int32 CFE_ES_CreateChildTask(uint32 *TaskIdPtr,
                             const char   *TaskName,
                             CFE_ES_ChildTaskMainFuncPtr_t   FunctionPtr,
                             uint32 *StackPtr,
                             uint32  StackSize,
                             uint32  Priority,
                             uint32  Flags)

The ""Flags"" input parameter which is intended to be used to pass into the OSAL OS_TaskCreate call, is not being used.  Instead the call to OS_TaskCreate hardcodes the OS_FP_ENABLED macro for the ""Flags"" input.

This implementation of the API is very misleading and limiting.

In addition, ES defines a ""Flags"" macro in the cfe_es_perf.h called CFE_ES_PERF_CHILD_FLAGS that is passed into the CFE_ES_CreateChildTask API function call when ES spawns a child task to write its performance log data to a file.  The flags used when creating child tasks need to be defined across all implementations vs. ""hidden"" in private cFE service header files.  This macro should be removed and replaced with an appropriate OSAL macro.  An accompanying OSAL ticket may need to be written to add all ""Flags"" options.",non-bug,https://github.com/nasa/cFE/issues/178
OS_TimerAdd missing functional test,"**Is your feature request related to a problem? Please describe.**
Functional test missing for OS_TimerAdd

**Describe the solution you'd like**
Add test

**Describe alternatives you've considered**
None

**Additional context**
Certification issue

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/381
"Update SB ""Send"" command names that write to a file","**Is your feature request related to a problem? Please describe.**
CFE_SB_SendRoutingInfoCmd_t, CFE_SB_SendPipeInfoCmd_t, CFE_SB_SendMapInfoCmd_t and the corresponding command codes actually write to a file.  Send should indicate a request to send information on the software bus.

**Describe the solution you'd like**
Fix names to be consistent
- [x] CFE_SB_SEND_ROUTING_INFO_CC -> CFE_SB_WRITE_ROUTING_INFO_CC
- [x] CFE_SB_SendRoutingInfoCmd_t -> CFE_SB_WriteRoutingInfoCmd_t
- [x] CFE_SB_SendRoutingInfoCmd -> CFE_SB_WriteRoutingInfoCmd
- [x] CFE_SB_SendRtgInfo -> CFE_SB_WriteRtgInfo
- [x] CFE_SB_SEND_PIPE_INFO_CC -> CFE_SB_WRITE_PIPE_INFO_CC
- [x] CFE_SB_SendPipeInfoCmd_t -> CFE_SB_WritePipeInfoCmd_t
- [x] CFE_SB_SendPipeInfoCmd -> CFE_SB_WritePipeInfoCmd
- [x] CFE_SB_SendPipeInfo -> CFE_SB_WritePipeInfo*
- [x] CFE_SB_SEND_MAP_INFO_CC -> CFE_SB_WRITE_MAP_INFO_CC
- [x] CFE_SB_SendMapInfoCmd_t -> CFE_SB_WriteMapInfoCmd_t
- [x] CFE_SB_SendMapInfoCmd -> CFE_SB_WriteMapInfoCmd
- [x] CFE_SB_SendMapInfo -> CFE_SB_WriteMapInfo*
- [ ] Will also need to update comments in #1102

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1032
Put common and local counters in structures to simplify reset all counters command handling,"**Is your feature request related to a problem? Please describe.**
Individual counter values are reset in reset counter commands, example:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L714-L723

and logic is duplicated in every service.

**Describe the solution you'd like**
Common counters (`CommandCounter` and `CommandErrorCounter`) could be in a structure, and for each service the rest of the counters reset by the generic reset counter command could also be in a structure, and simply memset the structures to 0 on reset.  Then could easily create a generic reset all counters function as part of #994.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1427
Failure to test should be FAIL,"The bamboo test plan does not currently complain if it is
unable to stage and run unit tests on a target, for the
simple reason that our test list is currently entirely
driven by parsing results returned by the target.

If the target VM is offline (as it was last weekend),
there are no indications that the test programs did not
run, and the presence of a few test results (the ones from
static analysis) keeps Bamboo happy.

The plan itself, or its top level scripts (same thing), needs
to keep track of the list of test programs, and generate
test failure reports for any such program for which it
does not obtain results.
",bug,https://github.com/nasa/osal/issues/82
Unreachable code in os-impl-bsd-sockets.c:,"**Is your feature request related to a problem? Please describe.**
2nd set of default cases are unreachable, since there's a return from a prior check:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/portable/os-impl-bsd-sockets.c#L102-L147

Specifically line 142 and 146 are legitimately dead code.

**Describe the solution you'd like**
Refactor to eliminate dead code

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/793
Fix simulataneous use of OSAL BSP + CFE PSP compiler flags,"When building OSAL as a component of CFE, the compiler flags for both the CFE PSP and the OSAL BSP are used.

With the current BSP/PSP, the effect here is that ""-D_LINUX_OS_"" is included twice.

This does not currently cause a problem, but it is incorrect, and it could cause a problem for future configuration where things may conflict.

This only affects the cmake build.",bug,https://github.com/nasa/osal/issues/74
Add child task name to platform config file,"Stakeholder suggestion -

Not all platforms support all task naming conventions, make configurable.

Unfortunately the platforms w/ issues were not mentioned in the original issue so it's not clear if this is really relevant/necessary anymore.


Imported from GSFCCFS-926",non-bug,https://github.com/nasa/CS/issues/23
"Standardize on ""docs"" subdirectory for documentation","**Is your feature request related to a problem? Please describe.**
In nasa/osal#1071 and nasa/psp#294, the `doc` subdirectories will be renamed to `docs`, to be consistent.

Going forward, documentation should be in a `docs` subdirectory on all submodules/components.

**Describe the solution you'd like**
Places where CFE build system is using/referring to a `doc` subdirectory (e.g. refs into OSAL) should be changed to `docs`

**Additional context**
Needed for compatibility with/dependency on nasa/osal#1071

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1614
Non-distinct identifiers,"**Is your feature request related to a problem? Please describe.**
VxWorks defines `time` in time.h
Conflicts with:
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-gettime.c#L70
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-gettime.c#L100

VxWorks defines `access` in unistd.h
Conflicts with:
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-files.c#L70
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-files.c#L226
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-dirs.c#L74

**Describe the solution you'd like**
Deconflict

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/932
RTEMS CMake module does not define all required outputs,"**Describe the bug**
When building with CFE, this ultimately triggers a (seemingly) unrelated error:
```
i386-rtems4.11-gcc: error: unrecognized command line option '--whole-archive'
i386-rtems4.11-gcc: error: unrecognized command line option '--no-whole-archive'
```

**To Reproduce**
Build software for i686-rtems4.11 per README instructions and example toolchain

**Expected behavior**
Build should succeed without warnings or errors

**System observed on:**
Ubuntu 18.04 LTS 64-bit (build host) building for i686-rtems4.11 

**Additional context**
This regression was introduced when CFE added logic to inspect the variable `CMAKE_EXE_EXPORTS_C_FLAG` and use the same flags for the `--[no-]whole-archive` option on the link line.    Normally `CMAKE_EXE_EXPORTS_C_FLAG` is exported by the platform module, but not in the locally-provided RTEMS module.

RTEMS uses the compiler to perform linking (gcc) and as such it needs the `-Wl,` prefix.  It may also benefit from `--export-dynamic` anyway so it is a good idea to include this.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/145
Coverage test not installed in correct directory,"**Describe the bug**
Coverage test not installed in correct directory - see nasa/cfe#881

**To Reproduce**
Make unit tests, make install, observe unit test in build directory.

**Expected behavior**
Should go in target directory (build/exe/cpu1 for sample config)

**Code snips**
https://github.com/nasa/sample_app/blob/9ff605ed1b738c6a2eabd75cf05aeed163cc5940/unit-test/CMakeLists.txt#L70

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/95
Convert table search paths if/else checks to lists,"**Is your feature request related to a problem? Please describe.**
Long if/else:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/arch_build.cmake#L171-L185

**Describe the solution you'd like**
Convert to list

**Describe alternatives you've considered**
None

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1309
Add cFE Application Behavior API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Application Behavior API functional tests
– CFE_ES_RunLoop - Check for Exit, Restart, or Reload commands.
– CFE_ES_WaitForStartupSync - Allow an Application to Wait for the ""OPERATIONAL"" global system state.
– CFE_ES_WaitForSystemState - Allow an Application to Wait for a minimum global system state.
– CFE_ES_IncrementTaskCounter - Increments the execution counter for the calling task.
– CFE_ES_ExitApp - Exit a cFE Application.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT by @skliper: removed CFE_ES_RegisterApp since it no longer exists.",non-bug,https://github.com/nasa/cFE/issues/807
Move SB route lookup (including insert method) to a module,"**Is your feature request related to a problem? Please describe.**
Various implementations possible for message and route tables, all with associated advantages and issues.

**Describe the solution you'd like**
Provide the capability to replace the core implementation.

**Describe alternatives you've considered**
None.

**Additional context**
For implementations that support large MsgIds, or prefer smaller memory footprint at the cost of performance.  Hashes, searches, etc.

**Requester Info**
Jacob Hageman - NASA/GSFC (per stakeholder request for alternate implementation)
",non-bug,https://github.com/nasa/cFE/issues/928
Remove CFDP PDU introspection features,"**Is your feature request related to a problem? Please describe.**
CFDP PDU introspection is old debug code.  Remove to simplify ci_lab.

Also subject of recommended issues from lgtm:

ci_lab_app.c
```
line 625 - 732:
Switch has at least one case that is too long: 4 (37 lines)

line 599:

/*    OS_printf(""CI: Captured PDU with length = %d\n"",PduHdrPtr->PDataLen); */
--
  | This comment appears to contain commented-out code

```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/ci_lab/issues/27
Add links or instructions to pull request squash and ammend section,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
```.md
Once a Pull Request Ready for Review

    Verify the commit message and PR title use the template Fix #XYZ, SHORT_DESCRIPTION.
    Verify there is only one commit message. Squash or amend the commit messages if necessary.
    Verify that the PR passes all checks.
    The project team will label the issue and evaluate the pull request in the weekly configuration control board (CCB) meeting. For more information, visit The cFS CCB Process.
    If the pull request is accepted, it will be merged into cFS.

```

**Describe the solution you'd like**
Add links to instructions of ""how"" to squash a commit using git rebase or how to ammend a commit

**Describe alternatives you've considered**
Leave as is and address with users on a one-on-one, per PR basis

",non-bug,https://github.com/nasa/cFS/issues/226
Enforce Strict ASCII in Document Files,"This is an extension of the previous ticket.

With the creation of this ticket, #70 will have its scope reduced
to cover only the already integrated changes to source code, allowing
us to confirm that those changes are included in the CFE 6.6 release.

This ticket will continue to carry the task of enforcing Strict ASCII
for the remaining cases, which are all document files; this work will
take place after the CFE 6.6 release.
",non-bug,https://github.com/nasa/cFE/issues/258
API doxygen scrub,"**Is your feature request related to a problem? Please describe.**
Doxygen documentation out of date

**Describe the solution you'd like**
Format/layout changes:
 - Table-fy return values (and eliminate some pdf build errors/warnings)
 - Make links from text where appropriate
 - Documented OSAL return codes
 - Add parameter direction where missing
 - Added explicit grouping where appropriate (and group references)
    - Group API's and reference from main page
 - Marked OS_TaskRegister as deprecated in documentation (no code change yet, that's #255)
 - Marked exception handling as deprecated in doc (code change is #366)
 - Marked shmem as deprecated in doc (code change is #18)
 - Added missing descriptions and parameter definitions
 - Added clock address rounding comments related to #12 (partial resolution)
 - Delete old OSAL API doc and pdf

Information changes:
 - Internal file descriptor not accessible (recommend against mixing direct calls with osal APIs)
 - Noted OS_TranslatePath is available to use with open directly by an app

**Describe alternatives you've considered**
None

**Additional context**
Related issues: #116, #70 , #10 
Partial: #255, #12 , #18, #366

**Requester Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/osal/issues/364
CFE_EVS_SendEvent stub should provide full context,"**Describe the bug**
The CFE_EVS_SendEvent stub for ut-assert does not provide its full context. It only provides the first argument, EventId, providing no way to for unit tests to verify the correct EventType or event message text was sent.

**To Reproduce**
Steps to reproduce the behavior:
1. See the [CFE_EVS_SendEvent stub](https://github.com/nasa/cFE/blob/60a5f6580d1e737f46efce0418aba5b8dac6df6a/fsw/cfe-core/ut-stubs/ut_evs_stubs.c#L106). Only EventID is registered with the context and copied. 

**Expected behavior**
The CFE_EVS_SendEvent stub should provide its full context for unit testing purposes, including the EventID, EventType, and the event message string. <strike>My preference would be that the event message text provided would not include the format specifiers and instead be the resulting string with the format specifiers replaced with the appropriate text.</strike> I've been convinced and also talked myself out of that preference.

**Code snips**
```
int32 CFE_EVS_SendEvent(uint16 EventID,
                        uint16 EventType,
                        const char *Spec,
                        ...)
{
    int32 status;

    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), &EventID);
    status = UT_DEFAULT_IMPL(CFE_EVS_SendEvent);

    if (status >= 0)
    {
        UT_Stub_CopyFromLocal(UT_KEY(CFE_EVS_SendEvent), (uint8*)&EventID, sizeof(EventID));
    }

    return status;
}
```

**System observed on:**
 - cFE 6.7.11

**Additional context**
n/a

**Reporter Info**
Eric Gilligan NASA/GSFC-5820
",non-bug,https://github.com/nasa/cFE/issues/603
Remove unused `CFE_SB_NO_SUBSCRIBERS`,"**Is your feature request related to a problem? Please describe.**
Unused error code.  Unsubscribe returns `CFE_SUCCESS` from an unsubscribe call when there are no subscribers.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
#1452 updated the documentation

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1569
Build failure with CFE_PLATFORM_TIME_CFG_SRC_TIME == true,"**Describe the bug**
Build failures when enabling time source configuration.

```
/cfe/modules/time/fsw/src/cfe_time_tone.c:570:61: error: ‘CFE_TIME_ToneDataCmd_t {aka struct CFE_TIME_ToneDataCmd}’ has no member named ‘CmdHeader’; did you mean ‘CommandHeader’?
             CFE_SB_TransmitMsg(&CFE_TIME_Global.ToneDataCmd.CmdHeader.Msg, false);
```

**To Reproduce**
- Set `CFE_PLATFORM_TIME_CFG_SOURCE` true
- Set `CFE_PLATFORM_TIME_CFG_SRC_TIME` true
- Set `CFE_MISSION_TIME_CFG_FAKE_TONE` false

**Expected behavior**
Should build and run.

**Code snips**
See warning above, note 3 instances of the old reference.

**System observed on:**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/2072
Sample Config Leap Seconds needs update,"**Describe the bug**
The sample configuration's CFE_MISSION_TIME_DEF_LEAPS was set to 32 and should currently be 37

**To Reproduce**
Steps to reproduce the behavior:
Visual inspection

**Expected behavior**
CFE_MISSION_TIME_DEF_LEAPS should be 37 

**Code snips**
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/cmake/sample_defs/sample_mission_cfg.h#L176

**System observed on:**
N/A 

**Additional context**
#187 

Leap Second History
https://www.nist.gov/pml/time-and-frequency-division/time-services/nist-time-scale-data-archive

**Reporter Info**
Alex Campbell NASA GSFC
",bug,https://github.com/nasa/cFE/issues/983
Add scrubbing support for libraries,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
CS currently doesn't support scrubbing libraries. This could be implemented now that ticket https://github.com/nasa/cFE/issues/28 is implemented.

**Describe the solution you'd like**
Add a field in the app table to specify whether or not an entry belongs to an app or a lib and call the appropriate API functions accordingly


**Describe alternatives you've considered**
Add a separate dedicated lib table, or perhaps call CFE_ES_GetAppIDByName first and if that fails, call CFE_ES_GetLibIDByName, then call CFE_ES_GetModuleInfo() to get the addresses to scrub

**Requester Info**
John N Pham, Northrop Grumman",non-bug,https://github.com/nasa/CS/issues/27
Documentation builds should use separate directories,"**Is your feature request related to a problem? Please describe.**
The 3 documentation targets (detaildesign, usersguide, osalguide) all share the same ""doc"" subdirectory for the doxygen run.  This can become a problem when trying to validate documentation builds and building with the `-j` option.  They work fine when built one at a time, but with `-j` at one point my machine got into an endless loop with two doxygen builds running in parallel that kept stepping on the other's files.

**Describe the solution you'd like**
Use separate dirs so that builds can be done in parallel without interfering with each other.

**Additional context**
This should also result in separate ""warnings.log"" files too, that can be more easily checked.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1378
LGTM issue - integer comparison size mismatch,"**Is your feature request related to a problem? Please describe.**
```
/* send an event for each pipe write error that may have occurred */
--
1489 | for(i=0;i < SBSndErr.EvtsToSnd; i++)
  | Comparison between i of type uint16 and EvtsToSnd of wider type uint32.
1490 | {
1491 | if(SBSndErr.EvtBuf[i].EventId == CFE_SB_MSGID_LIM_ERR_EID)
```

In theory if EvtsToSend is > max uint16 this could infinite loop.  Pretty unlikely, but definitely shouldn't be in flight code.

**Describe the solution you'd like**
i should be sized appropriately

**Describe alternatives you've considered**
None

**Additional context**
Split off from #431

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/831
CF should not require/hard-code use of the software bus for PDU transport,"The CF application creates a stream of data PDUs during operation, which are intended to be (somehow) transported to the remote node.  It is a point-to-point data flow.

Currently, CF assumes that the software bus will be used for this purpose.  Although this is the existing/de-facto data transport mechanism provided by the framework, it is not an ideal fit at all.  (Analogy of ""when all you have is a hammer, everything looks like a nail"" applies here).

- Software bus is broadcast (1:N) where CF data flows are 1:1 in nature
- Software bus has relatively small buffers, and is designed for minimizing latency and memory efficiency, not designed for bulk throughput
- Software bus does not provide any sort of back-pressure capability (e.g. if a sender like CF is sending PDUs faster than the receiver can process them).  Also note that it is not really practical for it to do so either, given it is a multicast design (1:N) - in a multicast, one would not stop sending just because one subscriber is not able to keep up.
- Similarly, by forwarding/bridging data PDUs from the OS network buffers to software bus Buffers, it effectively defeats any backpressure capabilities of the underlying network protocol.  For example, if a TCP connection were used for node-to-node transport over the physical network, this protocol will effectively throttle the sender to the rate that the receiver actually accepts the data through the use of ack's and sliding windows.  This is determined on the receive side by how deep the buffer is, inside the network stack.  By bridging the data to SB it essentially keeps this empty, and this gives a green-light for the sender to keep blasting data in.  This makes it difficult, if not impossible, to tune the system for good throughput - it means the sender must be artificially held off without any real feedback.
- Software bus is designed for commands and telemetry data, and all messages are assumed to be either a command or telemetry message.  Therefore, CF must add a fake telemetry header on the PDUs it generates, and other entities must add a fake command header on the PDUs it generates, in order to maintain this pattern (or else it will break software bus APIs).  This extra header is just unnecessary baggage, because SB is not designed for bulk data (i.e. this is where it is really contorting the problem domain to look more like a nail so the SB hammer will be able work with it).


While there may be valid reasons to use the Software Bus as a backhaul, it is certainly less than ideal and shouldn't be the only (hard-coded, forced) option.  There should be mode to use an I/O layer and go direct to network, which will solve many of the throughput and performance tuning issues, as well as just being a far cleaner design.

If anything using SB for bulk data backhaul should be the undesirable fallback option (if nothing else better exists) rather than the primary/only option.",non-bug,https://github.com/nasa/CF/issues/130
Possible race conditions in table sharing if Sharing/unsharing/unregistering while managing/updating/accessing ,"**Describe the bug**
Related to #1493, no built in protection from possible race conditions with global table data if tables are shared/unshared/unregistered currently with other management functions from multiple tasks.

`CFE_TBL_GetInfo` example:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L1448-L1454

`CFE_TBL_Modified` example:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L1562-L1572

Note, looks avoidable if `CFE_TBL_Register` and `CFE_TBL_Share` happen at startup and shared tables don't `CFE_TBL_Unregister`. But still need to keep in mind blocking related to management and how updates work.

**To Reproduce**
Via inspection...

**Expected behavior**
No race.  Add locks or disallow API use in certain system states.  Consider if simplification is possible based on actual use cases.

**Code snips**
See above

**System observed on:**
NA - inspection

**Additional context**
Code review

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/1509
"Port ""CFE_UtAssert_SuccessCheck"" and related macros from coverage test to functional test","**Is your feature request related to a problem? Please describe.**
The CFE coverage test has a number of useful test macros:
- CFE_UtAssert_SETUP
- CFE_UtAssert_TEARDOWN
- CFE_UtAssert_SUCCESS
- CFE_UtAssert_MSGID_EQ
- CFE_UtAssert_RESOURCEID_EQ
- CFE_UtAssert_MEMOFFSET_EQ

However, these are only accessible/usable from the coverage test environment.  It would be helpful if equivalent macros/functions existed in the functional test environment.

**Describe the solution you'd like**
Define the same basic set of macros in `cfe_assert.h`  so they can be used by any functional test.

**Additional context**
Due to the considerable differences in the application linkage, there currently is no (real) library that is common between the coverage test and functional test environments, aside from UtAssert itself.

Unfortunately this means there is no easy way to use the exact same definition of these macros, but as they are just wrappers around UtAssert functions so it isn't that bad to duplicate them.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1784
Implement InitHeader call in CFE FS,"All CFE apps that write a file should prefix that file with a header object defined in FS.  Currently they do so on-the-fly by simply memset()'ing the structure to zero and setting a key field.  

This should be cleaned up and moved to an InitHeader() call in CFE FS such that if fields need to be added to the header in the future this can be done without having to touch many different places where the header is initialized/written.",non-bug,https://github.com/nasa/cFE/issues/37
Clean up inconsistent implementation of OS_Lock_Global_Impl/OS_Unlock_Global_Impl,"**Is your feature request related to a problem? Please describe.**
Only the ""shared"" layer invokes these impl (low level) APIs - they are not invoked directly by applications, and the shared layer has already done its error checking.  Therefore they should never be invoked with a bad object type, and there is no recourse if the implementation fails.

**Describe the solution you'd like**
- Make sure ""shared"" layer is doing the appropriate scrubbing of object type before calling ""impl"" layer.
- Remove duplicate/unnecessary error checking in ""impl"" layer that was already performed at ""shared"" layer.
- Make ""impl"" functions return `void` - these should never fail, and there is no feasible recovery if they do.  The only way they can fail is if they weren't initialized properly.  The OS_DEBUG message that is printed is the only recourse.

**Additional context**
Error checking should be consolidated at ""shared"" layer, layer whenever possible, as this keeps ""impl"" layer simpler, and also ensures that the same error checking is done on all platforms - so all platforms work the same.  Right now the error checking in these functions is not quite the same between POSIX/VxWorks/RTEMS.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/701
cfe time var name changed in .h but not in code,"cfe master 6.6 release
osal 4.2.1a
psp 1.3.0.0


building for VxWorks 6.9 SPARC ut700

kspace/plss_cws/../CFS/cfe/fsw/cfe-core/src/time/cfe_time_tone.c
/home/sduran/AEMU_Workspace/plss_cws/../CFS/cfe/fsw/cfe-core/src/time/cfe_time_tone.c: In function 'CFE_TIME_ToneSend':
/home/sduran/AEMU_Workspace/plss_cws/../CFS/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:132:42: error: 'CFE_TIME_ToneDataCmd_Payload_t' has no member named 'AtToneLeaps'
     CFE_TIME_TaskData.ToneDataCmd.Payload.AtToneLeaps = 

FROM cfe 86ce044, 6.5 release plus a couple of hot fixes, master before 6.6 release, cfe_time_utils.h
typedef struct
{

  CFE_TIME_SysTime_t    AtToneMET;      /* MET at time of tone */
  CFE_TIME_SysTime_t    AtToneSTCF;     /* STCF at time of tone */
--->  int16                 AtToneLeaps;    /* Leap Seconds at time of tone */
  int16                 ClockSetState;  /* Time has been ""set"" */
  int16                 ClockFlyState;  /* Current fly-wheel state */
  CFE_TIME_SysTime_t    AtToneDelay;    /* Adjustment for slow tone detection */
  CFE_TIME_SysTime_t    AtToneLatch;    /* Local clock latched at time of tone */
  CFE_TIME_SysTime_t    CurrentLatch;   /* Local clock latched just ""now"" */
  CFE_TIME_SysTime_t    TimeSinceTone;  /* Time elapsed since the tone */
  CFE_TIME_SysTime_t    CurrentMET;     /* MET at this instant */

} CFE_TIME_Reference_t;


FROM cfe master 90fdf9f 6.6 release, cfe_time_utils.h --- var name changed in header, but
not in cfe/fsw/cfe-core/src/time/cfe_time_tone.c:132:42
typedef struct
{

  CFE_TIME_SysTime_t    AtToneMET;      /* MET at time of tone */
  CFE_TIME_SysTime_t    AtToneSTCF;     /* STCF at time of tone */
--->  int16                 AtToneLeapSeconds;    /* Leap Seconds at time of tone */
  int16                 ClockSetState;  /* Time has been ""set"" */
  int16                 ClockFlyState;  /* Current fly-wheel state */
  CFE_TIME_SysTime_t    AtToneDelay;    /* Adjustment for slow tone detection */
  CFE_TIME_SysTime_t    AtToneLatch;    /* Local clock latched at time of tone */
  CFE_TIME_SysTime_t    CurrentLatch;   /* Local clock latched just ""now"" */
  CFE_TIME_SysTime_t    TimeSinceTone;  /* Time elapsed since the tone */
  CFE_TIME_SysTime_t    CurrentMET;     /* MET at this instant */

} CFE_TIME_Reference_t;


I do not see the issue with a linux build.  I think it might be associated with
#define CFE_PLATFORM_TIME_CFG_BIGENDIAN
The default is to #undef CFE_PLATFORM_TIME_CFG_BIGENDIAN - makes sense on linux/x86
But for vxworks/SPARC, I would think it should be defined.
""**      If this configuration parameter is defined, the CFE time server will
**      publish time tones with payloads in big-endian order, and time clients
**      will expect the tones to be in big-endian order. ""

vxworks/sparc will build if 
#undef CFE_PLATFORM_TIME_CFG_BIGENDIAN



",bug,https://github.com/nasa/cFE/issues/259
Hard Lockup if user attempts to start library via CFE_ES_START_APP_CC ,"**Describe the bug**
A hard lockup occurs if a user attempts to start a library with a stack size of 8192 via the CFE_ES_START_APP_CC command.  The only known recovery is to power cycle the unit.  Worth note, is that this applies only to our SP0 (VxWorks 6.9) and is not repeatable on a Linux system.  

This bug was discovered when testing a CTF script with a copy and paste error in it.  Libraries are not intended to be started via the start app command, but given the severity of the error...I wanted to submit an issue to better understand it.

**To Reproduce**
Steps to reproduce the behavior:
1. Start sample_lib via CFE_ES_START_APP_CC command (Note that stack size must be >= CFE_PLATFORM_ES_DEFAULT_STACK_SIZE in order to produce error) 

**Expected behavior**
No Lockup

**System observed on:**
 - SP0
 - OS: VxWorks 6.9
 - cfe:  v6.7.0+dev295
 - osal: v5.0.0+dev247
 - psp:  v1.4.13.0

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Dan Knutsen
NASA Goddard",bug,https://github.com/nasa/cFE/issues/1087
Relax CMake directory expectations for elf2cfetbl,"**Is your feature request related to a problem? Please describe.**
See conversation in <https://github.com/nasa/cFS/discussions/319>


> From a dependency / scope standpoint, the cfe_add_tables() function really wants to be defined along with the table tool sources themselves. Then, after finding the table source directory, the cFE CMake infrastructure could import implementations of those cmake functions which are tool-specific. Then cFE and table generation can be decoupled via the cfe_add_tables() interface. In that way, different implementations for cfe_add_tables() can be used depending on the mission config.

**Describe the solution you'd like**

Create a modifiable CMAKE parameter for the location of elf2cfetbl so users can design custom directory structures

**Describe alternatives you've considered**

Long-term, let users define custom toolchain compositions using tools other than elf2cfetbl

**Additional context**
See above
",non-bug,https://github.com/nasa/cFE/issues/1907
Health and Safety has extraneous code,"IVV Severity: 4

Issue Category: Code
Issue Type: Extraneous Code
Count: 1

Description:
The Health and Safety App init function includes the extraneous assignment of Status to CFE_SUCCESS[1: line 355]; however, this value is never used again before the value of Status is reassigned[1: line 381].

Recommended Actions:
The assignment statement for Status can be removed.

Impact:
Defect impacting maintainability on current mission or reuse on future missions.

Imported from GSFCCFS-1901",non-bug,https://github.com/nasa/HS/issues/10
"MCP750-VxWorks - Memory Variables Should be ""cpuaddr"" Type","There are several variable instances in the cfe_psp_memory.c source file in  the mcp750-vxworks implementation that define memory address variables as a  uint32 type.  These definitions need to be updated to use the platform defined ""cpuaddr"" type. ",bug,https://github.com/nasa/PSP/issues/65
Update OS_TimerSet API documentation for timer disable,"**Is your feature request related to a problem? Please describe.**
As stated in #9, the OS_TimerSet documentation does not match behavior.

**Describe the solution you'd like**
API documentation should describe OS_TimerDelete() as the method to cancel the timer (not a start time of zero)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC",non-bug,https://github.com/nasa/osal/issues/10
add_psp_module cmake include bug,"**Describe the bug**
When making PSP modules and calling `add_psp_module()` from the respective PSP module's CMakeLists.txt file, the necessary includes are not available and the code will fail to compile due to `#include ""cfe_psp_module.h""` not being found. 

**To Reproduce**
Steps to reproduce the behavior:
1. Create a PSP module in psp/modules/<your module>
2. Create a CMakeLists.txt file in psp/modules/<your module> and add line for `add_psp_module(<your module> src/<your module c file>)`. 
2. Make a .c source file in `psp/modules/<your module>` and `#include ""cfe_psp_module.h""` in it.
3. Make sure to include this psp module in target.cmake so it will be built w/ `SET(TGT1_PSP_MODULELIST <your module>)`
4. Build cFS

**Expected behavior**
If you have the proper PSP module boilerplate set up the compile error you should see is that compiler couldn't find `""cfe_psp_module.h""`

**Code snips**
I went ahead and modified cfe/cmake/arch_build.cmake function `add_cfe_module` include_directories line from
`include_directories(${MISSION_SOURCE_DIR}/psp/fsw/shared`
to
`include_directories(${MISSION_SOURCE_DIR}/psp/fsw/shared/inc`

...which fixed the problem.

**System observed on:**
 - Native Linux
 - OS: Ubuntu 18.04
 - Versions [cFE v6.8.0-rc2, OSAL v5.1.0-rc2, PSP v1.5.0-rc1]

**Reporter Info**
Joe Mahoney - LTA Research
",bug,https://github.com/nasa/cFE/issues/1070
Potential Truncation of Number of Open Files,"The number of open files is treated as a uint32 by FSW, but is telemetered as a uint8 such that truncation may result if the number of open files allowed by OSAL grows.",non-bug,https://github.com/nasa/FM/issues/27
Rationale for select right after connect (or remove),"**Is your feature request related to a problem? Please describe.**
Rationale for select() right after connect()? If the socket is selectable, then it wasn't made non-blocking. (see line 162) connect blocks until the connection is made or an error occurs.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L283

**Describe the solution you'd like**
Justify (add comment) or remove.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/862
Command Code/Enum naming convention inconsistencies,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
- Similar to LC issue: https://github.com/nasa/LC/issues/70
  - SC also has a few command code macros that are not consistent with the enumeration identifiers or the command function name (all are cases of 2 words being combined into 1).

**Code snips**
`SC_StartRtsGrpCmd()`
`SC_START_RTSGRP_CC` (should be `SC_START_RTS_GRP_CC`)

`SC_EnableRtsGrpCmd()`
`SC_ENABLE_RTSGRP_CC` (should be `SC_ENABLE_RTS_GRP_CC`)

...and a couple more.

**Expected behavior**
Identifiers should conform to the cFS/cFE naming convention with regard to consistent use of underscores to make mnemonics clear and readable.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/SC/issues/87
Missing test cases for file services API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the file services functional test:

```
  + condition: CFE_FS_ExtractFilenameFromPath[any]=>CFE_FS_FNAME_TOO_LONG
  + condition: CFE_FS_ExtractFilenameFromPath[any]=>CFE_FS_INVALID_PATH
  + condition: CFE_FS_SetTimestamp[any]=>CFE_STATUS_EXTERNAL_RESOURCE_FAIL
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1867
Fix up pointer subtraction (do not cast to integers),"Pointer subtraction works. Code that casts the pointers
into integer types differs from the correct code only in
its obfuscation.

Additionally, where pointer subtraction is used to determine
the length of a string, the entire sequence should be replaced
by a call to strlen().

On a side note, dividing by ""sizeof(char)"" is also mere obfuscation
as the standard defines that sizeof returns the size in (char) units.

Note that when attempting to compile for 64-bit targets, these will usually be flagged as ""casting pointer to wrong sized integer"" -- this may help to find problematic code.

Start with OS_check_name_length().
",bug,https://github.com/nasa/osal/issues/142
CS Child Tasks are dynamically created,"CS creates child tasks dynamically in several command functions:
--CS_RecomputeBaselineCfeCoreCmd
--CS_RecomputeBaselineOSCmd
--CS_OneShotCmd

Is there any risk of cleanup issues if these commands are run too frequently?  CS could be modified to create the child tasks just once and then kick them off when a command is received (perhaps using a semaphore mechanism like FM).

Imported from GSFCCFS-1252",non-bug,https://github.com/nasa/CS/issues/19
Cleanup CF v3.0 Perf ID handling,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1190] Cleanup CF v3.0 Perf ID handling
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Fri Jul 17 13:22:51 2020

_Original Description_:
Encompasses several findings from the CF v3.0 code review:  
  
- Remove unused perf id CF\_DIRREAD\_PERF\_ID  
- Determine whether perf ids CF\_PDU\_RCVD\_PERF\_ID and CF\_VCxPDUSENT\_PERF\_ID should be added (currently used in stakeholder)  
- Ensure that CFE\_ES\_PerfLogExit is called when the app exits",non-bug,https://github.com/nasa/CF/issues/17
Report error when writing event log header,"**Is your feature request related to a problem? Please describe.**
The return from `CFE_FS_WriteHeader` is checked when writing the event log header, but there's no event sent on error (it just returns CFE_EVS_FILE_WRITE_ERROR):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L180-L183

**Describe the solution you'd like**
Send an event to help narrow down the issue.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1407
Improve Bamboo builds of cFS OSAL tree,"The current Bamboo plan for the `cfs_osal` project compiles OSAL and runs both sets of tests, but only recovers test results from one of the two sets. Work needs to be done to extend the test results recapture to pull in the results of the other tests.",non-bug,https://github.com/nasa/osal/issues/48
"Rename ""mcp750-vxworks6.4"" Folder",The mcp750-vxworks6.4 implementation is not specific to vxworks version 6.4.  This implementation will work with other vxworks 6 versions up to vxworks 6.9.  The folder should be renamed to mcp750-vxworks6 to avoid any confusion.,bug,https://github.com/nasa/PSP/issues/48
"Rename files, functions, and variables to match APPNAME_* pattern","**Describe the bug**
PR #73 shed light on inconsistencies in naming conventions. There are multiple items named SAMPLE_itemname as opposed to SAMPLE_APP_itemname.

**To Reproduce**
One relevant example is `SAMPLE_TblValidationFunc` in `sample_app.c:226`

**Expected behavior**
All item names should use the prefix `SAMPLE_APP` as opposed to `SAMPLE`. In the example above the correct name should then be `SAMPLE_APP_TblValidationFunc`.


**System observed on:**
Source Code

**Reporter Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",bug,https://github.com/nasa/sample_app/issues/77
"Unit test - split ""AND""-ed conditionals into separate asserts","**Is your feature request related to a problem? Please describe.**
Debugging unit tests can be very difficult, frustrating, and time consuming.  One major part of the problem which makes them very debugging-unfriendly is something like the following:

```
    UT_Report(__FILE__, __LINE__,
              UT_EventIsInHistory(CFE_ES_PCR_ERR2_EID) &&
              CFE_ES_Global.AppTable[Id].ControlReq.AppTimer == 0 &&
              CFE_ES_Global.AppTable[Id].ControlReq.AppControlRequest == CFE_ES_RunStatus_SYS_DELETE,
              ""CFE_ES_ScanAppTable"",
              ""Waiting; process control request"");
```

The problem with this type of construct is that there are 3 separate tests being combined into one single assert.  When it fails, it is not possible to see which of the three conditions are evaluating false.  Many of them call functions within the test case, too, which further obfuscate what the actual return value was.  The only way to test this is run it in a debugger, break at the start of the test, then set a breakpoint inside e.g. UT_EventIsInHistory to see what it returned.

**Describe the solution you'd like**

1. At a minimum - split the `&&` conditions into separate asserts.  This would _at least_ let the developer know which one is actually the fault.  
2. Nice to have - employ the macros similar to what @CDKnightNASA added in nasa/osal#405, which show the _values_ tested in the log, not simply just a pass/fail.

**Describe alternatives you've considered**
Continue struggling to figure out what actually went wrong every time a UT failure comes up.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/596
Add support for vxWorks 7,"**Is your feature request related to a problem? Please describe.**
cFS traditionally has supported vxWorks 6. There are projects interested in using vxWorks 7 with cFS, so support must be added. This requires work in PSP and OSAL.

**Describe the solution you'd like**
An ideal solution is to support both vxWorks 6 and 7 with as little cloning of old vxWorks 6 as possible. On PSP, the current work is to copy mcp750-vxworks for the working platform. (5020) OSAL's goal is to have the vxworks osal support both 6 and 7.

**Describe alternatives you've considered**

**Additional context**

**Requester Info**
Steven Seeger / Embedded Flight Systmes, Inc. / GSFC Code 582

",non-bug,https://github.com/nasa/osal/issues/610
"Stub generator script filtering all ""extern"" strings","**Describe the bug**
In order to parse the headers the ""generate_stubs.pl"" script needs to filter out ""extern"" keywords.  Problem is, it is filtering the ""extern"" string even if it appears inside a larger string, not just the keywords.

**To Reproduce**
View the generated stub for ""OS_TimeBaseCreate"".  The last parameter should be `external_sync` but it its appearing in the generated code as `al_sync` instead.

**Expected behavior**
Should appear in the generated code as `external_sync`, same as header.

**Code snips**
https://github.com/nasa/osal/blob/1d183e9a079036ff0c91f36eab9c1f29a69547f2/src/ut-stubs/osapi-timebase-stubs.c#L41

**System observed on:**
Ubuntu

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1048
Suggest reversing order in which AP/WP telemetry is stored,"LC builds AP/WP status/results starting with most significant bits first.  i.e. AP 1 state in most significant 2 bits, then AP 1 results, then AP 0 state, and AP 0 results in least significant bits.  When doing an array of bit fields, would be nice to have AP 0 in the most significant bits.

Imported from GSFCCFS-1119",non-bug,https://github.com/nasa/LC/issues/13
LGTM issue - comparison between int16 and int,"**Is your feature request related to a problem? Please describe.**
```
line 934:
while ((i<ArgumentCount) && (Status == SUCCESS))
--
  | Comparison between i of type int16 and ArgumentCount of wider type int.
```

**Describe the solution you'd like**
i is an iterator, no need to be fixed size.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/elf2cfetbl/issues/56
Remove classic build support,Only supporting cmake build going forward.,non-bug,https://github.com/nasa/ci_lab/issues/5
Ensure all unit test cases for invalid ID use UNDEFINED plus another value,"**Is your feature request related to a problem? Please describe.**
When checking for proper ID validation, the specific value `OS_OBJECT_ID_UNDEFINED` must be rejected as it is always invalid.  However, the set of values that should be rejected is much larger than this - proper ID validation should only permit a small subset of values to be accepted.

**Describe the solution you'd like**
In order to confirm that ID values are being validated properly, test cases checking for `OS_ERR_INVALID_ID` should pass in `OS_OBJECT_ID_UNDEFINED` as well as some other value, which should be nonzero, but also _not_ in the valid range - to confirm that the implementation is doing the proper validation and not simply checking for equality with `OS_OBJECT_ID_UNDEFINED`.

**Additional context**
This came up as part of return/status code validation efforts - test cases are currently inconsistent,  some tests are only using `OS_OBJECT_ID_UNDEFINED`, while some only use `UT_OBJID_INCORRECT`.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1052
VxWorks osal_file_UT test does not pass with default config,"**Describe the bug**
The osal_file_UT uses a small ramdisk as its temporary file system to run the tests.  However, with the default configuration of `OSAL_CONFIG_MAX_NUM_OPEN_FILES` at 50, one gets the following error:

    OS_FileOpen_Impl():114:open(RAM3:0/tmpFile26.txt): errno = 0x380004

This errno correlates to `S_dosFsLib_NO_FREE_FILE_DESCRIPTORS` 

Reducing the value of `OSAL_CONFIG_MAX_NUM_OPEN_FILES` to 24, the test passes OK

**To Reproduce**
Run osal_file_UT on MCP750 / VxWorks 6.9 with default config

**Expected behavior**
Test should pass with default config

**Code snips**
If applicable, add references to the software.

**System observed on:**
MCP750 / VxWorks 6.9

**Additional context**
The RAMDISK only has 64 blocks, so this might be related.  The other option, if acceptable, might be to document in the release notes that this particular test on this platform requires the OSAL_CONFIG_MAX_NUM_OPEN_FILES to be reduced from its default value.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1094
Correct notes on CFE_FS_BackgroundFileDumpRequest,"**Describe the bug**
The notes for this API say ""not on heap"" when it really should say ""not on stack""

**To Reproduce**
If buffer is allocated on the stack and object goes out of scope before background job finishes, random unpredictable behavior occurs, as in PR #1673.

**Expected behavior**
Correct comment.

**System observed on:**
CI

**Additional context**
Fundamental requirement is that object must persist for the time the background job runs.  So stack is likely a problem, heap is OK as long as it isn't freed before task is done.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1703
"Remove ""return;"" from last line of void functions","**Is your feature request related to a problem? Please describe.**
""return;"" at last line in void function is redundant.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1540
Enhanced version reporting,"Use CI_LAB_VERSION from cfecfs_version_info.h if available and report on NOOP and startup (along with classic version numbering""

Classic version numbering can then just be updated on release, vs for every commit.",non-bug,https://github.com/nasa/ci_lab/issues/6
Remove device driver references from code,"**Is your feature request related to a problem? Please describe.**
#377 is to remove device driver requirements, there are also references in the software.

**Describe the solution you'd like**
Remove references to device drivers, ""CFE_DRV"", etc from software, configuration files, documentation, etc.

For example:
https://github.com/nasa/cFE/blob/5d7d766941369b6e92a0328217e43d5fd02a8cf1/fsw/cfe-core/src/es/cfe_es_apps.c#L338-L342

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/408
Linux BSP shouldn't trim first argument,"**Describe the bug**
As part of command line processing the logic for Linux BSP is to prune the first argument which is the command name, to be consistent with other (e.g. RTEMS) platforms that do not pass the command name to begin with.

However the CFE PSP passes the argument list to the C library `getopt_long()` and this expects the first argument to be the command name, so this breaks.

**To Reproduce**
Pass arguments (e.g. `-I' to set spacecraft ID value, etc) to start the CFE core on linux.  Observe that the default value is still used, argument isn't processed.

**Expected behavior**
Command line arguments should be processed and used.

Just store/pass the full set of arguments, no real need to abstract, as anything doing argument processing is almost certainly platform-specific (e.g. CFE PSP) so it will know what to expect here.

**System observed on:**
Ubuntu 20.04

**Additional context**
First bug found by newly-minted PSP functional test.  I attempted to use `-I` to force a test failure on the spacecraft ID value and it didn't work.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/499
Report task details in QUERY_ALL_TASKS command,"**Is your feature request related to a problem? Please describe.**
The current `CFE_ES_TaskInfo` structure, which is written by the QUERY_ALL_TASKS command, only has some very basic task information - the name/ID, execution count, and what app the task is associated with.

**Describe the solution you'd like**
Suggest to also include:
- stack size
- priority
- entry point? (would depend on #978)

**Additional context**
stack size is an important statistic for determining memory usage
priority is potentially important for real time concerns
Both of these are tracked by OSAL and easily available, just have to get it and put it in the structure.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/979
printf format string vs data type mismatches,"We have some lingering mismatches between printf format string conversions and the parameter data types; all but one of them are in elf2cfetbl so pinning this bug on elf2cfetbl (will fix cmdUtil in passing):

tools/cmdUtil/cmdUtil.c:229:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'long int' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:710:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'uint32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:798:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'uint32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1004:5: warning: format '%X' expects argument of type 'unsigned int', but argument 3 has type 'time_t' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1192:5: warning: format '%x' expects argument of type 'unsigned int', but argument 2 has type 'long unsigned int' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1227:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1235:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1243:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1273:17: warning: format '%d' expects argument of type 'int', but argument 3 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1361:9: warning: format '%x' expects argument of type 'unsigned int', but argument 2 has type 'long unsigned int' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1389:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1397:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1403:5: warning: format '%d' expects argument of type 'int', but argument 2 has type 'long int' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1430:5: warning: format '%x' expects argument of type 'unsigned int', but argument 2 has type 'long unsigned int' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1596:13: warning: format '%d' expects argument of type 'int', but argument 2 has type 'uint32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1596:13: warning: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'uint32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1619:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1647:70: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1647:70: warning: format '%d' expects argument of type 'int', but argument 3 has type 'char *' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1655:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1655:9: warning: format '%d' expects argument of type 'int', but argument 3 has type 'int32' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1670:9: warning: format '%d' expects argument of type 'int', but argument 3 has type 'long int' [-Wformat=]
tools/elf2cfetbl/elf2cfetbl.c:1707:28: warning: format '%d' expects argument of type 'int', but argument 4 has type 'uint32' [-Wformat=]
Attachments (0)",bug,https://github.com/nasa/elf2cfetbl/issues/2
`CFE_ES_MAX_EID` incorrect,"**Is your feature request related to a problem? Please describe.**
Max EID incorrect:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/inc/cfe_es_events.h#L46
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/inc/cfe_es_events.h#L1449

**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1320
FM Dir List to file doesn't clean buffer,"FM Get Directory List to file (FM_GET_DIR_FILE_CC) currently isn't zeroing out the buffer of DirListData.EntryName so there can be a bunch of random stuff in there. 

The DirListData that is written currently looks like this:
EntryName: fm_dirlist.out\00\00/dev/shmw�\00\00hw�\00\00 j�\00\00�\00\007���
EntrySize: 136
ModifyTime: 1638892240
Mode: 6
 
When it it should look like this: 
EntryName: fm_dirlist.out
EntrySize: 136
ModifyTime: 1638892240
Mode: 6

The code looks like this, the commented out part is what is missing and would fix the problem. 

/* Populate directory list file entry */
//CFE_PSP_MemSet(&DirListData, 0, sizeof(FM_DirListEntry_t));
strncpy(DirListData.EntryName, OS_DIRENTRY_NAME(DirEntry), EntryLength);
DirListData.EntryName[EntryLength] = '\0';

Imported from GSFCCFS-1815",non-bug,https://github.com/nasa/FM/issues/14
Event messages generated during library init get dropped,"I have a CFE based project that uses multiple libraries, which are loaded in the startup script as a CFE_LIB rather than a CFE_APP.

Today I found that one of the library initialization routines was failing.  Despite generating an Event using CFE_SendEvent on the condition, no event was reported on the console.

The issue is that library init routines are called from the main thread context, and therefore not in the context of an Executive Services task.  This causes CFE_ES_GetAppId to fail - which is probably correct.

However this causes CFE_EVS to effectively drop the message on the floor, and it is entirely silent in this case.

This might be intended behavior but it caught me off guard since I got no output whatsoever.  One possible fix is to just stick to CFE_ES_WriteToSysLog during library init functions but perhaps we should consider having event services actually do this, so the message at least goes somewhere visible.
",bug,https://github.com/nasa/cFE/issues/237
"Unexercised code at the ""functional"" level of testing","**Is your feature request related to a problem? Please describe.**
Although the coverage test which link directly to the implementation *.c file for all of these do fully exercise the functions, they are not called from the ""functional"" level of testing which links to the osal library (and uses public include paths).  So it's possible they could pass all current testing but not get linked/included properly in relation to the library.  Also a call at the functional level would cover alternative implementations, not just what's provided currently (""black box"" testing).  Helps even for the inlines/macros in headers, since they could move and get missed in the public includes (not likely, but possible).

OS_GetBuildNumber
OS_GetVersionCodeName
OS_GetVersionNumber
OS_GetVersionString
OS_ObjectIdToArrayIndex

Inline:
OS_ObjectIdDefined
OS_ObjectIdEqual
OS_ObjectIdFromInteger
OS_ObjectIdToInteger
OS_TimeAdd
OS_TimeAssembleFromMicroseconds
OS_TimeAssembleFromMilliseconds
OS_TimeAssembleFromNanoseconds
OS_TimeAssembleFromSubseconds
OS_TimeGetFractionalPart
OS_TimeGetMicrosecondsPart
OS_TimeGetMillisecondsPart
OS_TimeGetNanosecondsPart
OS_TimeGetSubsecondsPart
OS_TimeGetTotalMicroseconds
OS_TimeGetTotalMilliseconds
OS_TimeGetTotalNanoseconds
OS_TimeGetTotalSeconds
OS_TimeSubtract

**Describe the solution you'd like**
Add a simple test for these at the functional level (tests/unit-tests).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1119
Create CHANGELOG.md and move development history out of Readme.md,"**Is your feature request related to a problem? Please describe.**
The development history is clogging up useful information in the Readme

**Describe the solution you'd like**
Move history to a new file named `Chengelog.md`

**Describe alternatives you've considered**
Move development history to bottom of Readme file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/cFE/issues/820
Add actions in workflow to replace former CI implementation,"**Is your feature request related to a problem? Please describe.**
CI no longer running for PR's in nasa repo

**Describe the solution you'd like**
Implement CI as GitHub Actions

**Describe alternatives you've considered**
None

**Additional context**
Similar to transition in nasa/cFS

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1057
CI updates - add static analysis and format in workflow,"**Is your feature request related to a problem? Please describe.**
Travis-CI not transitioned to github actions

**Describe the solution you'd like**
Transition CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_lib/issues/42
Improve `CFE_SB_ENBL_RTE?_EID` naming,"**Is your feature request related to a problem? Please describe.**
`CFE_SB_ENBL_RTE1_EID`, `CFE_SB_ENBL_RTE2_EID` and `CFE_SB_ENBL_RTE3_EID` have very similar names, but are of different type and from different causes.  Easy to confuse/typo or mix up the difference.

**Describe the solution you'd like**
Replace with more descriptive names, one suggested pattern is to also embed the type in the name.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1471
Add Contributing Guide ,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the elf2cfetbl repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/elf2cfetbl/issues/76
FM is incompatible with recent OSAL API changes,"This is regarding OSAL 5.0.3-bv.  FM calls OS_opendir, OS_readdir, and OS_closedir which were removed in favor of OS_DirectoryOpen, OS_DirectoryRead, and OS_DirectoryClose.  I expect to see other issues as I make fixes to pass unit testing.  I will post them here.",bug,https://github.com/nasa/FM/issues/3
Travis truncating job logs,"**Describe the bug**
Likely related to https://github.com/travis-ci/travis-ci/issues/6018 and similar reports the job log output gets truncated, often around the final documentation warning checks

**To Reproduce**
See build logs, for example https://travis-ci.com/github/skliper/cFS/jobs/328169033

**Expected behavior**
Full log should be shown to debug errors

**Code snips**
N/A

**System observed on:**
CI

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFS/issues/79
Replace strlen use with memchr logic for checking valid length,"**Is your feature request related to a problem? Please describe.**
strlen is an unlimited search, memchr is limited

Example case:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L1616-L1617

**Describe the solution you'd like**
Use memchr instead

**Describe alternatives you've considered**
Something similar to OS_strnlen (unfortunately not exposed)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1328
Possible buffer overrun in format strings used for scanf,Particularly in `CFE_ES_ParseFileEntry()` this uses the %s to read strings into fixed length buffers.  There is a possibility of overrun if the actual string exceeds the allocated size.,bug,https://github.com/nasa/cFE/issues/168
divide osconfig.h three ways,"The current osconfig.h (present in BSP trees and, as a
bonus, in the build/inc directory) contains configuration
items that are OSAL generic, plus configuration items that
are BSP specified, and probably items that are OS specified.

The content of this file needs to be divided.

Items that are generic OSAL configurations need to be in a
header file located centrally.

Items that are specified by the OS should be kept in a header
file within the appropriate `/os/` tree; probably a good idea
to have this file included by the generic configuration file,
to provide ""sane defaults"" in the central file (where there can
be sane ""most OS"" values), then have the OS-specific file
override those as appropriate.

Ditto for the BSP.
",non-bug,https://github.com/nasa/osal/issues/87
CFE_EVS_Register not validating inputs first ,"**Describe the bug**
inside EVS register it clears the AppData record before it validates all the inputs. If some of the inputs are invalid that then causes the app to crash. 

**Expected behavior**
Validate inputs first before anything else. 

**Code snips**
https://github.com/nasa/cFE/blob/33a4f19ce6dc2c132823b3c8c487a59d5b4b81a8/modules/evs/fsw/src/cfe_evs.c#L46-L74

**Reporter Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1746
Report timer_gettime error in OS_TimeBaseSet_Impl,"**Is your feature request related to a problem? Please describe.**
If timer_gettime fails the rounding error will not be reported, silently ignored:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-timebase.c#L566

**Describe the solution you'd like**
Report error, return failure

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/889
Could simplify by just managing tables periodically vs by registering for command (unique approach across common apps),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/SC/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/SC/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
For the standard 10 apps, SC is the only one to use the `CFE_TBL_NotifyByMessage` API and manage tables on command.
https://github.com/nasa/SC/blob/68e2520da89f3157703ced2467b50a34b519ca36/fsw/src/sc_app.c#L606-L612
https://github.com/nasa/SC/blob/68e2520da89f3157703ced2467b50a34b519ca36/fsw/src/sc_cmds.c#L683-L685
https://github.com/nasa/SC/blob/68e2520da89f3157703ced2467b50a34b519ca36/fsw/src/sc_cmds.c#L721-L731

**Describe the solution you'd like**
Could instead just periodically manage all the tables (like all the rest).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/SC/issues/45
Deprecate definition/use of OS_VolumeTable,"**Is your feature request related to a problem? Please describe.**
OSAL has an API where volume table mappings can be added during the startup code, rendering the static `OS_VolumeTable` object unnecessary.

**Describe the solution you'd like**
Use the OSAL API to register the FS_BASED file system mappings, and remove OS_VolumeTable.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/161
Update CFE_MSG_Message_t conversions to use CFE_MSG_PTR macro,"**Is your feature request related to a problem? Please describe.**
In nasa/cfe#1966 introduces a `CFE_MSG_PTR` macro which converts a cmd/tlm header object to a `CFE_MSG_Message_t*` pointer, which is intended to be used rather than assuming a specific member name (e.g. `.Msg`).

**Describe the solution you'd like**
Use the macro instead of assuming `.Msg` member name.

**Additional context**
Required when using generated headers, as the member name may not be ""Msg"" or may be further encapsulated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sch_lab/issues/93
"Clean up ""extern"" declarations at the top of C files","In the CFE core apps, many files reference functions and data structures defined in other files.  However, the function prototypes or ""extern"" declarations are not in common header files, but simply put at the top of the C file that uses it.

While this does build, it defeats the type checking done by the compiler.

It is far from ideal because if the real variable type or function prototype ever changes, the linker will still happily link it together even though they might be completely incompatible (or worse, incompatible in a really subtle way).

The only reason to NOT put a declaration in a header file is if it should not be called or referenced by CFS apps, but this can be solved by creating a private CFE core shared header file.

",bug,https://github.com/nasa/cFE/issues/39
SB - Duplicate Pipe Creation Causes Failure to Delete Pipe (GSFC DCR 22934),"When a Software Bus pipe is created, the SB service will assign a new pipe ID to the system. If the same pipe is created again, SB will change its pipe ID and prevent the original pipe from being deleted. See attachments for more detail.",bug,https://github.com/nasa/cFE/issues/138
readdir is not reentrant,"As reported by cppcheck portability:

Non reentrant function 'readdir' called. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'.

Reported against:

osal/src/os/posix/osfileapi.c
",bug,https://github.com/nasa/osal/issues/126
Add untar command to FM,"Stakeholder requested that untar capability be added in cFE.  In design discussions with the framework team, it was decided that it made sense to pull the decompress capability out of the framework and into a library, and to then add an untar command to the FM app.  

Imported from GSFCCFS-1083",non-bug,https://github.com/nasa/FM/issues/11
Update mcp750-vxworks PSP for CMake,"In order to build the VxWorks image using CMake, a platform module and other various bits need to be added.

This PSP was previously only buildable with classic makefile.",bug,https://github.com/nasa/PSP/issues/108
Add condition variable implementation for RTEMS,"**Is your feature request related to a problem? Please describe.**
Pull Request #1278 added a condition variable API implementation for POSIX, but RTEMS and VxWorks were set to use the ""not-impl"" module, with a plan to implement in the future.

**Describe the solution you'd like**
Add an implementation of condition variables for RTEMS

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1287
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/SC/issues/33
bin sem test,"**Describe the bug**
Working through the unit tests for a qt port.
I hit a stumbling block on bin-sem-test.c function `BinSemCheck`.

When a task is deleted it may have registered callbacks with resources. 
In case of qt the task with a binary semaphore (QSemaphore) in a waiting state that gets deleted.
Ends up stalling the system when that QSemaphore is written to.


From what i gather free-rtos has a similar issue.

https://www.freertos.org/FreeRTOS_Support_Forum_Archive/August_2016/freertos_Releasing_Resources_on_Task_Exit_Delete_b113e7a9j.html

> Releasing Resources on Task Exit/Delete
> Posted by [rtel](http://sourceforge.net/users/rtel) on August 12, 2016
> If a semaphore is held by a task, and that task gets deleted, then there is nothing in the code that will automatically release the semaphore.  
> 
> Looking at the source code I don’t think there is an easy way around this.  The mutex can be reset by passing its handle into xQueueReset(), but then to make it a mutex rather than a queue you would need to call prvInitialiseMutex() too – and that function is not publicly accessible.
> 
> Perhaps, if you are 100% sure there are no other tasks blocked on the mutex, it could be deleted then re-created?



```c

void BinSemCheck(void)
{
    uint32            status;
    OS_bin_sem_prop_t bin_sem_prop;

    memset(&bin_sem_prop, 0, sizeof(bin_sem_prop));

    /* Delete the task, which should be pending in OS_BinSemTake() */
    status = OS_TaskDelete(task_1_id);
    UtAssert_True(status == OS_SUCCESS, ""OS_TaskDelete Rc=%d"", (int)status);

    status = OS_TimerDelete(timer_id);
    UtAssert_True(status == OS_SUCCESS, ""OS_TimerDelete Rc=%d"", (int)status);

    OS_TaskDelay(100);

    /* Confirm that the semaphore itself is still operational after task deletion */
    status = OS_BinSemGive(bin_sem_id); /* task 1 was pending on this, releasing this semaphore triggers task1 to wake up, but stalls out as it has been deleted */
    UtAssert_True(status == OS_SUCCESS, ""BinSem give Rc=%d"", (int)status);
```


A ctrl+c shows backtrace as follows.
```
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x00007fff207bf4ba libsystem_kernel.dylib`__psynch_mutexwait + 10
    frame #1: 0x00007fff207f02ab libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait + 76
    frame #2: 0x00007fff207ee192 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow + 204
    frame #3: 0x0000000100185e6c QtCore`QWaitCondition::wakeAll() + 18
    frame #4: 0x0000000100183064 QtCore`QSemaphore::release(int) + 48
    frame #5: 0x000000010001236e bin-sem-test`::OS_BinSemGive_Impl(token=0x00007ffeefbfe918) at os-impl-binsem.cxx:247:19
    frame #6: 0x0000000100007f06 bin-sem-test`OS_BinSemGive(sem_id=262145) at osapi-binsem.c:168:23
    frame #7: 0x0000000100004e50 bin-sem-test`BinSemCheck at bin-sem-test.c:175:14
    ```

**System observed on:**
 - Hardware
 - OS: Qt 5, mac OS

**Additional context**
I subclassed my qt thread from the qt class, and have been using the terminate call.
I'll try a different method to see if that allows qt to cleanup semaphores from deleted tasks.

**Reporter Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/osal/issues/1261
Allow target name subdirectory for install files and handle symlinks,"**Is your feature request related to a problem? Please describe.**
Just need to add to the paths of locations for the install list from TGT<N>_FILELIST the possibility of target_defs/<TGT_NAME>/<FILENAME>

Also, if the file is a symlink, it needs to be followed to its source but copied as the name in FILELIST suggests.

**Describe the solution you'd like**
```
    foreach(INSTFILE ${TGT${TGTID}_FILELIST})
      if(EXISTS ${MISSION_DEFS}/${TGTNAME}/${INSTFILE})
        set(FILESRC ${MISSION_DEFS}/${TGTNAME}/${INSTFILE})
      elseif(EXISTS ${MISSION_DEFS}/${TGTNAME}_${INSTFILE})
        set(FILESRC ${MISSION_DEFS}/${TGTNAME}_${INSTFILE})
      elseif(EXISTS ${MISSION_DEFS}/${INSTFILE})
        set(FILESRC ${MISSION_DEFS}/${INSTFILE})
      else()
        set(FILESRC)
      endif()
      if (FILESRC)
        get_filename_component(_resolvedFile ""${FILESRC}"" REALPATH)
        install(FILES ${_resolvedFile} DESTINATION ${TGT_NAME}/${INSTALL_SUBDIR} RENAME ${INSTFILE})
      else(FILESRC)
        message(""WARNING: Install file ${INSTFILE} for ${TGTNAME} not found"")
      endif (FILESRC)
    endforeach(INSTFILE ${TGT${TGTID}_FILELIST})
```

Something like that maybe?

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFE/issues/790
CFE_TBL_GetAddress() may return CFE_SUCCESS,"**Describe the bug**
The code is testing the return code for only `CFE_TBL_INFO_UPDATED`.  However the `CFE_TBL_GetAddress()` function may return `CFE_SUCCESS` as well, per the documentation and implementation.

**Expected behavior**
Either `CFE_TBL_INFO_UPDATED` or `CFE_SUCCESS` should be accepted as valid returns.

**Code snips**

https://github.com/nasa/sch_lab/blob/d0e21d20aee4c1b4cdf8de7cf3ea2bd7c41caffe/fsw/src/sch_lab_app.c#L184-L191

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sch_lab/issues/24
Sample app test doesn't end up in exe dir after make install,"**Describe the bug**
sample_app-sample_app-testrunner doesn't get ""installed""

**To Reproduce**
Steps to reproduce the behavior:
1. make SIMULATION=native ENABLE_UNIT_TEST=true prep; make; make install
2. ls build/exe/cpu1
3. find /. -name ""sample_app_sample_app-testrunner""

**Expected behavior**
Install should move all tests to install directory

**Code snips**
N/A

**System observed on:**
 - Hardware: cFS Dev 3
 - OS: Ubuntu 18.04
 - Versions: observed in refactored IC at skliper/ic-20200511-jh

**Additional context**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/81
CFE_TBL_Load returns CFE_SUCCESS when initially loading an incomplete image file (CFE_TBL_WARN_SHORT_FILE internally) ,"**Describe the bug**
During a `CFE_TBL_Load` call, the function is expected to return an error code if the loaded file was not complete (i.e. does not result in a complete image in memory).  

In this case, if the image started at offset 0, but had fewer bytes than required for a complete table), it triggers the `CFE_TBL_WARN_SHORT_FILE` status internally inside CFE_TBL_LoadFromFile, but then this gets overwritten to CFE_SUCCESS in CFE_TBL_Load, making the return value to the user seem like the table was fully loaded/valid.

**To Reproduce**
Call `CFE_TBL_Load()` on a table which has not been initially loaded with a partial data file.

**Expected behavior**
Should return an error not `CFE_SUCCESS`, because the table image is only half loaded.

**System observed on:**
Ubuntu

**Additional Context**
Found as part of scrub in #1724

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1861
"Convert or remove ""cfe requirements .docx""","**Is your feature request related to a problem? Please describe.**

`cfe requirements.docx` is not easily readable since it requires both a download and the user to have MS Word or equivalent installed. 

The document's purpose is ambiguous given the existence of `cFE_FunctionalRequirements.csv`. I've also seen some ""TBDs"" in the document hinting that there is some more work needed. 

**Describe the solution you'd like**

Various options

Add a readme to the docs directory that explains the different files. Additionally, replace`cfe requirements.docx` with Markdown or PDF


**Describe alternatives you've considered**
None

**Additional context**
None

",non-bug,https://github.com/nasa/cFE/issues/1571
Define toolchain via TGT<x>_SYSTEM in sample configuration,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFE/pull/630#issuecomment-617276365, cpu toolchain naming hack.

**Describe the solution you'd like**
Transition to defining the toolchain explicitly, eventually remove the hack support logic.

**Describe alternatives you've considered**
None

**Additional context**
#630 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/633
Comments/document cleanup relative to TBL/TIME review,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_Update`, `CFE_TBL_Validate`, and `CFE_TBL_DumpToBuffer` are all performed by `CFE_TBL_Manage` if there's a pending request.  Clarify in API documentation for all 4 (missing completely from `CFE_TBL_DumpToBuffer`).

s/Addresses/Address, this should cross reference, not self reference:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L472

Add short description of spacecraft time, it's number of seconds since the epoch as set in mission configuration
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L70

Self reference doesn't make sense:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L73-L75

There is no API to set or adjust leap seconds or SCTF, this should be done by ground command only:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L218-L219
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L240-L241

Now called by a timer, not PSP:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L708

HK command handler also sends the table registry packet (if requested) and dumps ""dump-only tables"" that are pending, document:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.h#L126-L127

s/issued/issues:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1266

Remove commented out verification check using sizeof from cfe_tbl_verify.h:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_verify.h#L76-L81

Remove pointless comment:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L714-L716

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1494
"Replace duplicated write to sys log, delay, panic pattern","**Is your feature request related to a problem? Please describe.**
Same pattern repeats many times:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L486-L496

**Describe the solution you'd like**
Reduce duplicated code.

**Describe alternatives you've considered**
May get removed per #1356 (would make this OBE)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1357
Scrub API's for null pointer checks,"**Is your feature request related to a problem? Please describe.**
All pointers should be checked for NULL prior to accessing, a few cases where this was observed have been fixed but need to do a complete scrub.

**Describe the solution you'd like**
Scrub and add any missing null pointer checks

**Describe alternatives you've considered**
None

**Additional context**
Use the new macros...

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/742
CFE SB Pipes not safe across multiple tasks,"**Is your feature request related to a problem? Please describe.**
Some ""worker"" software design patterns involve multiple threads reading from a common/shared work queue.

However due to the way SB buffers are managed, this is not currently possible with CFE child tasks and SB pipes.  The ""current"" (i.e. most recent) buffer is stored in the Pipe descriptor structure, and upon the next entry to `CFE_SB_ReceiveBuffer()` this function assumes that the last buffer stored in the Pipe descriptor can be freed.  But when multiple tasks are reading a single SB pipe, this model breaks, because only one buffer can be remembered.   The current buffer is likely still in use by the other task when the next worker thread calls

This necessitates some new APIs to actually make this work.  Each worker task will need to individually indicate to SB when it is actually done with the buffer, it can't rely on entry to to `CFE_SB_ReceiveBuffer()` to indicate this.

**Describe the solution you'd like**
_Short term fix:_ Just document that only one task may operate on a pipe ID at a given time.  App developers must externally sync their worker tasks to ensure this.

Recommendation would be to have one designated task (i.e. the main task) act as the delegater - it reads the SB pipe, identifies the request, and _copies_ the request data to an available worker thread.  After this it can get a new request from the SB pipe while the worker goes on.

_Longer term fix:_ Expose the SB buffer refcount increment/decrement routines separately in the public API, and decouple the previous buffer refcount decrement from `CFE_SB_ReceiveBuffer()`.  So each worker task can safely get a buffer from SB without inadvertently freeing any previous buffer that may be still in use by other worker tasks.  

However, this is an API change that would affect all apps, as they now must make a new/additional call into CFE_SB when they are finished with a buffer as `CFE_SB_ReceiveBuffer()` cannot not do that automatically.


**Describe alternatives you've considered**
Could feasibly have a task-based buffer record so that each CFE task will have its own ""slot"" so to speak, and thereby CFE_SB_ReceiveBuffer could free the previous buffer _from that task_ rather than having the single buffer associated with the pipe ID.

But this has weakness too- SB has to have a slot for every possible task whether it uses SB pipes or not.  It also means the only way to free your previous buffer is to call CFE_SB_ReceiveBuffer() again and get a new buffer.  So if the work is a long-running job it will ""own"" the buffer the entire time and prevent its re-use (and long-running jobs would likely be the reason for using a worker model in the first place)

**Additional context**
Found when reviewing race conditions in SB as part of #1073.  Supporting multiple threads reading the same pipe might be a nice to have but will have inherent race conditions with the current API design.  So to keep the API design as is for this cycle we will have to restrict this.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1079
"Test_CF_Chunks_Init_SetGiven_chunks_max_chunks_ToGiven_max_chunks creates object too large, crashes RTEMS","**Describe the bug**
The ""Test_CF_Chunks_Init_SetGiven_chunks_max_chunks_ToGiven_max_chunks"" test fails on RTEMS and crashes the kernel, because it creates an absurdly large structure on the stack and then memset()'s it to 0.  This appears to blow out the stack and probably overwrites some important structures.

**To Reproduce**
Execute CF tests on RTEMS

**Expected behavior**
Tests should pass

**Code snips**
https://github.com/nasa/CF/blob/c0b1f534c5e1b501b5585cc8cab27a5a38a19c92/unit-test/cf_chunk_tests.c#L1914-L1917

**System observed on:**
RTEMS 4.11.3 via QEMU/pc686

**Additional context**
Once again, appears to be related to use of random numbers ... when using a random number to indicate the size of an object, nothing good comes from that (see #86)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/CF/issues/164
Conditional compile macro uses wrong style of TRUE,"In ds_file.c  the line reading
    #if (DS_MOVE_FILES == TRUE)
causes the subsequent section of code to always compile if TRUE is not defined, and if DS_MOVE_FILES is defined; and DS_MOVE_FILES is required to be defined by compiler directives in ds_verify.c. Throughout the rest of ds code, the lower-case C keyword 'true' is used, i.e '#if (DS_MOVE_FILES == true ).
When DS_MOVE_FILES is not set to 'true' in ds_platform_cfg.h, the build fails because 'Movename' does not get defined in ds_table.h, and the code section in ds_file.c needs it to be defined.",bug,https://github.com/nasa/DS/issues/2
CFE_FS_Decompress infinite loop on truncated gzip file,"If CFS_FS_Decompress is given a truncated gzip file, it will enter an infinite loop in which it attempts to read more data from the file, gets nothing, and tries again. Discovered by accidentally attempting to have ES load a new compressed application (which we didn't know had been truncated), which led to ES getting stuck and an eventual watchdog reset.

The problem seems to be that running out of bytes in a gzipped file before decompression is finished is not considered an error. I can see how this might be intentional if it is expected that the file handle might be a stream that could present data after being emptied, but for the normal file use case I think it is a bug. Suggested fix by combining the two checks at line 309 of cfe_fs_decompress.c:

if ( State->insize == 0 ) return EOF;

if ( len == OS_FS_ERROR ) 
{
    State->Error = CFE_FS_GZIP_READ_ERROR;
    return EOF;
}

into one: 

if ((State->insize == 0) !|| (len == OS_FS_ERROR)) {
    State->Error = CFE_FS_GZIP_READ_ERROR;
    return EOF;
}

Recommend investigation if insize might temporarily hit 0 during a normal decompression.

Reported via email from Mike Stewart, mike@capellaspace.com
",bug,https://github.com/nasa/cFE/issues/298
vxworks OS_fsBlocksFree() misreports,"The vxworks OS_fsBlocksFree() can mis-report the free blocks value.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].",bug,https://github.com/nasa/osal/issues/111
Release prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- added standard Apache 2.0
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/29
ES comments need checked for consistency,"Lots of copy/paste type errors in ES. For example, after CFE_ES_IncrementTaskCounter() the comment says  /* End of CFE_ES_ExitChildTask() */",non-bug,https://github.com/nasa/cFE/issues/275
Implement single pattern for command handler returns,"**Is your feature request related to a problem? Please describe.**
- ES ignores command handler returns, just returns CFE_SUCCSS (increments counters within handler)
- EVS captures the return and increments appropriate counter as part of the main command processing routine
- TBL defines `CFE_TBL_CmdProcRet_t` but doesn't use it consistently, example:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.h#L311
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.h#L337-L338

**Describe the solution you'd like**
Utilize a consistent pattern.  Suggest using CFE_Status_t and defined error types.  This allows command handlers to use APIs and not need to convert error codes.

**Describe alternatives you've considered**
None

**Additional context**
Code review, also related to issue #921 to consistently use `CFE_Status_t`

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1527
Clean up unneeded UT assert compatibility logic,"The OSAL UT assert framework has a number of functions to act as a bridge or compatibility layer for historical CFE unit test cases.

With the current CFE these test cases should be fixed and therefore this compatibility code is no longer necessary.

This should be cleaned up as part of the next OSAL/CFE release set.",non-bug,https://github.com/nasa/osal/issues/226
Enable strict resource ID types with OMIT_DEPRECATED build option,"**Is your feature request related to a problem? Please describe.**
The build system has an ""OMIT_DEPRECATED"" option which currently turns off all legacy-compatibility code and switches to only providing the new/preferred methods for any API elements that have been changed in recent versions.

**Describe the solution you'd like**
As part of the OMIT_DEPRECATED option, we should enable `set(MISSION_RESOURCEID_MODE STRICT)` mode.  This mode uses type-safe definitions for all the different resource types, and prevents users from ""crossing"" different ID types (tasks, apps, etc) at compile time rather than compiling successfully but not running correctly.

**Additional context**
CI is already testing with OMIT_DEPRECATED on and off so it seems like a good fit to enable strict resource ID types too, the code will be tested in both backward-compatible mode and preferred/new mode.

This was prompted by having two independent PRs both breaking code by mixing ID with other values (one status code - ID mixup, and one a tableID - CDS ID mixup) in the same merge cycle.  This strict build option catches both.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1847
Did you close the forum,"Hi,
Did you close the forum or did we need an authorization to access? Thanks",non-bug,https://github.com/nasa/cFE/issues/15
"mcp750-vxworks PSP hardcodes core as ""cfe-core.o""","**Requested feature**
CFE_PSP_GetCFETextSegmentInfo fails if CFE_MODULE_NAME doesn't match what was run, currently hardcoded to ""cfe-core.o"".  Could make lookup more general so it wouldn't require hardcoded name.

**To Reproduce**
Steps to reproduce the behavior:
1. Build for vxworks, use core name other than cfe-core.o (cfe-core.exe)
2. Execute
3. Checksum of text segment will report as 0xFFFF due to failed moduleFindByName on hardcoded cfe-core.o

**Expected behavior**
Checksum should work

**Code snips**
See fsw/mcp750-vxworks/src/cfe_psp_memory.c lines related to CFE_MODULE_NAME

**System observed on:**
 - Hardware: MCP750
 - OS: VxWorks6.9
 - Versions 6.7 bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/PSP/issues/111
Ensure that return codes from PSP functions are checked,"In some circumstances the return code from PSP functions (e.g. CFE_PSP_GetResetArea) is either not checked or incorrectly checked.

Wherever the return code is checked, instead of specifically checking for an error code like so:
{{{
if (Status == CFE_PSP_ERROR)
{ 
   <handle error>
}
}}}

The code should check for non-success instead:
{{{
if (Status != CFE_PSP_SUCCESS)
{ 
   <handle error>
}
}}}

This will make it more future-proof to PSP implementations that might return more specific errors.
",non-bug,https://github.com/nasa/cFE/issues/60
Documentation Updates,"**Describe the bug**
1. In osapi-os-net.h, OS_SocketAccept lists addr as an [in] parameter where as it is an [out] parameter.  This is where a new connection's incoming address is stored as an output to the function call and is not an input to the function.
(File location: osal/src/os/inc/osapi-os-net.h)

2. In osapi-os-core.h, OS_TaskCreate notates  the input parameter ""stack_size"" as ""stack_size: the size of the stack, or 0 to use a default stack size"".   A 0 input here is not valid and should be appointed an appropriate stack size.  
(File location: osal/src/os/inc/osapi-os-core.h)

3. In osapi-os-filesys.h, OS_TimedRead/OS_TimedWrite.  While the documentation is clear that these functions are used primarily with sockets, it is unclear how a socket may be used as an input parameter.  The first input parameter ""filedes"" is notated as ""The handle ID to operate on"" but I think it would be prudent to add an additional comment to explain that this is also the socket ID.  Perhaps these two functions should also be defined with the rest of the network functions in (osal/src/os/inc/osapi-os-net.h) instead of with functions used for file operations (osal/src/os/inc/osapi-os-filesys.h) for further specified use and clarity.  It was not easily clear on how to send messages back and forth between a STREAM connection, as it is with DATAGRAM connections.
(File location: osal/src/os/inc/osapi-os-filesys.h)

**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Yasir Majeed Khan
NASA GSFC/Emergent Space
",non-bug,https://github.com/nasa/osal/issues/545
Printf test logs missing last character,"**Describe the bug**
In the CFE coverage tests, assertions for ""printf"" include the message format string being checked for, but it truncates the last character. For example:

```
[ PASS] 02.006 es_UT.c:724 - Printf generated: '%s: Startup Sync failed - Applications may not have all starte' (1) >  (0)
[ PASS] 02.007 es_UT.c:725 - Printf generated: '%s: Startup Sync failed - Applications may not have all initialize' (1) >  (0)
```

**To Reproduce**
Run ES coverage test, view logs

**Expected behavior**
Should include the full string, not cut off the last char.

**System observed on:**
Ubuntu

**Additional context**
Off by one error in the string processing

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1763
CFE TLM header needs update to correspond with CMD header,"Previous issue #297 made it so the CMD secondary header was always in a consistent byte order, such that the content is independent of the endianness of the machine which processes/generates the packet.

The submitted fix for this only changed the CMD header, leaving the TLM header alone.  

For consistency, the network byte order rule should be applied to the TLM header as well.

_Originally posted by @jphickey in https://github.com/nasa/cFE/issues/297#issuecomment-595435305_",non-bug,https://github.com/nasa/cFE/issues/628
elf2cfetbl internal filename/path length dependency on OSAL questionable,"Originated by abrown4 (68 on babelfish):

The internal filename/path length for the table files produced do NOT have to depend upon the OSAL. The OSAL OS_MAX_FILE_NAME limit is too restrictive. Need to use the PATH_MAX from linux/limits.h that is appropriate for the host.

JH - Suggest possibly checking size against OSAL and notify user when limit exceeded (but still allow to run as long as it meets PATH_MAX).",non-bug,https://github.com/nasa/elf2cfetbl/issues/5
"Add support for ""critical"" subscriptions (message must be sent or will return error)","**Is your feature request related to a problem? Please describe.**
Software bus currently returns success even if a message isn't sent to the subscribers (queue full or over message limit).  This causes the message to be dropped with no notification for the sender.

This spawned from the CF use case where notification is required to be able to eliminate the semaphore that is currently used for flow control.

**Describe the solution you'd like**
Add support for a subscription to be ""critical"".  On send, check that all critical destinations have room for the message, if not don't send to any destinations and return an error.  If every critical destination has room, send to all destinations.  All done within the SB lock.

For the CF use case, typically the receiver would dedicate a pipe with just that subscription and the individual msg limit check is sufficient (as long as it's smaller than or equal to the queue limit).

May make sense to transition QOS to a bitfield (currently an enum), supporting the subscription critical option.

**Describe alternatives you've considered**
See #918, #920 

**Additional context**
Discussed that CF should cap work per cycle (avoid free-run if unsubscribed, or no subscribers).  Also generate the message once, and retain to send next cycle if there is no room.

**Requester Info**
Jacob Hageman - NASA/GSFC (spawned from splinter on #920)",non-bug,https://github.com/nasa/cFE/issues/926
Uninitialized variable static analysis warning,"**Is your feature request related to a problem? Please describe.**
Uninitialized variable static analysis warning observed (license restricts publishing warnings)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/111
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1216
Combine initialized and shutdown flags into one,"**Is your feature request related to a problem? Please describe.**
The OSAL global state structure has two flags, one for ""initialized"" (set during OS_API_Init) and one for shutdown (set during OS_ApplicationShutdown).  Although similar in purpose, they are defined and work differently.

**Describe the solution you'd like**
Should combine these into just one state variable, which should be 0 prior to initialization (i.e. such that the application loader provided by the OS will zero it before OSAL loads), then set to a nonzero value for normal runtime, and another special nonzero value for shutdown.

**Additional context**
Just a suggestion for cleaning up/simplifying what is already there...

Structure defined here:
https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/os/shared/inc/os-shared-common.h#L40-L67.

Using a full 32 bit value with all bits - even though there are only a few states - provides protection in case of a random bit flip.  At least in the case of an application shutdown, the entire system operation shouldn't be dependent on a single bit in memory.  This is why the current ""shutdown flag"" is not just a simple 0/1.  So this should be preserved, but it should be trivial to combine this with the ""Initialized"" field.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/691
Race condition in new idmap tests,"**Describe the bug**
The `idmap-api-test` routine occasionally fails, because it creates one of its semaphores in a sub task, but does not actually wait for that sub task to run.

**To Reproduce**
Run idmap test, in particular a single core machine seems to reproduce it more reliably.

**Expected behavior**
Need to add a wait loop of some type in main task to make sure child task has executed.

**Code snips**
Task started here:
https://github.com/nasa/osal/blob/360438765d7eb83a9e7e15571cda89786f0d8330/src/tests/idmap-api-test/idmap-api-test.c#L106

Might want to employ a loop similar to what is done here to make sure the child task has executed:
https://github.com/nasa/osal/blob/360438765d7eb83a9e7e15571cda89786f0d8330/src/tests/osal-core-test/osal-core-test.c#L154-L159


**System observed on:**
CentOS 6.9 VM (single core)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/493
Unit tests need to link with UT_COVERAGE_COMPILE_FLAGS/UT_COVERAGE_LINK_FLAGS,"**Is your feature request related to a problem? Please describe.**
nasa/osal#404 cleans up the compiler flag management, and as part of this it exports two variables, UT_COVERAGE_COMPILE_FLAGS and UT_COVERAGE_LINK_FLAGS, rather than a single UT_C_FLAGS value.

**Describe the solution you'd like**
The unit tests need to use these variables, not UT_C_FLAGS.

**Additional context**
Needs to be included with the nasa/osal#404 merge.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/612
"OSAL PPC VxWorks ""test runner""","Independent of any other issues with building test code for
the PowerPC running VxWorks -- it appears that I will need
a small bit of ""helper code"" in order to make my testing
environment a little bit more robust.

Currently, running a unit test requires someone, by hand,
to do the following steps for each test:

- Observe the value of `(int)OS_BSPMain`
- issue `ld < testname.elf` command
- Watch out for any ''undefined symbol'' errors
- Verify that `(int)OS_BSPMain` changed
- issue `sp(OS_BSPMain)` command
- Monitor console output watching for the test to finish
- perhaps reboot the target if things went horribly wrong

Running the tests by calling `OS_BSPMain()` directly from
the shell introduces problems if the test program makes any
changes in the task that disturb the shell -- most notably,
if the task calls `exit()` all bets are off.

What I want in a ""test runner"" is to have code that supervises
loading of the program, detects any load errors, and assures that
the loaded image provides a suitable entry point. If all is
good, start the test as a subtask. The runner needs to then
wait for the task to complete, which unfortunately requires
it to periodically test to see if the task is still alive.

A nice thing to have for this sort of facility is a timeout,
which turns out to be pretty trivial given that we have to
drop into a polling loop. If we loop too long, we can kill
off the task and make appropriate log annotations.

The initial runner I envision is simply an image to be
loaded after the target boots, exporting a function that
does the work for one test, coupled with a script that
loads the image and calls the function for each test
to be run.

",non-bug,https://github.com/nasa/osal/issues/44
Remove impossible to reach (operationally) code,"**Is your feature request related to a problem? Please describe.**
OS_MutSemTake_Impl will block until this thread owns the mutex, check would require OS error:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-mutex.c#L214-L219

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/883
Write queue data does not truncate existing files,"**Describe the bug**
Discovered when testing CF_WRITE_QUEUE_CC command.  My test issued the command more than once, with the same target file name, but different type/queue parameters, to get the different content.  Noted that in cases where the second output was shorter than the first output, the old output remained in the file (stale data) at the end. 

This is because the call to OS_FileOpen() does not use the OS_FILE_FLAG_TRUNCATE flag, so the old data remains in the file, until it is actually overwritten.

**To Reproduce**
Run CF, run some transactions to get some history, then run CF_WRITE_QUEUE_CC with all types/all queues.
Then run CF_WRITE_QUEUE_CC again with the same output file, but a more specific type/queue parameter, so the output is smaller.
Observe that the old data from the first call is still at the end of the file, after the new entries - it was not truncated.

**Expected behavior**
In general any time a write file request is done, it should truncate the file, unless the requirement is specifically to preserve old data (i.e. append).  This is not an append, so it should truncate, and write the file from a clean slate.

**Code snips**
Problematic call to OS_OpenCreate is here (via wrapper):
https://github.com/nasa/CF/blob/d3ae3f9595033c7c4af4faffc4c4513c1a4b1aa5/fsw/src/cf_cmd.c#L705

However there may be other occurrences.  All calls to this function should be checked.

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/CF/issues/173
vxworks osapi.c OS_GetErrorName() missing codes,"OS_GetErrorName() is missing a few codes...

Error code not returned for OS_ERROR_ADDRESS_MISALIGNED
Error code not returned for OS_INVALID_SEM_VALUE
Error code not returned for OS_ERR_FILE
Error code not returned for OS_ERR_NOT_IMPLEMENTED
Error code not returned for OS_TIMER_ERR_INVALID_ARGS
Error code not returned for OS_TIMER_ERR_TIMER_ID
Error code not returned for OS_TIMER_ERR_UNAVAILABLE
Error code not returned for OS_TIMER_ERR_INTERNAL

Identified with #45 white-box coverage testing.",bug,https://github.com/nasa/osal/issues/105
"Remove gcov files, ITOS and ASIST directories",Cleaning of release for GitHub,bug,https://github.com/nasa/cFE/issues/320
Suppress format-truncation warnings,"**Is your feature request related to a problem? Please describe.**
It's only triggered when length limited *printf functions are used, and that's why we use them in the cFS context (to truncate as needed).

**Describe the solution you'd like**
Add `-Wno-format-truncation` to default flags, users can customize the flags as needed if they want to see these warnings.

**Describe alternatives you've considered**
Up to this point we've been implementing ways to suppress the individual warnings, but that just adds complexity where the point is to truncate when needed.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1097
Table type should be defined once in table header file,"**Is your feature request related to a problem? Please describe.**
SampleTable_t is defined in both sample_app_msg.h and sample_table.c

**Describe the solution you'd like**
Define sample_table.h, and include where needed.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/17
Remove design and obsolete VDD from codebase (these are release assets),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Design ppt and VDD doc are binary and challenging to manage within actual codebase with little benefit.  Updates to either should not impact codebase hash.

**Describe the solution you'd like**
Remove from codebase, provide as release assets

**Describe alternatives you've considered**
Transition design material to markdown would support better text-based management, and possibly create a pdf from it to provide as the release asset (and that PDF could still be updated without impacting codebase hash).  Or integrate the design material into the Doxygen users-guide (or both, since Doxygen can reference markdown), which generates a pdf as a release asset.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/275
Factor out construction of FullName in SB event messages,"**Is your feature request related to a problem? Please describe.**
`CFE_SB_GetAppTskName(TskId, FullName)` is called in virtually every API event message, example:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L235-L260

Note for the special case in `CFE_SB_DeletePipeFull` it currently overloads FullName with caller and owner.  Really should report both if there isn't a match.  Also FullName is referenced before initialized below, but not used...:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L378

**Describe the solution you'd like**
Construct FullName outside switch and use it.

**Describe alternatives you've considered**
Really there's inconsistent reporting in APIs (sometimes system log, sometimes events, unique message formats all over with differing info), would benefit from an overhaul.  See also #1403 and related issues (#994, etc) to fix.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1458
"Overloaded ""PacketID"" use in `CFE_EVS_PacketID`","**Is your feature request related to a problem? Please describe.**
PacketID means other things so it's a bit confusing in this context.

**Describe the solution you'd like**
Could be Signature, PktIdentity, EventSignature, EventContext, Context... suggest your own!

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1397
Update README_Functionaltest.md to include sample_app in startup script,"**Is your feature request related to a problem? Please describe.**
The cFE functional tests are dependent on the inclusion of sample_app for the successful execution of all tests.

**Describe the solution you'd like**
Include sample_app in the example startup script and explain that there is a dependency.

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/2353
Consolidate common patterns in SC,"Could reduce lines of code by using a loop for several common patterns in SC initialization.

Specifically the sequence of CFE_TBL_Register calls in SC_RegisterAllTables(), the sequence of CFE_TBL_GetAddress calls in SC_GetDumpTablePointers(), and the sequence of CFE_TBL_NotifyByMessage calls in SC_RegisterManageCmds().

Imported from GSFCCFS-1445",non-bug,https://github.com/nasa/SC/issues/4
Add os-impl-no-select.c for operating systems that do not have select (RTEMS 6 with network off),"**Is your feature request related to a problem? Please describe.**
RTEMS 6.x removes the legacy network stack by default, and in doing so, removes the ""select"" call. Now, when the OSAL OSAL_CONFIG_INCLUDE_NETWORK option is set to FALSE, the OSAL/cFS build fails because it still expects a select call.

**Describe the solution you'd like**
I have implemented a src/os/portable/os-impl-no-select.c file along with the corresponding changes to the CMakeLists.txt file that uses os-impl-no-select.c when the INCLUDE_NETWORK option is FALSE, otherwise it uses os-impl-bsd-select.c as usual.

**Requester Info**
Alan Cudmore / NASA GSFC / Code 582.0",non-bug,https://github.com/nasa/osal/issues/1248
Some GitHub Actions workflows not running in some branches and forks,"**Describe the bug**
Workflows only run in the `main` branch of a forked repo for submodules (and maybe the bundle as well)

**To Reproduce**
1. Create a new branch in nasa repo or fork
2. Push a change to the branch 
3. Observe GitHub Action Workflow dashboard and notice that workflows DO NOT run for your new branch

**Expected behavior**
Workflows should run for branches in forks and in nasa repo

**Code snips**
Probably due to this section in our workflows

```
on:
  push:
    branches:
      - main
  pull_request:
```

**System observed on:**
Ubuntu 18.04 (github workflows runner)

**Additional context**
Can be worked around by creating a pull request on your fork that targets the branch you're working on

**Reporter Info**
Full name and company/organization if applicable
",bug,https://github.com/nasa/cFS/issues/205
Remove depenedencies on SOFTWARE_BIG/LITTLE_BIT_ORDER,"Any usage of SOFTWARE_BIG/LITTLE_BIT_ORDER is an indicator of a problem area as code is ported to additional platforms.  Code should be written endian-neutral wherever possible.

The {{{SOFTWARE_BIG_BIT_ORDER}}} and {{{SOFTWARE_LITTLE_BIT_ORDER}}} are not reliable, as they assume this value based on the BSP type but that is not always correct.  For instance, the pc-linux BSP assumes SOFTWARE_LITTLE_BIT_ORDER but in fact that BSP is also fully applicable to big-endian platforms running linux as well.  Some architectures (MIPS, ARM, etc) have both big- and little- endian modes of operation which further invalidates this macro.  

In fact the C standard does not specify any portable way to determine endianness at //compile time//, however runtime checks using a union are fairly easy and reasonably portable where it is absolutely necessary to do something different.
",non-bug,https://github.com/nasa/cFE/issues/108
Replace character copy with memcpy in `CFE_FS_ExtractFilenameFromPath`,"**Is your feature request related to a problem? Please describe.**
Character copy performed in a loop instead of a memcpy:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L608-L616

**Describe the solution you'd like**
Memcpy.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1443
"Fix ""no return"" warning on CFE_SB_ReadQueue() function","This is not a ""real"" warning, but it is flagged by static code analysis in Eclipse that the CFE_SB_ReadQueue() function has no return statement.  Although there is no real code path that will //not// get to a return statement, static code analysis does not see that.

A trivial fix to consolidate the scattered return's into a single return at the end will get rid of this warning and make the code more readable.

",bug,https://github.com/nasa/cFE/issues/64
Add validation for returncode and fix bracket to standard,"**Is your feature request related to a problem? Please describe.**
Build with options : -Wall -std=c99 -pedantic -Wstrict-prototypes -Wwrite-strings
two warning appear:

/media/sf_share/cFS/tools/elf2cfetbl/elf2cfetbl.c:134:43: warning: missing braces around initializer [-Wmissing-braces]
 union Elf_Shdr SectionHeaderStringTable = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                                           ^
                                            {                            }
/media/sf_share/cFS/tools/elf2cfetbl/elf2cfetbl.c: In function ‘OpenSrcFile’:
/media/sf_share/cFS/tools/elf2cfetbl/elf2cfetbl.c:1357:9: warning: variable ‘RtnCode’ set but not used [-Wunused-but-set-variable]
     int RtnCode;
         ^~~~~~~

**Describe the solution you'd like**
First issues, add second bracket:
union Elf_Shdr SectionHeaderStringTable = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }};

second issue:
Add validation for return code.

**Requester Info**
Anh Van, NASA Goddard
",bug,https://github.com/nasa/elf2cfetbl/issues/17
Simplify Function Pointer Manipulations,"There are a number of places within the CFS Projects where the usage of Function Pointers is somewhat obfuscated by the inclusion of redundant operators. Removing those operators can improve the clarity of the code.

The redundancies are based on code that, when written, did not properly base itself on the following aspects of Function Pointers in the C programming language.

1. Function names decay into Function Pointers in the same way
   that Array names decay into pointers to their first elements,
   which means that an `&` operator is redundant when setting a
   pointer to point at a function. For the classical example of
   this, see most `qsort` examples, where no `&` is applied to
   the comparison function when passing it as the last argument,
   which has type ''pointer to function...''

2. The function call operator `(`''args''`)` operates on a
   function pointer -- so every function call you see actually
   is invoking the above decay semantics. This means that
   the `*` operator is ''not'' needed when calling a function
   via a function pointer. Happily, this also often means that
   you also do not need an extra level (or two?!) of parentheses
   to asure that the `*` is applied to the function pointer and
   not to the return value.

3. Calling a function pointed to by a structure member is a
   very common operation, and with the above in mind, note that
   there is no parsing or evaluation order ambiguity; no extra
   parentheses are required to assure that `.` and `->` and the
   function call operator are evaluated in the proper order.

My task -- embodied in this ticket -- is to seek out cases in
the PSP source code where redundant operations are applied
to function pointers (at assignment sites ''and'' at call sites),
and provide recommended changes to improve clarity.

Specific examples will accumulate in the Comments below.

Ticket to be closed when my scan of the project is complete,
and all call sites have been resolved (whether the resolution
is to improve them now, file a ticket for later improvement,
or where we will be leaving the code unchanged).

''(This also makes the code robust against the rare but troublesome
case where an external function changed from a function to
a function pointer ... we may never do this, but it is always
good to foster good code hygene.)''",non-bug,https://github.com/nasa/PSP/issues/46
Extend cFE Service Identifier in error codes,"**Is your feature request related to a problem? Please describe.**
cFE Service Identifier is limited to 8 unique values which are fully subscribed:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_error.h#L66-L75

Means new modules need to overload existing service identifiers:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_msg_api_typedefs.h#L40-L43

**Describe the solution you'd like**
Add one more bit.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1445
Add documentation build to submodule github actions workflow,"**Describe the solution you'd like**
Build cFE documentation at the component level instead of waiting for a bundle-level build

This ensures we catch doxygen errors in individual PRs as opposed to having to fix them after the PR is merged

**Describe alternatives you've considered**
Have users check their PRs manually

**Additional context**
See documentation build example in bundle

",non-bug,https://github.com/nasa/cFE/issues/1199
UT checking calls to OS_printf,"**Is your feature request related to a problem? Please describe.**
Many unit tests are checking the calls to `OS_printf()`.  But typically all syslog/printf type messages are not fulfilling any sort of requirements, they are just informational in nature.  

So AFAIK there isn't really a strong justification to specifically check for certain syslog messages, but the fact that the UT does check for these means that any time the syslog messages are changed or refactored in any way, one gets a bunch of nuisance UT failures.  As a result we spend a lot of time fixing UT tests for things that aren't really relevant to the operation of the code.

**Describe the solution you'd like**
At least remove checks for number of times `OS_printf()` was called in a given path.  This is really quite irrelevant to pass/fail. 

The `UT_PrintfIsInHistory` tests might be OK to keep, but an actual return code should be preferred.  If there is no return code then this is probably OK - its also less volatile because it just checks format string and confirms that a specific path was taken.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/955
can't run unit tests,"**Describe the bug**
I can build and run the application, but when I try to run unit tests I am told ""no tests were found"".  Probably I am not following instructions properly, some parts seem a little vague to me.

**To Reproduce**
After setup, I followed the instructions in ""Build and Run"" which were

make SIMULATION=native prep
make
make install
cd build/exe/cpu1/
./core-cpu1

and I got results that looked reasonable.   The instructions then said ""Unit tests can be added with ENABLE_UNIT_TESTS=true, run with make test, and coverage reported with make lcov.""

So, I tried ""make SIMULATION=native ENABLE_UNIT_TESTS=true prep"" followed by 

make
make test

and also just ""make ENABLE_UNIT_TESTS=true prep"" followed by 

make
make test

I guess the instructions are not clear to me.   (I tried another few combinations, too, but these seemed the most reasonable).
**Expected behavior**
A clear and concise description of what you expected to happen.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware
 - OS: [e.g. Linux 4.4]
 - Versions [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps]

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFS/issues/157
cFE TBL - Table Name Arrays Incorrectly Sized,"cFE TBL provides internal macros for appropriately sizing table names.  Table names are a concatenation of the AppName, delimiter, and TblName i.e. ""AppName.TblName"".  The size of the character array holding the table name needs to fall on a 4-byte boundary in support of the TBL registry.  The table names sent down in telemetry need to be sized accordingly using the CFE_TBL_MAX_FULL_NAME_LEN macro vs. the CFE_MISSION_TBL_MAX_NAME_LENGTH macro which is used to compute CFE_TBL_MAX_FULL_NAME_LEN.  

For reference, the internal table name length macro computations (defined in cfe_tbl.h) include:

/* Computation for maximum length allowed for a table name.  NOTE: ""+2"" is for NULL Character and ""."" (i.e. - ""AppName.TblName"") */
#define CFE_TBL_MAX_FULL_NAME_LEN_COMP (CFE_MISSION_TBL_MAX_NAME_LENGTH + OS_MAX_API_NAME + 2)

/* Ensure the table name falls on a 4-byte boundary */
#define CFE_TBL_MAX_FULL_NAME_LEN (((CFE_TBL_MAX_FULL_NAME_LEN_COMP + 3)/4)*4)

   ",bug,https://github.com/nasa/cFE/issues/242
Resolve cppcheck redundantAssignment failure,"**Is your feature request related to a problem? Please describe.**
Running -
```
cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style --suppress=variableScope --inconclusive --quiet src/bsp src/os 2>cppcheck_flight_osal.txt
```
Results in - 
```
[src/os/shared/src/osapi-idmap.c:753] -> [src/os/shared/src/osapi-idmap.c:765]: (style) Variable 'objtype->table_owner' is reassigned a value before the old one has been used.
```

**Describe the solution you'd like**
Resolve

**Describe alternatives you've considered**
None

**Additional context**
travis CI no longer running on main repo

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/730
Add option to send `CFE_TBL_NO_SUCH_TABLE_ERR_EID` event from `CFE_TBL_FindTableInRegistry`,"**Is your feature request related to a problem? Please describe.**
Repeated pattern in TBL to find a table and if not found send the same event:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L385-L392
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L678-L682
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L947-L951
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1027-L1031
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1315-L1319
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1457-L1461

**Describe the solution you'd like**
Optionally (if needed) send event in `CFE_TBL_FindTableInRegistry`

**Describe alternatives you've considered**
Other refactoring as suggested in #1504

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1528
Align all software bus message definitions,"**Is your feature request related to a problem? Please describe.**
As an extension to the changes in issue #666/pull #678, the same paradigm should be applied to all other message definitions.  This is currently only working ""by chance"" in that the payloads already contain a uint32 (or larger) value so it is already aligned.

**Describe the solution you'd like**
Change the header structure which is currently defined as a `uint8 []` array into either CFE_SB_CmdHdr_t or CFE_SB_TlmHdr_t so it will be correctly aligned.

**Additional context**
It is safe to assume all remaining message types were already 32-bit aligned because there were no remaining compiler warnings about this, which means this change by itself will not have any effect on the existing message sizes or alignment.

However, when moving to a 64-bit build it may become necessary to enforce 64-bit alignment rather than 32-bit alignment for `CFE_SB_Msg_t` and in that case, the sizes and padding may change from what it currently is.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/689
CFE_SB_GetMsgTime() and CFE_SB_SetMsgTime() do not handle byte-swapping on _EL platforms,"Assuming CCSDS telemetry packet secondary header timestamps should be big-endian format, on little endian platforms (when _EL is defined), CFE_SB_SetMsgTime and CFE_SB_GetMsgTime should swap bytes for proper time interpretation.",bug,https://github.com/nasa/cFE/issues/92
Doxygen cleanup and convert from `mainpage` to front page concept,"**Is your feature request related to a problem? Please describe.**
See nasa/cfe#2055

**Describe the solution you'd like**
Replace mainpage with a front page and refactor.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC per project request

Ping @jia-j-lin
",non-bug,https://github.com/nasa/osal/issues/1227
Overrun warning false alarm for CFE_MSG_Message_t ,"**Describe the bug**
Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 19 using argument 20UL.

**Expected behavior**
Fix overrun

**Code snips**
https://github.com/nasa/sample_app/blob/d009197df721af1f430d173584fa64a507a94a13/fsw/src/sample_app.c#L166-L167

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/sample_app/issues/158
"Where is the ""Main Loop"" in cFS?","Hello everyone,

I am trying to calculate the loop time for cFS for future debugging purposes. 

If anyone could let me know where the main loop for cFS exists, I would appreciate it!

Thank you, 

Evan Fitzgerald",non-bug,https://github.com/nasa/cFS/issues/111
Refactor CFE_ES_AppCreate and CFE_ES_LoadLibrary,"These functions actually perform 3 major operations:

* Calling `OS_ModuleLoad` to load the module

* Calling `OS_SymbolLookup` to find the entry point / init function and calling that entry point / init function.  (For apps this also involves `OS_TaskCreate` here whereas a library init function is called directly)

* Manipulate the internal CFE ES Global tables to store the data related to the application/library


These major functional items should be broken into separate functions.  This will make `CFE_ES_AppCreate` and `CFE_ES_LoadLibrary` much cleaner looking and remove the overloads needed to support static loading as in ticket #115.




",non-bug,https://github.com/nasa/cFE/issues/173
"Mark empty slots with invalid msgid, and don't try to unsubscribe all on them","**Is your feature request related to a problem? Please describe.**
Unsubscribe all currently loops through the entire table unsubscribing, including the MSGID 0x0's (which is a valid MSGID).  This causes numerous errors:
```
EVS Port1 66/1/CFE_SB 12: Unsubscribe Err:No subs for Msg 0x0 on TO_LAB_TLM_PIPE,app TO_LAB_APP
```

**Describe the solution you'd like**
Mark as invalid, skip invalid

**Describe alternatives you've considered**
Keep a count

**Additional context**
Observed in fixing #71

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/72
Typo in RTEMS binsem.c Variable Name,"
https://github.com/nasa/osal/blob/27c24693c02b3800e8c95a5b6a44cb1c56451b6b/src/os/rtems/src/os-impl-binsem.c#L249

I believe the line is meant to read the following:

`if (OS_Milli2Ticks(msecs, &TimeInTicks) != OS_SUCCESS)`
",bug,https://github.com/nasa/osal/issues/613
CFE_ES_CopyModuleAddressInfo not working ,"**Describe the bug**
When getting the app info, the AddressesAreValid is false. That field is set by CopyModuleAddressInfo when it's Return code is not OS_SUCCESS. 

**To Reproduce**
Steps to reproduce the behavior:
Call CFE_ES_GetAppInfo 
See that AddressesAreValid are set to false. 

**Expected behavior**
It shouldn't be setting them to false. 

**System observed on:**
Ubuntu 20.04

**Additional context**
When called on an external app the return code is successful but AddressesAreValid is still 0. 
When called on a core app the return code it -16 Invalid ID

**Reporter Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1249
CMake support for elf2cfetbl usage,"The current CMake support structure does not include support
for the old style CFE Tables -- that is, where the table is
embodied in a source file within the application, which is
compiled with the application headers (as well as headers
from CFE, OSAL, and so on), and which is then converted from
the ELF Object File format into a TBL file.

Asking each project that wants to convert to CMake to independently
work out how to get the files compiled then converted is asking for
a significant duplication of effort -- as this turns out to be
something more than a couple easy lines of Make scripting. It is more
reasonable for us to work it out once, and provide a solution that
projects can use (or adapt) as desired.
",non-bug,https://github.com/nasa/cFE/issues/79
Replace magic number in `CFE_FS_WriteHeader` with `CFE_FS_FILE_CONTENT_ID`,"**Is your feature request related to a problem? Please describe.**
Magic number:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L195-L196

**Describe the solution you'd like**
There's already a define, use it:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_fs_extern_typedefs.h#L53

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1441
Integrate JSC audit of parameter and return code checking,"Originally part of trac #45 and split off for CCB review purposes.

JSC has done an audit of input parameter checking and intermediate return code checking and added multiple checks/returns.

Primarily affects vxworks6 but some posix code was touched as well.",bug,https://github.com/nasa/osal/issues/135
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Is your feature request related to a problem? Please describe.**
Automatic generation of doxygen documentation fails at latex make step, hangs up at `?` error prompts.

**Describe the solution you'd like**
Resolve via simplifying the dox source files

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2142
Uninitialized string copy if move location is empty,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Pathname is only set when move is not empty, but the copy is done outside that condition:
https://github.com/nasa/DS/blob/733b2b269011882c6e1d159bf7c51037f652a405/fsw/src/ds_file.c#L891-L906
https://github.com/nasa/DS/blob/733b2b269011882c6e1d159bf7c51037f652a405/fsw/src/ds_file.c#L968

**To Reproduce**
Produce the packet with move empty

**Expected behavior**
Only copy over if Pathname was set

**System observed on:**
Observed, also flagged by static analysis

**Additional context**
Introduced with file complete tlm packet updates - #39, so doesn't impact draco-rc2

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/DS/issues/48
Autogenerate UtAssert documentation,"**Is your feature request related to a problem? Please describe.**
UtAssert headers have doxygen style comments but aren't included in any of the current documentation generation paths.

**Describe the solution you'd like**
Either add a unique doxygen UtAssert users guide or add to an existing document.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1123
Add reference to skeleton_app in README,"**Is your feature request related to a problem? Please describe.**
Skeleton app added, missing reference in readme

**Describe the solution you'd like**
Add reference

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/68
Apply latest contributor license agreements,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Updated contributor license agreements and adds links in the pull request template to these contributor license agreements.

**Describe the solution you'd like**
Update

**Additional context**
None

**Requester Info**
Justin Figueroa, ASRC Federal
",non-bug,https://github.com/nasa/cFS/issues/450
"ES uncovered branch in CFE_ES_TaskEntryPoint, conditions not independent (defensive code)","**Is your feature request related to a problem? Please describe.**
Uncovered branch since RealEntryFunc always != NULL when CFE_ES_GetTaskFunction returns CFE_SUCCESS:
```
     561                 :          4 : void CFE_ES_TaskEntryPoint(void)
     562                 :            : {
     563                 :            :     CFE_ES_TaskEntryFuncPtr_t RealEntryFunc;
     564                 :            : 
     565 [ +  + ][ +  - ]:          4 :     if (CFE_ES_GetTaskFunction(&RealEntryFunc) == CFE_SUCCESS && RealEntryFunc != NULL)
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_apps.c#L561-L565

**Describe the solution you'd like**
If  CFE_ES_GetTaskFunction was stubbed this could be exercised (or alternate implementation).  These are both internal functions so really doesn't require a NULL check.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1925
Use consistent type for EventID,"**Is your feature request related to a problem? Please describe.**
EventID is defined as `int16` and `uint16`, examples:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L311
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L379

**Describe the solution you'd like**
Use a consistent definition.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1435
Apply standard naming convention (TO_LAB...),"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/to_lab/blob/c20250e6fc7ab51cbd9f82329a25be31193cd6a3/fsw/src/to_lab_app.c#L62
https://github.com/nasa/to_lab/blob/c20250e6fc7ab51cbd9f82329a25be31193cd6a3/fsw/src/to_lab_app.c#L94
https://github.com/nasa/to_lab/blob/c20250e6fc7ab51cbd9f82329a25be31193cd6a3/fsw/src/to_lab_app.c#L133

**Describe the solution you'd like**
Apply standard pattern (TO_LAB...)

**Describe alternatives you've considered**
None.

**Additional context**
Requires update to entry point in startup script (nasa/cFE)

**Requester Info**
Jacob Hageman",non-bug,https://github.com/nasa/to_lab/issues/67
Either FM unit testing is incorrect or an OSAL enumeration is incorrect,"**Describe the bug**
I don't know if this an FM bug or an OSAL bug.  I don't know what the intent on either side was.  FM is failing unit tests.  The first error indicates before OSAL 5.0.3-bv, FM determined if a directory entry was a directory by using the S_IFDIR macro directly, but had an #ifdef that allowed it to use an OSAL defined macro instead.  

```
#ifdef OS_FILESTAT_ISDIR
            if (OS_FILESTAT_ISDIR(FileStatus))
#else
            if (S_ISDIR(FileStatus.FileModeBits))
#endif
```

With OSAL 5.0.3-bv, the OS_FILESTAT_ISDIR macro is defined and FM is using the OS_FILESTAT_ISDIR macro.  The unit test sets the FileStatus.FileModeBits to 0040000 (0x4000), but the OS_FILESTAT_ISDIR tests equality against OS_FILESTAT_MODE_DIR (0x10000) so the unit tests fail.  I don't know if the OSAL developer intended to use the value expected by FM (0x4000), or if the FM should be:

from:
`filestats->FileModeBits = S_IFDIR;`

to:
```
#ifdef OS_FILESTAT_ISDIR
    filestats->FileModeBits = OS_FILESTAT_MODE_DIR;
#else
    filestats->FileModeBits = S_IFDIR;
#endif
```

Making the change above fixes these errors, but so does changing the enumeration from:
OS_FILESTAT_MODE_DIR =   0x10000
to
OS_FILESTAT_MODE_DIR =   0x4000

**To Reproduce**
Steps to reproduce the behavior:
1. Build FM unit tests with the ut_assert, hooks, and stubs from cFE 6.5.0a
2. Run FM unit tests

**Expected behavior**
FM unit tests should pass.

**System observed on:**
 - VirtualBox
 - Ubuntu 16.04
 - FM 2.5.2, OSAL 5.0.3-bv, app ut_assert, hooks, and stubs from cFE 6.5.0a

**Reporter Info**
Mathew Benson
Windhover Labs, LLC
mbenson@windhoverlabs.com
",bug,https://github.com/nasa/cFS/issues/104
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/82
Report error and use exit(1) for errors and exit(0) for success,"**Is your feature request related to a problem? Please describe.**
Reporting same exit code for error and success, doesn't include error information (strerror)

General pattern supports scripting/failure reporting.

**Describe the solution you'd like**
exit(0) for success, exit(1) for errors, use strerror when reporting for all error cases

**Describe alternatives you've considered**
None

**Additional context**
#39 discussion

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/tblCRCTool/issues/40
Deprecate OS_open and OS_creat,"**Is your feature request related to a problem? Please describe.**
For historical/backward compatibility reasons, the API of these two functions doesn't follow the typical flow.  Rather than providing a `uint32` ID output buffer as the first argument with a separate int32 return code, they return the OSAL ID cast as an `int32` on success.  For these functions, the caller is expected to check if the result is negative, and if so, consider it an error code.  Whereas if it is non-negative, the caller is expected to cast it back to a `uint32` type and interpret it as an OSAL ID.

**Describe the solution you'd like**
These should be like all other OSAL APIs and pass back the ID separately from the return/error status.

**Describe alternatives you've considered**
Leave as is.  But these two functions present a challenge when making a distinct type for OSAL IDs .

**Additional context**
In the current implementation,. these are just compatibility wrappers anyway.  They both call `OS_OpenCreate()` internally, which provides both open (existing file) and creat (new file) based on the flags it was passed.  The `OS_OpenCreate` function _does_ follow the correct pattern so one option would be to just expose this to the public API.

The other option is to create a new version of OS_open and OS_creat which follow the correct pattern.  But in order to provide a transition they would have to use different names.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/556
Build broken on RTEMS 4.11,"**Describe the bug**
A recent change has broken the build for RTEMS (again).  These are printf format warnings.

```
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c: In function 'TestSelectSingleRead':
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c:321:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'uint32' [-Werror=format=]
     UtAssert_True(StateFlags == 0, ""OS_SelectSingle() (%d) == None"", StateFlags);
     ^
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c:331:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'uint32' [-Werror=format=]
     UtAssert_True(StateFlags == OS_STREAM_STATE_READABLE, ""OS_SelectSingle() (%d) == OS_STREAM_STATE_READABLE"",
     ^
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c: In function 'TestSelectSingleWrite':
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c:436:9: error: format '%d' expects argument of type 'int', but argument 6 has type 'uint32' [-Werror=format=]
         UtAssert_True(StateFlags == 0, ""OS_SelectSingle() (%d) == None"", StateFlags);
         ^
```

Appears to be added by PR #683 ....

**To Reproduce**
Build for RTEMS 4.11 per instructions and default config.  Build fails.

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 20.04 as build host for RTEMS 4.11.3 / pc686 BSP.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/699
Improve cppcheck configuration for CFE,"The initial level of support for ""cppcheck"" within the CFE build plan is a simple implementation using default checking, widened to maximize coverage but not otherwise tuned.

While any individual mission or project using CFS may decide to do this work, this is only mildly in their direct interest, but it is very much in the interest of the CFS Community as a whole that it gets done.

We can make cppcheck more useful, both for checking the CFE core applications themselves and for checking code that uses them, by setting up a configuration file that tells cppcheck as many details as possible about the intended interfaces. For example:

- indicating functions that acquire and release resources so that cppcheck can attempt to report failures to release a resource; this is not just memory allocation but includes lock aquisition and anything else managed using one function to acquire (or open or connect ...) and another to release (or close or disconnect).

- indicating where a function requires that a pointer, passed as a function parameter, must point to initialized memory, so that cppcheck can report things like ""trying to strcopy where the source array has not been initialized.""

There are other details we can also express in the cppcheck library configuration file, generally of flavor similar to the above.
",non-bug,https://github.com/nasa/cFE/issues/149
CFE_ES_ProcessCoreException() is not interrupt-safe,"The CFE_ES_ProcessCoreException() architecture needs to be re-examined.  

This is the equivalent of an interrupt handler and likely triggered as the result of a hardware interrupt.  However the implementation calls other CFE_ES functions, some of which take the global data mutex (CFE_ES_LockSharedData), do console output (CFE_ES_WriteToSyslog and other functions which ultimately do printf), or call OS_TaskDelay.  

All of these operations are unsafe to do in an interrupt context on most platforms.

This may not be an issue if the end-result of the exception is a processor reset, which is probably the only safe thing to do.  Although the option to restart the task does exist, the system may be too far gone after this.

",bug,https://github.com/nasa/cFE/issues/76
Update copyright and license for open source cFS framework (dev branch),Update/add copyright and license to Apache 2.0,bug,https://github.com/nasa/cFE/issues/319
read failures are not handled,"**Is your feature request related to a problem? Please describe.**
There's a coercion alters value static analysis warning on for readSize:
https://github.com/nasa/tblCRCTool/blob/b02864ba56b12e00ab152225e3e8f9d6c039d48c/cfe_ts_crc.c#L136-L137

**Describe the solution you'd like**
Handle an error from read

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/tblCRCTool/issues/36
Unit tests fail to build when MESSAGE_FORMAT_IS_CCSDS_VER_2 is enabled,"**Describe the bug**
Unit tests fail to build when MESSAGE_FORMAT_IS_CCSDS_VER_2 is enabled

**To Reproduce**
Enable MESSAGE_FORMAT_IS_CCSDS_VER_2 in `*mission_cfg.h`
Run `make CFLAGS=""-m32 -Wno-format"" SIMULATION=native ENABLE_UNIT_TESTS=true` 

**Expected behavior**
Compilation succeeds, however build actually fails due to missing `#include`

**Code snips**
This can be fixed by doing the following 
```
--- a/fsw/cfe-core/ut-stubs/ut_sb_stubs.c
+++ b/fsw/cfe-core/ut-stubs/ut_sb_stubs.c
@@ -34,6 +34,8 @@
 */
 #include <string.h>
 #include ""cfe.h""
+#include ""cfe_platform_cfg.h""
+#include ""../sb/cfe_sb_msg_id_util.h""
 #include ""utstubs.h""
```
However, subsequently a checksum error is encountered when running the tests.
This was worked around by doing the following, but unsure if the workaround is correct.
```
--- a/fsw/cfe-core/unit-test/sb_UT.c
+++ b/fsw/cfe-core/unit-test/sb_UT.c
@@ -9456,7 +9456,7 @@ void Test_CFE_SB_ChecksumUtils(void)
 #ifndef MESSAGE_FORMAT_IS_CCSDS_VER_2
     ExpRtnFrmGet = 0x2f;
 #else
-    ExpRtnFrmGet = 0x65;
+    ExpRtnFrmGet = 0x61;
 #endif

     /* Validation expected to return true */
```

**System observed on:**
 - Hardware: N/A
 - OS: RHEL7
 - Versions cFE 6.7.12

**Reporter Info**
John N Pham, Northrop Grumman",bug,https://github.com/nasa/cFE/issues/618
Input file Description/TableName without terminator causes segfault,"**Describe the bug**
Segfault at:
https://github.com/nasa/elf2cfetbl/blob/8e54e26f24419e0218587574ec717106937e59fe/elf2cfetbl.c#L2379

Likely also an issue with TableName:
https://github.com/nasa/elf2cfetbl/blob/8e54e26f24419e0218587574ec717106937e59fe/elf2cfetbl.c#L2412

**To Reproduce**
Steps to reproduce the behavior:
1. Create a table input file with a 32 byte description (no null terminator)
2. Run elf2cfetbl

**Expected behavior**
Error or warn/truncate.

**Code snips**
See above

**System observed on:**
 - Versions: Master bundle

**Additional context**
Identified by JSC

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/elf2cfetbl/issues/43
"CF_UnionArgs_Payload_t elements dword and hword not used, union not necessary","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
dword and hword are not used in the `CF_UnionArgs_Payload_t` union, only byte:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_msg.h#L159-L169

**Describe the solution you'd like**
Remove unnecessary union

**Describe alternatives you've considered**
`CF_UnionArgsCmd_t` is somewhat out of family in that it specifies unnecessary payload elements for some of the commands.  The only common benefit seems to be byte 0 which is channel, supporting all channels generically with 255.  Consider untangling all the layers of abstraction and go back to simple command processing.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/288
Update cFE Application Developers Guide (2 comments),"**Describe the bug**

The cFE Application Developers Guide section 5.5 references the cFE Deployment Guide.  Please include the deployment guide or remove the reference.

The cFE Application Developers Guide section 4.1.3 states:
""Child Tasks can only execute at a priority equal to or less than the priority of the Application's Main Task."" which several folks have said is not true.  It's not true in CFE 6.6.x.


**Reporter Info**
Dan Berry / NASA GSFC",non-bug,https://github.com/nasa/cFE/issues/1033
elf2cfetbl crashes when destination file not found,"Originated by Thadeus (65 on babelfish):

When the destination filename cannot be found in the table object file, the destination object file is not opened. However, the FreeMemoryAllocations function unconditionally calls fclose on its pointer, which segfaults when it is NULL. Initializing both file pointers to NULL and checking them before calling fclose prevents the segfault.

[0001-Prevent-a-segfault-in-elf2cfetbl.txt](https://github.com/nasa/elf2cfetbl/files/3322545/0001-Prevent-a-segfault-in-elf2cfetbl.txt)
",bug,https://github.com/nasa/elf2cfetbl/issues/3
Add C++ Support in PSP Header Files (GSFC DCR 22017),"To support C++ based applications, the PSP header files need to have the following code:

In the beginning of each header file:

#ifdef __cplusplus
extern ""C"" {
#endif

At the end of each header file:

#ifdef __cplusplus
}
#endif",non-bug,https://github.com/nasa/PSP/issues/74
Scrub cppcheck warnings in OSAL dev branch,"The bamboo continuous integration server runs cppcheck static analysis on every build.  This ticket is for tracking any small/minor fixes to address concerns brought up by this tool.

Nothing here should change any functionality.  (Anything bigger than a simple one or two-liner should probably have its own ticket for tracking).",bug,https://github.com/nasa/osal/issues/227
Refactor `CFE_FS_SetTimestamp` and eliminate typo,"**Is your feature request related to a problem? Please describe.**
There's a typo in one of the syslogs:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L275

Also could just write the time structure instead of seconds and then subseconds:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L262-L281

**Describe the solution you'd like**
Write time structure, one syslog with an updated message.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1442
cTBL6000.1 requirement failure - no partial table load field in header,"Current requirement verbiage: If the Command specified file's header indicates that the file contains only a portion of the Table, the cFE shall first load an Inactive Table Image with the contents of the Active Table Image and then load the contents of the Command specified File.

There is no field in the header that specifies if a table is a partial load.  The software detects the partial load and handles it appropriately. 

**Describe the solution you'd like**
We should update the verbiage or consider combining with cFE-304 (cTBL6000.4).

**Requester Info**
Dan Knutsen
NASA/Goddard
",non-bug,https://github.com/nasa/cFE/issues/942
Add system-specific module and library suffixes to configdata struct,"**Is your feature request related to a problem? Please describe.**
There are a number of use cases where the FSW could be improved if it knows the proper system-specific extension to use for modules and executable files.

See existing issues #611 and nasa/PSP#111 

**Describe the solution you'd like**
Should add this information to the `GLOBAL_CONFIGDATA` structure, to make it available for PSP/CFE purposes.

**Describe alternatives you've considered**
Could also be provided in the `GLOBAL_PSP_CONFIGDATA` structure that resides in the PSP library, but this would require explicitly setting in each PSP.  

Because CMake already knows this information and its readily available in CMake variables, its simpler and probably more reliable to just put it in the top level config struct based on the CMake value.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc., (based off previous requests in other tickets)
",non-bug,https://github.com/nasa/cFE/issues/940
Add an explanation of the message ID's used by ECI,"Since ECI expects certain macro's to be defined for the system to work, these macro names should be added to the documentation. Currently, there is a reference that needs to link to this page in the doxy branch.",non-bug,https://github.com/nasa/ECI/issues/31
Lengthen allowable unit test names,"**Describe the bug**
Not sure if it is a bug, but why is the TestName length based upon OS_MAX_API_NAME*2 in utglobal.h?


**To Reproduce**
Steps to reproduce the behavior:
1. Write a unit test with a name longer than OS_MAX_API_NAME*2
2. Run tests and see that the test name is truncated

**Expected behavior**
Provide enough space for long (descriptive) test names.

**Code snips**
https://github.com/nasa/osal/blob/8cfd6fe71a5506be8e463f26d92441785fd3e242/ut_assert/src/utglobal.h#L53
   
    char    TestName[OS_MAX_API_NAME*2];

**System observed on:**
 - PC 
 - RHEl 7.6
- current 'master' branch

**Additional context**
This is only an issue because I use long descriptive test names.

**Reporter Info**
Alan Gibson
GSFC, Code 587
",non-bug,https://github.com/nasa/osal/issues/553
"Typos in documentation, print statements, and comments","**Is your feature request related to a problem? Please describe.**
Found multiple typos throughout the codebase

**Describe the solution you'd like**
Correct grammar and spelling errors

**Describe alternatives you've considered**
None

**Additional context**
Retroactive Issue for #1915
",non-bug,https://github.com/nasa/cFE/issues/1946
Remove OSAL deprecated code for next release,"**Is your feature request related to a problem? Please describe.**
Now that the ""5.1.x"" release branch has been created, the next release should remove all code/functions that are currently marked as deprecated.

**Describe the solution you'd like**
Removal of all code currently contained within an `OMIT_DEPRECATED` conditional compile switch.

**Additional context**
The removal only applies to ""main"" branch - not the 5.1.x release branch, where it will continue to exist for that release series.  This assumes the next release (main) will become version 6.0.

There are other changes currently in development which do break some deprecated items - hence why I'd like to remove this sooner rather than later, as it saves the work of updating/fixing this old code if the intent is to remove it anyway.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/561
Requirement option to exit/abort on app load failure,"CCB 4/3/19 discussion relative to #263 touched on a possible debug option to shut down/exit/abort on app load failure.

In the context that there are some debugging hooks already, could add this as an extreme reaction (avoids time spent searching for why the system isn't working as expected).

Kicked up to the steering committee/requirements discussion to resolve if this is required optional behavior.",non-bug,https://github.com/nasa/osal/issues/233
Implicit padding in `CFE_TBL_HousekeepingTlm_Payload_t`,"**Is your feature request related to a problem? Please describe.**
Implicit padding, as well as the issues detailed in #664 (configurable sized elements early in the packet) in `CFE_TBL_HousekeepingTlm_Payload_t`.  There's 2 bytes being added after `ByteAlignPad1`.
https://github.com/nasa/cFE/blob/33a4f19ce6dc2c132823b3c8c487a59d5b4b81a8/modules/tbl/fsw/inc/cfe_tbl_msg.h#L727-L784

Noticed when debugging memory handle info reporting commands in ES.  Discovered the table pool handle was being interpreted incorrectly in cFS-GroundSystem due to the implicit padding.

**Describe the solution you'd like**
Likely addressed as part of the transition to the cmd/tlm structures being generated/delivered from a more complete data description.

**Describe alternatives you've considered**
Could quick fix.

**Additional context**
#664

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1708
Check message length vs bytes received before publishing,"**Is your feature request related to a problem? Please describe.**
Command ingest doesn't verify message length (from header) matches bytes received.

**Describe the solution you'd like**
Verify prior to publishing to SB (stop the error at the source).

**Describe alternatives you've considered**
Leave as is - command sources should be sending one valid message per datagram

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/ci_lab/issues/64
pthread_create 3rd arg must be of right type,"OS_TaskCreate is handed an OSAL entry point, which is a
pointer to a function taking no parameters and returning
no return value. It passes it along to pthread_create
which is expecting a pointer to a function that takes
a single void pointer parameter, and returns a void pointer
return value.

The code as written triggers a compiler warning that we
want to get rid of.

Casting the pointer gets rid of the warning, at the cost
of presuming that the ABI will do the right thing when
the caller and callee disagree on the function signature.
This has an associated technical debt: every implementation
that uses this code has to be aware of the issue and
assure that this kind of signature mismatch is OK.

Alternately, we can stash the pointer to the entry point
somewhere, and hand pthread_create a pointer to a function
of correct type, which is responsible for calling the
entry point and returning a pointer. This has a runtime
memory cost of one stack frame.

Doing nothing retains the potential failure, but also retains
a warning about the potential failure. I suggest either doing
the real fix, or leaving the code alone until -Werror forces
us to do the real fix.

I will not automatically push this into the 2015-03-10
integration candidate, as tempted as I am.
",bug,https://github.com/nasa/osal/issues/47
Alternative approach to compile-time function substitutions for UT,"**Is your feature request related to a problem? Please describe.**
Currently, the OSAL coverage test overrides C library calls using a combination of a single ""override"" header file that correlates with the C library header file of the same name.  This file declares stub versions of the same functions but with an `OCS_` prefix.  

This is combined with a ""stub-map-to-real.h"" header that uses `#define` statements to divert the original calls to the substitute (OCS) version at compile time.

The C library calls need to be stubbed out in this manner, because they cannot be done at link time (as the UT still needs to link with the real C library, unlike higher-level libraries).

**Describe the solution you'd like**
Put the `#define` statements in the substitute header itself, rather than in a local map file, and move the `OCS_` prototypes and declarations to a new, separate header file.  

**Describe alternatives you've considered**
The existing method of using a separate map file to provide the substitutions, but this complicates the build of the source units under test as this file must be explicitly included somehow.

**Additional context**
The change alleviates the need to inject the `stup-map-to-real.h` file as part of the  compilation of the source unit under test, as it gets the overrides implicitly though the include path instead, so it simplifies the build for UT that needs this feature.

The trade-off is that it requires a _pair_ of override headers for each real header being overridden, i.e. one for the `OCS_` replacements and one for the actual `#define` statements to do the mapping.  So for the OSAL coverage test, which override headers for about 80 different system headers, this adds quite a few files.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/297
Rtems should show task names when typing `cpuuse`,"**Describe the bug**
typing `cpuuse` in console should show rtems names.

Add the following bits to `OS_TaskCreate_Impl` in rtems
```C
#include <rtems/score/threadimpl.h>
...
    ISR_lock_Context  lock_context_1;
    Thread_Control *the_thread;
...
    the_thread = _Thread_Get(impl->id, &lock_context_1 );
    _Thread_Set_name(the_thread, task->task_name);
    
```

**Expected behavior**
rtems should register its name, so it shows up when using rtems commands.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware microblaze
 - OS: rtems 6

**Additional context**
Better debug info in rtems

**Reporter Info**
Nasa
",non-bug,https://github.com/nasa/osal/issues/1281
Add format check and static-analysis workflows,"Add format check workflow to continuous integration to ensure new commits meet style guide

See 

https://github.com/nasa/sch_lab/blob/main/.github/workflows/format-check.yml",non-bug,https://github.com/nasa/CF/issues/93
CFE_ES_AppCreate does not unload an object file if the entry point is not found,"The function CFE_ES_AppCreate is used for the ES API and the ES command interface to load and start a new application. If the entry point for the new application does not exist in the object file for the application, the function returns an error, but does not try to unload the object module. This leaves the system with a loaded object module that is not tracked by the cFE. In addition the OSAL still has an entry for the object module, and will reject another attempt to load the same file, with the same module name.

Action: Fix the code in CFE_ES_AppCreate to unload the object file in the event the entry point symbol is not found.
",bug,https://github.com/nasa/cFE/issues/164
APIs missing argument validation,"**Describe the bug**
The following APIs are missing argument validation:

cfe_sb_api.c:CFE_SB_SubscribeFull - Quality is not checked…consider checking that it is 0 or 1
cfe_es_api.c:CFE_ES_DeleteApp - Can get a segmentation fault if user tries to delete an APP greater than CFE_PLATFORM_ES_MAX_APPLICATIONS
cfe_tbl_api.c:CFE_TBL_GetAddresses - Can result in Segmentation fault if NumTables grows larger than max number of tables.
cfe_tbl_api.c:CFE_TBL_ReleaseAddresses - Should check to make sure NumTables is less than CFE_PLATFORM_TBL_MAX_NUM_TABLES
cfe_es_perf.c:CFE_ES_PerfLogAdd - Should check if EntryExit is either a 0 or 1
cfe_es_api.c:CFE_ES_ReloadApp - Can Result in Segmentation fault if APID is invalid 
cfe_es_api.c:CFE_ES_CreateChildTask - Input Argument 'Flags' is not validated…also it does not appear to be used anywhere, consider removing
cfe_es_api.c:CFE_ES_GetAppName - Consider comparing BufferLength with OS_MAX_API_NAME prior to use.
cfe_es_api.c:CFE_ES_RegisterCDS - Consider checking if block size is less than CFE_PLATFORM_ES_MAX_BLOCK_SIZE
cfe_fs_api.c:CFE_FS_InitHeader - SubType not checked
cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr - Is there a maximum message size? Consider verifying MsgSize prior to use.
cfe_sb_util.c:CFE_SB_SetUserDataLength - Consider verifying Length of user data (if there exists a limit) and/or TotalMsgSize
cfe_sb_api.c:CFE_SB_SubscribeLocal - MsgLim is not checked…if a max limit does exist, should add argument validation

**Expected behavior**
All input arguments are validated prior to use.

**System observed on:**
 NA - code review/audit

**Reporter Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/546
Second parameter of pthread_mutex_timedlock should be absolute time not timeout,"In src/os/posix/src/os-impl-binsem.c, there are three calls to pthread_mutex_timedlock, each time with &OS_POSIX_BINSEM_MAX_WAIT as the second parameter where OS_POSIX_BINSEM_MAX_WAIT has a value of 2 seconds. because the second parameter of pthread_mutex_timedlock should be an absolute time and is not a timeout, if the mutex is not immediately available, pthread_mutex_timedlock will return with ETIMEDOUT resulting in the OS_BinSemFlush_Impl, OS_GenericBinSemTake_Impl, or OS_BinSemGive_Impl call returning OS_SEM_FAILURE.

Here's a code snippet of the ""as is"":
    if ( pthread_mutex_timedlock(&sem->id, &OS_POSIX_BINSEM_MAX_WAIT) != 0 )
    {
       return(OS_SEM_FAILURE);
    }

It should look something like:

   struct timespec timeoutTime;
   clock_gettime(CLOCK_REALTIME, &timeoutTime);
   timeoutTime.tv_sec += OS_POSIX_BINSEM_MAX_WAIT.tv_sec;
   timeoutTime.tv_nsec += OS_POSIX_BINSEM_MAX_WAIT.tv_nsec;
   if ( pthread_mutex_timedlock(&sem->id, &timeoutTime) != 0 )
   {
      return(OS_SEM_FAILURE);
   }

Reproducing this issue is tricky as the cFS application has to run long enough to have a mutex not immediately available for the lock. The behavior I'm seeing in my installation is the background task terminates and Ctrl-C can no longer be used to terminate the application. I'm running in a Centos 7 Virtual Box machine.

Jonathan C. Brandenburg
METECS
jonathan.c.brandenburg@nasa.gov
",bug,https://github.com/nasa/osal/issues/516
SB Remove PrintMsgHdr Function,"The SB PrintMsgHdr function does not protect against accessing invalid memory.  In addition, this function is specific to debugging during development.  This code should not be used during flight and could be a risk to the system.  

It is recommended to remove this code and create a library for hosing debug functions and utilities.  This ticket will be used to remove the PrintMsgHdr function.  An alternate ticket will be created for developing a debug library.   ",bug,https://github.com/nasa/cFE/issues/254
Add abstract target for documentation dependencies,"**Is your feature request related to a problem? Please describe.**
Both the CFE documentation as well as the CFS app documentation builds require certain generated files to exist before they can run.  Currently the CFE itself solved this with a direct dependency on `osal_public_api_headerlist` but this is not ideal, because it is referring to a very specific OSAL target, which is based on the way OSAL documentation is currently implemented, but may not be so in the future.

Furthermore, the CFS app doc workflows do not have this, and thus the workflow fails.

**Describe the solution you'd like**
Add an abstract target for documentation, correlating to the existing `mission-prebuild` for source files, such as `doc-prebuild`.  This can in turn depend on the specific targets that are needed to be created in order to build documentation.  This allows all submodules to also add dependencies onto this target, in case they have an artifact that needs to be generated prior to building documentation.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/2214
CS: Implicit padding being added to definition and results tables,"Implicit padding is being added to multiple data structures in cs_tbldefs.h.
This creates a problem because we would need to maintain different definition files for decomming the data between our Linux and SP0 systems.

Affected data structures:
CS_Res_App_Table_Entry_t
CS_Res_Tables_Table_Entry_t
CS_Res_EepromMemory_Table_Entry_t
CS_Def_EepromMemory_Table_Entry_t

Imported from GSFCCFS-2020",bug,https://github.com/nasa/CS/issues/6
Potential for app exit failure when not passing back RunStatus,"**Describe the bug**
CFE_ES_ExitApp reports error when passed in ExitStatus is CFE_ES_RunStatus_APP_RUN.

Typical app pattern (see https://github.com/nasa/sample_app/blob/master/fsw/src/sample_app.c) is:
````
  while (CFE_ES_RunLoop(&Sample_AppData.RunStatus) == TRUE) {do stuff}
 
  CFE_ES_ExitApp(Sample_AppData.RunStatus);
````

But CFE_ES_RunLoop does not update RunStatus on internal request to stop:
https://github.com/nasa/cFE/blob/7251cbccc79574a897ebd7cae3ef1975cfaedcec/fsw/cfe-core/src/es/cfe_es_api.c#L545-L552

**To Reproduce**
Steps to reproduce the behavior:
1. Send RestartApp, will error and fail to restart.

**Expected behavior**
Set passed in RunStatus to the control request for the case above:
RunStatus = CFE_ES_Global.AppTable[AppID].ControlReq.AppControlRequest

Allows the App to take appropriate action.

**System observed on:**
 - cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: current dev (6.7.4)

**Additional context**
Fails build verification testing

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/480
RTEMS build broken due to format mismatch (again),"**Describe the bug**
Somewhere a printf in ""queue_test.c"" got changed without the requisite cast, now generates a warning on RTEMS.

```
/home/joe/code/cfecfs/github/osal/src/tests/queue-test/queue-test.c: In function 'task_1':
/home/joe/code/cfecfs/github/osal/src/tests/queue-test/queue-test.c:89:13: error: format '%u' expects argument of type 'unsigned int', but argument 6 has type 'uint32' [-Werror=format=]
             UtAssert_True(data_received == expected, ""TASK 1: data_received (%u) == expected (%u)"",
             ^
/home/joe/code/cfecfs/github/osal/src/tests/queue-test/queue-test.c:89:13: error: format '%u' expects argument of type 'unsigned int', but argument 7 has type 'uint32' [-Werror=format=]
```


**To Reproduce**
Build for RTEMS 4.11 with default config

**Expected behavior**
Should build successfully

**System observed on:**
RTEMS 4.11.3 target on Ubuntu 20.04 build host.

**Additional context**
Need to always remember to always cast args in printf when using fixed-width types.  This breaks very frequently.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/809
Software Bus Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
SB requirements out of date

**Describe the solution you'd like**
Update requirements.  

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cSB4000 - NOOP command out of family, make consistent with other services
- cSB4005 - HK message out of family, make consistent with other services
- cSB4300 - Zero copy general requirement reads like level 4, delete and replace with API requirements
- cSB4305.6 - Max message size just clarify wording (mission config parameter)
- cSB4310 - Free app resources (done by ES_AppExit, delete from SB/API)
- cSB4700: max message ID’s (delete)
- cSB4701: sb maximum size (delete)
- cSB4704: max destinations (delete)
- cSB4705: Maximum pipes (delete)
- cSB4706: maximum pipe depth (delete)
- NEW API Requirements:
    - cSB4311- CFE_SB_GetMsgId
    - cSB4312- CFE_SB_SetMsgId
    - cSB4313- CFE_SB_MessageStringGet
    - cSB4314- CFE_SB_MessageStringSet
    - cSB4315- CFE_SB_InitMsg
    - cSB4315.1 - Clear message contents and sequence counter
    - cSB4315.2 - Retain message contents and sequence counter
    - cSB4316- CFE_SB_GetUserData
    - cSB4317- CFE_SB_GetUserDataLength
    - cSB4318- CFE_SB_SetUserDataLength
    - cSB4319- CFE_SB_GetTotalMsgLength
    - cSB4320- CFE_SB_SetTotalMsgLength
    - cSB4321- CFE_SB_GetMsgTime
    - cSB4322- CFE_SB_SetMsgTime
    - cSB4323- CFE_SB_TimeStampMsg
    - cSB4324- CFE_SB_GetCmdCode
    - cSB4325- CFE_SB_SetCmdCode
    - cSB4326- CFE_SB_GetChecksum
    - cSB4327- CFE_SB_GenerateChecksum
    - cSB4328- CFE_SB_ValidateChecksum
    - cSB4329- CFE_SB_SetPipeOpts
    - cSB4330- CFE_SB_GetPipeOpts
    - cSB4331- CFE_SB_SubscribeLocal
    - cSB4332- CFE_SB_Subscribe
    - cSB4333- CFE_SB_UnsubscribeLocal 
    - cSB4334- CFE_SB_PassMsg
    - cSB4335- CFE_SB_MsgId_Equal
    - cSB4336- CFE_SB_MsgIdToValue
    - cSB4337- CFE_SB_ValueToMsgId
    - cSB4338- CFE_SB_GetPipeName (related to #210)
    - cSB4339- CFE_SB_GetPipeIdByName (related to #210)
    - cSB4340- CFE_SB_ZeroCopyGetPtr
    - cSB4341- CFE_SB_ZeroCopyReleasePtr
    - cSB4342- CFE_SB_ZeroCopySend
    - cSB4343- CFE_SB_ZeroCopyPass
- NEW Cmd Requirements:
    - cSB4009 - Upon receipt of valid command increment command counter
    - cSB4010 - Upon receipt of invalid command increment command error counter
    - cSB4011- CFE_SB_EnableSubReportingCmd 549
    - cSB4012- CFE_SB_DisableSubReportingCmd 550
    - cSB4013- CFE_SB_SendPrevSubsCmd 564

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/522
Add EDS file for HS application,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
An Electronic Data Sheet (EDS) File provides a standardized machine-readable XML description of the interfaces for an application.  Having this documented externally from the code allows many new features and capabilities.

**Describe the solution you'd like**
Every CFS app should include an EDS file.

**Additional context**
CFE core modules already have these files.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/HS/issues/89
Confirm valid PERF_ID use,"Originated by abrown4 (69 on babelfish):

cFE reserves 0-31 perf-ids. Need to confirm ci_lab does not use these.",bug,https://github.com/nasa/to_lab/issues/1
AppMonStatusRefresh Tests appear to check the wrong output,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The `HS_AppMonStatusRefresh()` API call updates a field called `AppMonEnables` in the global data structure.

Declared here: https://github.com/nasa/HS/blob/c976c6aeb9d6715be513319aa49bbff412041226/fsw/src/hs_app.h#L106
Value is updated in the function here: https://github.com/nasa/HS/blob/c976c6aeb9d6715be513319aa49bbff412041226/fsw/src/hs_cmds.c#L867
Called from unit test here (among others):  https://github.com/nasa/HS/blob/c976c6aeb9d6715be513319aa49bbff412041226/unit-test/hs_cmds_tests.c#L3071

However - the unit tests then check the similarly-named field within the HK Packet here:
https://github.com/nasa/HS/blob/c976c6aeb9d6715be513319aa49bbff412041226/unit-test/hs_cmds_tests.c#L3075

Note that this is _not the same member_ -- one is directly inside the global, the other is inside the HK Packet.

**Expected behavior**
Test should verify the fields it was supposed to update.

**Additional context**
Note the tests is passing, this suggests the test might not be sufficient, because it is checking a different value than was set.  The test conditions could have simply been written to pass without actually verifying expected output.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/HS/issues/71
Remove conditionally compiled code,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/DS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Conditionally-compiled code is a maintenance problem because code then needs to be validated both ways, with the condition on and off, and it is easy for the lesser-used/non-default option to become stale or broken, particularly with respect to the coverage testing.

**Describe the solution you'd like**
Remove conditional compilation, replace with runtime conditional checks, which can be constant-value in FSW context, but can be coverage test both ways via a single binary build.

**Additional context**
In general conditional compilation of large chunks of code should be avoided, per 582 coding standards.
Example here of a block that is 84 lines long: https://github.com/nasa/DS/blob/ce988535edffd6b36cc1083e10988c2d0a4a38db/fsw/src/ds_file.c#L804-L893

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/DS/issues/95
Automate Generation of Integration Candidate Branch,"**Is your feature request related to a problem? Please describe.**
Generating the integration candidate branch is a very straightforward process, although it can be highly time consuming. Automating this process can result in significant time savings.

**Describe the solution you'd like**
Use a GitHub workflow to automatically merge a set of pull requests into the integration candidate branch and push it to GitHub.

**Describe alternatives you've considered**
Scripts can be used to simplify this process as well, but it requires setup by the person maintaining the repository and isn't as portable.

**Requester Info**
Dylan Baker/NASA GSFC 582",non-bug,https://github.com/nasa/osal/issues/1382
Add a companion test app for additional API coverage and lab app independence,"**Is your feature request related to a problem? Please describe.**
Currently the functional test (see #1734) relies on sample_app running to test the table share API, there's also other APIs that would be easier or could be more fully covered if there was another app owned by the functional test (app control, CFE_ES_ExitApp, etc).

**Describe the solution you'd like**
Add support/logic and initial implementation (the table case is a good place to start).  Doesn't actually need to be a full-blown app and/or could be a bunch of very trivial, single-use objects.  Could likely still just do all the asserts from the main functional app, and could use CFE_ES_ReloadApp if different logic is needed for the specific test.  Still not really easy since there is no API to load an app (could send a command to ES though, either from the functional test app or as another command from the ground), and you can't reload an app that isn't running (if it exits it's done).

**Describe alternatives you've considered**
A child task could do some of it, but wouldn't be able to cover CFE_ES_ExitApp.  CFE_ES_ExitApp or CFE_ES_DeleteApp would need care if taking the CFE_ES_ReloadApp approach (do at the end, or use command to ES to start again, etc).  Could also just require sample_app be loaded to run the test since that's not really much different than requiring an additional test app (although the test app would be controlled with the rest of the functional logic, so more self-contained).  Definitely open to other ideas...

**Additional context**
Worth a trade of what's ""good enough"", since API testing doesn't really prove a distribution's use of the API will work.  In OSAL the APIs are functionally tested within the context of separate executables so testing the cFE API works within a test configuration (with sample_app) is analogous.  Distributions are still expected to test their functionality vs requirements, system test, and scenario test which really shows whatever APIs they are using behave as required. 

There's also the challenges related to custom configuration which could cause the functional test to fail (even as currently implemented).

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1761
Uninitialized variable static analysis warnings,"**Is your feature request related to a problem? Please describe.**
3 new warnings identified, 2 in UT and 1 in op code.  Note op code issue is just to squash the warning, no real operational issue identified.

**Describe the solution you'd like**
Squash

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2137
Not all invalid commands send an error event message,"Per requirement CF1004, all invalid commands should issue an error event message. For example, the TX_FILE command does not send the event message when certain parameters in the command are invalid. There are several other commands that need to be dispositioned for compliance.",bug,https://github.com/nasa/CF/issues/118
 No File Found for Documentation and Guides Workflow,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The OSAL and cFE Users Guide PDF documentation are not generating due to errors in the workflow. 

**To Reproduce**
See https://github.com/nasa/cFS/runs/3107101587?check_suite_focus=true

**Expected behavior**
The OSAL and cFE Users Guide PDF documentation should generate and upload to gh-pages. 

**Code snips**
`./build/docs/users_guide/latex: No such file or directory`

**System observed on:**
GitHub Actions Workflows 

**Reporter Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/310
Enforce standard coding style in CI,"**Is your feature request related to a problem? Please describe.**
Inconsistent formatting

**Describe the solution you'd like**
Once https://github.com/nasa/cFS/pull/38 is in, enforce in CI

**Describe alternatives you've considered**
Tried `indent` but didn't support editor integration
Settled on clang-format, requires version 10 for define alignment

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/ci_lab/issues/24
CFE_ES_SYSTEM_LOG_SIZE update makes CFE_EVS test fail,"The change made to CFE_ES_SYSTEM_LOG_SIZE in the CFE 6.4.2 Hotfix release
causes the CFE_EVS test to fail.

The test case that fails is case 01.008 where the size of the ES reset area is jammed
to zero using a stub and CFE_EVS_EarlyInit is called.

The tested behavior is that a specific string is printed via the System Log output
which has been mocked. The mock does an exact string compare of the data
against a fixed set of patterns.

Because the size of the structure has changed, the exact content of the error message
has been modified and the message is no longer being recognized by the Syslog Printing
mock, and the test then does not know that the correct condition was trapped.
",bug,https://github.com/nasa/cFE/issues/118
Refactor CFE_ES_ERR_BUFFER to CFE_ES_BAD_ARGUMENT,"**Is your feature request related to a problem? Please describe.**
Most functions return Bad_argument when they get a null pointer but a few stragglers still use buffer. 

**Describe the solution you'd like**
They should all be consistent and return the same error. 

**Additional context**
This is something that should have been done for #547 

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1269
Convert long switch's to static const array/jump tables/function pointer tables,"**Is your feature request related to a problem? Please describe.**
Don't really need a switch, could use a function pointer table, aka jump table (as long as you are OK using function pointers...):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L140
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L281
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-common.c#L74

Could be static const array:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L159
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L199

**Describe the solution you'd like**
Convert to function pointer table

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/872
"OS_TranslatePath using ""%*s"" where ""%.*s"" is correct","While resolving cppcheck messages, a `strncpy()` inside `OS_TranslatePath()`
was replaced by an `snprintf()` call.

Unfortunately, the intended `""%.*s""` format string was typo-decayed
into a `""%*s""` resulting in the value of `devname` including more
of the virtual path than intended.

Fortunately, the use of `strncmp()` later prevents this from actually
generating incorrect results.

To prevent anyone from picking up this `snprintf()` call and using it
as a model for other `strncpy()` replacement code, I would like to
fix the format string ...

For the record, the original code was:

{{{
strncpy(devname, VirtualPath, NumChars);
devname[NumChars] = '\0'; /* Truncate it with a NULL. */
}}}

The modified code was supposed to be:

{{{
snprintf(devname, OS_MAX_PATH_LEN, ""%.*s"", NumChars, VirtualPath);
}}}

The code as actually committed was:

{{{
snprintf(devname, OS_MAX_PATH_LEN, ""%*s"", NumChars, VirtualPath); 
}}}

NOTE: OS_TranslatePath could also be refactored to eliminate
the need for internal buffers to hold copies of the input,
but that is a larger and longer task (prototype working but
needs testing and more testing).
",bug,https://github.com/nasa/osal/issues/188
Improve robustness of CDS checks before re-use/re-build of pool,"**Is your feature request related to a problem? Please describe.**
Currently the `CFE_ES_ValidateCDS()` function only confirms that a fixed signature is found at the beginning and end of the memory space, and `CFE_ES_RebuildCDS()` confirms that the size (number of entries) matches.  If both of these checks pass, the code will attempt to re-use the contents of CDS, rather than re-initializing it.

**Describe the solution you'd like**
These checks are a little weak.  Conceivably, the number of registry entries can remain the same, but the size/format of the registry record changes, thereby making the size of the overall registry array larger.  The data pool could be reduced by the exact same amount, meaning that the CDS trailer will be at the exact some spot, too.  In this case the the code might try to re-use the registry but the format has changed and it will be incompatible.

Should add more values to the size check, not just the number of entries but the sizes/offsets of where the registry and pool start, and it wouldn't hurt to also add a CRC-32 check to this data too, just like is done for data records, before attempting to re-use the data.

**Describe alternatives you've considered**
Leave as is, because this is unlikely to occur by random, it would more likely be intentional, and there are other was to force a CDS rebuild (i.e. change sig).

**Additional context**
Found during investigation of #1341

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1380
Should error if output name does not match input name,"**Is your feature request related to a problem? Please describe.**
The cFE build scripts assume that the file name of the output of `elf2cfetbl` matches the input basename but with a  `.tbl` extension added.

In reality, this tool uses the output name specified in the source file.  If this doesn't match, an obscure installation error occurs because the ""expected"" binary file will be missing.

**Describe the solution you'd like**
elf2cfetbl should error out if the input name does not match the output name.

**Describe alternatives you've considered**
Alternatively, the tool could have a new command line option added to directly control the output name and override whatever was in the source file.  This would be a more substantial change, however.

**Additional context**
This can create confusion when the multiple table feature in nasa/cfe#1538 is used.  If the source file internal definition doesn't match the expected name the error occurs later at install time, not when elf2cfetbl runs, so it can be confusing.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/elf2cfetbl/issues/79
Unit tests doing assignent instead of equality check,"When experimenting with #252, two test cases were also discovered where an assignment was being done rather than an equality check.

This is not a ""failure"", but rather these tests could never fail - it is defeating the purpose of the test case entirely.",bug,https://github.com/nasa/cFE/issues/253
Add user-space message queue library to the OSAL (GSFC DCR 22160),"The GSFC ATLAS project developed an alternate queue library to use with POSIX to overcome a performance limitation with the Linux Posix message queues.

Incorporate this enhancement (or similar enhancement) into the OSAL for POSIX, RTEMS, and VxWorks.",non-bug,https://github.com/nasa/osal/issues/73
"Table build logic is assuming "".o"" extension for object files","**Describe the bug**
The new scripts that are used to build table files assume a "".o"" extension on object files.  This is not always the case, as some other systems use "".obj"".

**To Reproduce**
Build using the vxworks 6.9 toolchain combined with the VxWorks platform module - this sets up for an "".obj"" extension.  Table file generation will fail due to a missing .o file.

**Expected behavior**
Should build successfully.

**System observed on:**
VxWorks 6.9 (GSFC build machine)

**Additional context**
The variable `${CMAKE_C_OUTPUT_EXTENSION}` should be used here.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/2415
"Remove ""GLOBAL_PSP_CONFIGDATA"" object","**Is your feature request related to a problem? Please describe.**
This global/constant structure object was originally added to facilitate modular linking, but isn't really necessary anymore, and was never really used.  As it stands today, only the PSP has it, which makes it a bit of an anomaly in the system context.

**Describe the solution you'd like**
Clean it up, remove this extra global object.

**Additional context**
In contrast the similar object `GLOBAL_CFE_CONFIGDATA` object _is_ used, as it facilitates getting PSP access to constants defined in CFE at link time, without PSP having to directly `#include` the header that defines it at compile time (as this would create a backwards dependency).

The `GLOBAL_PSP_CONFIGDATA` object is the same idea but was for PSP constants, however there isn't the same dependency structure here, so it was never really needed.  Only the version info was ever used externally by CFE, and now that is replaced by an API call to get the info, (recent PRs nasa/psp#257 and nasa/cfe#1206) so there is no need for this global at all anymore.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/280
"CF updates its destination file ""in-place""","The CF application, when receiving files, will open the destination file as indicated in the Metadata PDU and immediately start writing data to it, thereby overwriting any data that was previously in the file at that position.

This can be dangerous, because the file transfer may not ultimately succeed.  For instance, CRC errors may occur, or part of the transfer might get lost.  But once data has been clobbered, there is no way to ""undo"" and restore the original data -- its gone.  So now the user has a situation where neither the new file nor the original file are valid - the file is just corrupt now.

It is often desirable to write data to a temporary file first, let the transfer run to completion (storing ALL data in the temporary file), and then rename the file to its final/correct filename only after the final CRC and size checks have passed and the data is known to be good (or at least to the extent that CF can verify it).

In fact, this is the _only_ way to safely update application binary object (.so files) on many targets, since the text/rodata memory pages may be mmap'ed directly to the file on disk.  If these are updated in place, and the file is an actively-running application, then the running code will immediately ""see"" the modifications, and likely crash/segfault depending on what it was doing at the time.

Recommendation here is to ALWAYS use a temporary file to store incoming data, never overwrite existing files until final validations have occurred.  This will also avoid some of the special logic that only handled corner cases (see issue #131) by making that more the norm than the exception.",non-bug,https://github.com/nasa/CF/issues/132
LC_TableInit helper functions should be moved to their own file,"LC_TableInit has several helper functions that it calls while running.  These calls have many different variations and effects upon what happens in LC_TableInit.  This makes it very difficult to unit test because there is too much variation in the helper functions to attempt to keep adequate track of what may or may not be happening.  If these helper functions were moved to their own .c file they could be wrapped and stubbed for testing LC_TableInit.  This would simplify the unit testing process. 

Imported from GSFCCFS-1102",non-bug,https://github.com/nasa/LC/issues/10
RTEMS 5 needs size_t type to build,"**Describe the bug**
There are a few methods that won't build in rtmes 5 because they use uint32 instead of size_t

Relevant Files and line numbers:
bsp_console.c 44
os-impl-network.c 60
os-impl-queues.c 159, 256
os-impl-tasks.c 376

**To Reproduce**
Build for RTEMS 5 per instructions and default config. Build fails.

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 20.04 as build host for RTEMS 5.0.0


**Reporter Info**
Alex Campbell GSFC",bug,https://github.com/nasa/osal/issues/732
Modify code that reads or writes memory addresses in external messages to use wapper,"In the current version, some external interface (command/telemetry) messages contain direct CPU memory addresses.

This can be very bad for several reasons:
* Memory addresses can be a different size on different CPUs
* Since memory addresses are likely to change from run to run (even in the same build) it makes it difficult to script tests
* The receiver has no way to validate it (other than NULL).  
* If the address value ever gets corrupted or an invalid value is used, the consequence is usually dire (a crash).

Ultimately the use of direct memory addresses in messages should be avoided.

As a first step to this, this ticket will modify those locations that a memory address is read or written from an external message to use a wrapper function.  

This ticket won't change any functionality in itself, but it will provide a path going forward such that the wrapper function can be modified to convert the address to/from a safe, verifiable, architecture independent value rather than using the address directly.

",non-bug,https://github.com/nasa/cFE/issues/49
Syntax Issue For GroundSystem python Table Validate Command,"I'm trying to get the syntax right for the validation command.  I've been running gdb to look at the contents of the message.  All I get is a cryptic invalid msg length error.  With the following from the cFS-GroundSystem/Guid, instructions, I know I am not interpreting it right.

![image](https://user-images.githubusercontent.com/52501916/67431140-afdca400-f5b1-11e9-95e9-40cb3722e1bb.png)


![image](https://user-images.githubusercontent.com/52501916/67430882-25944000-f5b1-11e9-99ae-c199338f9b14.png)

![image](https://user-images.githubusercontent.com/52501916/67430958-4c527680-f5b1-11e9-8da1-bfc3eae4af84.png)

_Originally posted by @JimKaidyNASA in https://github.com/nasa/ECI/issues/42#issuecomment-545620809_",non-bug,https://github.com/nasa/cFS/issues/20
Ability to register a function call for the performance manager (or call a PSP stub),"**Is your feature request related to a problem? Please describe.**
Sounds like historical (and current) missions typically end up adding calls to hardware from the performance calls.

**Describe the solution you'd like**
Either add in a PSP API and call from ES, or support an API to add a function call.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/594
Missing test cases for table services API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the table services functional test:

```
  + condition: CFE_TBL_DumpToBuffer[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_GetAddress[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_GetAddress[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_GetAddress[any]=>CFE_TBL_BAD_ARGUMENT
  + condition: CFE_TBL_GetInfo[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_GetStatus[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Load[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_BAD_CONTENT_ID
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_BAD_SUBTYPE_ID
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_FILE_TOO_LARGE
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_ILLEGAL_SRC_TYPE
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_LOAD_INCOMPLETE
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_STD_HEADER
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_TBL_HEADER
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_PARTIAL_LOAD
  + condition: CFE_TBL_Load[any]=>CFE_TBL_WARN_PARTIAL_LOAD
  + condition: CFE_TBL_Load[any]=>CFE_TBL_WARN_SHORT_FILE
  + condition: CFE_TBL_Manage[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Modified[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_NotifyByMessage[CFE_TBL_Handle_t@0]=>ERROR_RESOURCEID_INVALID
  + condition: CFE_TBL_NotifyByMessage[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_NotifyByMessage[any]=>CFE_TBL_ERR_INVALID_HANDLE
  + condition: CFE_TBL_Register[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_Register[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Register[any]=>CFE_TBL_BAD_ARGUMENT
  + condition: CFE_TBL_Register[any]=>CFE_TBL_ERR_DUPLICATE_DIFF_SIZE
  + condition: CFE_TBL_Register[any]=>CFE_TBL_ERR_HANDLES_FULL
  + condition: CFE_TBL_ReleaseAddress[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Share[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_Share[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Share[any]=>CFE_TBL_ERR_HANDLES_FULL
  + condition: CFE_TBL_Unregister[CFE_TBL_Handle_t@0]=>ERROR_RESOURCEID_INVALID
  + condition: CFE_TBL_Unregister[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Update[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Validate[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1868
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/sample_lib/issues/25
CMakeLists.txt not C++ friendly,"**Describe the bug**
This might be out of scope of this project but when baselining off of sample_app to make other apps I have been able to write C++ code and extern ""C"" functions to run in the sample_app.c main file (or equivalent). Now that the CMakeLists.txt file does not have the ""aux_source_directory(fsw/src APP_SRC_FILES)"" and ""add_cfe_app(sample_app APP_SRC_FILES)"" lines, the C++ externed functions are not linked by the cmake build system. By explicitly saying ""add_cfe_app(sample_app fsw/src/sample_app.c)"" the link command won't pick up the necessary C++ symbols.  

**To Reproduce**
Steps to reproduce the behavior:
1. Create a C++ file in app src directory and make a function called ""extern ""C"" void test() { printf(""test\n"") }""
2. Forward declare this test function in sample_app.c at the top by writing ""void test()"" 
3. Add ""CXX"" to the project() line in CMakeLists.txt
4. Call test() in sample_app.c somewhere where you know it will be called (init or main run loop) 
5. Build and run on target 

**Expected behavior**
Target should have an error similar to ""undefined symbol"" when dynamically loading/linking the sample_app during cFS startup/initialization 

**System observed on:**
 - Linux Ubuntu 18.04, Intel i7 VxWorks 7 target
 - OS: Ubuntu 18.04 and VxWorks 7

**Reporter Info**
Joe Mahoney - LTA Research
",non-bug,https://github.com/nasa/sample_app/issues/84
sysconf can return -1 on error,"in posix/src/os-impl-tasks.c sysconf() is used. Its storage is into a type size_t, but sysconf() can return -1. We should change the storage to ssize_t to accommodate this, or we should check for -1 and then store a non-negative value to POSIX_GlobalVars.PageSize. sysconf() shouldn't return -1 when passed _SC_PAGESIZE, so this may be low priority.",bug,https://github.com/nasa/osal/issues/569
Clang-format-10 fails in Travis CI,"**Describe the bug**
Travis CI Fails with message:
> The command ""sudo apt-get install clang-format-10"" failed and exited with 100 during .  

See https://travis-ci.com/github/nasa/ci_lab/builds/152554544

Also has some warnings for deprecated tags in the YAML file:
>  root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux 

see https://travis-ci.com/github/nasa/ci_lab/jobs/296302324/config

**To Reproduce**
Force a run of current master branch in Travis CI

**Expected behavior**
CI finishes set up and works. 
No Travis warnings


**System observed on:**
Travis CI, Ubuntu - Bionic

**Reporter Info**
Gerardo E. Cruz-Ortiz NASA/GSFC
",bug,https://github.com/nasa/ci_lab/issues/39
Report symEach errors in OS_SymbolTableDump_Impl,"**Is your feature request related to a problem? Please describe.**
Errors not reported:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-symtab.c#L262

**Describe the solution you'd like**
Check for non-NULL, report error (write to file?), return error.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/888
Provide consistent name lookup API,"**Is your feature request related to a problem? Please describe.**
Many CFE resources have a name associated with them, but CFE is rather hit or miss on how Resource IDs (apps, tasks, libs, etc) can be looked up by name.

For instance, `CFE_ES_GetAppIDByName()` exists, but `CFE_ES_GetLibIDByName()` does not.  Task IDs can be found directly via OSAL through `OS_TaskGetIdByName()` but there is no CFE version of this despite the fact that ES also tracks tasks.

**Describe the solution you'd like**
For resource types that have names associated, there should be a consistent API to find the ID by name, similar to `CFE_ES_GetAppIDByName()`.  The following should be implemented, all with the general API pattern (name in, ID out, status return):

    CFE_ES_GetTaskIDByName()
    CFE_ES_GetLibIDByName()
    CFE_ES_GetGenCounterIDByName()
    CFE_ES_GetCDSBlockIDByName()


**Describe alternatives you've considered**
Keep things inconsistent.

**Additional context**
This is also a prerequisite to #28 - to have libs be manageable similarly to apps, part of that is being able to find lib ID by name, which is required by several management/query commands.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

Edit - turns out and `CFE_ES_GetGenCounterIDByName()` does exist already.  But the others do not.",non-bug,https://github.com/nasa/cFE/issues/943
Document/implement naming pattern for created elements,"**Is your feature request related to a problem? Please describe.**
Inconsistent on namespacing of created elements (see #1401).

**Describe the solution you'd like**
Scrub ""names"" of created elements and how they are defined (configurable, `#define`, locally) and document/implement a common pattern.  Really don't need to be configurable, if only used once they don't really need to be a separate define (only required when ID is not available and need to be looked up which is rare sharing case), some prefix with CFE, etc.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1412
OSAL should have an inverse function to OS_API_Init(),"**Is your feature request related to a problem? Please describe.**
Once OSAL is initialized, normally it runs forever until rebooted, or the process exits in the case of Linux.  In that light, resources obtained during OS_API_Init() cannot directly/simply be released via the API - there is no opposite/inverse routine defined.

However under testing conditions, and for general completeness of API, it is useful to have an inverse function to tear down the API structures and return the system to the state it was prior to the `OS_API_Init()` call.

This can (_almost_) be done with the current OSAL API, but it must be done in two parts:

1. `OS_DeleteAllObjects()` will clean up any remaining user-instantiated objects in the tables.
2. `OS_ApplicationShutdown(true)` will cause any internal resources, such as the console utility task, to also self-exit.

The combination of these two basically leaves the system in a state similar to what it was before `OS_API_Init()` was run.  (its not perfect, but its close).

But its not ideal because a user shouldn't have to call two functions (one of which also has a parameter) to undo the init call.

**Describe the solution you'd like**
Implement a `void OS_API_Teardown(void)` routine which would be just be a wrapper around these two currently-existing functions, to make it simpler to do this.

Importantly, being a void/void routine means that it can be easily used with unit tests and the `UtTest_AddTeardown()` routine.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Issue #197 which calls for something like this that unit tests can use.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/944
"Consider populating the ""name"" field of datagram socket entries","**Is your feature request related to a problem? Please describe.**
As noticed in previous issue #1222, the datagram sockets are essentially name-less.  This means that the `name_entry` field of these entries is left unset, and will be NULL.

This is different than most other OSAL resource types, which all have names.

**Describe the solution you'd like**
Stream sockets (IIRC) generate a name consisting of the local IP address/port and remote IP address/port.  Datagram sockets are connectionless, but theoretically this field could still be populated with something unique, such that name-based APIs could work.

**Describe alternatives you've considered**
Leave as-is, where datagram sockets remain anonymous/nameless.

**Additional context**
Most name-based OSAL APIs (such as OS_CloseFileByName) intentionally only operate on files - they check if the entry is a socket and ignore it if it is, so having a name associated with sockets if of limited usefulness unless we open that up, which also may not be a bad idea. (i.e. one can get the name by calling OS_FDGetInfo, then pass that name to OS_CloseFileByName or OS_FileOpenCheck, etc).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.  
Based on CCB discussion of #1223 on 2022-02-23

",non-bug,https://github.com/nasa/osal/issues/1224
If an application fails to initialize; cFE will attempt to restart it indefinitely,"**Is your feature request related to a problem? Please describe.**
Outside of issuing a processor reset - I'm not sure there is a clean way to exit this scenario (which in theory should never happen in flight).  This scenario would be further complicated if the app attempting to be started/restarted is included in the startup script.

**Describe the solution you'd like**
Consider implementing a maximum number of restarts.

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/1383
printf format codes vs argument types,"Resolve a number of mismatches between printf format string conversions
and the data types of the parameters.

From cppcheck:

{{{
psp/fsw/grut699-vxworks6/src/cfe_psp_start.c:226: warning: %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:251: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:252: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:253: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:255: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:256: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:257: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.

}}}
",bug,https://github.com/nasa/PSP/issues/62
unreachable flow control,"cppcheck messages:
{{{
src/tests/osal-core-test/osal-core-test.h:347: style: Consecutive return, break, continue, goto or throw statements are unnecessary.
}}}

Yes, the code does have two return statements in a row (this is not the
case where cppcheck was getting hideously confused in a header).
",bug,https://github.com/nasa/osal/issues/154
CFE_PSP_GetTime Loses Resolution in Conversion to Microseconds (GSFC DCR 14952),"There's a 'bug' in the implementation of the mcp750/vxworks PSP which causes the loss of timing resolution in the function CFE_PSP_GetTime(). for example:  

{{{
void CFE_PSP_GetTime( OS_time_t *LocalTime) 
{    
   uint32 DecCount;     

   /* Reads the time from the hardware register, then converts it     
    * into usable seconds and microseconds */    

   sysPciRead32(0xFC0011C0, (UINT32 *)(&DecCount));    
   DecCount = DecCount & 0x7FFFFFFF;    
   DecCount = ((uint32)  0x0D6937E5) - DecCount;    
   LocalTime-&gt;seconds = DecCount / 8333311;    
   DecCount = DecCount % 8333311;    
   LocalTime-&gt;microsecs = (DecCount/8333) * 1000; 
}/* end CFE_PSP_GetLocalTime */   
}}}

In this case, (DecCount/8333) * 1000 is performed as an integer calculation (as DecCount and LocalTime-&gt;microsecs are integers), basically reducing resolution from microseconds (which this function can calculated from fractions of microseconds) to miliseconds.  

NOTE: GSFC's rad750 version has a similar calculation ((DecCount / 2062) * 1000)  

Should this be changed to something like (for mcp750):     

{{{
LocalTime-&gt;microsecs = (uint32) (( ((double)DecCount) /8333.0) * 1000.0);
}}}",bug,https://github.com/nasa/PSP/issues/76
Add functional test for SB unsubscribe/resubscribe with incrementing count,"**Is your feature request related to a problem? Please describe.**
#419 Updated sequence counter behavior.  Need to add a functional test to cover it.

**Describe the solution you'd like**
Add a functional test.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/481
Table Load Failures,"My app, named CNT_APP starts running and while there are tables in the app, it appears that CFE_TBL attempts to load those tables and fails, causing CNT_APP to error out.  Is there a missing step that I need to perform (load tables?) or is this indicative of a bug or misconfiguration?

![image](https://user-images.githubusercontent.com/52501916/66508946-0b7e3c00-eaa0-11e9-9812-25bfdbd7b1bb.png)
",non-bug,https://github.com/nasa/cFS/issues/17
Remove function names from comments (where not useful),"**Is your feature request related to a problem? Please describe.**
Function names in comments (end of function comment, function header comment) historically have been poorly maintained.

Example:
https://github.com/nasa/sample_app/blob/0d11d9e7b1edf339c33870340524916f81a5dd95/fsw/src/sample_app.c#L393
https://github.com/nasa/sample_app/blob/0d11d9e7b1edf339c33870340524916f81a5dd95/fsw/src/sample_app.c#L425

**Describe the solution you'd like**
Remove redundant information (these end of function comments and name from the header).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/111
Many command processors in CFE do not confirm null-termination of strings within the message,"Across all CFE/CFS applications, many message definitions contain strings as ""char[]"" arrays.

However, very few CFE command processors confirm that these strings are actually null terminated within the allotted length before passing them to other CFE functions and/or C library functions such as ""strcmp"", ""strlen"", etc.

The CFE architecture needs to clearly define the rules here and also be consistent when following them.

",bug,https://github.com/nasa/cFE/issues/86
Occasional deadlock issue in tests that delete tasks,"**Describe the bug**
When running the unit tests repeatedly, occasionally some tests are getting into a deadlock.  These tests are ones that:

1. use sub-tasks to do various work
2. those sub-tasks use OS_printf()
3. use an asynchronous OS_TaskDelete during their cleanup/teardown

In the event that the sub-task was in the midst of an OS_printf() call when OS_TaskDelete was invoked, the underlying BSP lock will not get released.

Observed in mutex-test, but others may have similar patterns.

**To Reproduce**
Run mutex-test repeatedly, may deadlock at some runs.  (it is a race condition, not 100% reproducible)

**Expected behavior**
Should run consistently.

**System observed on:**
Ubuntu

**Additional context**
This really just a symptom of a generic/known issue with OS_TaskDelete, in that other resources held by that task are not necessarily tracked or freed, depending on what it was doing at the time it was deleted.

Linux/Pthreads does have a workaround but the issue is likely to exist on all OS's

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1027
FreeRTOS port,"Hi,

It seems that you only provide the OSAL for Linux, rtems and vxworks. However you regularly mention FreeRTOS in your documentation. Do you plan to share the sources for the FreeRTOS port ? Not sure the amount of work such operation require and the limitations (especially concerning the file system) . It would be great to have more information about this point. 

Thanks in advance !

**Requester Info**
Jonathan Michel, master student at the University of Applied Science of Western Switzerland working on [CHESS](https://www.epflspacecraftteam.com/).
",non-bug,https://github.com/nasa/osal/issues/620
Simpify long if/else if in  `CFE_ES_DeleteCDSCmd`,"**Is your feature request related to a problem? Please describe.**
Error cases handled with long if/else if:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.c#L1844

**Describe the solution you'd like**
Use table (or switch)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1363
CFE_ES_RunLoop increments the main task ExecutionCounter rather than the task that called it,"**Is your feature request related to a problem? Please describe.**

Inside the `CFE_ES_RunLoop()` function itself, it looks up the MainTaskId of the caller and only increments _that_ execution counter, not the execution counter of its own task record.  This means no matter what child task actually calls this function, it implements the execution counter of the main task only.

Note that if the real main task is doing something else and also increments its own task counter, this is a race condition.

**Describe the solution you'd like**
I suggest one of the following:

1. Just have `CFE_ES_RunLoop()` invoke `CFE_ES_IncrementTaskCounter()` to increment the counter for the task from which it was called. So if it gets called from a child task, then that child task gets incremented, not the main task.  This is at least straightforward/consistent and avoids the race condition.
2. Maintain a separate ""app"" exec counter which is incremented by CFE_ES_RunLoop (only), and use the `CFE_ES_IncrementTaskCounter` to account for other regular task activity.

**Additional context**
Noticed this when fixing #480 and it seemed rather odd/incorrect to be storing the ExecutionCounter where it is.  This causes the code to jump to other entries in the table for the sole purpose of reading/updating this value, when it already had the correct app record to start.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/567
"JSC: Replace ""UNINITIALIZED"" macro with ""OS_UNINITIALIZED""","Originally part of trac #45 and split off for review purposes.  Only affects vxworks6.



",bug,https://github.com/nasa/osal/issues/136
Simplify LogOverflowCounter increment logic,"**Is your feature request related to a problem? Please describe.**
The CFE_EVS_Global.EVS_LogPtr->LogOverflowCounter gets incremented in two locations and is done based on the LogFullFlag:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_log.c#L52-L64

**Describe the solution you'd like**
Pull up higher and change the if/else statement to:
`if(CFE_EVS_Global.EVS_LogPtr->LogMode != CFE_EVS_LogMode_DISCARD)`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1448
 'EID' should be at the end of the Event ID names,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
During [recent updates](https://github.com/nasa/CF/pull/337) to the EIDs, it was noted that CF specifically has the 'EID' component of the Event ID names at the beginning rather than the end for almost all the Event IDs. All other cFS components/apps place it at the end of the Event ID.

**Code snips**
![Screenshot 2022-10-22 07 52 12](https://user-images.githubusercontent.com/9024662/197294182-429006a2-e590-4f32-b3d9-002d47d18ba0.png)

**Expected behavior**
I think it is worth moving 'EID' to the end of the CF Event ID names to improve consistency across the cFS apps and ease the identification of EIDs from CF in general.

At the same time, it is probably worth moving the additional type parameter in the Event ID names (`INF`, `ERR` etc.) to the end as well, which is also the predominant convention in cFS.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/CF/issues/338
request for configurable transaction packet MID ,"In our use case, we want to use CFDP to send files from CPU1 to CPU2 and from CPU1 to Ground. The two CPUs are connected via SBN, and the connection between CPU1 and the ground station is through TO and CI.

I had thought to use the MID of CFDP packets to filter which packets are let through TO and SBN. By setting up CF with two input channels and two output channels, each using separate MIDs, I could set TO to only listen for packets from one channel and SBN to listen for packets on the other CF channel.

It looks like all CFDP transfer packets use the CF_TRANS_TLM_MID, and that’s not configurable. Would it be possible to add a configuration value in cf_cfgtable to set MID for output channels, similar to what is done for the input channels?

Alternatively, is there a more standard way to do what I'm attempting?
",non-bug,https://github.com/nasa/CF/issues/6
Fix ES unit test WriteToSysLog warning,"In es_UT.c, the `CFE_ES_WriteToSysLog()` function is invoked with a generated (non-const) string used in place of the format string.  Some compilers generate a warning about this.  The fix is simple.",bug,https://github.com/nasa/cFE/issues/284
Improve/clarify log reporting/tracking (ES System Log and EVS Event Log),"**Is your feature request related to a problem? Please describe.**
EVS event logging reports `LogFullFlag`, `LogMode`, and `LogOverflowCounter`.
 - The log is an array of `CFE_EVS_LongEventTlm_t` of size `CFE_PLATFORM_EVS_LOG_MAX` so each entry has a slot
 - In either discard or overwrite, once the log is filled `LogFullFlag` is set to true, and `LogOverflowCounter` is incremented for each additional message (so you can tell how many messages were dropped or added after being full).
 - Note `LogCount` is maintained internally but is not in tlm (counts number of entries in the log, clamps at max)

ES syslog reports `SysLogBytesUsed`, `SysLogSize`, `SysLogEntries`, and `SysLogMode`.
 - The log is a more freeform char array `SystemLog` of size `CFE_PLATFORM_ES_SYSTEM_LOG_SIZE` 
 - In either mode the log is ""full"" when `CFE_PLATFORM_ES_SYSTEM_LOG_SIZE` - `SysLogBytesUsed` is less than  `CFE_TIME_PRINTED_STRING_SIZE`
 - `SysLogBytesUsed` is set to the internal `SystemLogEndIdx` which is the highest used element of the char array
 - `SysLogEntries` increments whenever a message is written, so if in overwrite it's not actually the number of entries in the log but the number of entries that have ever been written to the log
 - There are return codes (`CFE_ES_ERR_SYS_LOG_TRUNCATED` and `CFE_ES_ERR_SYS_LOG_FULL`), but they are only returned in discard mode, and not available in tlm
 - `SysLogSize` is the full size of the log, `CFE_PLATFORM_ES_SYSTEM_LOG_SIZE`

**Describe the solution you'd like**
Numerous misnomers and inconsistencies in log management should be fixed/clarified, within the context of the actual differences in these logs (char array vs event array).

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

ping @dmknutsen @olamoo13",non-bug,https://github.com/nasa/cFE/issues/1400
os/shared/osapi-module.c: the return value of the call to OS_ModuleLoad_Impl should be checked,"**Is your feature request related to a problem? Please describe.**

I have noticed this issue while working on making the OSAL's tests pass on macOS (see #352). I am reporting this issue separately from the rest of the changeset suggested there.

The issue is in the following fragment of code as found in the current master branch (as of https://github.com/nasa/osal/commit/64ad0f551c01ab846bc79b23411e72cddf987dde):

```
    if(return_code == OS_SUCCESS)
    {
        /*
         * Save all the data to our own internal module table, but
         * only if OS_MAX_MODULES is greater than 0
         */
#if (OS_MAX_MODULES > 0)
        memset(&OS_module_table[local_id], 0, sizeof(OS_module_internal_record_t));
        strncpy(OS_module_table[local_id].module_name, module_name, OS_MAX_API_NAME);
        strncpy(OS_module_table[local_id].file_name, filename, OS_MAX_PATH_LEN);
        record->name_entry = OS_module_table[local_id].module_name;

        /* Now call the OS-specific implementation.  This reads info from the module table. */
        return_code = OS_ModuleLoad_Impl(local_id, translated_path);
#endif

        /* Check result, finalize record, and unlock global table. */
        return_code = OS_ObjectIdFinalizeNew(return_code, record, module_id);
#endif
```

We can see that the return value of the `OS_ModuleLoad_Impl` is not tested for `!= OS_SUCCESS` so the execution can continue even if the call to this function returns an error.

This is a direct link to the line: https://github.com/nasa/osal/blob/64ad0f551c01ab846bc79b23411e72cddf987dde/src/os/shared/osapi-module.c#L244

**Describe the solution you'd like**

Most of the code in OSAL does check the return values: `if(return_code == OS_SUCCESS)` or `if(return_code != OS_SUCCESS)` so it makes sense to create such a check in this case too.

I am going to create a Pull Request that addresses this issue.

**Describe alternatives you've considered**

To the best of my knowledge,  a proper return value checking is the only way to get fast feedback from a call to the `OS_ModuleLoad_Impl` if something goes wrong.

**Additional context**

None.

**Requester Info**

Stanislav Pankevich, independent contribution.
",non-bug,https://github.com/nasa/osal/issues/359
Support Insertion/Integration of Third Party/Bridge Libraries,"Missions/Projects may have the need/requirement to use specific implementations of functions provided by third party libraries i.e. ARINC 653 does not include a printf function.  

Third party libraries cannot legally be included within an official release of the OSAL.  The OSAL currently does not provide a generic means of integrating third party libraries into the OSAL.

See ticket #57 for more details ",non-bug,https://github.com/nasa/osal/issues/143
Implement better way to wait for status change,"**Is your feature request related to a problem? Please describe.**
If the object exists but is not in the correct state to access it, then the `OS_ObjectIdConvertToken()` will simply loop/retry the operation using `OS_TaskDelay()`.  This is not ideal and likely creates more delay than what is really needed.

https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/os/shared/src/osapi-idmap.c#L367-L376

**Describe the solution you'd like**
Should use a proper primitive to wait until the underlying state changes and wake up the task immediately.

**Describe alternatives you've considered**
Continue using polling w/task delays (still an option for OS types which don't have the proper primitive)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/677
Create osal api guide with doxygen,"**Is your feature request related to a problem? Please describe.**
Auto-generate osal api guide with doxygen

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/445
"Remove requirements for message initialization ""clear"" vs ""no-clear"" options","**Is your feature request related to a problem? Please describe.**
CFE_MSG_Init no longer supports ""clear"" vs ""no-clear"" options due to abstraction incompatibilities.
cSB4315.1 - SB: Initialize Message - Clear
cSB4315.2 - SB: Initialize Message - No Clear

**Describe the solution you'd like**
Remove these ""special option"" requirements.  The requirement is that it initializes the packet (cSB4315), the design/implementation describes the exact behavior (there are many possible compliant implementations by design).  Ambiguous options that can not be abstracted should be avoided in the API.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1713
Implement a Security Policy ,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/to_lab/issues/77
Rework cFE/PSP CDS interface to improve real hardware support/performance,"**Is your feature request related to a problem? Please describe.**
Currently implementation of critical data store (CDS) includes a CFE_ES_ClearCDS function that writes uint32[4] chucks to CDS in a loop to cover the entire area.  This could be very inefficient and possibly use up write cycles on the hardware, vs allowing the PSP to implement a more hardware specific clear.  
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L534-L552

**Describe the solution you'd like**
Design/implementation review and update of the CDS interface (especially the cache), maybe the PSP should report/provide the appropriate cache size for efficient reading/writing.

**Describe alternatives you've considered**
Might be less an issue and more just performance wrt modern storage, but EEPROM or similar would suffer using current scheme.

**Additional context**
From code review follow on discussions.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1404
Remove use of OSAL internal headers ,"**Is your feature request related to a problem? Please describe.**
Functions should use only `osapi.h` and `common_types.h`.  Other headers are getting refactored in nasa/osal#410.

**Describe the solution you'd like**
Remove direct use of other headers such as `osapi-os-loader.h`

**Additional context**
This is required in order to implement/merge the fix for nasa/osal#410

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1042
ES does not check target file existence before attempting to reload an application (GSFC DCR 145460),"If the following command is sent:

/FSW_ES_RELOADAPP APPLICATION={application},APPFILENAME={file}

and if the file does not exist, the application will be deleted but cannot be reloaded.

This is because ES does not check to see if the file exists first.
This and any other ES command that requires file existence should check for the file existence before attempting to do operations on the application.
",bug,https://github.com/nasa/cFE/issues/174
CFE_TIME_GetTime() information seems incorrect?,"A question related to the use of the time service provided by cfe.

I am trying to get time information using the API provided by cfe as follows:
```
CFE_TIME_SysTime_t time;
time = CFE_TIME_GetTime();
```

And I print it as follows:
```
char buffer[500] = {0};
CFE_TIME_Print(buffer,time);
OS_printf(""%s\n"",buffer);
```
But the printed year and time information seems to be incorrect. It indicates some value in 1980 as: `1980-012-14:03:20.00000`.  Also, when I launch cfe (core-cpu1), I see the following output which indicates the time starting in 2030 and then changing to some value in 1980.

```
2030-069-17:55:07.13648 SB internal message format: CCSDS Space Packet Protocol version 1
2030-069-17:55:07.13649 ES Startup: Calling CFE_TIME_EarlyInit
1980-012-14:03:20.00000 ES Startup: Calling CFE_TBL_EarlyInit
1980-012-14:03:20.00021 ES Startup: Calling CFE_FS_EarlyInit
```
Could someone please explain how I could obtain the correct current time information using the cFE APIs without having to resort to using functions in time.h?

Thanks!
",non-bug,https://github.com/nasa/cFS/issues/53
posix ostimer.c functions not using semaphore,"Similar to Trac #92, the posix version of ostimer.c is not properly protecting its OS_timer_table via a mutex.

{{{
pthread_mutex_t    OS_timer_table_mut;
}}}

Many of the issues seen in Trac #92 are in the posix version as well.
Full branch coverage unit tests, in Trac #45, were used to fix Trac #92 (VxWorks).  The posix ostimer.c will likely need similar coverage tests to ensure this is fixed properly.",bug,https://github.com/nasa/osal/issues/94
ES Shell Command Telemetry Timing is Hardcoded,"The CFE_ES_ShellOutputCommand hard codes a delay of 200 milliseconds to prevent flooding on large shell output messages over the software bus.  This delay should be configurable to allow greater flexibility and support on a wide range of platforms.  

The email thread that brings this issue to attention and starts the discussion on the solution is pasted below for reference:

From: cfs-community-ccb-bounces@lists.nasa.gov [mailto:cfs-community-ccb-bounces@lists.nasa.gov] On Behalf Of Strege, Susanne L. (GSFC-5820)
Sent: Tuesday, March 07, 2017 3:36 PM
To: NASA Core Flight Software Community Configuration Control Board Mailing List <cfs-community-ccb@lists.nasa.gov>
Subject: Re: [cfs-community-ccb] FW: cFE ES Shell Command Telemetry Timing

I’m in favor of removing the hardcoded hack and replacing with a platform configuration.  Unless anyone objects, I’ll write up a ticket and assign to the next release.

From: cfs-community-ccb-bounces@lists.nasa.gov [mailto:cfs-community-ccb-bounces@lists.nasa.gov] On Behalf Of Hickey, Joseph P. (GRC-LSS0)[ZIN TECHNOLOGIES INC]
Sent: Tuesday, March 07, 2017 12:37 PM
To: cfs-community-ccb@lists.nasa.gov
Subject: Re: [cfs-community-ccb] FW: cFE ES Shell Command Telemetry Timing

Seems pretty clear to me -- The API/prototype directly out of osapi-os-core.h is:
int32 OS_TaskDelay             (uint32 millisecond);

Inside the call, the milliseconds are then converted into whatever units the underlying OS uses to measure time passing.  For vxworks this is converted to ticks, but for other OSs like POSIX this is converted to nanoseconds for use with e.g. nanosleep().  All in all I think this is a perfectly fine example of an abstraction layer doing what it is supposed to do.  The only question is whether cfe_es_shell.c should hardcode it to 200ms -- this is very hackish to me.  On many systems it may not need a delay at all and could be 0.

But I agree, if there is any documentation out there which is describing the parameter of OS_TaskDelay as anything else, we need to fix that.  Wouldn't hurt to ask.
On 03/07/2017 12:27 PM, Limes, Gregory L. (ARC-TI)[SGT, INC] wrote:
Oops -- I forgot to confirm the units of the parameter ;)

So, what document do we need to fix, given that Saul was
under the impression that the parameter was in Ticks?

-- Greg Limes
work: gregory.limes@nasa.gov 
home: greglimes@gmail.com
cell: 850 459 6862
land: 850 681 2336
________________________________________
From: cfs-community-ccb-bounces@lists.nasa.gov [cfs-community-ccb-bounces@lists.nasa.gov] on behalf of Hickey, Joseph P. (GRC-LSS0)[ZIN TECHNOLOGIES INC] [joseph.p.hickey@nasa.gov]
Sent: Tuesday, March 07, 2017 09:22
To: cfs-community-ccb@lists.nasa.gov
Subject: Re: [cfs-community-ccb] FW: cFE ES Shell Command Telemetry Timing
The argument to OS_TaskDelay is in milliseconds, so I'm not sure where the concern arises?

I would support replacing the hardcoded ""200"" in cfe_es_shell.c with something more configurable, but I'm not sure that CFE_PSP_Get_Timer_Tick is the right answer either.  For instance on some PSPs that don't necessarily have direct access to this information, it returns 0.  Besides that, it is defined as returning the number of ticks per second (a rate), not a tick period, so it makes no sense to me to pass this value directly into OS_TaskDelay.

If anything, I would suggest making another platform configuration define, and just using it here i.e.:

OS_TaskDelay(CFE_PLATFORM_OS_SHELL_DELAY);

Then the users can set it to whatever they'd like.
On 03/07/2017 12:06 PM, Strege, Susanne L. (GSFC-5820) wrote:
This looks like a valid suggestion to me.  If others agree, I’ll put in a ticket and assign to the cFE 6.6.0 release.
 
From: Weiss, Saul H [mailto:saul.h.weiss@lmco.com] 
Sent: Tuesday, March 07, 2017 11:49 AM
To: Strege, Susanne L. (GSFC-5820) <susanne.l.strege@nasa.gov>
Cc: Hinz, David B. (JSC-GA111)[LOCKHEED MARTIN CORP] <david.b.hinz@lmco.com>; Clark, Ronald H <ronald.h.clark@lmco.com>
Subject: cFE ES Shell Command Telemetry Timing
 
Susie,
 
Reviewing the cfe_es_shell.c, I noticed the following call in CFE_ES_ShellOutputCommand:
 
                OS_TaskDelay(200);
 
My concern is that 200 is the default system tick hardcoded into the OSAL. So, this equates to a 1 second delay. We are using a different frame rate and so planned to use a different tick rate. I think the cfe_es_shell.c code should be updated to:
 
                OS_TaskDelay(CFE_PSP_Get_Timer_Tick());
 
Thoughts?
 
Saul H Weiss
Lockheed Martin
Space Systems Company
Orion VPUD CSCI CPE
(303) 971-9446
 

-- 
Joe Hickey
Software Engineer - ZIN Technologies, Inc.
Phone: 203.518.0270 / 718.935.0540
     ",non-bug,https://github.com/nasa/cFE/issues/214
Update cFE Version Number for 6.5.0 Release,"This ticket will be used to update the version header file to update
the version number to 6.5.0 for test and release.  

Once cFE version 6.5.0 has been populated to the master branch, this ticket will be used to set the version number to 9.9.9 to indicate the code is development code retrieved from the ""development"" branch.",non-bug,https://github.com/nasa/cFE/issues/177
Incomplete coverage test for cfe_es_shell.c,"**Is your feature request related to a problem? Please describe.**

no coverage test for CFE_ES_ShellCountObjectCallback
```
    338           0 : static void CFE_ES_ShellCountObjectCallback(uint32 object_id, void *arg)
     339             : {
     340             :     uint32                 *CountState;
     341             :     uint32                 idtype;
     342             : 
     343           0 :     CountState = (uint32 *)arg;
     344           0 :     idtype = OS_IdentifyObject(object_id);
     345           0 :     if (idtype < OS_OBJECT_TYPE_USER)
     346             :     {
     347           0 :         ++CountState[idtype];
     348             :     }
     349           0 : }
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/466
Caelum non-tested ES APIs,"**Is your feature request related to a problem? Please describe.**
The following ES APIs are not being exercised in the functional test:

Related to CFE itself (cannot reboot CFE in the middle of a test, could be done by parent script though):
```
 + condition: CFE_ES_ResetCFE[any]=>CFE_SUCCESS
```

Related to app/CFE management (these require a second test app that can be reloaded/restarted):
```
 + condition: CFE_ES_DeleteApp[any]=>CFE_SUCCESS
 + condition: CFE_ES_ReloadApp[any]=>CFE_SUCCESS
 + condition: CFE_ES_RestartApp[any]=>CFE_SUCCESS
```

Related to CDS implementation (or lack thereof; all current targets _do_ implement CDS, even though documentation allows it to return this code if it is not implemented):
```
 + condition: CFE_ES_GetCDSBlockIDByName[any]=>CFE_ES_NOT_IMPLEMENTED
 + condition: CFE_ES_GetCDSBlockName[any]=>CFE_ES_NOT_IMPLEMENTED
 + condition: CFE_ES_RegisterCDS[any]=>CFE_ES_NOT_IMPLEMENTED
 + condition: CFE_ES_ResetCFE[any]=>CFE_ES_NOT_IMPLEMENTED
```

Related to syslog (depends on having runtime mode set to ""discard"" rather than ""overwrite"", which is not currently under test control:
```
 + condition: CFE_ES_WriteToSysLog[any]=>CFE_ES_ERR_SYS_LOG_FULL
```

**Describe the solution you'd like**
Document for Caelum, eventually add a second test app and/or more sophisticated tests that can exercise these.

**Additional context**
Identified as part of scrub in #1724
Some cases depend on having second test app per #1761

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1874
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/CF/issues/336
CFE_SB_ReceiveBuffer() should use CFE_SB_TimeOut_t for the TimeOut parameter,"In cfe_sb.h...

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/inc/cfe_sb.h#L161

But below, the `CFE_SB_ReceiveBuffer()` takes uint32 for the timeout...

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/inc/cfe_sb.h#L647

Shouldn't it be using the `CFE_SB_TimeOut_t` type instead of uint32 for the TimeOut parameter?",bug,https://github.com/nasa/cFE/issues/1062
CDS should include some fields of the CFE_ES_CDS_RegRec_t in its CRC-32 validation,"**Is your feature request related to a problem? Please describe.**
CDS code utilizes a CRC-32 to check the integrity of the CDS Block.  However it only covers the data itself, not any of the metadata of the CDS block.  

When re-using CDS memory, the code does not clear old CDS blocks for a variety of reasons.  The CRC-32 should offer protection against stale data appearing as good data.

**Describe the solution you'd like**
Should include fields from the registry record (CFE_ES_CDS_RegRec_t) as well as the data.  Importantly, This way if the block is re-used and the name is different but the size is the same, the CRC check will fail, and the old data from the previous instance is less likely to be interpreted as valid data.

**Additional context**
Offshoot from CFS-40 review, issues #1337 and #1340.  There are valid reasons _not_ to forcibly clear CDS blocks, but the CRC check can serve as a reasonable substitute to avoid interpreting old data as valid.  This is a suggestion that would make the this protection a little stronger.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1377
Add check for EAGAIN in OS_DoSelect loop,"**Is your feature request related to a problem? Please describe.**
On some other UNIX systems, select() can fail with the error EAGAIN if the system fails to allocate kernel-internal resources,
rather than ENOMEM as Linux does. POSIX specifies this error for poll(2), but not for select(). Portable programs may wish to
check for EAGAIN and loop, just as with EINTR.

https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L222

**Describe the solution you'd like**
Add check for EAGAIN

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/858
Convert mission/platform cFE configuration to cmake to support source selection,"**Is your feature request related to a problem? Please describe.**
Many configuration options involve conditionally compiled code which is discouraged in various coding standards and makes unit testing multiple configurations require separate builds.

**Describe the solution you'd like**
Switch to the OSAL pattern of defining configuration via cmake file(s), which then could be used to source select during the prep.  Also all units could then be tested/covered regardless of the actual selection to ensure code isn't rotting.  Functional testing would still require a separate build, but at least this would show the code still compiles in the unit test setup.

**Describe alternatives you've considered**
Add multiple unit test builds

**Additional context**
#302 as a specific example of a related issue.

Note MSG already uses cmake variables for source selection, which should be added to the config.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2089
cFE cES1702.3 and cES1703.3 Requirement Failures,"The original implementation to satisfy ES requirements cES1702.3 and cES1703.3 involved making a call to the cFE platform configuration variable CFE_ES_EXCEPTION_FUNCTION within the PSP.  Changes to the PSP have now resulted in the failure of these two requirements (requirement text is provided below for reference).    

cFE requirements should be satisfied within the cFE code base.

Failed requirements include:


cES1702.3 If the CPU exception was caused by the Operating System or cFE Core then the cFE shall initiate a <PLATFORM_DEFINED> response.

cES1703.3 If the Floating Point exception was caused by the OS or cFE Core then the cFE shall initiate a <PLATFORM_DEFINED> response.

  ",bug,https://github.com/nasa/cFE/issues/195
Update CFE_EVS_SendEvent calls to use macros introduced in #867,"**Is your feature request related to a problem? Please describe.**
#867 introduced CFE_EVS_SendDbg, CFE_EVS_SendInfo, CFE_EVS_SendErr, CFE_EVS_SendCrit macros but didn't update code to use them

**Describe the solution you'd like**
Update core to use macros

**Describe alternatives you've considered**
None

**Additional context**
Note some coding standards discourage ## in macros.  Could go back to original implementation in #867

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1233
OS_check_name_length portability,"The OS_check_name_length function triggers warnings when
it casts pointers to integers. It then triggers refactoring
when an engineer notices that it is calcualting the length
of a string by casting pointers to int, subtracting, and
dividing by sizeof(char).
",bug,https://github.com/nasa/osal/issues/76
UT Symbol table dump size too small on MCP750 (vxworks),"**Describe the bug**
The unit test case that verifies the `OS_SymbolTableDump()` function has a size limit of only 32000 bytes.  The actual size of the symbol table on the MCP750 test platform is larger, and this returns an error.

**To Reproduce**
Run loader test on MCP750, dump test will fail due to symbol table size limit getting reached

**Expected behavior**
Test should pass

**System observed on:**
MCP750, VxWorks 6.9

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1082
"ES branch missing coverage in CFE_ES_GenPoolRecyclePoolBlock and CFE_ESGenPoolCreatePoolBlock, NULL pointer check","**Is your feature request related to a problem? Please describe.**
The NULL pointer check in CFE_ES_GenPoolRecyclePoolBlock would require either exposing this internal routine or getting really lucky corrupting the record from a separate task since it's valid from the calling function.
```
     119                 :         37 :     BucketPtr = CFE_ES_GenPoolGetBucketState(PoolRecPtr, BucketId);
     120 [ +  - ][ +  + ]:         37 :     if (BucketPtr == NULL || BucketPtr->RecycleCount == BucketPtr->ReleaseCount || BucketPtr->FirstOffset == 0)
                 [ +  + ]
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_generic_pool.c#L119-L120

Same pattern in CFE_ES_GenPoolCreatePoolBlock:
```
     180                 :         31 :     BucketPtr = CFE_ES_GenPoolGetBucketState(PoolRecPtr, BucketId);
     181         [ -  + ]:         31 :     if (BucketPtr == NULL)
     182                 :            :     {
     183                 :            :         /* no buffers in pool to create */
     184                 :          0 :         return CFE_ES_BUFFER_NOT_IN_POOL;
     185                 :            :     }
```
here
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_generic_pool.c#L180-L185

**Describe the solution you'd like**
Questionable usefulness, since it can likely only be hit if a pool without a mutex is shared between tasks and access is not serialized (BAD!).  If the check does remain, could just expose the internal function to force the failure.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1930
Convert defines to constant variables,"**Is your feature request related to a problem? Please describe.**
Defines are both discouraged by standards and clumsy when type matters.

**Describe the solution you'd like**
Convert to constant variables, performance is maintained and get type checking.

Use has started but should really convert the existing defines, example:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L45-L48

Example of improvements, filters as const variables would allow overflow checking:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_evs_api_typedefs.h#L42-L55

**Describe alternatives you've considered**
None.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1439
CFE_PLATFORM_ENDIAN -- not used...?,"#597 removed definitions for CCSDS_{BIG|LITTLE}_ENDIAN. In cfe/sample_defs/cpu1_platform_cfg.h, there is a definition for CFE_PLATFORM_ENDIAN but it is defined as CCSDS_LITTLE_ENDIAN but that is not defined anywhere. Also the comments mention that the valid values for CFE_PLATFORM_ENDIAN are ""0"" or ""1"".",non-bug,https://github.com/nasa/cFE/issues/1998
SB subscription reporting request messages out of family,"**Is your feature request related to a problem? Please describe.**
CFE_SB_EnableSubReportingCmd, CFE_SB_DisableSubReportingCmd, CFE_SB_SendPrevSubsCmd are processed like commands but don't increment the command counter.

Typical pattern is for non-ground, inter-app messages to have separate message IDs from ground commands.

**Describe the solution you'd like**
Make consistent with standard pattern

**Describe alternatives you've considered**
None

**Additional context**
See Hk message processing, or the message processing in Time services that don't increment command counter.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/523
LateX generation issues of mission doc,"**Describe the bug**
When building the `refman.pdf` file, multiple warnings are observed from the TeX system. Additionally, the make process itself ends in error. Note that currently the `refman.pdf` file still gets generated.

**To Reproduce**
Steps to reproduce the behavior:
1. Make sure that `GENERATE_LATEX` is set to `YES` in `../cFS/cfe/cmake/cfe-common.doxyfile.in`
2. Do a `make doc` in `../cFS/`
3. Go to `../cFS/build/doc/detaildesign/latex`
4. Do a `make`
5. Observe all the issues printed to stdout

**Expected behavior**
LateX warnings should not be generated. Make should not end in error

**Reporter Info**
Leor Bleier, NASA GSFC\Code 582
",bug,https://github.com/nasa/cFE/issues/682
Stopping an APP that has a locked mutex using CFE_ES_StopAppCmd BUG,"**Describe the bug**
An APP cannot be correctly stopped by CFE_ES if the `CFE_ES_StopAppCmd` is sent in the same moment that the APP has a mutex locked. Although the app is terminated (with errors), when we try to restart it, it doesn't work.

**To Reproduce**
Steps to reproduce the behavior:
1. Create a mutex in SAMPLE_APP using `OS_MutSemCreate`
2. Take the mutex in the SAMPLE_APP RunLoop using `OS_MutSemTake`
3. Perform CFE_ES CMD `CFE_ES_StopAppCmd` using ""SAMPLE_APP"" as target
4. See error `CFE_ES_CleanupObjectCallback: Call to OSAL Delete Object (ID:327691) failed. RC=-6`

**Expected behavior**
1. CFE_ES should be able to unlock the mutexes in a target APP in order to close all its resources.
1.1. In case CFE_ES behavior can't do that, how can we handle apps that have mutexes and may be closed in the exactly same moment that its mutex is locked (""Taken"") ?

**System observed on:**
 - Ubuntu 18.04 LTS
 - Version: [cFS Caelum Release Candidate 4](https://github.com/nasa/cFS/releases/tag/caelum-rc4) (Also tested with [Aquila](https://github.com/nasa/cFS-GroundSystem/releases/tag/v2.1.0) and [cFS Bootes Release Candidate 2](https://github.com/nasa/cFS/releases/tag/bootes-rc2))

**Additional context**
An example:
![image](https://user-images.githubusercontent.com/22582189/169377359-28a04ffd-a5a4-4cd4-b360-0c83f6a3f79b.png)

**Reporter Info**
Igor Luppi
",bug,https://github.com/nasa/cFE/issues/2107
Alignment warnings when casting char* pointers,"**Describe the bug**
When compiling on architectures with strict alignment requirements, casts between `char*` (as used in some pointer arithmetic to calculate addresses) to other types triggers a warning about alignment.

**To Reproduce**
Build for an architecture with strict alignment requirements (SPARC, MIPS, etc).
Example compiler warning:
```
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c:119:30: warning: cast increases required alignment of target type [-Wcast-align]
    CFE_SB_BufferD_t    *bd = (CFE_SB_BufferD_t *)(((uint8 *)Address) - sizeof(CFE_SB_BufferD_t));
```

**Expected behavior**
Should build cleanly with no warnings

**System observed on:**
- Ubuntu 18.04 LTS build host
- MIPS cross compiler (mips-poky-linux-gcc version 8.2.0)

**Additional context**
Many of these are actually safe because CFE ensures that the `sizeof(CFE_SB_BufferD_t)` as well as the base/pool addresses are aligned for the largest data types.  However, because the pointer arithmetic is done as a `unsigned char*` the compiler sees the cast from an `unsigned char*` to a larger type as an issue.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/437
Change order of size checks for optimization,"In MM_VerifyLoadWIDParams, it is more efficient to check SizeInBytes before calling CFE_PSP_MemValidateRange.  This same optimization would be applicable in other functions.

Imported from GSFCCFS-1573",non-bug,https://github.com/nasa/MM/issues/13
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/to_lab/issues/49
Update copyright and license for open source cFS framework release 6.6.0a,Need to update/add copyright and license to Apache 2.0 for open source release of 6.6.0a.,bug,https://github.com/nasa/PSP/issues/93
CFE_ES_PoolCreateEx NumBlockSizes error handling,"**Describe the bug**
In the header file of CFE_ES_PoolCreateEx, for parameter NumBlockSizes it says ""If set equal to zero or if greater than 17, then default block sizes are used."" In the code though if NumBLockSizes is greater than CFE_PLATFORM_ES_POOL_MAX_BUCKETS (which is set to 17) then it returns error code CFE_ES_BAD_ARGUMENT.

**Expected behavior**
The header and functionality should match. 

**Reporter Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1485
cpp check error,"**Describe the bug**
Cpp check has warning. 

[cfe/fsw/cfe-core/unit-test/ut_time_stubs.c:151]: (error) Uninitialized variable: Result
[cfe/fsw/cfe-core/unit-test/ut_time_stubs.c:211]: (error) Uninitialized variable: Result


**To Reproduce**
Steps to reproduce the behavior:
1. cppcheck --force .
2. See warning

**System observed on:**
 - Hardware
 - 18.04
 - Cppcheck 1.82, cFE 6.7.1, osal 5.0.1

**Reporter Info**
Anh Van, NASA Goddard",bug,https://github.com/nasa/cFE/issues/392
"Remove create child task error reporting requirement, out of family and over-constrains implementation ","**Is your feature request related to a problem? Please describe.**
ES: Create Child Task - Report Error,cES1311.1 over-constrains the design/implementation.  Parameter errors like NULL pointers are not reported in the log for any parameter checking.  No other APIs have this sort of error handling related requirement.

Strict interpretations would mean the failing the requirement as written.

**Describe the solution you'd like**
Delete

**Describe alternatives you've considered**
Changing the implementation would make it inconsistent with all other handling, changing the requirement really just turns the requirement into design.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1768
Update doxygen cFE API documentation,"**Is your feature request related to a problem? Please describe.**
At minimum, CFE_TBL_NotifyByMessage is missing

**Describe the solution you'd like**
Scrub and include references to all API's in documentation

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/506
Remove all mentions of ASIST or ITOS artifacts from documentation,"Some of our doxygen docs still reference ASIST or ITOS artifacts. 

See 
cfs_mm repo: fsw/src/mm_msgdefs.h:l28

Imported from GSFCCFS-1929",non-bug,https://github.com/nasa/HS/issues/11
Clean up massive number of warnings in sb_UT.c,"The {{{sb_UT.c}}} file generates hundreds of warnings in the build, mostly about incompatible types within printf-style calls.

This prevents building with -Werror, and also makes it really difficult to work with the file in general since Eclipse marks nearly every line as a warning.",bug,https://github.com/nasa/cFE/issues/87
Enhanced version reporting,"Use CI_LAB_VERSION from cfecfs_version_info.h if available and report on NOOP and startup (along with classic version numbering)

Classic version numbering can then just be updated on release, vs for every commit.",non-bug,https://github.com/nasa/sample_lib/issues/3
Uncovered condition for while loop in hs_custom.c,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
There will always be room within the DiagValue/Count array here, so it'll match before j >= the limit.  The conditions are not independent:
https://github.com/nasa/HS/blob/2fc0dd99372c1e189e7fe40980dfe2b29a87fdd3/fsw/src/hs_custom.c#L319-L336

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSF
",non-bug,https://github.com/nasa/HS/issues/33
Test `bin-sem-flush-test` does not compile,"OSAL fails to compile with a clean clone of the repo.

```
(.venv) chris@linux-fkyc:~/Workspace/osal> source setvars.sh 
(.venv) chris@linux-fkyc:~/Workspace/osal> cd build/
(.venv) chris@linux-fkyc:~/Workspace/osal/build> make config
test -d inc || mkdir inc
cp -f ../src/bsp/pc-linux/config/osconfig.h inc/osconfig.h
(.venv) chris@linux-fkyc:~/Workspace/osal/build> make
make -C tests 
make[1]: Entering directory '/home/chris/Workspace/osal/build/tests'
make -C bin-sem-flush-test 
make[2]: Entering directory '/home/chris/Workspace/osal/build/tests/bin-sem-flush-test'
gcc  -I/home/chris/Workspace/osal/src/inc -I/home/chris/Workspace/osal/src/os/inc -I/home/chris/Workspace/osal/src/tests/bin-sem-flush-test -I/home/chris/Workspace/osal/src/../ut_assert/inc -I../../inc   -D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER  -D__ix86__ -D_ix86_ -D_LINUX_OS_ -Dposix -DX86PC -DBUILD= -D_REENTRANT -D _EMBED_  -D_XOPEN_SOURCE=600   -Wall -pedantic -std=c99 -Wstrict-prototypes -O1 -DOS_DEBUG_LEVEL=3 -c -o bin-sem-flush-test.o /home/chris/Workspace/osal/src/tests/bin-sem-flush-test/bin-sem-flush-test.c
In file included from /home/chris/Workspace/osal/src/tests/bin-sem-flush-test/bin-sem-flush-test.c:5:0:
/home/chris/Workspace/osal/src/os/inc/common_types.h:326:38: error: size of array ‘TypeUint32WrongSize’ is negative
 CompileTimeAssert(sizeof(uint32)==4, TypeUint32WrongSize);
                                      ^
/home/chris/Workspace/osal/src/os/inc/common_types.h:104:60: note: in definition of macro ‘CompileTimeAssert’
 #define CompileTimeAssert(Condition, Message) typedef char Message[(Condition) ? 1 : -1]
                                                            ^
/home/chris/Workspace/osal/src/os/inc/common_types.h:330:38: error: size of array ‘Typeint32WrongSize’ is negative
 CompileTimeAssert(sizeof(int32)==4,  Typeint32WrongSize);
                                      ^
/home/chris/Workspace/osal/src/os/inc/common_types.h:104:60: note: in definition of macro ‘CompileTimeAssert’
 #define CompileTimeAssert(Condition, Message) typedef char Message[(Condition) ? 1 : -1]
                                                            ^
/home/chris/Workspace/osal/src/make/app-rules.mak:21: recipe for target 'bin-sem-flush-test.o' failed
make[2]: *** [bin-sem-flush-test.o] Error 1
make[2]: Leaving directory '/home/chris/Workspace/osal/build/tests/bin-sem-flush-test'
Makefile:2: recipe for target 'all' failed
make[1]: *** [all] Error 2
make[1]: Leaving directory '/home/chris/Workspace/osal/build/tests'
Makefile:8: recipe for target 'all' failed
make: *** [all] Error 2
(.venv) chris@linux-fkyc:~/Workspace/osal/build> 
```",non-bug,https://github.com/nasa/osal/issues/6
MCP750 PSP fails to build,"**Describe the bug**

Building the current ""master"" branch for mcp750 yields the following build error:
```
/home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_memory.c: In function 'CFE_PSP_GetCFETextSegmentInfo':
/home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_memory.c:426: error: passing argument 1 of 'moduleFindByName' discards qualifiers from pointer target type
```

**To Reproduce**
Build ""master"" using standard procedure and default config.

**Expected behavior**
Build should succeed.

**System observed on:**
 - GSFC MCP750 build machine (gs582w-cfelnx)

**Additional context**
This is an error now due to the inclusion of `-Wall -Werror` in the default build.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/139
TBL owner app ID logic should utilize ID utilities/defines,"**Is your feature request related to a problem? Please describe.**
TBL services defines `CFE_TBL_NOT_OWNED` as `CFE_ES_APPID_UNDEFINED` and then tests for equality, just ends up mixing concepts.  The relation isn't obvious and it's not clear CFE_TBL_NOT_OWNED is actually an (undefined) ID.

**Describe the solution you'd like**
Keep it simple, just use the valid ID macros and associated definition for undefined if it's not owned.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1526
Unit test hooks should refer to context elements by name (future proof),"**Is your feature request related to a problem? Please describe.**
Old context elements were position based, nasa/osal#479 allows getting by name so order added in stub no longer matters.

**Describe the solution you'd like**
Get context by name to future-proof against stub changes.

**Describe alternatives you've considered**
None

**Additional context**
#713 - example

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/717
New buffer size warning in UT assert,"**Describe the bug**
After moving the UtAssert_DoTestSegmentReport() function, it has triggered a new warning when building with optimization enabled (BUILDTYPE=release).

```
/home/joe/code/cfecfs/github-cfs-bundle/osal/ut_assert/src/utassert.c:82:20: error: ‘%-20s’ directive output may be truncated writing between 20 and 127 bytes into a region of size between 117 and 125 [-Werror=format-truncation=]
   82 |              ""%02u %-20s TOTAL::%-4u  PASS::%-4u  FAIL::%-4u   MIR::%-4u   TSF::%-4u   N/A::%-4u\n"",
```

**To Reproduce**
Build with GCC9+ and `BUILDTYPE=release` flag.

**Expected behavior**
Should build cleanly.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/534
pointer handed to pthread_setspecific is not a pointer,"The pthreads ""setspecific"" and ""getspecific"" APIs are used to associate a pointer value, specific to the current thread, with a key value indicating what it represents.

The POSIX implementation of OSAL uses this facility to store the thread-specific index of the thread's task in the task table, and it does so by casting the small integer value to have a pointer type.

It would be safer, instead, to store a pointer to the actual row of the task table as the thread-specific data; this would not violate the expectation that a pointer is either NULL or represents the address of valid data.

Extraction of the table index then becomes a range check followed by a pointer subtraction, rather than a combination of memory copies and masks that make unportable assumptions about sizes and endianness.

Marked as ""minor"" priority as existing code accidentally works on 32-bit systems and little-endian 64-bit systems where sizeof(int)==4, which accidentally covers current use cases.
",bug,https://github.com/nasa/osal/issues/209
Initialize system log mode implementation doesn't match requirement cES1522,"**Is your feature request related to a problem? Please describe.**
Requirement cES1522 ""Upon a Processor Reset, the cFE shall set the System Log Mode to discard.""
Implementation:
https://github.com/nasa/cFE/blob/5d7d766941369b6e92a0328217e43d5fd02a8cf1/fsw/cfe-core/src/es/cfe_es_task.c#L236-L239

The build verification test just happens to pass because the sample configuration defaults the mode to discard.

**Describe the solution you'd like**
Update requirement or implementation.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/410
`CFE_TBL_Load` translates a positive return from the validation function to an error (-1),"**Is your feature request related to a problem? Please describe.**
Although it's documented in the API that a positive return is considered an error (and overwrites the return status), this is out-of-family with the rest of cFE.
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/core_api/fsw/inc/cfe_tbl.h#L163-L169
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_api.c#L820-L829

Also hardcoding as -1 isn't all that helpful, probably worth a unique error code (if this error is kept).

**Describe the solution you'd like**
Seems like the code is trying to do too much.  If != success just send the error event and return the status (it's the Apps problem to handle it), if it doesn't comply w/ cFS error code standards it's outside the scope of cFE to do something special with it.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1521
Remove stray terminators,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/unit-tests/osfile-test/ut_osfile_test.c#L81
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/unit-tests/osfile-test/ut_osfile_test.c#L89

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1273
Scrub for discrepancies between implementation return codes and documentation,"**Is your feature request related to a problem? Please describe.**
Need to perform a general scrub of API documentation for parameters, error checking, and and return codes, as was done for OSAL.

**Describe the solution you'd like**
- Confirm that all return/status codes which are _directly_ generated by an implementation appear in the documentation for that function as a `@retval` clause.
- Confirm that all return codes specified by a `@retval` clause also have a test case that covers them
- Confirm that parameter documentation is appropriately marked `@nonnull` or `@nonzero` where applicable
- Confirm that there is a test case that violates above rule to test function response w/bad input
- Confirm that coverage tests are not ""overloaded"" (i.e. violate only one rule at a time when confirming status code response).

**Additional context**
See nasa/osal#980

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1724
Apps should not pend forever on software bus,"The SAMPLE_APP, which is supposed to exemplify the current best practices, shouldn't be pending forever on a software bus message as it does here:

https://github.com/nasa/sample_app/blob/b95629216ae8cda3b86332f81bb515743fedcede/fsw/src/sample_app.c#L85-L87

The problem with pending forever is that the app also needs to perform an orderly exit if a restart/reload/delete command is sent to ES, which is checked by `CFE_ES_RunLoop()`.  If an app is pending forever for software bus messages but none are sent, then the shutdown request will remain pending indefinitely.
",non-bug,https://github.com/nasa/sample_app/issues/55
doxygen warning,"**Describe the bug**
psp/fsw/inc/cfe_psp_configdata.h:22: warning: the name `cfe_psp_config.h' supplied as the second argument in the \file statement is not an input file

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide
2. See error

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/PSP/issues/112
Remove CFE_PSP_MemSet and CFE_PSP_MemCpy use on addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/DS/issues/23
Use synchronization mechanism instead of delays,"**Is your feature request related to a problem? Please describe.**
Synchronization mechanism would be better (more responsive, etc) vs delays.

In CFE_ES_WaitForSystemState:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L627

In CFE_ES_GetTaskFunction:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L505

**Describe the solution you'd like**
Replace delay loop w/ synchronization method

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1326
Offer secondary target for UT assert library that can be dynamically loaded,"**Is your feature request related to a problem? Please describe.**
The current UT assert is designed to be statically linked as an OSAL application.

To support a CFE functional test environment that uses the same UT assert reporting methods, the library should offer a target that can be linked as loadable module.

**Describe the solution you'd like**
The differences are:

- Compile as position independent code (PIC) so it can be linked into a dynamic module.
- Separate out the OS_Application_Startup and OS_Application_Run - as this will be loaded into a larger app, not a standalone app, and these symbols are already defined.
- Consolidate global variables into a common structure and make early init/reset of these variables into a separate routine from OS_Application_Startup.

**Additional context**
This dynamically-loadable variant can be a separate target, so it shouldn't change anything about the existing apps/tests that link with the existing static ""ut_assert"" library.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/501
Incorrect check of status from CFE_SB_ReceiveBuffer(),"Checking of the status return from this CFE API call is not correct/sufficient:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L1365-L1369

This function may fail for a number of reasons, not limited to `CFE_SB_NO_MESSAGE`.

The preferred check should be:

    if (status != CFE_SUCCESS)",bug,https://github.com/nasa/CF/issues/73
Add ut_assert address equal macro,"**Is your feature request related to a problem? Please describe.**
Address equal macro would be handy.

**Describe the solution you'd like**
Add it.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/604
Remove all mentions of ASIST or ITOS artifacts from documentation,"Some of our doxygen docs still reference ASIST or ITOS artifacts. 

See 
cfs_mm repo: fsw/src/mm_msgdefs.h:l28

Imported from GSFCCFS-1929",non-bug,https://github.com/nasa/MD/issues/6
C++ comment style and commented out code violations,"**Is your feature request related to a problem? Please describe.**
C++ comment style and commented out code violates style guidelines

https://github.com/nasa/elf2cfetbl/blob/6762b1c3b455665dae57e35f14a50fe327830391/elf2cfetbl.c#L2269

**Describe the solution you'd like**
Clean up

**Describe alternatives you've considered**
None

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/elf2cfetbl/issues/70
Use 0 as CFE_SB_INVALID_MSG_ID,"**Is your feature request related to a problem? Please describe.**
Currently the value for an ""invalid"" MSG ID is -1, as defined here:

https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/core_api/fsw/inc/cfe_sb_api_typedefs.h#L86

The pattern used in other modules (which is preferred) is to use 0 as the invalid value, for several reasons:

- Local variables/structures which are explicitly memset to 0 before use (common/recommended practice) will get automatically set to the INVALID value
- Global data structures in BSS section get automatically memset to 0 by the loader
- Uninitialized members of a partially initialized data structure will be automatically memset to 0

So, its much safer to embrace 0 as the reserved/invalid/placeholder value, due to all the different ways memory is cleared to 0 both implicitly and explicitly.

**Describe the solution you'd like**
Change the definition of `CFE_SB_INVALID_MSG_ID` to be 0, rather than -1.

**Additional context**
Standard headers (historical/v1) are safe because any valid MsgId always has the ""secondary header"" flag set (bit 11).  So any valid MsgId is already guaranteed to be nonzero.  Should be trivial to change in this config.

Will require a check/confirmation of the Extended headers (v2) configuration, to ensure that the MsgId value 0 does not correlate to a valid address.  Since one assumes that 0xFFFFFFFF (-1) already does not correlate to a valid address, it may be as simple as just flipping the bits or adding 1, if that's an issue.

Note that most other resource types (AppId, TaskId, OSAL IDs, MemHandle, etc) already use 0 as the invalid/reserved value for the same reason.  MsgId and TableId are still outliers that do not do this.  For consistency and reliability reasons they should both be updated.  (TableId can be fixed under a separate ticket, possibly as part of a more complete refactor of TBL services)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1944
Allow out-of-tree psp paths,"**Is your feature request related to a problem? Please describe.**
Requiring a PSP to always be defined inside the PSP repository means holding a set of patches on top of the upstream version. This adds friction when updating to latest version.

**Describe the solution you'd like**
At least initially, `CFE_SYSTEM_PSPPATH` should be introduced. It should be configurable and it should allow arbitrary paths to PSP files. 
",non-bug,https://github.com/nasa/PSP/issues/134
Allow RtsGrp commands to accept non-contiguous ranges,"Currently the RtsGrp commands accept a range of RTSs from start_index to end_index.  Instead, the command could accept a set of bytes where each bit corresponds to the RTS to start.  This would allow the group commands to work with a range of RTSs that is non-sequential

Imported from GSFCCFS-1468",non-bug,https://github.com/nasa/SC/issues/12
"JSC: Add ""void *"" casts","Add explicit `(void *)` casts where ever a local object is being passed into a function that accepts a void pointer.

",bug,https://github.com/nasa/cFE/issues/160
Overwriting unused buffer content,"As reported by cppcheck performance:

Buffer % is being written before its old content has been used.

Reported against:
{{{
src/unit-tests/osfile-test/ut_osfile_fileio_test.c:910
src/unit-tests/osfile-test/ut_osfile_fileio_test.c:1089
src/unit-tests/ostimer-test/ut_ostimer_test.c:100
}}}
... and a bunch of places in ut_os_stubs.c

Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.",bug,https://github.com/nasa/osal/issues/127
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/HK/issues/15
Segfault when calling OS_FDGetInfo on datagram socket ID,"**Describe the bug**
Sockets opened with OS_SocketOpen get assigned an OSAL ID which is of the same type/classification as file IDs and shares the same global table.  However, these IDs do not have a name associated with them, and thus the `name_entry` field of the global structure is NULL for these objects.

The `OS_FDGetInfo` will validate this type of ID (because it is a file type) but will attempt to copy the name unconditionally, which results in a segfault because the pointer is NULL.

**To Reproduce**
1. Acquire a datagram socket ID using `OS_SocketOpen()`
2. Invoke `OS_FDGetInfo()` on that socket
3. Get Segfault in `strncpy()`

**Expected behavior**
Should not segfault, rather the returned name should be empty.

**Code snips**
Offending call to strncpy is here:
https://github.com/nasa/osal/blob/b0958583748eedd776622f0a873c769b7c554d48/src/os/shared/src/osapi-file.c#L535

**System observed on:**
Ubuntu 

**Additional context**
This code just needs to account for the name_entry being (validly) NULL on some types of entries.

**Reporter Info**
Originally found by @dmccomas in OSK implementation

",bug,https://github.com/nasa/osal/issues/1222
Replace multiline `CFE_ES_SYSLOG_APPEND` macro with inline function,"**Is your feature request related to a problem? Please describe.**
Use of multiline macros should be avoided (per coding standard):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_log.h#L100-L106

**Describe the solution you'd like**
Replaced with inline, or one line macro/inline combo

**Describe alternatives you've considered**
Wrap with do {...} while(0), see https://gcc.gnu.org/onlinedocs/cpp/Swallowing-the-Semicolon.html

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1349
Add functional tests for cFE Generic Counter APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Generic Counter APIs
– CFE_ES_RegisterGenCounter - Register a generic counter.
Generated by Doxygen
10 CONTENTS
– CFE_ES_DeleteGenCounter - Delete a generic counter.
– CFE_ES_IncrementGenCounter - Increments the specified generic counter.
– CFE_ES_SetGenCount - Set the specified generic counter.
– CFE_ES_GetGenCount - Get the specified generic counter count.
– CFE_ES_GetGenCounterIDByName - Get the Id associated with a generic counter name.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/813
Consistent CFE_PSP_Main implementation,"RTEMS PSP hardcodes ""/cf/cfe_es_startup.scr"", but mcp750 and pc-linux both use the CFE_PLATFORM_ES_NONVOL_STARTUP_FILE.

Inconsistent implementations.

From #102  (solved here):
cfe_psp_start.c for mcp750 VxWorks has StartupFilePath as an input parameter to CFE_PSP_Main, but calls CFE_ES_Main with CFE_PLATFORM_ES_NONVOL_STARTUP_FILE.

Confusing implementation... looks like at least the pc-linux PSP only uses CFE_PLATFORM_ES_NONVOL_STARTUP_FILE (but a different prototype).",non-bug,https://github.com/nasa/PSP/issues/103
PSP must not use OS_printf() before OS_API_Init,"In particular this is important when the ""utility task"" is in use (soon to be standard).  If `OS_API_Init()` hasn't been called yet, then the data buffer to which `OS_printf()` writes is not valid.

The OSAL implementation does protect against this and it should drop the data, but PSP shouldn't be calling this function before the initialization.  

(It happened to be OK if OS_printf was just a wrapper around printf, but if OS_printf is anything more, then it doesn't work).

Just use `printf` or native C library calls before OS_API_Init().",bug,https://github.com/nasa/PSP/issues/99
Add check for command APID when command queue defined,"The segfault in issue #42 was caused by specifying a command MID with a message not defined as a command (and which thus had no queue defined for it). The ECI code blindly attempted to utilize the queue which didn't exist, causing the segfault. 

During the course of resolving that issue it was determined that a check can be done [here](https://github.com/nasa/ECI/blob/master/fsw/src/eci_app.c#L328) to confirm the that there's a queue allocated if the MID indicates the message is a command. 

That check would look something like if `MsgRcv[idx].MsgStruct->qptr == NULL`, issue an error event message warning the user about a misconfiguration, and either

* skip the configuration of the queue for that message (if we can establish that the app will still work without it)
* exit the app, if its going to be too broken to function

Work needs to be done to determine the correct course of action and implement this check.",non-bug,https://github.com/nasa/ECI/issues/44
"EVS ""CFE_PLATFORM_EVS_LOG_ON"" option unit test failure","**Describe the bug**
The Event Services subsystem has a broken compile-time platform option called `CFE_PLATFORM_EVS_LOG_ON`.  The description says: ""The CFE_PLATFORM_EVS_LOG_ON configuration parameter must be defined to enable EVS event logging""

If UT is disabled, then CFE core itself actually seems to build and run OK.  However, certain risky things are not clear in the code that:

- The `EVS_SharedDataMutexID` will be left uninitialized
- The `EVS_LogPtr` will be left as NULL

The code that accesses these seems to be mostly protected by checking the separate `CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogEnabled` member boolean in the outgoing telemetry packet.  This seems like a weak design, in particular because the telemetry packet is supposed to be informational, not an active control structure.

**To Reproduce**
Disable the `CFE_PLATFORM_EVS_LOG_ON` option, and build with `ENABLE_UNIT_TESTS=TRUE`.  CFE EVS unit test fails to build with a compiler error.

**System observed on:**
Ubuntu 18.04 LTS 64 bit.

**Additional context**
Unless there is a specific requirement for `CFE_PLATFORM_EVS_LOG_ON` as it stands today, my recommendation would be to deprecate this option and keep it always on, which reduces the testing matrix, and makes the FSW code more consistent.  Platform config options that actually add/remove `#ifdef` code should be avoided, as this has proven to be a testing/support issue time and time again.

In this case, only the code that initializes the structures is compiled out.  All the code that reads/writes to it is still compiled in, but skipped via a runtime test.  So this isn't saving much in the way of code/text space.

If the goal of this option is to save data space memory, then _mostly_ the same effect can be achieved by keeping the log very small, by setting `CFE_PLATFORM_EVS_LOG_MAX` to a very low number, such as 1.  In this mode the log structure uses only 176 bytes of memory on an x86-64 machine, down from 3368 bytes with the default size of 20.  

And the unit tests still build and pass with the max set to 1, and it reduces the amount of conditionally-compiled code and variances on the FSW side.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/609
Update CLA information in Apache 2.0 cFS App repositories,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/cFS/issues/495
Use consistent documentation generation directories/names to support matrix actions from cFS,"**Is your feature request related to a problem? Please describe.**
Naming isn't consistent, osal-apiguide uses osalguide directory, mission-doc generates a detaildesign directory but the warning file gets put in the docs directory instead of subdir, etc.

**Describe the solution you'd like**
Make behavior consistent.

**Describe alternatives you've considered**
None

**Additional context**
Cleaning up top level nasa/cFS#447

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2083
`TblName` not processor specific (comment clarification),"**Is your feature request related to a problem? Please describe.**
Multiple locations refer to `TblName` as ""processor specific"", which doesn't make sense since it's just AppName.TableName.  Even if the table is processor specific, it should likely have a non-processor specific name such that apps are portable.

Examples:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L92-L94
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L73-L76
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L212-L218
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L682-L688
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_internal.c#L606
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_internal.h#L246-L256

Note `TblName` is described as `ApplicationName.TableName` which is somewhat circular, but this could be addressed as part of #1412 (similar to #1401).  Suggestions - FullName, QualifiedName, ResourceName...

**Describe the solution you'd like**
Remove processor specific language

**Describe alternatives you've considered**
None

**Additional context**
#1401 is similar wrt CDS names
#1412 is a general issue related to resource naming

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1507
Alternate condition impossible to exercise - static analysis,"**Is your feature request related to a problem? Please describe.**
Impossible to hit alternate case (even considering reconfiguration):

Status is always >= CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE (line 162) since it's checked at line 150:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/tbl/cfe_tbl_internal.c#L143-L163

NumBlockSizes > CFE_PLATFORM_ES_POOL_MAX_BUCKETS is always false on line 203 since it's checked on 190:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_mempool.c#L189-L207

EventID can never be 0 and RegName can never be NULL, if it was it would be a bug.  This sort of thing (preventing a developer from introducing a bug with logic in production code) is better prevented via good unit test design.  If a case is added it should check the event.
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L1295

**Describe the solution you'd like**
Remove cases where an alternate condition can not be exercised
- A step closer to being able to do MC/DC coverage
- Remove unnecessary logic

**Describe alternatives you've considered**
Occasionally considered ""future proofing"" but developers should never depend on a condition being tested twice when modifying code.

**Additional context**
Triggers CodeQL warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1180
Maximum number of cFE instances?,"This is not a bug, but a question related to cFE usage:
We are currently trying to perform multi-agent simulations using applications developed on the cFE middle-ware. A single agent is launched by running the core executive. However, we are not able to launch more than 7 instances of cFE on a single linux machine. The 8th instance of cFE throws errors: ""CreatePipeErr: OS_QueueCreateErr returned -1"" Please see attached image. Are there any parameters that could be changed to enable more instances of cFE to run on a single machine? 

Changing the default values of OS_MAX_QUEUES, CFE_PLATFORM_SB_MAX_PIPES didn't seem to help.

![CreatePipeErr](https://user-images.githubusercontent.com/7516618/73398738-00038a80-42b4-11ea-8a5a-a9b7e9c56a1a.png)

**Reporter Info**
NIA/NASA Langley
",non-bug,https://github.com/nasa/cFE/issues/501
ES header prototypes for nonexistent functions,"**Is your feature request related to a problem? Please describe.**
Some old/stale prototypes in `cfe_es_apps.h` are here:

https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/es/cfe_es_apps.h#L241-L251

These functions are not implemented - there is no definition to go along with these prototypes.

**Describe the solution you'd like**
Remove these - Should not prototype functions that are not defined.  (obviously not being called by anything)

**Additional Context**
Noted this when reviewing other nearby changes....

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1110
Update/resurrect the add_unit_test_lib/add_unit_test_exe functions,"**Is your feature request related to a problem? Please describe.**
Currently the `arch_build.cmake` functions provide a routine to easily define a CFE app: `add_cfe_app()` .  This makes it easy for app developers to create an app target that uses all the right compiler definitions, include dirs and link/interfaces libraries.  Furthermore, having this wrapper in CFE helped future-proof so that apps didn't need to change this call when #972 was implemented.

The problem is that we didn't employ the same tactic for unit tests.  For these, all the special logic for adding flags/includes is basically put into the CMakeLists.txt in each app where the UT targets are defined.

**Describe the solution you'd like**
The `arch_build.cmake` does have a `add_unit_test_lib` and `add_unit_test_exe` function that was originally intended for this purpose, but these were never really used.  We should implement the basic UT logic here and change sample app/lib to use them.

**Additional context**
Currently, the sample_lib/sample_app unit tests break when merging with #1203 because of the different paths and the transition toward interface libraries.  Rather than just updating these UT builds to work again, using these functions would help avoid this issue in the future.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1207
Resolve additional internal static analysis warnings in fsw,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
4 ""red"" errors reported by internal static analysis (license restricts publishing results)

**Describe the solution you'd like**
Resolve the warnings (uninit variable * 3 and one non-distinct identifier)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/CF/issues/218
Report error writing header in EVS Write app data file,"**Is your feature request related to a problem? Please describe.**
Error from `CFE_FS_WriteHeader` in `CFE_EVS_WriteAppDataFileCmd` not reported.

**Describe the solution you'd like**
Add an event to report a failure in writing the file header.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1433
Remove dependencies on deprecated SB APIs,"**Is your feature request related to a problem? Please describe.**
SB APIs deprecated in nasa/cFE#777

**Describe the solution you'd like**
Update to use MSG module.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/ci_lab/issues/57
Update PSP build options files to use add_definitions,"These had been setting the ""OSAL_C_FLAGS"" variable and relied on OSAL preserving this value.

However after [cfs_osal:216] this no longer gets preserved (necessary because UT and real code may have different BSPs/Flags).

Using the cmake `add_definitions` mechanism is more appropriate and more reliable as it does not depend on the behavior of the OSAL build procedure.",bug,https://github.com/nasa/PSP/issues/110
Potentially unsafe use of strcat,"**Describe the bug**
May cause buffer overflow since the size of the source string is not checked.

**Expected behavior**
Same behavior with check.

**Code snips**
https://github.com/nasa/osal/blob/06e2be98dcb28145bd0c0030e93bc4e659cf9b20/src/unit-test-coverage/ut-stubs/src/libc-string-stubs.c#L139-L139

**Additional context**
Caught by CodeQL. Severity is rated at critical. 
Can remove since it is part of coverage testing.

**Reporter Info**
Ariel Adams, MCSG Tech
",non-bug,https://github.com/nasa/osal/issues/1295
Add pc-rtems BSP to OSAL,"For development under RTEMS it is helpful to have a basic BSP that does not require any special development boards.

The RTEMS project provides this via the ""pc686"" BSP. This makes it possible to boot and run an RTEMS application on ordinary commodity PC hardware.

This also boots and runs in virtual machines i.e. QEMU which is very desirable for testing.

This ticket will add a ""pc-rtems"" BSP to OSAL that can be used for this purpose.",non-bug,https://github.com/nasa/osal/issues/52
Coding Style: Braces around single-line statements in if/for blocks?,"**Describe the bug**
Most single-line statements (>97%) in if/for blocks are surrounded by braces, but not all.

**Expected behavior**
If not contrary to the coding standard, no change is required, although consistency is always nice...

**Additional context**
Most safety-focused coding standards require braces in call blocks, even for single-line statements (and often even for empty statements). I'm not sure where the cFS (GSFC) standard stands on this.

This is due to the perceived improvement in readability and maintainability (i.e. with braces, there is a lower risk of messing up the scope of a statement when something is either added or removed in the future).

**Code snips**
https://github.com/nasa/CF/blob/b9a88983e7396ce0ae0e42abe82e1fc9fd86bd51/fsw/src/cf_cfdp_s.c#L789-L790
https://github.com/nasa/CF/blob/b9a88983e7396ce0ae0e42abe82e1fc9fd86bd51/fsw/src/cf_cmd.c#L596-L597
A few further examples from around cFS to illustrate:
https://github.com/nasa/MD/blob/908165343533c8288631cc5a2a1e9b87dc3fb818/fsw/src/md_utils.c#L49-L50
https://github.com/nasa/to_lab/blob/9e2ad8cccafaad6d09902213971344d9e277e9f9/fsw/src/to_lab_app.c#L216-L219
https://github.com/nasa/cFS-GroundSystem/blob/73935aca4b417c717ef6b6be03bbf5e1ad5b48f5/Subsystems/cmdUtil/cmdUtil.c#L398-L399

**Reporter Info**
Avi Weiss @thnkslprpt ",non-bug,https://github.com/nasa/CF/issues/350
Make file system API work more like the rest of OSAL,"In addition to the error code issue in ticket #34, other aspects of the filesystem API should be fixed to better integrate with the rest of OSAL:
* The filesystem API is not a full abstraction, it is only a light wrapper around the POSIX/C library functions.  Similarly, the ""os_fstat_t"", ""os_dirp_t"", and ""os_dirent_t"" are directly typedef'ed to the C library types and not abstracted in any way.  The effect of this is that any application code written using the OSAL filesystem API is ultimately still dependent on the underlying system libraries and headers, and the particular POSIX/C standard variant it supported, and may not be portable to other OS's.
* Due to the direct use of OS-supplied types and implementation, this implicitly adds a limitation that any OSAL filesystem must also map to a ""real"" filesystem recognized by the underlying OS.  It is not possible to access a file storage device unless the OS already recognizes its filesystem.
* The API calls are defined differently and look/feel more like C library functions than the rest of OSAL.  Some FS functions return an ""int32"" which serves as both an object ID and error code.  Other FS function return a pointer and these have no way of returning a more descriptive error other beyond a NULL pointer.  In the rest of OSAL, API functions pass back an object ID separately from the error code via a separate ""uint32"" parameter.  This eliminates confusion of how to differentiate an error code from a valid object ID.

This can be fixed without breaking API compatibility with existing code:
* The types which are currently directly typedef'ed to the C library types can be properly abstracted.  This will be transparent to application code as long as the names are preserved.
* A new file API can be introduced that works more like the rest of OSAL, and wrappers implemented to mimic the current API so that existing code still works.  To save code memory space, an optional compile time switch (e.g. in osconfig.h) can disable the wrapper functions once application code is updated.",non-bug,https://github.com/nasa/osal/issues/35
Missing some dependency include files in public API headers,"**Describe the bug**
As a general rule of thumb, all header files should directly include whatever dependencies they require in order to provide the types/declarations they intend to provide.

However in the CFE headers there remain a couple omissions/mistakes in this regard:

- `cfe_es.h` declares the function `CFE_ES_GetModuleInfo` which accepts a resource ID input, so this depends on `cfe_resourceid_api_typedefs.h`, but it does not directly include this dependency
- `cfe_tbl_api_typedefs.h` defines a `CFE_TBL_Info_t` type, which in turn has a member sized to `CFE_MISSION_MAX_PATH_LEN`, which is provided by `cfe_mission_cfg.h`, but it does not directly include this dependency.

In both cases the current framework sample builds do compile successfully, because the dependent header gets included implicitly (i.e. by some header before it) in all the current use cases, but this could change in other use cases.

**To Reproduce**
Use header files in contexts beyond what the current framework does, such as 3rd party code only including ""cfe_es.h"" or ""cfe_tbl_api_typedefs.h"" directly.

**Expected behavior**
Headers should work (compile w/o errors or warnings) when included individually, they should include all dependencies directly rather than relying on inclusion ordering.

**System observed on:**
Ubuntu

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1942
MM Messages - Memory address being truncated to 32 bits on 64 bit machines,"**Describe the bug**
Memory address's displayed in messages are (sometimes) being truncated to 32 bits on 64 bit machines

**Code snips**
Example from mm_app.c:
CFE_EVS_SendEvent(MM_SYM_LOOKUP_INF_EID, CFE_EVS_EventType_INFORMATION,
                                ""Symbol Lookup Command: Name = '%s' Addr = 0x%08X"", CmdPtr->SymName,
                                 (unsigned int)ResolvedAddr);

**Reporter Info**
Dan Knutsen
NASA Goddard
",bug,https://github.com/nasa/MM/issues/22
CFE ES makes assumptions about OSAL opaque objects,"OSAL returns object identifiers which are defined as uint32 values.  In the current implementation of OSAL they happen to be zero-based but this should not be a requirement; in fact there are several advantages to making these identifiers non-zero-based.

The primary offender is the ES core application using the task ID from OSAL directly as an array index.

To ensure compatibility the OSAL object IDs should be treated as opaque integers of undefined range.
",bug,https://github.com/nasa/cFE/issues/41
Add OS_GetModuleIdByName() to return ID of a module given the name,"**Is your feature request related to a problem? Please describe.**
If ES loads a module (such as a library that an app uses), but an app wishes to unload that module, that app has no way to find the ID to send to the Unload function.

**Describe the solution you'd like**
Add an OS_GetModuleIdByName() function that returns (via an out param) the ID of the module given its name.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/543
Inconsistent Pipe ID reporting in SB events,"**Is your feature request related to a problem? Please describe.**
As a follow on for issue #1073 / PR #1092  - I noticed that the format strings of many SB event texts are not consistent, particularly with respect to Pipe IDs.  Some print the Pipe Name, whereas some just print the ID.  There is also a debug event that gets generated whenever `CFE_SB_GetPipeName()` runs, which means that for events that print the name, they actually generate _two_ events in the event log - which clutters things up.

Should be a rule of thumb that we should avoid generating more/different events in the process of generating an event - aside from being confusing it can also snowball.

**Describe the solution you'd like**
Only print the pipe IDs, not names., and use a consistent pattern/conversion (I recommend Hexadecimal/`%lx` conversion for resource IDs as it clearly reveals the table index in the lower 4 hex digits).  

Getting names at runtime is not totally trivial - There is CPU time to copy the string, and memory to store the name - and it makes all API functions that much more complex.  

But as long as the IDs are in the event text, the names can be looked up later after the fact by dumping the pipe stats to a file.  (assuming that #995 is fixed too).  It's just faster and easier and keeps the implementation simpler.

**Additional context**
The previous PR attempted to keep the event text the same as it was whenever possible, but this should be considered as a follow-on to clean up and simplify.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1093
Implement generic location for CFE modules,"**Is your feature request related to a problem? Please describe.**
There are a number of new modular add-ons for CFE that should be distributed with CFE core but aren't really part of the ""core"" proper.  Such as:

- Test Framework apps
- Message accessor library

These modules should be with the CFE core so that users get a sensible baseline when cloning the CFE core repo as the CFE itself depends on/uses them, but these modules can also be replaced with customized versions at the user discretion.

**Describe the solution you'd like**
Proposal is to introduce a new top level directory `cfe/modules` to hold these items.  This needs to be added to the module path and also to provide a ""defaults"" file that can select the default set(s) of modules to include if the user doesn't override/replace them.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/739
Code style update - only inline empty functions,"**Is your feature request related to a problem? Please describe.**
Complaints about single line functions being inline

**Describe the solution you'd like**
Don't.

**Describe alternatives you've considered**
Ignore complaints.

**Additional context**
None, whitespace.

**Requester Info**
Jacob Hageman - NASA/GSFC, per https://github.com/nasa/sample_lib/pull/23#pullrequestreview-416317282",non-bug,https://github.com/nasa/cFS/issues/88
LC Hash logic comments only applicable to V1 Message IDs,"If the V1 Message ID isn't used, theoretically the hash could collide up to the entire length of the linked list.

At minimum the comments should reflect the possibility for more hash collisions, but might be worth reconsidering implementation or reporting collision depth.

Imported from GSFCCFS-1881",non-bug,https://github.com/nasa/LC/issues/18
test for unsigned variable less than zero,"cppcheck messages:
{{{
src/os/posix/osapi.c:2273: style: Checking if unsigned variable 'sem_initial_value' is less than zero.
src/os/posix/osapi.c:2794: style: Checking if unsigned variable 'sem_initial_value' is less than zero.
}}}

NOTE: be sure to check the vxworks and rtems versions, they may also need fixing.
",bug,https://github.com/nasa/osal/issues/155
Add Signature Checking Command to FM,"Stakeholder request - add a command to check the signature of a file.  

In the open source version of the app, this will call an empty stub in fs_lib that will always succeed (allows external users to fill in their own implementation).

Imported from GSFCCFS-1407",non-bug,https://github.com/nasa/FM/issues/12
"OSAL should provide a typedef for ""ID"" values","**Is your feature request related to a problem? Please describe.**
The OSAL API uses `uint32` type to identify objects/resources in an abstract way.

**Describe the solution you'd like**
There should be a typedef for this.  For instance:

    typedef uint32 OS_id_t;

This typedef can then be used in all APIs rather than using `uint32` directly.

**Describe alternatives you've considered**
Keep using `uint32`.

**Additional context**
Providing a typedef is generally accepted as good practice in terms of future proofing the code.  This wouldn't change anything immediately, as the type will remain `uint32` as it currently is.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/555
Scrub error documentation section of command codes,"**Is your feature request related to a problem? Please describe.**
Error documentation section of command codes is not consistent/complete

**Describe the solution you'd like**
Scrub and update the error documentation for all command codes.  Needs to detail error cases.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1396
CFE_EVS event filtering doesn't seem to work correctly,"**Describe the bug**
EVS doesn't seem to filter out the mask for CFE_EVS_FIRST_ONE_STOP.  I have not tried other pre-defined filter mask values.

**To Reproduce**
Steps to reproduce the behavior:
1. Build & run SCH as-is with just CI & TO as part of the FSW.  Make sure TO subscribes to short/long event messages.  Increase TO TLM pipe depth to max depth.
2. Observe the console output from FSW.  TO TLM pipe would overflow with SCH as sender

**Expected behavior**
A clear and concise description of what you expected to happen.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware
 - OS: CentOS 6.10 & 7.x
 - Versions: cFE 6..x7, OSAL 5.0.x

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFE/issues/564
no way to find an existing pipe ID by name,There is no way to find a pipe ID given a pipe name for an existing pipe.,non-bug,https://github.com/nasa/cFE/issues/210
OS_TaskPrepare should propagate return code.,"**Describe the bug**
In the internal `OS_TaskPrepare()` routine, it calls a low-level implementation routine but does not propagate the return code.

**To Reproduce**
More theoretical than real.  In POSIX this depends on the underlying `pthread_setspecific()` routine returning an error, of which the only documented error (at least per POSIX) is `ENOMEM`.  However that doesn't mean that there couldn't be other implementation-specific errors on other systems.

**Expected behavior**
If the `OS_TaskRegister_Impl()` fails, this result should be propagated up the stack and prevent the task from starting.

**Code snips**
See here:
https://github.com/nasa/osal/blob/8cfd6fe71a5506be8e463f26d92441785fd3e242/src/os/shared/src/osapi-task.c#L117-L125

**System observed on:**

**Additional context**
If this fails then it means dependent routines like `OS_TaskGetId()` will also be broken, so it really should block startup of the task and return the error to the caller.  Catching this type of error early, when possible, is usually better than getting an obfuscated error later.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/565
cFE Time subsystem has calls to OS functions that do not exist for non-default configurations,"In the cFE Time subsystem, there are a couple of calls to functions that do not exist: OS_GetLocalMET and OS_SetLocalMET. These calls are conditionally compiled by a configuration parameter, and probably not used often.

Note: GSFC's MMS FSW uses these functions and had to provide them.",bug,https://github.com/nasa/cFE/issues/123
Sample App should be Consistent with App Developer's Guide,"Originated by Dave (135 on babelfish)

The sample_app provided with the cFE is not consistent with the example app documented in the Application Developer's Guide. The App Developer's Guide should documented recommended styles and practices. Similarly the sample_app should implement them. I don't think Sample App needs to cover all of the potential app features like Critical Data Stores, Child Tasks, etc. Just the basics to get someone started.",non-bug,https://github.com/nasa/sample_app/issues/1
"SB missing coverage in CFE_SB_AppInit, alternate config but suggested refactor/redesign","**Is your feature request related to a problem? Please describe.**
Uncovered code since it would require an alternate config where CFE_PLATFORM_EVS_MAX_EVENT_FILTERS is less than the defined number of filters:
```
     190                 :            :     /* Be sure the number of events to register for filtering
     191                 :            :     ** does not exceed CFE_PLATFORM_EVS_MAX_EVENT_FILTERS */
     192         [ -  + ]:         12 :     if (CFE_PLATFORM_EVS_MAX_EVENT_FILTERS < CfgFileEventsToFilter)
     193                 :            :     {
     194                 :          0 :         CfgFileEventsToFilter = CFE_PLATFORM_EVS_MAX_EVENT_FILTERS;
     195                 :            :     
```
here:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/sb/fsw/src/cfe_sb_task.c#L190-L195

**Describe the solution you'd like**
Consider refactor of self-filtering, unfriendly to ground management of filters.  Generated events shouldn't spam to begin with, and be useful vs requiring self-filtering.  Or if this pattern is retained the silent misconfiguration isn't great, could better utilize EVS registration error reporting.  Either way this design isn't great.  Could get coverage by modifying config, but really it'd just be broken (have user fix config vs silently not doing what the user requested).

**Describe alternatives you've considered**
See above.

**Additional context**
#1468

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1919
Use Generated Stubs,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
HK unit testing currently uses a set of stubs for its internal units that are not generated by the tool

**Describe the solution you'd like**
Use the generated stubs directly whenever possible, as this makes future maintenance easier - when an API changes, just re-run the generator tool to update the stubs.

**Additional context**
This requires some additional separation of items - global variable stubs should be in a separate compilation unit, as the tool does not generate these.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/HK/issues/46
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/ci_lab/issues/105
Add travis.yml for cppcheck on psp/fsw,"**Is your feature request related to a problem? Please describe.**
Add cppcheck for fsw

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/PSP/issues/119
Cppcheck flagging UT_DEFAULT_STUB as unknown macro,"**Describe the bug**
In recent runs of cppcheck, the following error is being reported

```
Run if [[ -s general_cppcheck_err.txt ]];
src/unit-test-coverage/vxworks/ut-stubs/src/vxworks-os-impl-common-stubs.c:32:1: error: There is an unknown macro here somewhere. Configuration is required. If UT_DEFAULT_STUB is a macro then please configure it. [unknownMacro]
UT_DEFAULT_STUB(OS_API_Impl_Init, (osal_objtype_t idtype))
^
Error: Process completed with exit code 255.
```

**To Reproduce**
Run static analysis workflow

**Expected behavior**
Should pass

**System observed on:**
Github workflow

**Additional context**
See https://github.com/nasa/osal/actions/runs/3345955942/jobs/5542154451

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1324
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen `warnings for documented empty return type`

**Describe the solution you'd like**
Remove unnecessary documentation

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/322
CFE_SB_GetLastSenderID will crash if if called before message sent on pipe,"CFE_SB_GetLastSenderID assumes that CFE_SB.PipeTbl[PipeId].CurrentBuff is not NULL. Upon CFE_SB_CreatePipe, this will be null. CurrentBuff is only set upon receiving a message in CFE_SB_RcvMsg(). So, if CFE_SB_GetLastSenderID is called before receiving a message the program will crash.

This is Steven Seeger from GSFC. Guess I have a personal account on github. :)",bug,https://github.com/nasa/cFE/issues/494
Possible deadlock of timer callbacks,"**Describe the bug**
If the actual timer interval is larger than the requested timer interval, due to the system tick timer resolution, then it is possible for timers to become deadlocked.

**To Reproduce**
Configure a timer with `OS_TimerCreate()` and `OS_TimerSet()`.  Configure the interval such that it must be rounded up to a whole number of system ticks.

The timer works fine for a while, but then callbacks will cease once the first overrun occurs.

**Expected behavior**
Callbacks should continue until canceled by the application.

**System observed on:**
RTEMS 4.11 (pc686) running in QEMU
MPC750 VxWorks 6.9

**Additional context**
Discovered as part of the fix for #271, submitted as a separate bug for review as it affects the shared/common layer.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/274
Add UT Assert ability to set a buffer position,"**Is your feature request related to a problem? Please describe.**
UT assert has a feature to associate data buffers with stub routines to facilitate data passing between the stub and the test case.  For cases with ""random access"" requirements (e.g. ES CDS, mem pools, etc) cases there is a `UT_GetDataBuffer()` API which also gets the current position within the buffer (its tail), but there is no related API to actually set the position.

**Describe the solution you'd like**
Should add another stub API so that a stub routine can also directly set the tail position without needing to use `UT_Stub_CopyFromLocal` as a workaround.

**Describe alternatives you've considered**
Setting the position can be done by calling `UT_Stub_CopyFromLocal` or `UT_Stub_CopyToLocal` but this can can be ugly and convoluted in cases where the stub does not have actual data to copy.  Both of these copy data in addition to moving the tail position, so its less than ideal if the stub only needs to adjust the tail position and not copy data.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/365
Adding unit tests from with a unit test not a supported pattern,"**Describe the bug**
Possibly related to #554 (reverted to v5.1.0-rc1 and they ran).  Adding tests after starting to run tests (adding a test within a test) is not a supported pattern, and they won't actually get run (they do get added to the front of the individual list, but the merged test list doesn't not handle them).

**To Reproduce**
Add a unit test from within a unit test, build/execute and the added unit test will not execute.

**Expected behavior**
Didn't know NOT to do this... just don't do it.

**Resolution**
Just don't do it.
Document limitations and proper usage.

**Code snips**
uttest.c - see the adding and merging

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions checked latest integration candidate and v5.1.0-rc1, problem does not exist in v5.1.0-rc1

**Additional context**
#554 

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/577
ES - RegisteredTasks Counter Does Not Decrement When Child Tasks are Exited ,"Stakeholder reported that the ES ""RegisteredTasks"" counter was not decrementing when a child task exited. The CS code was examined to ensure the needed ES API calls were being made. It was confirmed the CS child tasks make the ES API call to CFE_ES_ExitChildTask. The CFE_ES_ExitChildTask API function does decrement the RegisteredTasks counter on line 1337 however, this step is performed only if conditional checks are passed.

Really CS shouldn't dynamically be creating/exiting child tasks per a separate issue, but noted here still since it was an observed issue (although no steps provided to recreate).



Imported from GSFCCFS-951",bug,https://github.com/nasa/CS/issues/21
ES PerfLog dumper thread should be persistent,"`CFE_ES_PerfLogStop` spawns a child task to run `CFE_ES_PerfLogDump`. There should be a persistent thread to handle dumping the data, created during initialization.

This will require some changes to `CFE_ES_PerfLogDump` which is currently written to run only once.

----
Background:

I sent the following to the CFS community mailing list:

> CFE_ES_PerfLogStop spawns a new thread via CFE_ES_CreateChildTask to
> dump the performance data to disk. This occurs whenever ES receives a
> command to stop recording performance data.
>
> It's my understanding that spawning threads at runtime, as opposed to
> during initialization, is discouraged in real-time code due to
> overhead like allocating memory. See, e.g.
> https://wiki.linuxfoundation.org/realtime/documentation/howto/applications/memory
> which states ""all RT threads need to be created at startup time,
> before the RT show time.""
>
> Should a persistent ""dumper"" thread be spawned during ES
> initialization rather than when the stop command is received?

I then received an off-list reply from Dave McComas:

>  I noticed the same thing when I looked at the code after your other email and I agree.   Do you mind writing a ticket.",bug,https://github.com/nasa/cFE/issues/324
Possible silent truncations of entity ID and transaction sequence number,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The types for entity ID and transaction sequence number are sort of configurable (they are in the config.h but impact packet dfns):
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/fsw/platform_inc/cf_platform_cfg.h#L60
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/fsw/platform_inc/cf_platform_cfg.h#L79

If they are set to anything smaller than uint64 allowed by the spec, then they could get truncated silently when decoding packet headers in CF_CFDP_DecodeHeader:
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/fsw/src/cf_codec.c#L848-L850

Although the impacts don't seem all that critical.  Sequence will roll over locally (should still locally match up), masking off high order eid bits and still getting a match/conflict for destination or source seems unlikely, although possible.

**Describe the solution you'd like**
Check that the encoded value will fit, otherwise send an event and drop the transaction.  Up to 3 extra checks per header decode.  

**Describe alternatives you've considered**
Make these all support the spec allowed 64 bit, no longer configurable.  Would impact memory footprint and cmd/tlm packets.

Leave as is seems like an option also.  Avoids the extra checks on every header that would be needed to avoid something that likely has minimal impact/likelihood.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

@TheSwarty",bug,https://github.com/nasa/CF/issues/277
vxworks OS_mkfs() logic errors,"The vxworks osfilesys.c OS_mkfs() has a number of logic errors uncovered by trac-22 branch, [changeset:0f36fb6] involving error paths and handling the OS_VolumeTable[idx].FreeFlag.

This ticket is to fix those errors.",bug,https://github.com/nasa/osal/issues/109
Memory alignment issue in ES,"**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c: In function 'CFE_ES_ShellOutputCommand':
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:178: error: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:179: error: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:208: error: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:209: error: cast increases required alignment of target type
```

**Describe the solution you'd like**
Resolve bug.

**Describe alternatives you've considered**
None.

**Additional context**
Other shell issues, #484, #84, etc.

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/621
"Add group name to doxygen ""close section"" command","**Is your feature request related to a problem? Please describe.**
Keeping track of large doxygen sections can be hard. 

```c 
/** @defgroup CFEAPISBZeroCopy cFE Zero Copy APIs
 * @{
 */

/*****************************************************************************/
/**
** \brief Get a buffer pointer to use for ""zero copy"" SB sends.
**
** \par Description
**          This routine can be used to get a pointer to one of the software bus'
**          internal memory buffers that are used for sending messages.  The caller
**          can use this memory buffer to build an SB message, then send it using
**          the CFE_SB_TransmitBuffer() function.  This interface avoids an extra
**          copy of the message from the user's memory buffer to the software bus
**          internal buffer.
**
** \par Assumptions, External Events, and Notes:
**          -# The pointer returned by CFE_SB_AllocateMessageBuffer() is only good for one
**             call to CFE_SB_TransmitBuffer().
**          -# Once a buffer has been successfully transmitted (as indicated by a successful
**             return from CFE_SB_TransmitBuffer()) the buffer becomes owned by the SB application.
**             It will automatically be freed by SB once all recipients have finished reading it.
**          -# Applications must not de-reference the message pointer (for reading
**             or writing) after the call to CFE_SB_TransmitBuffer().
**
** \param[in]  MsgSize  The size of the SB message buffer the caller wants
**                      (including the SB message header).
**
** \return A pointer to a memory buffer that message data can be written to
**         for use with CFE_SB_TransmitBuffer().
**/
CFE_SB_Buffer_t *CFE_SB_AllocateMessageBuffer(size_t MsgSize);

... 

/** @} */
```

**Describe the solution you'd like**
Add the section name to the closing comment, similar to what we already do for `#endif` segments. 


```c

/** @defgroup CFEAPISBZeroCopy cFE Zero Copy APIs
 * @{
 */

...

/** @} CFEAPISBZeroCopy */

```

**Describe alternatives you've considered**
Leave as is
",non-bug,https://github.com/nasa/cFE/issues/1272
Remove `CFE_TBL_GetAddresses` and `CFE_TBL_ReleaseAddresses` APIs,"**Is your feature request related to a problem? Please describe.**
These two APIs are out of family, no others take arrays of handles.  Not a significant benefit to maintain this capability.

**Describe the solution you'd like**
Remove these two APIs

**Describe alternatives you've considered**
Could provide handle array API's for all the standard TBL calls (Register, Manage, etc), but really needs a use case since it's rare to see the existing APIs used in the wild.

This isn't really all that great since it doesn't allow for individual error handling.  Maybe ""all or nothing"" sort of error handling is ok, but should be considered in the trade.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1496
Remove references to OSAL_OPAQUE_OBJECT_IDS and OSAL_ABSTRACT_FILESYS_TYPES,"**Is your feature request related to a problem? Please describe.**
References to removed #defines remain in the unit test code.

https://github.com/nasa/osal/blob/ad88aa16625d998efd7473fea6e347ccfe097e19/src/unit-test-coverage/vxworks-ng/CMakeLists.txt#L5-L6

**Describe the solution you'd like**
Remove references

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/265
"""Select Test"" still hanging ","**Describe the bug**
Select test can still sometimes get stuck and hang forever. #707 fixed one cause but this is a different way it can happen. 
It's caused because it is waiting for a subtask to finish but if for whatever reason that subtask never even starts, then it gets stuck waiting forever 

**To Reproduce**
Run the test over and over until you see it happen. 

**Expected behavior**
Test should never under any circumstance hang forever. 

**Code snips**
If applicable, add references to the software.

**System observed on:**
The CI

**Reporter Info**
Alex Campbell GSFC",bug,https://github.com/nasa/osal/issues/755
How can I include a prebuilt library as a CFS library?,"Hi, I would like to include the [CubeSat Space Protocol Library](https://github.com/libcsp/libcsp) (CSP) as a library in CFS.

I am new to CFS so I am unsure the correct way to approach this. 

My goal is to use the CSP functionality within the CI/TO applications in order to send to/receive from CAN. I would like to use the waf build system included with CSP to build the library, then link the output library to CFS so the CI/TO apps can use the CSP functionality by including the appropriate headers. As a prereq I have added the libcsp repo to `apps/libcsp`.

It is my understanding that adding libcsp to my `targets.cmake` `TGT1_APPLIST` is not ideal, because that would attempt to build the libcsp code; however, in this case it would have already been built using the waf build system.

I have tried the following:
1. Building libcsp as a shared library using the waf build system
1. Adding an include directive for the CSP headers in the TO application
1. Adding `include_directories(path_to_csp)` in `to/CMakeLists.txt`
1. Copying the waf-built `libcsp.so` to the target install directory `build/exe/cpu1/cf/libcsp.so`
1. Adding `cf/libcsp.so` to my target startup script

As a result, the library fails to load at startup. I also tried:
1. Building libcsp as a shared library using the waf build system
1. Adding an include directive for the CSP headers in the TO application
1. Adding `include_directories(path_to_csp)` in `to/CMakeLists.txt`
1. Adding `target_link_libraries(core-${TGTNAME} path_to_csp/libcsp.so)` to `cfe/cmake/target/CMakeLists.txt` before the final executable is installed

As a result, the TO application fails to load.

Any help would be appreciated. I am unsure of the feasibility of using two separate build systems to build the code for my target, although I would like to avoid having to convert the waf build script to a cmake build if possible.

Thanks for your help.
Stephen",non-bug,https://github.com/nasa/cFS/issues/121
LocateAndReadUserObject - cyclomatic complexity of 29,"**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

elf2cfetbl.c::[LocateAndReadUserObject](https://github.com/nasa/elf2cfetbl/blob/46b29f82c76429be97687203f75f4b1b25227c60/elf2cfetbl.c#L2328) unnecessarily violates the recommendation with a cyclomatic complexity of 29.  

**Describe the solution you'd like**
Clean up GetElfHeader such that it has a cyclomatic complexity of 15 or less.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Imported from JSC static analysis audit

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/elf2cfetbl/issues/131
"ES reports version 6.7.0 in telemetry, even when it's built off a development branch","**Describe the bug**
Misidentifies version

**To Reproduce**
Look at version in ES housekeeping packet.

**Expected behavior**
System should report a consistent version number at startup, from noops, and in tlm.  Could go back to the old way where development versions all report a revision of 99.

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L333-L340

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle.

**Additional context**
Got out of sync with new versioning scheme

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/830
Strip mission source dir from doxygen path and provide common doxyfile to resolve references,"**Is your feature request related to a problem? Please describe.**
- Full path reported in doxygen generated stand-alone osal users guide
- OSAL common doxyfile could be refactored to be used by any docs that reference OSAL

**Describe the solution you'd like**
Add the following to users guide
```
STRIP_FROM_PATH += @MISSION_SOURCE_DIR@
```

Slight osal-common.doxyfile.in adjustments such that it can be used to resolve OSAL references.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1231
Convert to static array sizes for string parameters - `name[static SIZE]` and scrub string handling,"**Is your feature request related to a problem? Please describe.**
Many APIs and even internal functions require specific minimum string sizes to avoid a potential buffer overrun, yet take simple pointers, i.e. `char *`.  Some tools complain about strcpy/sprintf/etc, but the sized versions aren't any safer if the passed in string is too short.

Example case:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L597-L607

**Describe the solution you'd like**
Leverage C99 checks on sized parameter arrays, which also will protect at compile time from NULL inputs.  Once minimum sizes are guaranteed, then revisit string comparison/manipulation calls to avoid buffer overruns based on these enforced minimums.

Note not backwards compatible where pointers are passed in vs the array.  Also would REQUIRE the removal of all NULL pointer test cases and checks (would cause compile errors or dead code respectively).

**Describe alternatives you've considered**
None

**Additional context**
Code review, related to #1465

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1511
Support separate app and table install subdirectories,"From Christopher Westerman (5/13/2019 email paraphrased) - requested support in arch_build.cmake to install tables and apps to different subdirectories. Supporting ""separation of concerns"" design principle.",non-bug,https://github.com/nasa/cFE/issues/339
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the to_lab repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/to_lab/issues/93
MM_DumpInEventCmd wastes event characters,"In MM_DumpInEventCmd, including the ""0x"" and trailing space on the hex digits unnecessarily limits how much can actually be dumped in the event.

Imported from GSFCCFS-1564",non-bug,https://github.com/nasa/MM/issues/8
Reevaluate signal handling in POSIX,"**Is your feature request related to a problem? Please describe.**
There may be some inefficiencies / room for improvement in how POSIX is handling the signal masks, that should be evaluated and considered.

For the RT signals, these are masked all the time and timers use `sigwait()` to synchronously receive them.  However that potential to leave stray signals queued.  This has been worked around by ensuing that no signals are queued before setting up a timer, but there may be a more efficient way to accomplish this.

**Describe the solution you'd like**
Consider setting all the unused signals to ""IGNORE"" such that the kernel will not even deliver them to the process, rather than masking them at the process.

~Signal masks are also changed as part of the global lock/unlock procedure what may not be necessary.  This should be re-evaluated with the current OSAL design.  Historically this may have been necessary for async signals but the current OSAL now avoids async signals for all OSAL-created tasks.~ Already done in #673/#678

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
See related issue #335 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/348
Change default configuration to not use throttling semaphore,"**Is your feature request related to a problem? Please describe.**
The default/example table source files include a semaphore name - cf_1_sem and cf_2_sem - for throttling on channel 1 and 2, respectively.

However, CF does not actually create the throttling semaphores, it expects the semaphore to be created before CF starts.  If a new user is starting CF by itself with no other support apps running, this semaphore will not exist.  

**Describe the solution you'd like**
To make it simpler to build and run CF with a default configuration, the example table should have an empty string for the semaphore name - this means no throttle.

**Additional context**
This will make CF at least boot up and load ""out of the box"" ... but probably any real deployment will need a throttle, so this means that we don't have an example of a throttling semaphore anymore.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/CF/issues/178
Remove old ASIST mnemonics from doxygen comments,"**Is your feature request related to a problem? Please describe.**
There's alias, extra mnemonic mapping files, and extra comments in code that lead to extra documentation that doesn't apply to anything other than internal proprietary ground stations.

They also are very fragile... defining the mnemonic in the middle of a comment block caused warnings like `cfecmdmnems:11: warning: Illegal command \dd as the argument of a \dd command` but when defined at the top and immediately followed by another alias there were no warnings.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/553
Build errors when using extended headers,"**Describe the bug**
In Caelum when setting `set(MISSION_INCLUDE_CCSDSEXT_HEADER TRUE)` to use extended headers, I get a build error due to duplicate typedef of the MSG types:

```
cfe/modules/msg/option_inc/default_cfe_msg_hdr_priext.h:83:3: error: conflicting types for ‘CFE_MSG_Message_t’
   83 | } CFE_MSG_Message_t;
      |   ^~~~~~~~~~~~~~~~~
cfe/modules/core_api/fsw/inc/cfe_msg_api_typedefs.h:104:31: note: previous declaration of ‘CFE_MSG_Message_t’ was here
  104 | typedef union CFE_MSG_Message CFE_MSG_Message_t;
      |                               ^~~~~~~~~~~~~~~~~
```

**To Reproduce**
Enable extended headers in Caelum config, and build.

**Expected behavior**
Build should succeed.

**Code snips**
This is because the ""typedef"" cannot be in both places.  In contrast, the standard header (non-extended) defines only the union/struct, not typedef'ed:

https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/msg/option_inc/default_cfe_msg_hdr_pri.h#L65-L69

Whereas the extended header version has a typedef:

https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/msg/option_inc/default_cfe_msg_hdr_priext.h#L63-L67

**System observed on:**
Ubuntu

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1982
Fix travis-CI config warnings,"**Is your feature request related to a problem? Please describe.**
Build config validation (from travis-CI) -
root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux
env: key matrix is an alias for jobs, using jobs

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/commit/6cf5a57f5995710345b2a5411d11af2b2d7f80ee

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/60
Generate documentation PDF in all scenarios regardless of whether it will be pushed or not. ,"## Problem

We could have caught the [latest error](https://github.com/nasa/cFS/runs/3107101587) in the documentation build and push job if we built the PDFs every time. 


## Proposed Solution 

Only keep this condition in the ""push"" step of the job; remove it from the dependencies and document generation steps.

```yml
if: ${{ github.event_name == 'push' && contains(github.ref, 'main')}}
```",non-bug,https://github.com/nasa/cFS/issues/312
Update to preferred unit test patterns,"**Is your feature request related to a problem? Please describe.**
Uses lower level macros where generic output is preferred.

**Describe the solution you'd like**
Use macros with default outputs.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/164
cFE 6.7.1 (OSAL 5.0.1) Comparability Issues,"While integrating File Manager app 2.5.2 with cFE 6.7.1 (OSAL 5.0.1) I ran into an issue. FM has a
command that allows users to receive a telemetry packet listing all of the open files. In order to do this FM needs to be able to query OSAL's file stream resource objects. The current OSAL implementation only allows a creator to query all of the resources objects by using OS_ForEachObject(). I wrote OSAL ticket #65 to recommend a more general query feature would be helpful. In OpenSatKit I added a new function OS_QueryObjectType() that allows anyone (not restricted to the creator) to query a resource type. The specific OSAL changes are below followed by the FM code that uses the function. These changes were made for OpenStaKit 2.1 that can be found at https://github.com/OpenSatKit/OpenSatKit.

This ticket can only be implemented once the OSAL is updated with a new feature that allows FM to query the resources objects.

## osapi-os-core.h:

/* 
** Typedef for object query OSAL callback functions. A query does not
** have to be performed by  the object creator. All fields of the 
** query_record are completed.
**
** This may be used by multiple APIs
*/

typedef struct
{
   const char *name_entry;
   uint32     creator;
   uint16     refcount;
} OS_query_record_t;

typedef void (*OS_ObjQueryCallback_t)(OS_query_record_t *query_rec, void *callback_arg); //dcm - Added for OSK

/*-------------------------------------------------------------------------------------*/
/**
 * @brief Query an object resource type maintained by the OSAL  
 *
 * User supplied callback is called for all active resources of a particular type
 * regardless of whether the caller created the object.
 *
 */
uint32 OS_QueryObjectType (uint32 obj_type, OS_ObjQueryCallback_t callback_ptr, OS_query_record_t *query_rec, void *callback_arg);  // dcm - Added for OSK


## osapi-idmap.c:

/*----------------------------------------------------------------
 *
 * Function: OS_QueryObjectType
 *
 * Purpose: Implemented per public OSAL API
 *          See description in API and header file for detail
 *
 *-----------------------------------------------------------------*/
uint32 OS_QueryObjectType (uint32 obj_type, OS_ObjQueryCallback_t callback_ptr, OS_query_record_t *query_rec, void *callback_arg)
{

    uint32 obj_index;
    uint32 obj_max;
    uint32 obj_id;
    uint32 active_obj_cnt = 0;
    OS_common_record_t  *obj_rec;
    
    obj_max = OS_GetMaxForObjectType(obj_type);
    if (obj_max > 0)
    {
        OS_Lock_Global_Impl(obj_type);
        obj_index = OS_GetBaseForObjectType(obj_type);
        while (obj_max > 0)
        {
            obj_rec = &OS_common_table[obj_index];
            obj_id = obj_rec->active_id;
            if (obj_id != 0) 
            {

                query_rec->name_entry = obj_rec->name_entry;
                query_rec->creator    = obj_rec->creator;
                query_rec->refcount   = obj_rec->refcount;
                
                /*
                 * Handle the object - Note that we must UN-lock before callback.
                 * The callback function might lock again in a different manner.
                 */
                 OS_Unlock_Global_Impl(obj_type);
                 (*callback_ptr)(query_rec, callback_arg);
                 OS_Lock_Global_Impl(obj_type);
                 
                 ++active_obj_cnt;

            }
            ++obj_index;
            --obj_max;
        }
        OS_Unlock_Global_Impl(obj_type);
    }

   return active_obj_cnt;

} /* End OS_QueryObjectType() */



## fm_cmd_utils.c:

static uint32 open_file_cnt = 0;
static void LoadOpenFileData(OS_query_record_t *query_rec, void *callback_arg)
{

    FM_OpenFilesEntry_t *OpenFilesData = (FM_OpenFilesEntry_t *)callback_arg;
    CFE_ES_TaskInfo_t   TaskInfo;
 
    if (OpenFilesData != (FM_OpenFilesEntry_t *) NULL)
    {
        /* FDTableEntry.Path has logical filename saved when file was opened */
        strcpy(OpenFilesData[open_file_cnt].LogicalName, query_rec->name_entry);

        /* Get the name of the application that opened the file */
        CFE_PSP_MemSet(&TaskInfo, 0, sizeof(CFE_ES_TaskInfo_t));
        if (CFE_ES_GetTaskInfo(&TaskInfo, query_rec->creator) == CFE_SUCCESS)
        {
            strcpy(OpenFilesData[open_file_cnt].AppName, (char *) TaskInfo.AppName);
        } 
    }
    ++open_file_cnt;
       
} /* End LoadOpenFileData() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* FM utility function -- get open files data                      */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

uint32 FM_GetOpenFilesData(FM_OpenFilesEntry_t *OpenFilesData)
{

    OS_query_record_t query_rec;
   
    open_file_cnt = 0;
    OS_QueryObjectType (OS_OBJECT_TYPE_OS_STREAM, LoadOpenFileData, &query_rec, (void *)OpenFilesData);
       
    return open_file_cnt;
    
} /* End FM_GetOpenFilesData */

",bug,https://github.com/nasa/FM/issues/2
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/323
#include <sys/signal.h> from os-posix.h causes compiler warnings in Alpine Linux ,"**Describe the bug**
When trying to build the cFS bundle using Alpine Linux using the musl library we get a gcc error:
`#warning redirecting incorrect #include <sys/signal.h> to <signal.h>`

From my seaarches It seems that `sys/signal.h`  is an older implementation.

**To Reproduce**
Build and run the following Docker image
```
# Dockerfile to make cFS testing platform independent. Based on .travis.yml from cfs-Bundle repo
FROM alpine:3.11

RUN apk add \
  build-base \
  cmake \
  git

RUN echo -e ""http://dl-cdn.alpinelinux.org/alpine/edge/community\nhttp://dl-cdn.alpinelinux.org/alpine/edge/main"" >> /etc/apk/repositories
RUN apk add --no-cache -X http://dl-cdn.alpinelinux.org/alpine/edge/testing \
    perf

# Force image rebuild if bundle has changed since last build
ADD https://api.github.com/repos/nasa/cfs/git/refs/heads/master version.json

# Get current bundle
RUN git clone --recurse-submodules -j8 https://github.com/nasa/cFS.git

# Define cfs environment variables
ENV \
  BUILDTYPE=debug \
  CFS_ROOT=/cFS \
  ENABLE_UNIT_TESTS=true \
  OMIT_DEPRECATED=false \
  SIMULATION=native

# Set up for build
RUN cp $CFS_ROOT/cfe/cmake/Makefile.sample $CFS_ROOT/Makefile
RUN cp -r $CFS_ROOT/cfe/cmake/sample_defs $CFS_ROOT/sample_defs

# Run make at startup
ENTRYPOINT make -C $CFS_ROOT

```

Build and run the container:

Build: `docker build --tag cfs-bundle:alpine DOCKERFILE_DIRECTORY
Run: `docker run -it --rm cfs-bundle:alpine`




**Expected behavior**
cFS Build like with Travis CI and Ubuntu

**Code snips**
In `os-posix.h:40`: `#include <sys/signal.h>`

**System observed on:**
Docker Desktop 2.2.0.4 
OSX 10.14.6
",bug,https://github.com/nasa/osal/issues/438
Application Startup Race Conditions (GSFC DCR 22819),"Applications will fail to start when they are started via the ES Start Application command (CFE_ES_START_APP_CC) and the ES application has a lower priority than the application being started by the command.

This issue will also occur if the OS startup code is a lower priority than the applications that are being started in the startup script.
",bug,https://github.com/nasa/cFE/issues/77
Resolve static analysis warnings in fsw,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Various static analysis warnings observed (license restricts publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/CF/issues/241
Clean up remaining use of deprecated config macro names,"In the 6.6 release all configuration macros were revised to contain a ""MISSION"" or ""PLATFORM"" designator in their name to indicate scope.  The previous, non-designated names were deprecated, and a compatibility mapping was added.

However, there is still some code that continues to directly use the old name.  This should be fixed to use the correct name.",bug,https://github.com/nasa/cFE/issues/329
ostimer unit test uses OS_IdleLoop but not OS_Application_Shutdown,"This prevents the unit test from successfully returning.

[changeset:ea1fcdd] ready for CCB review",bug,https://github.com/nasa/osal/issues/175
Simplify message action logic to avoid unreachable branch,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Branch can't be covered since there's no way to get to this decision with a ActionType <= HS_AMT_ACT_LAST_NONMSG:
https://github.com/nasa/HS/blob/2fc0dd99372c1e189e7fe40980dfe2b29a87fdd3/fsw/src/hs_monitors.c#L182-L184

This is due to ActionType already being checked here:
https://github.com/nasa/HS/blob/2fc0dd99372c1e189e7fe40980dfe2b29a87fdd3/fsw/src/hs_monitors.c#L64

All other cases of current implementation are handled.  Only way to exercise this decision as false would be to introduce a bug.

**Describe the solution you'd like**
Slight refactor to simplify and allow full coverage - remove the NOACT case since it can never happen:
https://github.com/nasa/HS/blob/2fc0dd99372c1e189e7fe40980dfe2b29a87fdd3/fsw/src/hs_monitors.c#L177

Also swap the logic to calculate MsgActsIndex first and just check the result for in-range.

**Describe alternatives you've considered**
Could do enabled check first, but it's already 9 levels deep.  Better to save that for #5 to really clean up duplicated logic.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/HS/issues/31
Add int32 UT assert macro,"**Is your feature request related to a problem? Please describe.**
A very common use case in unit testing is to assert on an `int32` value, as this is a common return value type for error codes and status values.

UT Assert provides a generic `UtAssert_True()` macro which can certainly test for integer equality, but it is still very repetitive and test cases may not include all the relevant information.  For instance, the framework should encourage/require that the actual values are printed in addition to the pass/fail status, and the generic macro being totally free-form does not enforce this at all.

**Describe the solution you'd like**
Add a macro `UtAssert_INT32_EQ()` to check for equality of two values as `int32` types.

Other types could be added too, but `int32` is by far the most commonly needed as it is the return type of many API calls across OSAL and CFE.

**Describe alternatives you've considered**
Continue using the generic `UtAssert_True()` macro.

**Additional context**
Many test programs already use their own macros for testing return values.  They've already evolved to be similar but different (e.g. CFE SB has `ASSERT_EQ`, and OSAL coverage testing has `OSAPI_TEST_FUNCTION_RC()`).  

It would be worthwhile to put more of these in UT assert itself so these don't need to continue being duplicated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/502
Add UtTest_Teardown() to ut_assert,"**Is your feature request related to a problem? Please describe.**
I would like to have a ""Teardown"" that runs at the end of the unit tests test-runner file.  Much like the UtTest_Setup runs at the start.

**Describe the solution you'd like**
Add a UtTest_Teardown() that is called after all the tests have run.

**Describe alternatives you've considered**
Not having it, which is the current state.

**Additional context**
This is a common feature with most unit test frameworks.

**Requester Info**
Alan Gibson
NASA Goddard Code 587
",non-bug,https://github.com/nasa/osal/issues/550
SC Code Simplification - reduce copies required to read/send sb messages,"SC could use significant code refactoring and simplification.  It would make code more readable, but could also reduce the number of copies required to read and send the software bus messages. 

Imported from GSFCCFS-1645",non-bug,https://github.com/nasa/SC/issues/14
SC does not compile with cFS 6,"Hi all,

I've tried to compile SC with cFS 6.6.0 and I get many errors. Here are a few examples:

```
Scanning dependencies of target sc
[ 68%] Building C object cfe/apps/SC/CMakeFiles/sc.dir/fsw/src/sc_app.c.o
In file included from /path/to/cfs/project/apps/SC/fsw/src/sc_app.h:65,
                 from /path/to/cfs/project/apps/SC/fsw/src/sc_app.c:73:
/path/to/cfs/project/apps/SC/fsw/src/sc_tbldefs.h:117:5: error: unknown type name ‘boolean’
  117 |     boolean            DisabledFlag;    /* disabled/enabled flag */
      |     ^~~~~~~
In file included from /path/to/cfs/project/apps/SC/fsw/src/sc_app.h:67,
                 from /path/to/cfs/project/apps/SC/fsw/src/sc_app.c:73:
/path/to/cfs/project/apps/SC/fsw/src/sc_msg.h:83:27: error: ‘CFE_SB_TLM_HDR_SIZE’ undeclared here (not in a function)
   83 |     uint8       TlmHeader[CFE_SB_TLM_HDR_SIZE];
      |                           ^~~~~~~~~~~~~~~~~~~
In file included from /path/to/cfs/project/apps/SC/fsw/src/sc_app.h:67,
                 from /path/to/cfs/project/apps/SC/fsw/src/sc_app.c:73:
/path/to/cfs/project/apps/SC/fsw/src/sc_msg.h:170:35: error: ‘CFE_SB_CMD_HDR_SIZE’ undeclared here (not in a function)
  170 |     uint8               CmdHeader[CFE_SB_CMD_HDR_SIZE];
      |                                   ^~~~~~~~~~~~~~~~~~~
In file included from /path/to/cfs/project/apps/SC/fsw/src/sc_app.c:73:
/path/to/cfs/project/apps/SC/fsw/src/sc_app.h:301:5: error: unknown type name ‘CFE_SB_MsgPtr_t’
  301 |     CFE_SB_MsgPtr_t         MsgPtr;                             /**< \brief Pointer to command message          */
      |     ^~~~~~~~~~~~~~~
In file included from /path/to/cfs/project/apps/SC/fsw/src/sc_app.c:75:
/path/to/cfs/project/apps/SC/fsw/src/sc_cmds.h:65:24: error: unknown type name ‘CFE_SB_MsgPtr_t’; did you mean ‘CFE_SB_MsgId_t’?
   65 | void SC_TableManageCmd(CFE_SB_MsgPtr_t CmdPacket);
      |                        ^~~~~~~~~~~~~~~
      |                        CFE_SB_MsgId_t
```

Given how old the last commit in this repo is, I understand these incompatibilities. [I've read](https://github.com/nasa/SC/issues/1#issuecomment-658761822) that a new release is (was?) coming up ; when can we expect it? Fixing these errors should not take too much time, but I dont want to duplicate work, especially as you might have some NASA internal discussions, which I'm not part of, about how to make these changes consistently with the other cFS repos.
",bug,https://github.com/nasa/SC/issues/2
Coverage test not installed in correct directory,"**Describe the bug**
Coverage test not installed in correct directory - see nasa/cfe#881

**To Reproduce**
Make unit tests, make install, observe unit test in build directory.

**Expected behavior**
Should go in target directory (build/exe/cpu1 for sample config)

**Code snips**
https://github.com/nasa/sample_lib/blob/ce70d3d90943abeeac1ece23e6cf4bae1b217d4b/unit-test/CMakeLists.txt#L95

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_lib/issues/30
 `cf_tbldefs.h` in platform_inc directory,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
 `cf_tbldefs.h` in platform_inc directory instead of with source, causing tables to use the non-overridden cf_platform_cfg.h file instead of the one in *_defs at the top level, since the compiler prefers includes relative to the current file over include paths specified on the command line. This is also different than most other apps which define their table structs in fsw/src. Workaround would be to also override cf_tbldefs.h, but the table struct isn't really something that one needs to customize in the first place. 

**To Reproduce**
Steps to reproduce the behavior:
Alter CF_NUM_CHANNELS in platform_cfg by copying to [mission]_defs/, modifying and using generate_config_includefile to override.

**Expected behavior**
CF config table uses the updated cf_platform_cfg.h instead of the original one.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - SP0-s
 - OS: VxWorks 6.9

**Additional context**
Using snippets from JSC's modified arch_custom.cmake to override platform_cfg:
```c
 ## Add header inclusions from target_defs/<TARGET_NAME>/*.h
set(SPECIFIED_CONFIG ${BUILD_CONFIG_${TARGETSYSTEM}})
list(GET SPECIFIED_CONFIG 2 TGT_NAME)
list(GET SPECIFIED_CONFIG 0 PLATFORM_NAME)

file(GLOB headerFiles ""${MISSION_DEFS}/${TGT_NAME}/*.h*"")
foreach(headerFile ${headerFiles})
  get_filename_component(filename ${headerFile} NAME)
  string(FIND ${filename} ""_"" FPOS)
  math(EXPR SIDX ""${FPOS} + 1"")
  string(SUBSTRING ${filename} ${SIDX} -1 SUFX)
  string(SUBSTRING ${filename} 0 ${FPOS} PREX)
  generate_config_includefile(
    FILE_NAME           ${filename}
    MATCH_SUFFIX        ${SUFX}
    PREFIXES            ${TGT_NAME}/${PLATFORM_NAME}_${PREX} ${TGT_NAME}/${PREX}
  )
endforeach()
```

**Reporter Info**
John N Pham, Northrop Grumman",bug,https://github.com/nasa/CF/issues/221
"Remove empty `#if`/`#endif` blocks in TIME for tone is/was, comment is sufficient","**Is your feature request related to a problem? Please describe.**
Pointless empty block, comment is enough:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L644-L645
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L676-L677

**Describe the solution you'd like**
Remove, also indent comments (if autoformatting doesn't conflict).

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1539
"Some ""close"" operations not doing standard delete procedure","**Describe the bug**
All close/delete ops should go through `OS_FinalizeDelete()` so things are cleaned up consistently.
But there remain a couple places where this is not done - `OS_close()` and its variants e.g. `OS_CloseFileByName` and `OS_CloseAllFiles`

**To Reproduce**
This is apparent if there is some action in the PSP handler for deallocation.  It will not get invoked for these close ops because it doesn't go through the common delete path.

**Expected behavior**
Should go through common path.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/647
Add status output to `CFE_ES_WaitForStartupSync`,"**Is your feature request related to a problem? Please describe.**
`CFE_ES_WaitForStartupSync` doesn't return status, so unique/local timeout responses can't be handled by the caller.

**Describe the solution you'd like**
Pass the return from `CFE_ES_WaitForSystemState` through `CFE_ES_WaitForStartupSync` back to the caller so timeouts can be handled if needed from within the app context.
Note #1467 adds a syslog on timeout from underlying `CFE_ES_WaitForSystemState`.  So handling would be anything extra, like app health reporting, aborting hazardous ops, etc.

**Describe alternatives you've considered**
None

**Additional context**
#1467

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1466
cFE and OSAL user guides links from the README file are broken ,"cFE and OSAL user guides links in the README file are broken after recent update. 
",non-bug,https://github.com/nasa/cFS/issues/472
Deprecate OS_fsBlocksFree and OS_fsBytesFree,"**Is your feature request related to a problem? Please describe.**
As noted in #573 these functions return the value directly, which does double duty as an error code and therefore is limited to being `int32` - but this type is not big enough for large file systems.

**Describe the solution you'd like**
Deprecate these functions in favor of `OS_FileSysStatVolume()` added in PR #717, which returns the information as a OS_statvfs_t object containing all relevant information.

**Additional context**
References to these functions within OSAL tests need to be fixed/replaced, as well as references in CFE/apps.  This is a follow-on/completion of the fix for #573 / PR #717.  Deprecation has to be done separately because the new function needs to exist before the refs can be changed.

**Requester Info**
Joseph Hickey, Vantage Systems. Inc.
",non-bug,https://github.com/nasa/osal/issues/718
Update Version Number for OSAL 4.2 Release,"The version number information in the osapi-version.h file needs to be updated to reflect the 4.2 release as follows:

#define OS_MAJOR_VERSION (4)
#define OS_MINOR_VERSION (2)
#define OS_REVISION      (0)
#define OS_MISSION_REV   (0)  ",non-bug,https://github.com/nasa/osal/issues/178
Refactor config dependent conditional in hs_custom.c,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Can't cover branch when HS_UTIL_CALLS_PER_MARK is 1 (since the counter is static local):
https://github.com/nasa/HS/blob/2fc0dd99372c1e189e7fe40980dfe2b29a87fdd3/fsw/src/hs_custom.c#L180-L195

**Describe the solution you'd like**
Use the custom global to store config such that it can be set to get full coverage.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/HS/issues/32
Extend CMake app search path,"When apps are listed in the targets.cmake file, the CMake scripts already implements a dynamic search path to find matching entities in the source tree.

Right now the users typically add their own apps to the ""apps"" directory which become intermixed with the official CFS applications.

While this is OK, this does present a challenge to a git novice -- if they cloned the babelfish repositories directly, then a simple (default) {{{git push}}} command may inadventently send all their private apps up to babelfish.

Ideally, the mission should at least create their own branch, or better yet, create their own VC repository and not //directly// use babelfish git clones (such as the ""subtree"" method documented in the wiki), but this is unfortunately not the path of least resistance.

By adding some extra names into the default app search path, the project-specific apps can be placed outside the official ""apps"" tree.  This way, the apps repository remains ""pristine"" and unmodified, and an errant {{{git push}}} will do no harm.

",non-bug,https://github.com/nasa/cFE/issues/80
Exclude lgtm false positives,"**Is your feature request related to a problem? Please describe.**
sample_lib triggers a lgtm error based on checking strncpy return (false alarm)

**Describe the solution you'd like**
Exclude string-copy-return-value-as-boolean (triggered by sample_lib, which is doing this on purpose)

**Describe alternatives you've considered**
Could clutter code to exclude this specific call from triggering the warning.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/59
Small hiccup when installing the cFS bundle,"In following the steps laid out in the cFS bundle's readme, everything up through the ""Build and Run"" section worked fine. However, there was a small hiccup that occurred in the ""Send commands, receive telemetry"" section after installing PyQt5 (instead of the prescribed PyQt4) and PyZMQ.  

I changed directory back to the main cFS location, and tried to follow the next insruction: cd tools/cFS-GroundSystem/Subsystems/cmdUtil, but I got this error message: No such file or directory.  I tried installing CmdUtils via pip3, then re-tried the cd tools/cFS-GroundSystem/Subsystems/cmdUtil command again and still the same error occurred.  Skipping to the next line: python3 GroundSystem.py was unsurprisingly met with: pythons3: can’t open file ‘GroundSystem.py’: [Errno 2] No such file or directory.  I tried closing out the terminal and opening a new one, and re-tried cd tools/cFS-GroundSystem/Subsystems/cmdUtil, but still no luck.  Later after trying a new terminal again, I thought maybe PyQt5 instead of PyQt4 was a problem (but nothing changed).

And finally, trying a new terminal window one last time, I was able to get cd tools/cFS-GroundSystem/Subsystems/cmdUtil and all of the subsequent commands to work, and launch the ground system gui.  I am not sure why, after changing nothing from the last attempt, it would work this time.

This was attempted on a Linux VM with Ubuntu 20.04.
",non-bug,https://github.com/nasa/cFS/issues/93
Use a statically constructed table for SB filter initialization,"**Is your feature request related to a problem? Please describe.**
No need to store filter settings in global or individually process:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_task.c#L144-L199

**Describe the solution you'd like**
Statically construct the table and use it for initialization, can loop through it for size test.

**Describe alternatives you've considered**
Not sure how consistent this pattern is, but another candidate for #994 and use for all the services (available for apps if they want it).

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1468
Factor out duplicate logic in `CFE_TIME_RegisterSynchCallback` and `CFE_TIME_UnregisterSynchCallback`,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_RegisterSynchCallback` and `CFE_TIME_UnregisterSynchCallback` duplicate logic.

**Describe the solution you'd like**
Refactor.

**Describe alternatives you've considered**
`CFE_TIME_UnregisterSynchCallback` seems overly restrictive.  Since it's a single entry per App, could just set it as `NULL`.  Note `CFE_TIME_CleanUpApp` does set it to `NULL` without restrictions.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1536
OSAL does not build cleanly with conversion warnings enabled,"**Is your feature request related to a problem? Please describe.**
OSAL does not build cleanly if `-Wconversion` warnings are enabled.  In the CFE builds this warning is neither enabled nor disabled so it is left with the compiler default.  Most gcc cross toolchains currently used disable it by default, but with the toolchain provided in VxWorks 7 this is enabled by default, so this difference becomes apparent.

**Describe the solution you'd like**
First needs CCB discussion as to whether we want to be ""conversion clean"".  

Downside is that it requires a bunch of extra type casting for things that would normally work implicitly without issue - which makes code ugly - and the casts can become outtdated/stale if the underlying type changes and that doesn't always generate a compiler message but can cause problems due to multiple conversions and/or changing for equality of wrong types.  So unnecessary extra type casts can be a real risk to behavior, not just readability.

Upside is that every now and then it will identify a truncation or sign conversion issue that might be a real problem.

Once decided one way or the other, we should explicitly set the `-Wconversion` or `-Wno-conversion` setting in CFE so that it is consistent and not dependent on compiler default.

**Additional context**
Originally identified in #599  - split to separate issue (not limited to just VxWorks 7 - that's just what brought it up)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/660
Network ID APIs group missing OSAL prefix,"**Is your feature request related to a problem? Please describe.**
Missing prefix:
https://github.com/nasa/osal/blob/64a6b31b5448a6301c64b001e043d4c7d9570131/src/os/inc/osapi-network.h#L34

**Describe the solution you'd like**
Add prefix.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1096
Function header documentation for OS_ObjectIdAllocateNew() is incorrect,"Describe the bug
The comments in the function header for OS_ObjectIdAllocateNew() is outdated/incorrect. I see that this was previously reported in #17 but it appears that since then the function signature and implementation has again changed. https://github.com/nasa/osal/blob/88f72d788d33a12e7bf9d9f01c77346438730ffa/src/os/shared/src/osapi-idmap.c#L1169

To Reproduce
N/A. Only in the function comments.

Expected behavior
Description of the function should be with the function prototype as described in #17. In this case the removal of the Inputs and Outputs sections of the function header.

Reporter Info
Nathan Ohlson




",non-bug,https://github.com/nasa/osal/issues/1242
PSP startup code should confirm that OS_API_Init worked,"If the {{{OS_API_Init()}}} call fails for some reason, it means that the OSAL services are not available.

This can result in some very strange and hard-to-debug situations, if it gets so far as to use underlying OS primitives that have not been initialized.  Proceeding to call CFE Main after a OS_API_Init failure is undefined and almost certain to deadlock the process. 

It would be preferable to call the PSP Panic function to make the initialization failure obvious.",bug,https://github.com/nasa/PSP/issues/28
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/cFE is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/cFE while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFE/issues/1211
Update EDS files to match release,"Plan to advertise the EDS techdev branch as part of the release, so the EDS files should be updated to match.",bug,https://github.com/nasa/cFE/issues/317
Remove cfe_resource_osal_compatible.h option and force use,"**Is your feature request related to a problem? Please describe.**
Not really currently an option, could simplify/clarify by forcing it

**Describe the solution you'd like**
Force use

**Describe alternatives you've considered**
None

**Additional context**
From code review #1283, various comments.

**Requester Info**
Jacob Hageman NASA/GSFC, submitted by @ezpollack",non-bug,https://github.com/nasa/cFE/issues/1301
Simplify header inclusion and cmake list,"**Is your feature request related to a problem? Please describe.**
Complex CMakeList.txt header logic shouldn't be needed any more

**Describe the solution you'd like**
Include the now ""external"" headers for tables

**Describe alternatives you've considered**
None

**Additional context**
Related to https://github.com/nasa/cFE/pull/25

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/elf2cfetbl/issues/22
"Update codename to Caelum and license header for release, version 7.0.0","**Is your feature request related to a problem? Please describe.**
Development version still has development labeling (as expected).

**Describe the solution you'd like**
Upon official release, update relevant version/license info.

**Describe alternatives you've considered**
None

**Additional context**
Wait until official release

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1296
UtAssert_STUB_COUNT missing a space in string output,"**Is your feature request related to a problem? Please describe.**
example output: ""CallCountCFE_EVS_SendEvent() (0) == 0 (0)""

**Describe the solution you'd like**
CallCount CFE_EVS_SendEvent() (0) == 0 (0)

**Describe alternatives you've considered**
None

**Additional context**
(https://github.com/nasa/osal/blob/4cc6dbb5019d0589d5ce52e3755a0b7a012ade3c/ut_assert/inc/utassert.h#L499-L501)

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1200
Add Doxygen documentation to internal prototypes,"**Is your feature request related to a problem? Please describe.**
Missing documentation (example, but scrub all):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds_mempool.h#L70-L76

For the block read/write, need to document requirements on the data pointer (reads/writes size used when initializing handle)

**Describe the solution you'd like**
Add documentation (move from implementation if it exists there)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1344
Fix documentation workflow warning.log archive,"**Describe the bug**
The documentation CI workflow has a typo in the directory for the usersguide-warnings.log output file. 

**To Reproduce**
See <https://github.com/nasa/cFE/runs/2847522531?check_suite_focus=true>

**Expected behavior**
Workflow runs successfully and reports and archives warnings

**Code snips**
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/.github/workflows/build-documentation.yml#L116


**Additional context**
This popped up after the update to the documentation build and I missed it when fixing up the IC

",non-bug,https://github.com/nasa/cFE/issues/1629
Potential aliasing warning in socket code,"**Describe the bug**
When using certain compiler versions and optimization flags, the address conversions in `os-impl-bsd-sockets.c` may trigger warnings.

**To Reproduce**
Build using GCC 10.3 with `-O3 -fstrict-aliasing -Wstrict-aliasing=2` options

Example warning:
```
osal/src/os/portable/os-impl-bsd-sockets.c: In function ‘OS_SocketAddrFromString_Impl’:
osal/src/os/portable/os-impl-bsd-sockets.c:724:42: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  724 |     Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;
      |                                          ^~~~~~~~~~~~~~~
```

**Expected behavior**
Should be clean.

**Code snips**
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/portable/os-impl-bsd-sockets.c#L719

**System observed on:**
Ubuntu 21.04

**Additional context**
This is due to direct casting of the data, to be pedantically correct should probably memcpy the address value, rather than directly cast it, to be super safe.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1159
Add compile-time debug capability to confirm functions that require external global locking are locked,"**Is your feature request related to a problem? Please describe.**
Various functions require global lock:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.c#L331-L336

**Describe the solution you'd like**
Add a debug capability to confirm appropriate locking

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1354
Uninitialized variable static analysis warning,"**Is your feature request related to a problem? Please describe.**
Uninitialized variable static analysis warning observed (license restricts publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/342
Implement separate log/event for CFE FS filename validation failure,"**Is your feature request related to a problem? Please describe.**
Filename validation (from commands, scripts, etc) now happens at both CFE FS level (via `CFE_FS_ParseInputFileName`) and inside OSAL (via `OS_TranslatePath` or `OS_OpenCreate` etc).

However, in most code paths where this is done, the results are currently combined.  That is - failure of either function is reported via the same event/log message.  Doing this ultimately requires putting the error code into the same ""int32"" value (thereby mixing OSAL and CFE error codes).

**Describe the solution you'd like**
Should have a separate event/log message for failures at the CFE FS level vs. failures at the OSAL level.  The log message should clearly indicate whether the failure came from `CFE_FS_ParseInputFileName` or `OS_OpenCreate` (or whatever other function was called).

**Additional context**
Note that the preferred format for printing/logging error codes is also different - to match the values in the osapi-error.h file and cfe_error.h files, OSAL codes should be printed as decimal, whereas CFE codes should be hex.  When combining error codes into a single log, it requires choosing one format, which will be wrong for half of them (it is still able to be decoded at least, because error numbers do not overlap, but not ideal).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1675
More doxygen warnings,"**Describe the bug**
Further doxygen warnings should be resolved

**To Reproduce**
Steps to reproduce the behavior:
1. Build documentation using `make doc`
2. Observe warnings in `../cFS/build/doc/warnings.log`

**Expected behavior**
No warnings should occur

**Additional context**
The currently observed warnings are recurring. We should baseline best practices so that these don't continue to recur

**Reporter Info**
Leor Bleier, NASA GSFC\Code 582
",bug,https://github.com/nasa/osal/issues/447
expose CFE_SB_GetPktType (and add stub),"**Is your feature request related to a problem? Please describe.**
Requests to expose packet type as an API (helps SBN, testing)

**Describe the solution you'd like**
Add requirement, expose in API header, add stub, etc.

**Describe alternatives you've considered**
N/A

**Additional context**
Slightly related to #263

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/543
queue-test: a message queue gets closed while still being used,"**Is your feature request related to a problem? Please describe.**

This report is similar to #1160 because a resource, in this case a message queue, gets closed while it's still being used by another thread.

This issue silently works on Linux because of its `mqueue` implementation details. The macOS implementation of `mqueue` in #1161 maintains a mutex in each of its methods including the `mq_close` method.

The deadlock results from the following collision:

1) Main thread attempts to OS_QueueDelete that calls into `mq_close` that wants to acquire the queue's mutex.
2) The task1 that has been deleted just before was still waiting on `mq_timedreceive` holding the queue's mutex.

```c
    status = OS_TimerDelete(timer_id);
    UtAssert_True(status == OS_SUCCESS, ""Timer delete Rc=%d"", (int)status);

    // When a task is deleted below, its executing thread gets cancelled and destroyed but at that moment 
    // the task1 is still waiting on the message queue.
    status = OS_TaskDelete(task_1_id);
    UtAssert_True(status == OS_SUCCESS, ""Task 1 delete Rc=%d"", (int)status);
    status = OS_QueueDelete(msgq_id); // deadlock here
    UtAssert_True(status == OS_SUCCESS, ""Queue 1 delete Rc=%d"", (int)status);
```

**Describe the solution you'd like**

One could argue that the `queue-test` works on Linux and therefore the macOS implementation of `mqueue` should accommodate. At the same time, similar to the #1160, it looks like macOS implementation actually highlights the fact that the `queue-test` relied on undefined behavior.

**Describe alternatives you've considered**

For now, there is a custom hack to `trylock` on the mqueue's mutex before actually trying to close the mqueue.

```c
    // TODO: without this trylock, queue-test deadlocks on macOS
    if ((n = pthread_mutex_trylock(&mqhdr->mqh_lock)) == EBUSY)
    {
        (void)pthread_mutex_unlock(&mqhdr->mqh_lock);
    }
    if ((n = pthread_mutex_lock(&mqhdr->mqh_lock)) != 0) {
        errno = n;
        return (-1);
    }
```

**Additional context**

See the stacktrace of the blocked thread below. Note that I cannot provide the second thread that holds the lock because that thread is pthread_cancelled by that point (and the mutex has leaked).

**Requester Info**

Stanislav Pankevich (Personal contribution)

---

Stacktrace:

```
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x00007fff203b64ca libsystem_kernel.dylib`__psynch_mutexwait + 10
    frame #1: 0x00007fff203e72ab libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait + 76
    frame #2: 0x00007fff203e5192 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow + 204
    frame #3: 0x00000001076e20af queue-test`mq_notify(mqd=0x00007fdcc96040e0, notification=0x0000000000000000) at mq_notify.c:26:14
    frame #4: 0x00000001076e366e queue-test`mq_close(mqd=0x00007fdcc96040e0) at mq_close.c:25:9
    frame #5: 0x00000001076e00b7 queue-test`OS_QueueDelete_Impl(token=0x00007ffee85328a8) at os-impl-queues.c:175:9
    frame #6: 0x00000001076dae67 queue-test`OS_QueueDelete(queue_id=131073) at osapi-queue.c:142:23
    frame #7: 0x00000001076d12e5 queue-test`QueueTimeoutCheck at queue-test.c:122:14
    frame #8: 0x00000001076d4309 queue-test`UtTest_Run at uttest.c:174:17
    frame #9: 0x00000001076d38f9 queue-test`OS_Application_Run at utbsp.c:232:5
    frame #10: 0x00000001076e6dfa queue-test`main(argc=1, argv=0x00007ffee8532a08) at bsp_start.c:247:5
    frame #11: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #12: 0x00007fff20404f3d libdyld.dylib`start + 1
```

Full test log, note that the mqueue's mutex is locked 19 times but unlocked only 18 times.

```
/Users/stanislaw/workspace/projects/code/osal/cmake-build-debug/tests/queue-test

[BEGIN] UNIT TEST

[BEGIN] 01 SETUP
[  END] No test cases

[BEGIN] 01 QueueTimeoutTest
[ PASS] 01.001 queue-test.c:154 - MsgQ create Id=20001 Rc=0
[ PASS] 01.002 queue-test.c:161 - Task 1 create Id=10001 Rc=0
[ PASS] 01.003 queue-test.c:167 - Timer 1 create Id=90001 Rc=0
[ INFO] queue-test.c:168:Timer Accuracy = 10000 microseconds 
Starting task 1
Delay for 1 second before starting
[ PASS] 01.004 queue-test.c:174 - Timer 1 set Rc=0
mq_timedreceive: lock
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 10
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 15
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 20
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 25
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 30
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 35
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 40
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 45
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 50
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 55
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 60
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 66
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 70
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 75
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 80
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 85
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 90
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 95
[ PASS] 01.005 queue-test.c:119 - Timer delete Rc=0
[ PASS] 01.006 queue-test.c:121 - Task 1 delete Rc=0
```",bug,https://github.com/nasa/osal/issues/1164
Improve documentation in SB subscription APIs wrt non-priority based delivery,"**Is your feature request related to a problem? Please describe.**
Although they do document order of delivery (last is first), it's not obvious the relation to priority and how a higher priority task could be blocked.  Related to lack of actual QOS options.  Note duplicated info in each api, should just define once and reference.

**Describe the solution you'd like**
Provide details and example for out of order priority scheduling... really tasks where it matters should probably not pend on the same message, and understand how SB works.

**Describe alternatives you've considered**
Implement QOS/priority delivery

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1459
"Fix ""utbsp.h"" not found failure when building on some platforms","Testing on other platforms revealed an issue regarding the include path for the utassert header files.

In particular, the latest Ubuntu (15.04) failed to build due to ""utbsp.h"" not being found.  (This may be related to the more recent CMake v3.0.2)
",bug,https://github.com/nasa/PSP/issues/31
"Unsafe macros, investigate conversion into Inline functions","
Some places in CFE -- notably, in ccsds.h -- there are macros
that do things like this:

{{{
    #define CCSDS_WR_APID(phdr,value) \
      ( (phdr).foo[0] = (value >> 8), \
        (phdr).foo[1] = (value & 0xFF) )
}}}

This means that if ""value"" is an expression, odd things happen
when the macro is expanded. This appears in many places in ccsds.h
and we need to do a scan of other headers as well.

It needs to be:
{{{
    #define CCSDS_WR_APID(phdr,value) \
      ( (phdr).foo[0] = ((value) >> 8), \
        (phdr).foo[1] = ((value) & 0xFF) )
}}}
This change needs to happen for all the places where a macro
parameter is an operand in an experession, and does not yet
have parens around it.

UPDATE 2017-10-27: CCB recommends that in many cases we would
benefit from changing these macros into C99 ""inline"" functions,
so this ticket is being hijacked!
",bug,https://github.com/nasa/cFE/issues/172
"doxygen warning for \""usersguide\""","**doxygen errors warning**

 doxygen errors for ""usersguide"" must be fixed before submitting a pull request

defined by CI
[https://travis-ci.com/nasa/cFS/jobs/278425144](url)

**Code snips**
``$ make usersguide > make_usersguide_stdout.txt 2> make_usersguide_stderr.txt
The command ""make usersguide > make_usersguide_stdout.txt 2> make_usersguide_stderr.txt"" exited with 0.
$ if [[ -s make_usersguide_stderr.txt ]]; then
  echo ""You must fix doxygen errors for \""usersguide\"" before submitting a pull request""
  echo """"
  cat make_usersguide_stderr.txt
  exit -1``

**matrix:**
 AMD64
 Compiler: gcc C
BUILDTYPE=debug OMIT_DEPRECATED=false

**Additional context**
warning: overriding recipe for target 'usersguide'
warning: ignoring old recipe for target 'usersguide'

**Reporter Info**
Anhelina Yurkova NASA GODDARD / ASRC SES II
",non-bug,https://github.com/nasa/cFE/issues/489
Resolve detailed design doxygen generation warnings from `make doc` and enforce in CI,"**Is your feature request related to a problem? Please describe.**
`make doc` produces warnings

**Describe the solution you'd like**
Fix issues to resolve warnings, enforce in CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2051
"Add ""special"" ES shell commands as real commands","**Is your feature request related to a problem? Please describe.**
ES special commands using the SHELL FC and a special string don't follow command processing model, missing requirements, etc
CFE_ES_ListApplications
CFE_ES_ListTasks
CFE_ES_ListResources

**Describe the solution you'd like**
Implement these as real commands

**Describe alternatives you've considered**
Delete these

**Additional context**
#484 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/643
Add unit test example for sample_lib,"**Is your feature request related to a problem? Please describe.**
The SAMPLE library does not implement any unit test.  Actual CFE libraries would typically need to do this. 

**Describe the solution you'd like**
A unit test should be implemented to provide a template for implementing a library unit test (code coverage) using the current framework.

**Additional context**
The unit test for an application (e.g. in sample_app, as in nasa/sample_app#21) is slightly different, as the application typically would not need to expose stubs but a library would.  Therefore both sample_app and sample_lib should implement unit tests.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_lib/issues/9
EVS_GenerateEventTelemetry doesn't handle vsnprintf error cases,"**Is your feature request related to a problem? Please describe.**
vsnprintf can return negative error values, but is compared to unsigned int to handle truncation:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/evs/cfe_evs_utils.c#L414-L417

I wouldn't call this a bug (will just pass the initialized to zero string), but might be worth a unique message?

**Describe the solution you'd like**
Explicitly handle failure (and cast for comparison)

**Describe alternatives you've considered**
Place termination character at the start? Any other way to provide clues.

**Additional context**
Static analysis warning for coercion alters value.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1195
Document msg module customization method,"**Is your feature request related to a problem? Please describe.**
No documentation on how to customize message module

**Describe the solution you'd like**
Add documentation - overview, suggestions, etc

Include cmake steps to replace:
```
# The ""MISSION_CORE_MODULES"" will be built and statically linked as part
# of the CFE core executable on every target.  These can be used to amend
# or override parts of the CFE core on a mission-specific basis.
list(APPEND MISSION_MODULE_SEARCH_PATH ""prj_cfe"")
list(REMOVE_ITEM MISSION_CORE_MODULES ""msg"")
list(APPEND MISSION_CORE_MODULES ""custom_msg"")
```

Note this is a ""power user"" option and not generally recommended unless absolutely required by the mission.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/879
Grammatical cleanup of requirements,"**Is your feature request related to a problem? Please describe.**
Many grammatical issues identified in functional requirements.

**Describe the solution you'd like**
Fix them

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1977
"Documentation/usage mismatch in CFE ES ""Start App"" command","**Describe the bug**
The `CFE_PLATFORM_ES_DEFAULT_STACK_SIZE` is documented as being a default stack size, not a minimum stack size.  But the CFE ES ""Start App"" command enforces it as a minimum value here:

https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/src/es/cfe_es_task.c#L900-L906

But this is not in agreement with how it is documented:

https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/cmake/sample_defs/cpu1_platform_cfg.h#L1186-L1201

**To Reproduce**
N/A

**Expected behavior**
Should not enforce the default as a minimum.  

I don't see any CFE platform definition for an enforced minimum stack size.  If I remember correctly this was discussed once or twice and the agreement was that this is an operational issue - stack size requirements depend on the app stack usage and the memory constraints of the platform - so CFE cannot (and should not) impose some random limitations on it - it should attempt to do what the user requested.

So recommendation would be to remove this check.
One valid possibility is that if the stack size is specified as 0 (which is definitely not valid), to use the default value instead.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1004
fd_set coversions in select impl can read beyond the end of OS_impl_filehandle_table,"**Describe the bug**
The loop inside OS_FdSet_ConvertIn_Impl and OS_FdSet_ConvertOut_Impl is limited by `sizeof(OS_FdSet)`, which itself is sized to accommodate OS_MAX_NUM_OPEN_FILES as a bit mask.

The problem is that the size is (necessarily) padded up to a multiple of 8 bits.  If OS_MAX_NUM_OPEN_FILES was not a multiple of 8, and some of these ""padding"" bits are set as 1, these functions will attempt to read entries beyond the end of `OS_impl_filehandle_table`.

**To Reproduce**
In normal use cases where the correct API is used (e.g. `OS_SelectFdAdd()`) it is not possible to set these extra bits - as the OS_SelectFdAdd() checks if the filehandle is valid before setting the bit.

But in coverage tests, the structure is `memset()` to all ones (0xFF) which causes undefined behavior as it will end up reading beyond the end of the array.

**Expected behavior**
Must not read beyond the end of the array even if extra bits are set.

**System observed on:**
Ubuntu 20.04

**Additional context**
Observed as failure in https://github.com/nasa/osal/pull/917.  This issue was not introduced by those merges, it just so happens that it changed the preconditions such this became exposed.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.",bug,https://github.com/nasa/osal/issues/919
Remove unused function `CFE_ES_SysLog_snprintf` in cfe_es_syslog.c,"**Is your feature request related to a problem? Please describe.**
This function is not used. We also don't have UT for this function.

**Describe the solution you'd like**
Simply remove the code.

**Describe alternatives you've considered**
Keep it and add the unit tests.

**Requester Info**
Jose F Martinez Pedraza/NASA GSFC",non-bug,https://github.com/nasa/cFE/issues/1636
GetElfHeader - cyclomatic complexity of 36,"**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

elf2cfetbl.c::[GetElfHeader](https://github.com/nasa/elf2cfetbl/blob/46b29f82c76429be97687203f75f4b1b25227c60/elf2cfetbl.c#L1467) unnecessarily violates the recommendation with a cyclomatic complexity of 36.  

**Describe the solution you'd like**
Clean up GetElfHeader such that it has a cyclomatic complexity of 15 or less.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Imported from JSC static analysis audit

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/elf2cfetbl/issues/129
Possible buffer overrun in CFE_ES,"The function `CFE_ES_GetAppInfoInternal()` had hardcoded the size of the various output buffers to be OS_MAX_API_NAME or OS_MAX_PATH_LEN.

This should use the `sizeof()` operator rather than using a specific macro, since that will accurately use the correct size, however it is defined.  We previously updated most of these but this one was missed in the previous pass.",bug,https://github.com/nasa/cFE/issues/276
SB Message data ,"hello everyone,

Sorry for the basic question. i’m new to cFS - I’ve tried for a few days now and having a some difficulty with SB messages. 

I’ve read through the development guide and API - and I can’t figure out how to properly attach data to a SB message. 

I can send and receive messages, but when I mount the pointer to a variable - all the data assigned in my structs are empty. 

How do I properly mount custom data to my SB messages?

Corey Carter - NASA Pathways",non-bug,https://github.com/nasa/cFS/issues/229
update cFE source and unit tests to use CFE_Status_t,"**Is your feature request related to a problem? Please describe.**
As a followon to #888, we should update all of the cFE source to use the CFE_Status_t return status type instead of int32.

**Describe alternatives you've considered**
May want to do this in phases, per component; or incorporate into a clang-format code cleanup change set.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/921
Custom pipe message limits without requirements or justification,"**Is your feature request related to a problem? Please describe.**
Expectation is to use defaults unless there's a requirement/justification to have custom limits.  There is neither for the code snips below, and no clear reason why the default limits aren't good enough (they should be fine).

https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/es/cfe_es_task.c#L281-L285
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/es/cfe_es_task.c#L292-L296
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/evs/cfe_evs_task.c#L318-L320
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/evs/cfe_evs_task.c#L327-L328

Note for all but 1 case, the message limit value set is the same as the default (4).

**Describe the solution you'd like**
Either justify these differences or just use the default subscribe call.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1122
Improve UT coverage on CF_CmdGetSetParam(),"**Is your feature request related to a problem? Please describe.**
The unit test does not individually validate all of the values that ""param_id"" may have.  This did not show up in the LCOV reports previously.  However a recent PR changed the table lookup to a `switch()` block, the LCOV branch coverage now shows these param_id values as untested cases in the switch.

**Describe the solution you'd like**
Should add test cases to get back to 100% line and branch coverage.

**Additional context**
Note this was always the case, but it just didn't show up in the LCOV because of the code structure.  Now it does.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/CF/issues/166
"doxygen warning, unable to solve link","**Describe the bug**
doxygen gives warning,  unable to resolve link...etc

[doxygen_warning_cfe_unable_to_resolve.txt](https://github.com/nasa/cFE/files/3789251/doxygen_warning_cfe_unable_to_resolve.txt)


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc - 6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/384
Update section 4.1.2 “Hardware Servicing” Application in Developer's Guide,"**Is your feature request related to a problem? Please describe.**
Section 4.1.2 Hardware Service in developer's guide needs to be updated. 

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/478
Support polling with no delay,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Polling has a timer that doesn't support zero delay, limiting performance:
https://github.com/nasa/CF/blob/930b0e51183ec9ce501ebe4210a1d777d5866496/fsw/inc/cf_tbldefs.h#L36-L40
https://github.com/nasa/CF/blob/930b0e51183ec9ce501ebe4210a1d777d5866496/fsw/src/cf_cfdp.c#L1513-L1515
https://github.com/nasa/CF/blob/930b0e51183ec9ce501ebe4210a1d777d5866496/unit-test/cf_cfdp_tests.c#L1144-L1148

**Describe the solution you'd like**
There's already a channel enable, no need to use interval to disable the channel.  Update to support 0 delay to maximize throughput when using the polling directory.

**Describe alternatives you've considered**
None

**Additional context**
I can't say I really understand why 0 timeout wasn't supported to begin with.  If anyone knows I'd be interested to hear it.  In rate constrained situations unnecessary delays on file transfers are a big impact.  Sending small files on a fast link could waste significant bandwidth by waiting a second between polling.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/380
Improve PSP config override concept,"**Is your feature request related to a problem? Please describe.**
Historically PSP's have been treated as clone-and-own, but to be a bit friendlier for reuse it would help to support a more general configuration override concept that wouldn't break unit testing.

Example issue - if a user overrides cfe_psp_config.h for a specific target, it ends up getting used by unit test for the other PSPs that rely on unique/conflicting cfe_psp_config.h elements.  This can be avoided by conditionally NOT pulling in a cfe_psp_config.h override for native or when ENABLE_UNIT_TESTS=1 unless trying to unit test the system it applies to but this really isn't pretty if it's a multi-build and you really do want to coverage test using overridden configs.  Basically a user had an override to the linux PSP config, but unit tests build for vxworks coverage and they tried to use the linux PSP coverage override.

**Describe the solution you'd like**
Allow for easily disabling PSP unit tests for the non-target PSPs.  Likely a good thing for OSAL also.  Really users only need to test what they are using, just the open source bundle needs to test them all.

Also would help to transition to the OSAL pattern for setting cmake variables, and use those to set the defines with default backups.  The built configs could then easily override just what they want, and the common-across-psp settings would be portable.  Maybe the config headers should have unique names associated with the implementation vs all being called cfe_psp_config.h since really they aren't portable.  Or separate the unique and portable settings.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, from conversation with @excaliburtb
",non-bug,https://github.com/nasa/PSP/issues/295
"Return value of ""OS_rmdir"" implementation not being passed through","**Describe the bug**
The return value of `OS_DirRemove_Impl()` (the low level implementation) is not getting propagated back to the caller of `OS_rmdir()` as it should be.

**To Reproduce**
Call `OS_rmdir()` on a directory that shouldn't be removable, e.g. if it is not empty.  The `OS_DirRemove_Impl()` function fails and returns `OS_ERROR`, but the application gets returned `OS_SUCCESS`.

**Expected behavior**
Caller should get the error code, not `OS_SUCCESS`.

**Code snips**
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-dir.c#L251

**System observed on:**
Ubuntu 20.04

**Additional context**
Noticed this when validating return codes in #331 and #981

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/999
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/elf2cfetbl/issues/63
Combine SB Set/Get message characteristics group,"**Is your feature request related to a problem? Please describe.**
Get message and set message characteristics grouping out-of-family (no other separate getters/setters)

**Describe the solution you'd like**
Make a single group, makes more sense for test grouping also (test setter with getter)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1831
Contributor License Agreement Template,"**Describe the bug**
Unable to quickly find the Contributor License Agreement (CLA). Recommend adding to README of each repository.

**Reporter Info**
John P. Lucas - NASA GSFC
",non-bug,https://github.com/nasa/cFS/issues/15
Update build scripts so only CFE_SYSTEM_PSPNAME needs to be specified,"**Is your feature request related to a problem? Please describe.**
Currently when cross compiling the user-supplied scripts/toolchain file need to specify three configurations:
- CFE_SYSTEM_PSPNAME
- OSAL_SYSTEM_BSPTYPE
- OSAL_SYSTEM_OSTYPE

However, although an OS layer can have multiple different BSP/PSP layers, each PSP only works with a specific OS layer.  

**Describe the solution you'd like**
The CFE build should only require that CFE_SYSTEM_PSPNAME is specified.  It should automatically choose the right OSAL OS/BSP layers that correspond to that PSP.

**Describe alternatives you've considered**
Leaving it as-is has a potential for mismatching incompatible layers.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/632
Enhancements to OSAL UT stub code in osapi_stubs,"This ticket reflects further testing with CFE unit tests.  Previous ticket #40 is now integrated with CFE unit tests but some additional bits are needed to make everything right.  Since #40 was approved at the last CCB, it is not going to be amended anymore, so this is a follow-on update.

* Hooks were not completely implemented - CFE needs this to make the latest version fully testable.
* Provide stubs for missing functions: {{{OS_TimerCreate}}}, {{{OS_TimerAdd}}}, {{{OS_TimerSet}}}, {{{OS_CountSemCreate}}}.



",non-bug,https://github.com/nasa/osal/issues/93
mcp750 PSP ignores StartupFilePath,"cfe_psp_start.c for mcp750 VxWorks has StartupFilePath as an input parameter to CFE_PSP_Main, but calls CFE_ES_Main with CFE_PLATFORM_ES_NONVOL_STARTUP_FILE.

Confusing implementation... looks like at least the pc-linux PSP only uses CFE_PLATFORM_ES_NONVOL_STARTUP_FILE (but a different prototype).

",non-bug,https://github.com/nasa/PSP/issues/102
Document/verify `CFE_RESOURCEID_MAX` is power of 2 - 1 and sometimes used as MASK (and MAX),"**Is your feature request related to a problem? Please describe.**
`CFE_RESOURCEID_MAX` is used in some places as MAX and others as a mask, also has to be power of 2 - 1:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/resourceid/fsw/src/cfe_resourceid_api.c#L52

**Describe the solution you'd like**
Document and verify

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1365
Recommended refactoring in HS_MonitorEvent,"HS_MonitorEvent recommendation:

refactor common action logic for the different monitors into one function, and pass in unique info. Would avoid repeated logic for the same action from a different trigger.

finding from code review

Imported from GSFCCFS-1003",non-bug,https://github.com/nasa/HS/issues/5
CF_CFDP_SendEotPkt sent with incorrect CC value,"**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x ] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A call to CF_CFDP_SendEotPkt() was added to the CF_CFDP_ResetTransaction() function to give feedback on successful file transmission.  However, It is sent every time the transaction is discarded regardless of the cause.  I believe it was the intent that the t->history->cc could then be used to determine if it was successful. 

However, it is unclear if t->history->cc is being correctly set on on every possible condition that calls CF_CFDP_ResetTransaction().  Particularly with the CFDP send control loop,  it appears that there are cases where the the sending transaction is reset without setting t->history->cc which is used by CF_CFDP_SendEotPkt().   i.e. The CF_EotPacket telemetry would indicate success when it in fact did not complete successfully. 

Before CF_CFDP_SendEotPkt() was added to CF_CFDP_ResetTransaction(), it did not matter if t->history->cc was set before calling CF_CFDP_ResetTransaction() since it wasn't used in the function before freeing the transaction.

**To Reproduce**
Steps to reproduce the behavior:
example -Let CFPD Send t->inactivity_timer timeout before completing the transaction.

**Expected behavior**
 t->history->cc must be set correctly for all possible cases before calling  CF_CFDP_ResetTransaction().
Canceling a transaction or an error condition that leads to resetting the transaction must set t->history->cc to a value other than CF_CFDP_ConditionCode_NO_ERROR.

Unit tests for function that have an error condition that leads to resetting the transaction should verify that t->history->cc is also set to an error condition.

**Code snips**
void CF_CFDP_SendEotPkt(CF_Transaction_t *t)
{
    ...
        PktBuf->eot.cc         = t->history->cc;
    ...
}

**System observed on:**
 - Hardware N/A
 - OS: Centos
 - Versions 7

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Nathan Lynch JSC-ER611

",bug,https://github.com/nasa/CF/issues/325
Remove `CFE_TIME_GetMETseconds` and `CFE_TIME_GetMETsubsecs`,"**Is your feature request related to a problem? Please describe.**
No need to support getting the individual fields, just use `CFE_TIME_GetMET`.  Avoids misuse, since individual fields aren't in sync (subseconds could roll between calls, etc).

**Describe the solution you'd like**
Remove/deprecate these extra APIs (confirm against requirements)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1500
"Update `OS_ObjectIdToArrayIndex` documentation related to it being an API, inconsistent documentation in implementation","**Is your feature request related to a problem? Please describe.**
`'OS_ObjectIdToArrayIndex` is an external API:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/inc/osapi-idmap.h#L203-L232

Yet internally there's a few style patterns and references that treat it like it's internal:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L1529-L1543
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L1413

Note the implementation file itself has some inconsistencies:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L41-L42
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L129-L133
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L135-L142
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L230-L233

**Describe the solution you'd like**
Update comments, make sure headers are in the right place

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/984
Strict-type errors/exception when creating TimeBase callback on RTEMS during cFS init,"**Describe the bug**
A memory alignment exception occurs when running with RTEMS on GR740 board when compiling with `OMIT_DEPRECATED = true` and `MISSION_RESOURCEID_MODE = ""STRICT""`

The exception occurs during cFS init, when starting the TimeBase callback task/thread:
https://github.com/nasa/osal/blob/main/src/os/rtems/src/os-impl-timebase.c#L392-L395

The callback thread `OS_TimeBase_CallbackThread` function argument is of type `osal_id_t`. 
https://github.com/nasa/osal/blob/main/src/os/shared/src/osapi-timebase.c#L381

RTEMS expects the callback function argument to be of type `rtems_task_argument`. The conversion from one type to another when starting the task causes the exception.

**To Reproduce**
Build for rtems5-gr740 with `OMIT_DEPRECATED = true` and `MISSION_RESOURCEID_MODE = ""STRICT""`
Run cFS on gr740 board

**Expected behavior**
Successful cFS init.

**System observed on:**
 - Hardware: GR740
 - OS: RTEMS 5
 - Versions: Draco

**Reporter Info**
Jose F Martinez Pedraza / GSFC 582
",bug,https://github.com/nasa/osal/issues/1244
Making and mounting a file system from cfe functional caused a reformat of RAM on MCP750,"**Describe the bug**
See #1963.  Note #1964 worked around the issue by just using existing ram, but OS_mkfs/OS_mount should have no impact on the existing drive(s).

**To Reproduce**
Run the old FS test that creates the additional mount and observe the reformat on MCP750.
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/fs_header_test.c#L36-L46

**Expected behavior**
Shouldn't cause a reformat...

**System observed on:**
 - Hardware: MCP750
 - OS: VxWorks 6.9
 - Versions: Bundle main (pre #1964 merge)

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/1968
Add Issue Template for Questions,"**Is your feature request related to a problem? Please describe.**
I've been advised to submit questions through the GitHub issue system, but questions don't fit into the Feature Request or Bug Report issue template options. It would be nice if there was a third template to capture questions.

**Describe the solution you'd like**
Add a template for users to formulate questions about the software.

**Describe alternatives you've considered**
Users could choose not to use any of the templates.

**Additional context**
N/A

**Requester Info**
Keegan Moore/NASA-GSFC
",non-bug,https://github.com/nasa/cFS/issues/120
Do not rely on OSAL SOFTWARE_(BIG|LITTLE)_BIT_ORDER,"**Is your feature request related to a problem? Please describe.**
These endian-indicator macros are problematic for many reasons as documented in nasa/osal#843.  The continued presence of these macros in OSAL came up again in a recent code review.

OSAL will likely stop providing these macros in the next version, because nothing in OSAL is endian-dependent.

CFE only uses these to implement CFE_MAKE_BIG16 / CFE_MAKE_BIG32 macros.

**Describe the solution you'd like**
Move the nonstandard logic from OSAL into CFE, because nothing in OSAL depends on it.

For backward compatibility CFE will likely still have to provide this macro for historical reasons, in case some apps use it, and because TIME uses those CFE_MAKE_BIG* macros.

**Additional context**
See nasa/osal#843

In CFE the logic should be put in a separate header where it can be confined/limited to the scopes where this is actually used/needed, rather than a ubiquitous header like `common_types.h`.  This way an `#error` directive if the check was inconclusive will make more sense since it won't error out on cases where we don't care (i.e. most).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1217
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the OSAL repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/osal/issues/911
Remove device driver references from app development guide and cleanup,"**Is your feature request related to a problem? Please describe.**
Device driver APIs never implemented, guide has references to a design model that doesn't work

**Describe the solution you'd like**

Device driver scrub:
- Scrub the guide, remove non-existent references

Other minor cleanup:
- Fix table of contents
- Remove old doc file

**Describe alternatives you've considered**
N/A

**Additional context**
See #408 and #377

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/496
vxworks osloader.c functions not using mutex,"The osloader.c functions do not properly protect the OS_module_table,  OS_sym_table_file_id, and OS_symbol_table_size with the OS_module_table_mut.  

These items are being read from and changed outside of the mutex.

(Discovered as part of #45 coverage testing.)",bug,https://github.com/nasa/osal/issues/99
Correction of an infinite loop in cfe_sb_task.c,"In CFE_SB_SendRtgInfo() the case where (pd == NULL) followed by continue will result in an infinite loop.  

the proper correction is to replace the continue with a break, so that the loop is exited on an error.

The correction was made in the following changeset, as part of static code analysis changes:  

commit: [changeset:59640e0]",bug,https://github.com/nasa/cFE/issues/117
Requirement verification failure,"**Describe the bug**
The following requirements fail verification testing because for each - an event message is sent, but Checksumming is not disabled:

9007.2 (User Memory)
CS shall send an event message and disable Checksumming of the User-Defined Memory, if the state is not one of the following:
a) enabled
b) disabled
c) empty 

9007.1 (User Memory)
If the address range for any of the User-Defined Memory is Invalid, CS shall send an event message and disable User-Defined Memory Checksumming

9006.1 (Tables)
CS shall send an event message and disable Table Checksumming, if the state is not one of the following:
a) enabled
b) disabled
c) empty 

9005.1 (Apps)
CS shall send an event message and disable Application code segment Checksumming, if the state is not one of the following:
a) enabled
b) disabled
c) empty 

9003.2 (Non-Volatile)
CS shall send an event message and disable Non-volatile Checksumming, if the state is not one of the following:
a) enabled
b) disabled
c) empty 

9003.1 (Non-Volatile)
If the address range for any of the Non-volatile segments is Invalid, CS shall send an event message and disable Non-volatile Checksumming

**Expected behavior**
Checksumming will need to be disabled in each case or the requirements will need to be updated

**Code snips**
Example from cs_table_processing.c:
            if (Result != CS_TABLE_ERROR)
            {
                CFE_EVS_SendEvent (CS_VAL_EEPROM_STATE_ERR_EID,
                                   CFE_EVS_EventType_ERROR,
                                   ""Eeprom Table Validate: Illegal State Field (0x%04X) found in Entry ID %d"",
                                   (unsigned short)StateField,
                                   (int)OuterLoop);
                Result = CS_TABLE_ERROR;            
            }

**Reporter Info**
Dan Knutsen
NASA Goddard
",bug,https://github.com/nasa/CS/issues/54
CF should use unions to simplify code and avoid improper casting,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1796] CF should use unions to simplify code and avoid improper casting
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 09:29:11 2021

_Original Description_:
In particular this applies to the ""msg"" member of the global, in the following structs:  
  
CF\_AppData.engine.out.msg  
CF\_AppData.engine.in.msg  
  
They are currently defined as a ""CFE\_SB\_Buffer\_t*"" type, which is what comes to/from SB calls. However, locally it is either a ""pdu\_s\_msg\_t"" or ""pdu\_r\_msg\_t"" (an extension) depending on direction. This is then cast inline at the point of use whenever the local type is required, e.g.  
  
    ret = &((pdu\_s\_msg\_t *)CF\_AppData.engine.out.msg)->ph;  
  
This is not only inelegant, but casting permits almost any type conversion, and offers no protection against a programmer mistake, such as if it was cast to a ""pdu\_r\_msg\_t*"" instead of ""pdu\_s\_msg\_t*"" .. that would compile just fine but cause odd memory corruption at runtime.  
  
Recommend to use a union for the ""msg"" member data type, i.e.   
  
union  
{  
    CFE\_SB\_Buffer\_t sb\_buf;  
    pdu\_r\_msg\_t pdu\_r\_msg;  
};  
  
Then by taking the address of either the ""sb\_buf"" or ""msg"" union member depending on what is being called and what it requires.  
  
In addition to being easier to read, this offers a layer of protection in that the data can only be converted into a limited set of types (union members).  
  
  
",non-bug,https://github.com/nasa/CF/issues/59
HS idle task only executes once and exits... reports CPU hogging all the time,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
HS idle task used to have a while loop (from 2.3.2 tag):
https://github.com/nasa/HS/blob/192a10f1adfb1a2cd5c64bd6c5be918058e9441c/fsw/src/hs_custom.c#L60-L84

Now just runs once:
https://github.com/nasa/HS/blob/c5ef5acf65ca346270f721e22620e9321a930075/fsw/src/hs_custom.c#L51-L80

**To Reproduce**
Running cFS with HS reports hogging every time...
```
EVS Port1 66/1/HS 61: CPU Hogging Detected
1980-012-14:03:25.80827 HS App: CPU Hogging Detected
```

**Expected behavior**
Task should run in a loop and realistic margin should be getting reported

**System observed on:**
 - OS: Linux
 - Versions: 2.4.1+

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/HS/issues/21
Improve handling of platform config,"**Is your feature request related to a problem? Please describe.**
Almost every app, including the CFE core apps, have some sort of ""platform scope"" internal config options.  And the way we handle this for apps and external entities is currently different than the way we handle this for CFE core.  To move forward we need to consolidate this into a single, consistent method that can be applied for both external apps and core apps.

**Describe the solution you'd like**
CMake already generates the `cfe_platform_cfg.h` file so with some tweaks we can get it to work for everything.

There are several possible approaches to consider:

Option 1: Do we generate a single ""monolithic"" platform header file and let all apps include it?

- Advantage: Would look basically like the current ""cfe_platform_cfg.h"" and we can even keep the name, preserving backward compatibility
- Disadvantage: Would contain configs for every app/module on the platform thereby giving access to all sorts of out-of-scope info, no way to enforce apps to use only their own config items, so they could inadvertently break ABI consistency by using config items they don't own.

Option 2: Do we generate a per-app ""focused"" platform header file which is only used by that app?

- Advantage: Cleaner, Better scoping, Only give apps/modules a header file containing their own config items, they can't use what they can't see, and thereby can't introduce unexpected ABI dependencies.

- Disadvantage: Would probably need to be a different name, as we can't call everything ""cfe_platform_cfg.h"" (too confusing), and would probably (eventually) require breaking up the current cfe_platform_cfg.h into a config file per core app (es_platform_cfg.h, evs_platform_cfg.h, etc).  In the current CFE core there are examples of cross-pollination too, where EVS uses data structures defined by ES which are based on platform config.  So these become undocumented/uncontrolled ABI dependencies.  We'd have to fix those.

**Additional context**
Option 2 is cleaner but arguably more work, might take a little longer to implement, and have a bigger impact on apps.

This type of issue is coming more to the forefront when considering things like #554, but there have been periodic issues posted in the past regarding the ""weirdness"" around the way `cfe_platform_cfg.h` is handled, so it would be good to generally fix that too, but need to get some sort of community consensus before implementing anything.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/724
Use XOR for ping-pong buffer in TBL,"**Is your feature request related to a problem? Please describe.**
Current pattern use for the active/inactive buffer index isn't as obvious/common (`1 - index`), examples but needs full scrub:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L680
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L711

**Describe the solution you'd like**
`index^1`

**Describe alternatives you've considered**
Current implementation works, this is just style

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1514
Untraced feature to decompress apps/lib on load,"**Describe the uncovered feature**
The feature to decompress apps/libraries on load that end in .gz does not have requirements or associated build verification.  Note it is covered in coverage/functional testing in fs_UT.c.

**Possible solutions**
1. Remove this feature from the core (allows #291 to externalize decompress to be implemented cleanly)
1. Add requirements, design, and build verification and resolve how to implement vs #291 desire to externalize

**Related software**
 - Implemented in cfe_es_apps.c
 - Utilizes cfe_fs_api.c: CFE_FS_IsGzFile, CFE_FS_GetUncompressedFile, cfe_fs_decompress.c and cfe_fs_decompress.h

**Additional concern**
CFE_FS_Decompress prototype is defined in both inc/cfe_fs.h and cfe_fs_decompress.h

**Reporter Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/399
Customizable CRC Algorithms,"**Is your feature request related to a problem? Please describe.**
It would be useful to be able to customize which CRC algorithms are being implemented in CFE_ES_CalculateCRC.

**Describe the solution you'd like**
Instead of using a hard-coded lookup table, a user can set a few variables in a configuration file that describes the desired algorithm.  On initialization of CFE_ES, the lookup tables can be generated based on the configuration variables.  I've attached a couple snippets of code to demonstrate a potential implementation.  The CRC algorithm variables are set in sample_mission_cfg.h.  The lookup tables are generated in an initialization function that can be called when CFE_ES initializes.

**Additional context**
The example CRC algorithms I used come from here (https://reveng.sourceforge.io/crc-catalogue/).  The CRC-16 algorithm is currently implemented in CFE_ES_CalculateCRC.

**Requester Info**
Mathew McCaskey
HX5 / NASA-GRC
Regenerative Fuel Cell Project

[snippets.zip](https://github.com/nasa/cFE/files/5811303/snippets.zip)
",non-bug,https://github.com/nasa/cFE/issues/1095
Initialize status in CFE_ES_WaitForSystemState,"**Is your feature request related to a problem? Please describe.**
From LGTM: The variable Status may not be initialized here.
https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/es/cfe_es_api.c#L640

**Describe the solution you'd like**
Initialize to success

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1071
CFE_Assert should use SendEvent,"**Is your feature request related to a problem? Please describe.**
CFE_Assert currently has all it's outputs done through CFE_ES_WriteToSysLog which makes them hard to read and failures can get lost in all the noise. 

**Describe the solution you'd like**
CFE_Assert could instead send events through the test runner, which would give a lot more flexibility to the output. 

**Describe alternatives you've considered**
We just leave it as it is. 

**Additional context**
https://github.com/nasa/cFE/issues/94 could then be a further enhancement of this done at a later time. 

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1266
Clarify/clean up spacecraft/cpu names/ids,"**Is your feature request related to a problem? Please describe.**
Defined in platform config:
- CFE_PLATFORM_CPU_ID (referenced by CFE_PLATFORM_TBL_VALID_PRID_1 and CFE_CPU_ID)
  - CFE_PLATFORM_TBL_VALID_PRID_1 is used in internal table logic
  - CFE_CPU_ID looks unused
- CFE_PLATFORM_CPU_NAME (referenced by CFE_CPU_NAME)
  - CFE_CPU_NAME looks unused

Defined in mission config:
- CFE_MISSION_SPACECRAFT_ID (referenced by CFE_PLATFORM_TBL_VALID_SCID_1 and CFE_SPACECRAFT_ID)
  - CFE_SPACECRAFT_ID looks unused
  - CFE_PLATFORM_TBL_VALID_SCID_1 used in internal table logic

Defined by cmake:
- CFE_CPU_ID_VALUE (from TGTID), sets .Default_CpuId in target config
- CFE_CPU_NAME_VALUE (from TGTNAME) sets .Default_CpuName in target config
- CFE_SPACECRAFT_ID_VALUE (from SPACECRAFT_ID) sets .Default_SpacecraftId in target config

**Describe the solution you'd like**
Remove/deprecate unused and/or clarify use/intent.  Looks like spacecraft ID may actually be defined differently (42 vs 0x42).

**Describe alternatives you've considered**
Stay confused.

**Additional context**
Table use looks like it could lead to inconsistencies.

**Requester Info**
Jacob Hageman - NASA/GSFC, triggered by @johnphamngc comments on nasa/psp#154
",non-bug,https://github.com/nasa/cFE/issues/710
vxworks OS_GetPhysDeviceName()  problem with max volume name length,"The vxworks OS_GetPhysDeviceName() in osfilesys.c may have a problem when the volume name length is at its maximum length.

See Test_OS_GetPhysDeviceName_MaxVolName() in osfilesys_testcase.c, part of testing form trac-22 branch, [changeset:0f36fb6].",bug,https://github.com/nasa/osal/issues/115
Update coverage tests for VxWorks at minimum to include reporting of all code that could be included in build,"**Is your feature request related to a problem? Please describe.**
Currently os-impl-bsd-socket.c can be included (and is by default) in the VxWorks build:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/vxworks/CMakeLists.txt#L67

but it's not included in coverage testing or reported as part of status
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-test-coverage/vxworks/CMakeLists.txt#L31

So although code coverage reports 100%, we are NOT covering the possible FSW 100%... so it's a bit misleading.

**Describe the solution you'd like**
All possible code should be reported for coverage.  Short term is just to add tests (track by hand) but eventually may benefit from a quick check that all the files included in the build are included in coverage analysis.

**Describe alternatives you've considered**
None

**Additional context**
Illuminated by investigation into #793, unreachable code wasn't being reported even though it was in the core build.

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/795
"ES missing branch coverage in CFE_ES_RegisterCDSEx, IsNewEntry can't be true without IsNewOffset being true","**Is your feature request related to a problem? Please describe.**
Branches aren't independent, since a new entry will always have a new offset (can't hit false IsNewOffset with true IsNewEntry):
```
     432 [ +  + ][ +  + ]:         12 :         if (Status == CFE_SUCCESS && (IsNewOffset || IsNewEntry))
                 [ -  + ]
     433                 :            :         {
     434                 :            :             /* If we succeeded at creating a CDS, save updated registry in the CDS */
     435                 :          6 :             RegUpdateStatus = CFE_ES_UpdateCDSRegistry();
     436                 :            :         }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_cds.c#L432-L436

**Describe the solution you'd like**
Could just test against IsNewOffset.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1928
Either FM unit testing is incorrect or an OSAL enumeration is incorrect,"@mbenson1 commented on [Fri Jun 19 2020](https://github.com/nasa/cFS/issues/104)

**Describe the bug**
I don't know if this an FM bug or an OSAL bug.  I don't know what the intent on either side was.  FM is failing unit tests.  The first error indicates before OSAL 5.0.3-bv, FM determined if a directory entry was a directory by using the S_IFDIR macro directly, but had an #ifdef that allowed it to use an OSAL defined macro instead.  

```
#ifdef OS_FILESTAT_ISDIR
            if (OS_FILESTAT_ISDIR(FileStatus))
#else
            if (S_ISDIR(FileStatus.FileModeBits))
#endif
```

With OSAL 5.0.3-bv, the OS_FILESTAT_ISDIR macro is defined and FM is using the OS_FILESTAT_ISDIR macro.  The unit test sets the FileStatus.FileModeBits to 0040000 (0x4000), but the OS_FILESTAT_ISDIR tests equality against OS_FILESTAT_MODE_DIR (0x10000) so the unit tests fail.  I don't know if the OSAL developer intended to use the value expected by FM (0x4000), or if the FM should be:

from:
`filestats->FileModeBits = S_IFDIR;`

to:
```
#ifdef OS_FILESTAT_ISDIR
    filestats->FileModeBits = OS_FILESTAT_MODE_DIR;
#else
    filestats->FileModeBits = S_IFDIR;
#endif
```

Making the change above fixes these errors, but so does changing the enumeration from:
OS_FILESTAT_MODE_DIR =   0x10000
to
OS_FILESTAT_MODE_DIR =   0x4000

**To Reproduce**
Steps to reproduce the behavior:
1. Build FM unit tests with the ut_assert, hooks, and stubs from cFE 6.5.0a
2. Run FM unit tests

**Expected behavior**
FM unit tests should pass.

**System observed on:**
 - VirtualBox
 - Ubuntu 16.04
 - FM 2.5.2, OSAL 5.0.3-bv, app ut_assert, hooks, and stubs from cFE 6.5.0a

**Reporter Info**
Mathew Benson
Windhover Labs, LLC
mbenson@windhoverlabs.com


---

@skliper commented on [Mon Jun 29 2020](https://github.com/nasa/cFS/issues/104#issuecomment-651188971)

@ejtimmon Is this resolved with the latest FM release?

",bug,https://github.com/nasa/FM/issues/21
ES - Invalid Memory Handle When Restarting/Deleting an Application with Tables (GSFC DCR 14483),"When you delete an application that uses tables (e.g. HK) and then restart another task (e.g. SC) for a second time, the ES task writes to the system log that there are invalid memory handles.
 
Seems like when tables get unregistered is where the errors are happening. Message says it got a bad pointer for this table, not sure if the app in messed up. This problem is not isolated to RestartApp. It occurs in DeleteApp as well. What it looks like is that the linked list is not getting cleaned up properly when an app is deleted or restarted.
 
Further investigation in the CFS Lab narrows the problem down to the RemoveAccessLink function in cfe_tbl_internal.c. The errors are being generated on table handles from the deleted app. The buffer that is trying to be placed back into the pool is set to NULL because it has already been put back into the pool. The tables that were ""cleaned up"" still contain the AppID of the deleted app. When the subsequent app is restarted, its AppID becomes that of the deleted app and inherits the table handles from the previous app. For example, the HK app has 2 tables and the SC app has 73 tables. When HK is deleted, the 2 tables are removed and the entries still contain the AppID of HK. When SC is restarted, it becomes the AppID that HK was. The reason the errors occur on the 2nd restart is because on the first restart SC had a unique AppID. On the second restart, it has inherited HKs original AppID. In this case, you will see 2 sets of errors when SC is restarted. The SC application did not show any adverse functionality because of these errors. All that is happening is that the PutPoolBuf function is reporting an error when trying to return a NULL buffer to the pool.",bug,https://github.com/nasa/cFE/issues/121
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/DS/issues/12
Adding .lgtm.yml file,"**Is your feature request related to a problem? Please describe.**
Add lgtm.yml file.

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFS/issues/32
"OS_fsBlocksFree returns a 32-bit value, but OS_statvfs_t.blocks_free is 64 bit ","OS_fsBlocksFree returns a 32-bit value, but OS_statvfs_t.blocks_free is 64 bit.",bug,https://github.com/nasa/osal/issues/573
LGTM warning - local parameter hides global variable with the same name,"**Is your feature request related to a problem? Please describe.**
```
line: 368, 380, 392, 404, 416, 428, 1907, 1922
uint8_t get_e_ident(const union Elf_Ehdr *ElfHeader, int index)
--
  | Parameter ElfHeader hides a global variable with the same name.

```

**Describe the solution you'd like**
Deconflict.

**Describe alternatives you've considered**
None

**Additional context**
#28 

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/elf2cfetbl/issues/60
Coverage test failure in VxWorks,"**Describe the bug**
The coverage test cases for `OS_VxWorks_Sigwait` are failing:
```
[BEGIN] 03 OS_VxWorks_SigWait
[ FAIL] 03.001 coveragetest-ostimer.c:160 - Osapi_Internal_CallSigWaitFunc(0) (0) == 8888 (8888)
[ FAIL] 03.002 coveragetest-ostimer.c:162 - Osapi_Internal_CallSigWaitFunc(0) (0) == 5555 (5555)
[ FAIL] 03.003 coveragetest-ostimer.c:164 - Osapi_Internal_CallSigWaitFunc(0) (0) == 5555 (5555)
[  END] 03 OS_VxWorks_SigWait   TOTAL::3     PASS::0     FAIL::3      MIR::0      TSF::0      N/A::0   
```

**To Reproduce**
Build OSAL coverage tests and execute

**Expected behavior**
All tests should pass

**System observed on:**
Ubuntu 18.04 LTS 64-bit

**Additional context**
This was probably some fallout related to the VxWorks timer fixups that were done recently (#271, #274) but never noticed because the OSAL coverage test is still separate (that aspect is also being addressed).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.",non-bug,https://github.com/nasa/osal/issues/321
Document the cmake build system,"**Describe the bug**
Our documentation does not explain to users how the build system works and how to customize it for their needs

**Expected behavior**
A clear description and possibly some graphics showing how the different cmakelists files link with each other and how dependencies flow.

From CFS-40: Document dependencies based on features used (xxd for ""embedded"" files)
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/target/CMakeLists.txt#L229

It might make more sense to move this into the github.com/nasa/cFS instead

**Additional context**
Related to conversation started in https://github.com/nasa/cFE/pull/751 

**Reporter Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/cFE/issues/760
"cFS submodules refer to ""master"" branches","It seems the .gitmodules file still lists ""branch = master"" for cfe and osal. Should switch to ""main"". (Surprised ""master"" still works, given that branch is long gone! Guessing git defaults to ""HEAD"" if the branch specified no longer exists.)

https://github.com/nasa/cFS/blob/ed26455b48105baa451d1be683b5854ce49964e7/.gitmodules#L4",non-bug,https://github.com/nasa/cFS/issues/376
API versioning for OSAL,"The OSAL version ID e.g. ""4.1.0.0"" can also be used by application code to determine API features in case they change over time.

Although the existing OSAL API is intended to remain stable across versions, new calls can (and should) be added when appropriate.  However this presents a problem for backward compatibility as new code written against a new API cannot be compiled with an older version of OSAL.

This is a common problem and is generally solvable by creating/checking a version macro.  For example, glibc uses ""POSIX_C_SOURCE"" as an integer to define which version of POSIX it should behave like.

The OSAL should do the same, and create an ""OSAL_API_VERSION"" macro that application code can check to see what version of the API the current OSAL supports.  Application code can then adjust itself accordingly, either by compiling without the new feature or generate a compile error if that feature is required.
",non-bug,https://github.com/nasa/osal/issues/33
Doxygen of users guide fails to create pdf,"**Is your feature request related to a problem? Please describe.**
make usersguide
cd build/doc/users_guide/latex
make

observe error: 
```
! Missing $ inserted.
<inserted text>
                $
l.119 \end{DoxyParams}

?
! Missing $ inserted.
<inserted text>
                $
l.119 \end{DoxyParams}

?
! Missing } inserted.
<inserted text>
                }
l.119 \end{DoxyParams}

?
Missing character: There is no Ç in font cmr8!
Missing character: There is no Ç in font cmr8!
Missing character: There is no Ç in font cmr8!
! Extra }, or forgotten \endgroup.
\@vwid@setlist ...id@offsets }\unvbox \@vwid@box }

l.119 \end{DoxyParams}

?
Runaway argument?
\arg \c CFE_MISSION_ES_CRC_8 - (Not currently implemented) \arg \c CF\ETC.
! Paragraph ended before \verbatim@ was complete.
<to be read again>
                   \par
l.119 \end{DoxyParams}

?
)
Runaway argument?
! File ended while scanning use of \next.
<inserted text>
                \par
l.412 \input{cfe__es__api_8c}

?
)
*
(Please type a command or say `\end')
*
```

**Describe the solution you'd like**
Fix so pdf will build.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/535
Update cFE Application Developers Guide.md for message module,"**Is your feature request related to a problem? Please describe.**
Application developer's guide covers older concepts (like using uint8 and CFE_SB_TLM_HDR_SIZE for defining headers) and references the old APIs.

**Describe the solution you'd like**
Update based on msg module implementation

**Describe alternatives you've considered**
None.

**Additional context**
#726 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/800
"Same Event ID used in multiple locations (OVERLOADED), should be unique","**Is your feature request related to a problem? Please describe.**
As part of EID scrub, identified the following cases where an EventId was used in multiple locations (intent is for EIDs to be unique).

CFE_ES_SYSLOG2_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_syslog.c#L486-L487
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L1657-L1658

CFE_ES_ERLOG2_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L1775-L1776
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_erlog.c#L270-L271

CFE_ES_PERF_LOG_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_perf.c#L257-L258
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_perf.c#L333-L334

CFE_ES_FILEWRITE_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L2125-L2127
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_erlog.c#L264-L266

CFE_ES_CREATING_CDS_DUMP_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L2018-L2019
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L2029-L2030

#1117 documents overload CFE_SB_SND_RTG_EID and CFE_SB_SND_RTG_ERR1_EID

CFE_SB_BAD_CMD_CODE_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_task.c#L372-L374
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_task.c#L441-L443

CFE_SB_GETPIPENAME_ID_ERR_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L680-L683
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L702-L710

CFE_SB_GETPIPEIDBYNAME_NAME_ERR_EID - Note the message also isn't all that useful.
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L778-L785
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L800-L805

CFE_EVS_ERR_CRLOGFILE_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_log.c#L142-L150
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_log.c#L154-L160

CFE_EVS_ERR_EVTIDNOREGS_EID (might benefit from being common code):
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L742-L744
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1309-L1311
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1513-L1515

CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_ERR_NOAPPIDFOUND_EID - used in 10 locations, refactor!

CFE_EVS_ERR_CRDATFILE_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1564-L1572
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1581-L1583

CFE_EVS_ERR_INVALID_BITMASK_EID used in 6 different places for different bitmasks, refactor candidate.

CFE_TBL_LOAD_SUCCESS_INF_EID:
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L738-L740
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L891-L894

CFE_TBL_VALIDATION_INF_EID:
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L1198-L1200
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L1245-L1247

CFE_TBL_FILE_ACCESS_ERR_EID:
Note - gave up here.  Based on the number of these and no near-term solution it's likely explicitly recording every duplicate use of event IDs will be out of date by the time this is addressed.  May note as ""OVERLOADED"" in event documentation but that isn't all that reliable either.  Suggest scripted verification. 

**Describe the solution you'd like**
Create unique EIDs

**Describe alternatives you've considered**
None

**Additional context**
#508

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1588
Volume Table Requires User Modification,"The volume table definition is source file that is included with each PSP implementation.  The implementation source code files are not intended to be modified.  The volume table however, requires user modification to specify the volumes and their physical locations specific to a project/mission.

Adding a volume table macro is a simple solution to allow volume information to be specified at build time.",bug,https://github.com/nasa/PSP/issues/53
Coercion Alters Value - static analysis warnings,"**Is your feature request related to a problem? Please describe.**
A few locations where a type is incorrect (just listing an example here, see PR for all fixes):
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-errors.c#L99-L129

Note returns status which is int32, but return_code is uint32.  No real bugs identified yet, but cleaning up warnings makes it easier to spot real issues in the future.

**Describe the solution you'd like**
Fix types where needed.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/788
Replace calls to OS_fsBlocksFree,"**Is your feature request related to a problem? Please describe.**
This function is scheduled to be deprecated in nasa/osal#718.  

**Describe the solution you'd like**
It should be replaced with a call to `OS_FileSysStatVolume()` instead.

**Additional context**
Old function has insufficient range as noted in nasa/osal#573.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1049
Add documentation of DS_CmdRemoveMID requirements,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
ds/docs/ds_FunctionalRequirements.csv is missing documentation of requirements associated with [DS_CmdRemoveMID](https://github.com/nasa/DS/blob/db99b7f887f757e3050cd4833d1d3b4b11029b3c/fsw/src/ds_cmds.c#L1451-L1549).

**To Reproduce**
Open and view ds/docs/ds_FunctionalRequirements.csv

**Expected behavior**
 ds/docs/ds_FunctionalRequirements.csv contains requirements documented in JIRA for DS_CmdRemoveMID. The added requirements should be DS5018, DS5018.1, DS5018.2, and DS5018.3.

**Code snips**
N/A

**System observed on:**
Simply viewed through Github: https://github.com/nasa/DS/blob/db99b7f887f757e3050cd4833d1d3b4b11029b3c/docs/ds_FunctionalRequirements.csv

**Additional context**
N/A

**Reporter Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/DS/issues/67
OS_rename() doesn't first check if a file is in use,"The osfileapi.c **OS_rename()** doesn't check if a file is in use or not (in an entry in the global OS_FDTable) before it makes the system call to rename the file.

However, this is in contrast to **OS_cp(), OS_mv(), or OS_remove()** - which do check if the file is open (according to the OS_FDTable entry).  If those functions see that the file is open then they return and don't alter the filesystem.  So this behavior seems quite different for functions at affect a file.

The documentation of the OSAL API doesn't explicitly mention any behavior tied to a file that is in use by the OSAL for any of these functions (although the implementation is very clear for those other three functions.)

Discovered in #106, as part of #45 unit testing.",non-bug,https://github.com/nasa/osal/issues/116
Doesn't work by default with OSAL 4.2.1.0 official release,"I'm using the rc-2.2.2 branch with cfe 6.6 and OSAL 4.2.1.0. It doesn't build without the following changes:

1. fsw/src/cf_callbacks.c:1140 - st_size should be FileSize
2. fsw/src/cf_playback.c - all references to os_dirent_t's d_name entry should be changed to FileName.",non-bug,https://github.com/nasa/CF/issues/1
"ES missing branch in CFE_ES_RegisterCDSEx, overwrite success check doesn't make sense","**Is your feature request related to a problem? Please describe.**
I suspect there were code changes that made the check redundant/pointless since RegUpdateStatus only gets set if Status == CFE_SUCCESS before this point, so there's no way for it to not be success and for Status to also not be success.
```
     443         [ +  + ]:         14 :     if (RegUpdateStatus != CFE_SUCCESS)
     444                 :            :     {
     445                 :          2 :         CFE_ES_WriteToSysLog(""%s: Failed to update CDS Registry (Stat=0x%08X)\n"", __func__,
     446                 :            :                              (unsigned int)RegUpdateStatus);
     447                 :            : 
     448                 :            :         /*
     449                 :            :          * Return failure only if this was the primary error,
     450                 :            :          * do not overwrite a preexisting error.
     451                 :            :          */
     452         [ +  - ]:          2 :         if (Status == CFE_SUCCESS)
     453                 :            :         {
     454                 :          2 :             Status = RegUpdateStatus;
     455                 :            :         }
     456                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_cds.c#L443-L456

**Describe the solution you'd like**
Really collapses back down into just one status... no point for two.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1929
CI LAB fails when running more than one instance on the same host,"**Is your feature request related to a problem? Please describe.**
With a CFE project that uses more than one target (multi-cpu), it is common during development to run more than one CFE core process on the same physical machine (i.e. when simulating on native).  

But CI_LAB unconditionally binds to port 1234 so if more than one of those CFE core process is running CI_LAB then it fails to bind because the port is in use.

**Describe the solution you'd like**
CI_LAB should at least modify its port number based on the CPU number from the PSP.  This would allow all cfe-core instances from the same mission to avoid conflict, and not require a custom build of CI_LAB for each CPU.

**Describe alternatives you've considered**
Containers would also theoretically solve this too but it is complicated to set up and also makes debugging more complex which is generally the objective of doing a native build in the first place.

**Additional context**
Suggest using (base_port + cpu_number) as the port to which CI_LAB binds, so each CPU gets a different port.

Also suggest setting the base port to 1233 instead of the current value of 1234, so that CPU1 ends up getting the same number.  So this way the ""cmdUtil"" still works with the same default port and will go to CPU1.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/ci_lab/issues/37
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/MD/issues/22
MsgId abstraction - add API to translate between topic ID and MsgId,"**Is your feature request related to a problem? Please describe.**
Currently applications hard-code the MID value they use for both publication of telemetry and subscribing to commands and/or telemetry from other applications.  This is typically done via a header file such as `${appname}_msgids.h`.

The problem is in a multi-CPU environment this is a barrier (and often the only barrier) to having a single binary build be loaded onto multiple processors  

For core apps within CFE, this is already done by assigning a message ""topic ID"" to each core app, which is an offset from a base MID.  For instance, in `cfe_mission_cfg.h` we have:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/cmake/sample_defs/sample_mission_cfg.h#L380-L381

And ""topic"" definitions:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/cmake/sample_defs/sample_mission_cfg.h#L411-L428

And in `cpu1_msgids.h` this organizes it into message IDs by topic:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/cmake/sample_defs/cpu1_msgids.h#L47-L64

Offsetting a base MID by a topic value is a completely logical way to solve the issue of running the same code on multiple CPUs and assigning different MID values, but `CFE_SB_MsgId_t` values are supposed to be abstract.  There should be no assumption that they can be added together like this.  

Additionally, the same translation should be implemented as a runtime API, rather than forcing the value to be computed only at compile time.

**Describe the solution you'd like**
Add a new API to software bus that allows determining a MID value at runtime, given a topic ID along with an instance number.

For instance:
```
CFE_SB_MsgId_Compose(uint16 TopicId, uint16 InstanceNum, CFE_SB_MsgId_t *MsgId);
CFE_SB_MsgId_Decompose(CFE_SB_MsgId_t MsgId, uint16 *TopicId, uint16 *InstanceNum);
```

This can be further simplified for ""Local"" requests by getting the instance number from the PSP, for example, something like:
```
CFE_SB_MsgId_t CFE_SB_MsgId_From_TopicId(uint16 TopicId);
```

Would return the MID of the topic on the current/same CPU.

Topic IDs can be assigned exactly as they are today (at least for now), because they can be assigned at mission scope and are agnostic to CPU/instance number.  

Furthermore, the translation between topic ID and and MsgId need not be limited to a simple addition/bitmask - the conversion can be a implemented in a user-supplied library and customized based on however a mission chooses to allocate its MID values for routing.

Subscription requests would then be simplified.  For example in ES, the HK subscription in:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/es/cfe_es_task.c#L292-L296

Would become:

```
Status = CFE_SB_SubscribeEx(CFE_SB_MsgId_From_TopicId(CFE_MISSION_ES_SEND_HK_MSG), CFE_ES_TaskData.CmdPipe,
                                CFE_SB_Default_Qos, CFE_ES_TaskData.LimitHK);
```

This would in turn make all the `msgids.h` header files obsolete and unnecessary... because all CPUs can use the same topic IDs and translate at runtime.

**Describe alternatives you've considered**
Message IDs can also be assigned in a separate configuration table and loaded via TBL services, which is supported today if the application is written that way, but most are not.

For apps that don't already use TBL services for config, it is a fairly substantial change to add it.  It is significantly easier to change the API used to translate the MID as proposed here to make the app CPU/instance agnostic, rather than introduce a configuration table for this purpose.

**Additional context**
Obviously not for CFE 6.8... but recommended to discuss for 6.9/7.0 or whenever.

We might want to consider changing the name from `CFE_MISSION_EVS_CMD_MSG` to `CFE_MISSION_TOPICID_EVS_CMD`  (or something) to make it clearer.  But fundamentally its OK, and it still would apply even if the topics are assigned by a tool/database of some type in the future.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/732
cFE Application Developers Guide.md showing use of deprecated event message constants,"**Describe the bug**
Developer's guide is still showing the old event message type names.

**To Reproduce**
N/A

**Expected behavior**
All uses of event message types should be updated to the currently used names in the guide.

**Code snips**
Main listing of Event Type values:
[Line 2214](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2214)

Examples of CFE_EVS_ERROR use within the guide:
[Line 1246](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L1246)
[Line 1282](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L1282)

**System observed on:**
N/A

**Reporter Info**
Alan Gibson  NASA/GSFC 587
",non-bug,https://github.com/nasa/cFE/issues/2003
mq_open has invalid data in struct mq_attr,"OS_QueueCreate uses mq_open, and it passes a partially-initialized struct mq_attr as the last parameter. This structure should be initialized to 0 as two fields in it contain junk. ",bug,https://github.com/nasa/osal/issues/205
"Have ""make test"" provide full stats on the pass/fail ratio of the asserts ","**Is your feature request related to a problem? Please describe.**
When running ```make test``` it only gives information about which testrunner had at least 1 failing assert.  This is useful, but very limited.

**Describe the solution you'd like**
Each test file run by ```make test``` provide a ""fail asserts / total asserts"" in the output.

**Describe alternatives you've considered**
Running each testrunner individually to get these results.
Writing my own bash script.

**Additional context**
Could be added as an additional runner ```make test/stats```?

**Requester Info**
Alan Gibson NASA GSFC/587
",non-bug,https://github.com/nasa/cFE/issues/855
ES Creates Redundant Sys Log Entries When Creating ER Log Entries (GSFC DCR 22768),"For most of the reset cases, ES will create an entry in the Exception and Reset Log ( ER Log ) and it will also create a Syslog entry. Both the ER Log and Syslog are stored in the preserved RAM on a platform, so it is probably not necessary to create the redundant Syslog entries.
 
Determine the impact to unit and build tests, and remove the duplicate Syslog entires for resets.",non-bug,https://github.com/nasa/cFE/issues/133
expose CFE_SB_IsValidMsgId(),"CFE apps would benefit from a publicly-available IsValidMsgId() function (or perhaps an expanded ""is valid message"" function, that would check all header fields?)

For example, SCH has a function to validate its message table entries and has its own logic for determining whether a message ID is valid or not.

This would particularly facilitate CCSDS_VER_2 transitions.",non-bug,https://github.com/nasa/cFE/issues/263
Tutorial on using elf2cfetbl,"**Is your feature request related to a problem? Please describe.**
No

**Describe the solution you'd like**
A guide on how to use elf2cfetbl to create an table file

**Describe alternatives you've considered**
none

**Additional context**
none

**Requester Info**
Anh Van, Nasa Goddard
",non-bug,https://github.com/nasa/elf2cfetbl/issues/14
Use generated stubs,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
HS unit testing currently uses a set of stubs for its internal units that are not generated by the tool

**Describe the solution you'd like**
Use the generated stubs directly whenever possible, as this makes future maintenance easier - when an API changes, just re-run the generator tool to update the stubs.

**Additional context**
This requires some additional separation of items - global variable stubs should be in a separate compilation unit, as the tool does not generate these.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/HS/issues/82
Build broken for VxWorks on RHEL 7,"**Describe the bug**
The newest RHEL 7 comes by default with CMake version 2.8.12.2 in the official OS repos.
However the ""VERSION_GREATER_EQUAL"" comparison was added in 3.7.  Thus the build became broken on this platform after merging #610.

**To Reproduce**
Attempt to build for VxWorks using RHEL 7.x as the host platform.  Make file generation fails immediately with:

```
CMake Error at /home/jphickey/cfecfs/github/osal/src/os/vxworks/CMakeLists.txt:48 (if):
  if given arguments:

    ""CMAKE_SYSTEM_VERSION"" ""VERSION_GREATER_EQUAL"" ""7.0""

  Unknown arguments specified
```

**Expected behavior**
Build should succeed.

**Code snips**
https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/src/os/vxworks/CMakeLists.txt#L48

**System observed on:**
Red Hat Enterprise Linux Workstation release 7.9 (Maipo)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/697
Race condition: PSP timer callbacks are set up and started before CFE_TIME is running,"This was the point brought up by Chris Monaco during today's CCB meeting while discussing the CFE core app startup dependencies

The reference tickets in cfe: [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/40] and [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/42]

The problem is that the PSP actually starts the timer before calling CFE_ES_Main().  Depending on how long it takes to reach the initialization for CFE_TIME, the timer may fire and call the 1Hz function before the semaphore is created or the 1Hz task is started.

**NOTE**:
This issue actually becomes moot when the latest {{{posix-ng}}} or {{{rtems-ng}}} OSAL is used.  With this version a mutex ID of 0 is never valid, and attempting to ""give"" that mutex will fail in a benign manner and do nothing.  Although it is not an ideal fix, there is no chance of problems occurring due to this when using these OSALs. 

**ALSO NOTE**:
Delaying the start of the 1Hz tick may not be an option because this means scheduling will not work until CFE_ES_Main() returns, which may be considerably delayed if apps have long startup sequences, or if they actually depend on the 1Hz signal in order to start properly.

",bug,https://github.com/nasa/PSP/issues/27
VxWorks OS_CountSemCreate unit test fails,"**Describe the bug**
The OS_CountSemCreate unit test, ""#4 Initial-count-too-high"", fails.  This is because the vxworks OSAL, as written, does not check the initial count.  Rather, it passes it directly to the OS call.

**Expected behavior**
It should pass.

**System observed on:**
 - AiTech SP0-S 
 - OS: VxWorks 6.9
 - OSAL 5.0.3-bv

**Reporter Info**
Mathew Benson
Windhover Labs
",bug,https://github.com/nasa/osal/issues/542
Remove local/duplicate file name length check from `CFE_TBL_LoadFromFile`,"**Is your feature request related to a problem? Please describe.**
Filename length is checked by OS_OpenCreate, doesn't need a local check:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L811-L819

**Describe the solution you'd like**
Use `OS_OpenCreate` return code to report the appropriate error

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1516
CFE_ES_CheckCounterIdSlotUsed doesn't handle error case (NULL dereference) - static analysis warning,"**Is your feature request related to a problem? Please describe.**
CFE_ES_CheckCounterIdSlotUsed -> CFE_ES_LocateCounterRecordByID can return NULL, and CFE_ES_CounterRecordIsUsed dereferences

https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_resource.c#L366-L369
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_resource.c#L266-L281
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_resource.h#L383-L386

**Describe the solution you'd like**
Handle null

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1194
"`CFE_SB_RemovePipeCallback_t` typedef implies a callback, but it's callback arguments","**Is your feature request related to a problem? Please describe.**
Name used in typedef misleading:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L73-L78

**Describe the solution you'd like**
`CFE_SB_RemovePipeCallbackArgs_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1456
Implicit padding being added to multiple MM commands,"**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/MD/blob/main/CONTRIBUTING.md).
* [x ] I reviewed the [README file](https://github.com/nasa/MD/blob/main/README.md) to see if the feature is in the major future work.
* [x ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Some MM commands assume a 64 bit aligned header while others are offset by 32 bits.  An example would be the Peek vs Poke commands.

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/MM/issues/33
SB - expose an API to increment/decrement the UseCount of the buffer,"Applications may want to retain the buffer provided by RcvMsg for longer than when the app makes the next call to the function. This should only require incrementing/decrementing the UseCount of the CFE_SB_BufferD_t structure that precedes the buffer, and there is currently a private function ""CFE_SB_DecrBufUseCnt()"" for decrementing this counter.

Can CFE_SB_DecrBufUseCnt() be made public, and a companion function of IncrBufUseCnt be added as well?",non-bug,https://github.com/nasa/cFE/issues/216
Consider moving cpu usage code to OSAL,"Currently, code to request cpu usage is included in the HS application.  However, this requires HS to be modified to run on different operating systems.  Because the code to request cpu usage is OS-specific, consider moving this functionality out of HS to the OSAL. ",non-bug,https://github.com/nasa/osal/issues/228
Variables declared mid-function,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A few cases of variables declared mid-function left here.
Copy of https://github.com/nasa/CF/issues/109

**Expected behavior**
All variables should be declared at the top of the function.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/osal/issues/1330
Fix math in OS_DoSelect,"**Is your feature request related to a problem? Please describe.**
 imagine simplified example with decimal value: now = 0.8, and end == 1.2. that means we should sleep for 0.4 seconds. using the above logic, we get:

tv.tv_sec = 1
tv.tv_usec = -6

so, tv.tv_usec < 0:

tv.tv_usec now becomes 4 (correct!)
tv.tv_sec now becomes 2 (huh?)

so now we wait 2.4 seconds instead of 0.4

Maybe we need a --tv.tv_sec?

**Describe the solution you'd like**
Confirm/fix if needed. Remove bug if not real.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",bug,https://github.com/nasa/osal/issues/857
Create directory structure for pushing CTF scripts,"**Is your feature request related to a problem? Please describe.**
Need to create a location to push CTF scripts and plugins to.


**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFS/issues/90
Make the sgp4 example more noisy,"Although this seems like a strange issue, it's not very obvious to a user whether or not the example sgp4 app works. It would be a nice addition to sgp4 to add some sort of periodic event message to show that the app has initialized and the main loop is executing.

Edit: The simple app could benefit from this as well.",non-bug,https://github.com/nasa/ECI/issues/19
CFE TIME should initialize the STCF from PSP,"**Is your feature request related to a problem? Please describe.**
The CFE TIME subsystem initializes its state using fixed values from `CFE_MISSION_TIME_DEF_STCF_SECS` and `CFE_MISSION_TIME_DEF_MET_SECS`. As a result, all timestamps initially come out as `1980-012-14:03:20` and increment from there.

**Describe the solution you'd like**
It should get these initial values from the PSP instead.  This way on platforms that actually have an RTC, it can get the correct value.  This would be a big improvement particularly when debugging on a PC/VM because timestamps could be the actual time, not 1980.

**Describe alternatives you've considered**
Leave as is.

**Additional context**
Not a high priority, but this is often confusing, particularly to new users and/or test environments that don't have a CFE time server sending time at tone messages.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/908
"FIleSize in os_fstat_t is uint32, should be 64bit friendly","FileSize in os_fstat_t is uint32, but should be off_t like in POSIX. On 64-bit systems. it's a 64-bit value and this causes conversion issues.",non-bug,https://github.com/nasa/osal/issues/572
documentation -- ObjectID architecture description,"**Is your feature request related to a problem? Please describe.**
Would be good to put some words/pictures into the Doxygen documentation (or .md?) describing the way object ID's are managed in OSAL.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/488
Add generate_config_includefile pattern for perfids and msgids,"**Is your feature request related to a problem? Please describe.**
Currently just includes the local mission_inc/platform_inc directories.  Really these are examples/defaults, and should be easily overridden from the target defs.

**Describe the solution you'd like**
Use generate_config_includefile (example: https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/msg/mission_build.cmake#L19-L22)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/140
Scrub return code names for consistency,"**Is your feature request related to a problem? Please describe.**
Consistent naming pattern not followed for return codes, example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L826
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L860

**Describe the solution you'd like**
Use a consistent pattern CFE_SERVICE_SEVERITY_DESCRIPTION

**Describe alternatives you've considered**
Could create via macro, but obscures (see #1313)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1315
Why does UtPrintx have an infinite loop in it?,"**Describe the bug**
Any use of UtPrintx results in an infinite printing of the given Memory and Length.

**To Reproduce**
Steps to reproduce the behavior:
1. Put UtPrintx in a unit test, give it an address and size (from 0 to max uint32)
2. Run tests
3. Enter loop

**Expected behavior**
1. Print the number of bytes given as _Length_ starting at the given address _Memory_ (with newline at end)
2. Return

**Code snips**
https://github.com/nasa/osal/blob/b37da18bd5efed6d86344e4cafaa42c833b015fb/ut_assert/src/uttools.c#L188-L207

**System observed on:**
 - RHEL 7.8

**Reporter Info**
Alan Gibson
NASA/GSFC 587
",bug,https://github.com/nasa/osal/issues/964
Default configuration does not permit max-size SB message buffer to be allocated,"**Describe the bug**
All messages need to be wrapped in a software bus message descriptor while in transit, and the software bus should be capable of accepting + passing messages up to `CFE_MISSION_SB_MAX_SB_MSG_SIZE` (configurable).

However, the default pool configuration does not allow this.  Calling `CFE_SB_AllocateMessageBuffer(CFE_MISSION_SB_MAX_SB_MSG_SIZE)` retuns NULL due to this.

**To Reproduce**
Build with default configuration, and call  `CFE_SB_AllocateMessageBuffer(CFE_MISSION_SB_MAX_SB_MSG_SIZE)` - returns NULL.

**Expected behavior**
Should return non-NULL, as `CFE_MISSION_SB_MAX_SB_MSG_SIZE` is the upper limit that should be acceptable.

**System observed on:**
Ubuntu

**Additional context**
This is because in the default SB pool configuration, there is not enough extra space in the maximum size pool block.  It is defined here:

https://github.com/nasa/cFE/blob/eb9c52319fb1f31f72159551735ad5f1365e5a79/cmake/sample_defs/cpu1_platform_cfg.h#L305

The hardcoded ""+ 40"" bytes is not quite enough for the descriptor on a 64-bit CPU (it might work on 32-bit, did not test)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1807
Fix travis-CI config warnings,"**Is your feature request related to a problem? Please describe.**
Build config validation (from travis-CI) -
root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/commit/6cf5a57f5995710345b2a5411d11af2b2d7f80ee

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/389
MD - Table Configuration is Not Consistent with Other Applications,"MD currently gets the dwell tables from the CDS or zeros them out. The MD table design is not consistent with other cFS applications:
- The MD task should allow the option to save or not save tables in the CDS (and therefore behave like the other applications). 
- The MD task should allow the option to have default tables in EEPROM (and therefore behave like the other applications). 
- The default address to be used, should a table not be found, should be user defined. 0 may not be a valid address. 
- The MD task doesn't use the CFE_TBL_Manage feature. 

Imported from GSFCCFS-764",bug,https://github.com/nasa/MD/issues/2
Move perflog prototypes from `cfe_es_log.h` to `cfe_es_perf.h`,"**Is your feature request related to a problem? Please describe.**
Misplaced prototypes:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_log.h#L322-L326

**Describe the solution you'd like**
Move to `cfe_es_perf.h`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1350
Incorrect leap seconds in docs,"Under the cFE User's Guide (Doxygen): Core Flight Executive Documentation » cFE Time Services Overview

file: cfe/docs/cFE UsersGuide/Doxygen/cfetimeugcomponents.html

...this sentence is now quite out of date:

""The initial count of leap seconds (10) was established in January of 1972, the first leap second was added to the initial count in June of 1972, and the current count of leap seconds is 33.""

We're up to 36 (https://en.wikipedia.org/wiki/Leap_second  - June 2016).  Consider revising the verbiage so we don't have to keep updating it.",bug,https://github.com/nasa/cFE/issues/187
CFE needs to provide CMake-based config file for OSAL,"**Is your feature request related to a problem? Please describe.**
Currently the CFE cmake script generates an `osconfig.h` file for OSAL to compile with.

**Describe the solution you'd like**
After nasa/osal#285 is fixed (PR nasa/osal#427) the CFE will need to  pass OSAL a configuration file in CMake syntax, which then OSAL uses to generate its own `osconfig.h`.

**Additional context**
Needed for compatibility

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/652
Separate secondary header access API's from SB,"**Is your feature request related to a problem? Please describe.**
Need to support #554 
Software bus logic doesn't care about message format, just use message access APIs like all the other services.

**Describe the solution you'd like**
MSG module and header file for all the message getter/setters.  Deprecation of the SB API's.  Code separation to support source selection/mission configuration.

**Describe alternatives you've considered**
None

**Additional context**
#554

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/711
Secondary Header: extracting wrong bits for command on 32-bit ARM platform,"The tools/..../cmdUtil has a test to-enable-tlm.sh command to test commands send to a running cFS session   #./core-cpu1.
The command code extracted through the function, CFE_SB_GetCmdCode()  ... eventually calls the macro, CCSDS_RD_FC(...).  This macro masks and shifts bits to extract the command code; however, the cfe/fsw/cfe-core/src/inc/ccsds.h need the following minor modification.

original

#define CCSDS_RD_FC(shdr)           CCSDS_RD_BITS((shdr).Command, 0x7F00, 8)

my change

#define CCSDS_RD_FC(shdr)           CCSDS_RD_BITS((shdr).Command, 0x007F, 0)

Once this code change is made, no problems.

If this is a bug then the masking and bit shifting for all the secondary header should be changed

else please let me know what I might be doing wrong. 


Platform

Beaglebone :  Arm 7 32-bit
Linux beaglebone 4.19.94-ti-r42 #1buster SMP PREEMPT Tue Mar 31 19:38:29 UTC 2020 armv7l GNU/Linux",non-bug,https://github.com/nasa/cFE/issues/753
Inline documentation on OSAL routines is incorrect/outdated in many places,"**Describe the bug**
The comments in the function headers of many of the OSAL calls have become outdated and incorrect.

**To Reproduce**
N/A.  This reflects source code comments only.  Most evident on the ""implementation"" files which copied the comment block from the external function call.

**Expected behavior**
Comment blocks should better reflect reality of what the code does.  The ""real"" comment block that describes the function should reside with the function prototype.  The definition should also have a comment block but primarily for visual differentiation in the source code.  This block should not re-describe the function, as this results in multiple copies of the same description and thus could become stale/divergent again.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/17
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/sample_app/issues/118
Output format string as debug message in OS_printf stub,"**Is your feature request related to a problem? Please describe.**
OS_printf stub is silent, more helpful when debugging tests to see at minimum the format string

**Describe the solution you'd like**
Output the format string as a debug messae similar to CFE_EVS_SendEvent

**Describe alternatives you've considered**
Could put in a hook, but this is general and useful enough to add

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/746
Add UtAssert bit field check macros,"**Is your feature request related to a problem? Please describe.**
Bit fields are a common method of storing multiple boolean values into a single data field.  UtAssert should provide macros that aid in testing code that uses this type of storage.

**Describe the solution you'd like**
Add some new UtAssert macros to check bit fields.  These macros should include in the log the raw value of the bit field being checked (as a hex number) as well as the specific mask bits being checked for.  Two forms should be included, one which passes if the bit(s) are set, and one which passes if the bit(s) are not set.

This should be able to use the same underlying Generic assert helper function, just with a different macro wrapper around it that checks a bit mask.

**Describe alternatives you've considered**
May use the existing UtAssert_UINT32_EQ/NEQ, in either of these forms:

1. UtAssert_INT32_EQ(BitField, BitField | CHECK_BITS) 
2. UtAssert_INT32_EQ(BitField & CHECK_BITS, CHECK_BITS) 

Downsides: the resulting log is not quite as concise as it should be:
 - Its not clear that this is a bitmask check - as it is logged as a normal value check.
 - Only either the raw value (form 1) or the bitmask value (form 2) will be logged.  It will not log both pieces of info.
 - Values will be logged in decimal/base-10 by default which is not easy to read when examining bit flags - base-16 is preferable.

All of the above should be solvable by simply making a different wrapper macro around the existing `UtAssert_GenericUnsignedCompare` function.

**Additional context**
See nasa/cfe#1860 for a use case

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1135
vxworks OS_GetPhysDeviceName() doesn't handle null pointer,"The vxworks OS_GetPhysDeviceName() in osfilesys.c doesn't check for a null pointer in its arguments.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].",bug,https://github.com/nasa/osal/issues/114
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/MM/issues/29
In MM_DumpMemToFile command could use CFE_FS_InitHeader,"

Imported from GSFCCFS-1556",non-bug,https://github.com/nasa/MM/issues/4
ut_sb_stubs.c needs a stub for CFE_SB_ZeroCopyGetPtr ,"**Is your feature request related to a problem? Please describe.**
CFE_SB_ZeroCopyGetPtr does not have a stub in ut_sb_stubs.c causing undefined reference error when building unit tests for an app that uses this call.

**Describe the solution you'd like**
Add the stub for CFE_SB_ZeroCopyGetPtr with full context tracking.

**Describe alternatives you've considered**
Create my own locally in the app's unit test, but this does not help everyone.

**Requester Info**
Alan Gibson, NASA
",non-bug,https://github.com/nasa/cFE/issues/702
Avoid multiple returns and possible uninitialized variable warning in CFE_TIME_RegisterSynchCallback,"**Is your feature request related to a problem? Please describe.**
Multiple returns and an (invalid) possible uninitialized variable warning shows up from static analysis:
https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/time/cfe_time_api.c#L758-L786

**Describe the solution you'd like**
Refactor for one return and avoid warning.

**Describe alternatives you've considered**
Leave as is (works)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1074
Consider limiting size of read/write/seek to INT32_MAX,"**Is your feature request related to a problem? Please describe.**
The OSAL API returns results as `int32`, and this includes the size of data read/written from operations like OS_read and OS_write.  However it is possible to read/write a larger buffer than what can be expressed as `int32`.  If this overflow happens then the result is likely to become negative and be interpreted as an error.

**Describe the solution you'd like**
`OS_read` and `OS_write` should probably cap the amount they will transfer in a single call to be `INT32_MAX`.  This should in turn limit the size of the result that would need to be returned to the caller.

OS_lseek() returns the file offset, so this probably doesn't work with files bigger than 2GB.

**Describe alternatives you've considered**
Use a larger data type e.g. `int64` as return, but this is potentially slow on 32 bit CPUs where 64 bit values may need to be emulated by the C library.

**Additional context**
If `size_t`  (buffer size parameter) is 64 bits and the return value is 31 bits (usable) then there is a large set of potential values which are not representable.

However - this problem has existed even when the input size was `uint32` rather than `size_t` ... because anything bigger than `INT32_MAX` is a problem - so this isn't new, its just potentially more of a concern with large files./file systems and 64 bit platforms.

Read/Write actions should always be allowed (per API) to transfer fewer bytes than the request was for - app should retry with the remainder.  So capping at `INT32_MAX` should not be a problem - no app should expect an extremely large transfer like that to happen in one go.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/657
Functional Timer Test Hard Codes Configuration Value,"The functional timer test (/src/tests/timer-test/timer-test.c) hard codes the number of timers to 4, which may be higher than the OS_MAX_TIMERS configuration set in osconfig.h.

It is recommended to update the test to use the OS_MAX_TIMERS configuration macro or add protection with an #if guard.",non-bug,https://github.com/nasa/osal/issues/196
Reference the generic OSAL BSPs,"**Is your feature request related to a problem? Please describe.**
Recent OSAL changes make the BSP layer more generic for VxWorks and Linux.  In nasa/osal#449 this changes the name from mcp750-vxworks to generic-vxworks, and from pc-linux to generic-linux, respectively.

**Describe the solution you'd like**
Change the PSP references to match the OSAL BSP name.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/162
CFE_MISSION_ES_MAX_SHELL_CMD and CFE_MISSION_ES_MAX_SHELL_PKT no longer used,"**Is your feature request related to a problem? Please describe.**
CFE_MISSION_ES_MAX_SHELL_CMD and CFE_MISSION_ES_MAX_SHELL_PKT are no longer used anywhere.

**Describe the solution you'd like**
Since they are no longer used they should be removed. 

**Requester Info**
Alex Campbell GSFC
",non-bug,https://github.com/nasa/cFE/issues/1165
MM_FillMem doesn't call MM_SegmentBreak like read from or write to file,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/MD/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/MD/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
MM_FillMem writes memory in a tight loop here with no MM_SegmentBreak:
https://github.com/nasa/MM/blob/90cbd8df5d557891ef3a7ea3a457b7b52ad79a1b/fsw/src/mm_load.c#L825-L839

Both MM_LoadMemFromFile and MM_DumpMemToFile do have a MM_SegmentBreak (example):
https://github.com/nasa/MM/blob/90cbd8df5d557891ef3a7ea3a457b7b52ad79a1b/fsw/src/mm_load.c#L576-L604

MM_FillMem is likely quicker, but should still support a break

**Describe the solution you'd like**
Add MM_SegmentBreak

**Describe alternatives you've considered**
Could leave as is, but large fill command processing could hog the CPU

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/MM/issues/21
Scrub for appropriate/consistent use of sizeof vs OS_MAX_API_NAME,"**Is your feature request related to a problem? Please describe.**
Inconsistent use of sizeof vs hard coded size (example):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L674

Also local sizing (example where it could just be sizeof(CmdPtr->AppName)):
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1208

**Describe the solution you'd like**
Use sizeof when char arrays sizes are known

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1339
Update for suggested alignment enforcement pattern (nasa/cFE#1009),"**Is your feature request related to a problem? Please describe.**
See nasa/cFE#1009, inconsistent pattern

**Describe the solution you'd like**
Match suggestion in nasa/cFE#1009, use the ""raw"" message cmd/tlm types in definition.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFE#1009

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/66
Standardize/clean function description comments,"**Is your feature request related to a problem? Please describe.**
They need a general scrub, out of date references, etc.  Example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L242-L248

Should clearly indicate implementations that are API's vs internal/helper functions

**Describe the solution you'd like**
Automated cleanup.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1336
Consolidate CDS and generic/ram mempool code into single implementation,"Currently there are two memory pool implementations in ES:

* cfe_es_cds_mempool.c
* cfe_esmempool.c

These two are very similar except that the CDS uses offsets rather than direct pointers, and it calls into the PSP to perform actual read/write functions.  It would not be very hard to consolidate these into a single implementation.

Each implementation consumes about 4-5kB of code/data space so this consolidation would make ES a little smaller in addition to making it cleaner.
",non-bug,https://github.com/nasa/cFE/issues/56
CFE_PSP_Module_FindByName does not find base modules,"**Describe the bug**
PSP modules can be enabled in two ways, either by adding to the `${cpuname}_PSP_MODULELIST` in targets.cmake (for optional/platform-specific hardware access routines) or a set of ""standard"" modules listed in `psp_module_list.cmake` file under the PSP.

Problem is that `CFE_PSP_Module_FindByName()` only looks at the user-specified list (from targets.cmake) and not the list of standard modules.

This is needed for HS because the `linux_sysmon` monitor (for cpu utilization) is now listed as a standard module for pc-linux PSP, but this inadvertently made it un-findable.

**To Reproduce**
Run the current build of framework + HS app (which relies on being able to locate the `linux_sysmon` module).  HS does not find a module and disables CPU usage reporting.

**Expected behavior**
HS should find the module and enable usage reporting

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/PSP/issues/393
Add path to additional CMake modules for PSP,"When building and linking CFE executables and shared libraries, the flags and procedures may not always be exactly the same as the standard defaults.  Furthermore, the upstream CMake does not have a platform file for all CFE/OSAL targets (e.g. RTEMS) so the RTEMS PSP must supply an appropriate file to use here.

The CMAKE_MODULE_PATH should be extended with an additional path that is under the PSP, so module file(s) can be found here.
",non-bug,https://github.com/nasa/cFE/issues/328
use appid with perfid for apps,"**Is your feature request related to a problem? Please describe.**
Currently apps define their perfid when using the performance logging framework, but there's no mechanism currently to ensure that the perfid is unique to that application and could result in confused perf logs.

**Describe the solution you'd like**
One option would be to use the appid generated when the application is registered (but will need to be reported somehow so that a performance analysis tool can crosswalk from runtime-generated perfid's to the applications.)

**Describe alternatives you've considered**
Three alternatives: 1) a separate perfid registry/table in memory, 2) some sort of compile-time tool to generate ID's, 3) a textual identifier (that can be ""namespaced"".)

**Additional context**
Discussed at CCB 2019-09-04

**Requester Info**
Chris Knight, Christopher.D.Knight@nasa.gov, NASA Ames Research Center
",non-bug,https://github.com/nasa/cFS/issues/8
OS_API_Init() failure due to 0 stack size,"**Describe the bug**
OS_API_Init() fails on generic-linux due to a stack size of 0 being used for the console task.

**To Reproduce**
1. Build the provided example using the 'generic-linux' BSP.
2. Execute the provided example.

**Expected behavior**
The three test tasks should execute.

**Actual behavior**
OS_API_Init() fails with the following error message (debug messages enabled):

`OS_Posix_InternalTaskCreate_Impl():473:pthread_attr_setstacksize error in OS_TaskCreate: Invalid argument
`

**Code snips**
The error occurs on the following call to pthread stack size in OS_Posix_InternalTaskCreate_Impl():

`return_code = pthread_attr_setstacksize(&custom_attr, stacksz);
`

The reason it fails is because the stacksz is set to zero in OS_ConsoleCreate_Impl():

`return_code = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,
                    OS_ConsoleTask_Entry, local_arg.opaque_arg);
`

**System observed on:**
 - Hardware: Dell Precision 7540 Laptop
 - OS: WSL2 Ubuntu 18.04.4 LTS
 - Versions: OSAL master 

**Additional context**
This issue is resolved by using a stack size of PTHREAD_STACK_MIN instead of 0:

`return_code = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, PTHREAD_STACK_MIN,
                    OS_ConsoleTask_Entry, local_arg.opaque_arg);
`

**Reporter Info**
Adam St. Amand
",bug,https://github.com/nasa/osal/issues/525
Further break down message module to facilitate customization,"**Is your feature request related to a problem? Please describe.**
Currently customization of the monolithic message module can either be done by ""cherry-picking"" code from the core and customizing/adding/replacing whatever needs to be customized or ""clone-and-own"" the entire module.  ""Cherry-pick"" is fragile since it depends on the internal file layout and structure of the message module (implementation), ""clone-and-own"" is a lot of duplicated code and the possibility of divergence from core development.

It's a similar concept as for a custom OSAL depending on shared or portable elements in the repo, in that cherry-picking is dependent on implementation, not just APIs and the alternative is clone-and-own.

**Describe the solution you'd like**
Break the message module down into the different parts of the header - CCSDS Primary, CCSDS Extended, CFS Secondary such that they can be included by projects as building blocks, and the ""cherry-pick"" vs ""clone-and-own"" is then in the context of smaller modules.  Basically if a project wants to customize just the time format, they could either clone-and-own the CFS Secondary implementation or cherry pick.  The primary and extended headers could be used as is.

**Describe alternatives you've considered**
Approach is a project trade, this change makes that decision a smaller impact (less code either way).  The code was separated parts of the header by file already as part of #726 to make cherry-picking easier (and secondary is separated by field in the header), but also makes breaking into separate modules easier.

**Additional context**
#726, #801 
https://github.com/nasa/cFE/pull/726#discussion_r472625322

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/821
Move `CFE_TIME_Local1HzISR` internal (no longer an API),"**Is your feature request related to a problem? Please describe.**
Since it's set up and registered by the TIME service via `CFE_TIME_Local1HzCallback`, it no longer needs to be exposed.

**Describe the solution you'd like**
Move prototype internal

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1559
shush cppcheck,"there are some specific places in the code
where we want cppcheck to not produce warnings,
without generalizing in any way to other code.

This involves inserting comments like
{{{
          /* cppcheck-suppress unsignedPositive */
}}}
",bug,https://github.com/nasa/cFE/issues/180
Revert `.dat` default file extension addition,"**Is your feature request related to a problem? Please describe.**
Added default extension is causing issues w/ 20 character limit and confusion among users/testers

**Describe the solution you'd like**
For generic files (log/data/etc) where there isn't a required extension just leave the file name as requested by the user.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1662
timer-test.c has a difficult time obtaining a count for timer4 due to the start delay.,"I increased the loop count of the OS_TaskDelays, which can be interrupted by signals. On vxWorks this allows the test to pass.

[changeset:b8e8bb] ready for CCB review",bug,https://github.com/nasa/osal/issues/173
LC: support 64-bit types,"LC currently does not support 64-bit integers or floats (doubles).

Imported from GSFCCFS-768",non-bug,https://github.com/nasa/LC/issues/5
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/elf2cfetbl/issues/68
ECI not updating outgoing packet headers properly,"In past usage, the external code allocated space for the CCSDS header in the output messages, but expected the ECI to manage the header (which is generally out-of-scope for the external code). This was implemented by having the ECI initialize the header at startup (using CFE_SB_InitMsg) and then filling the MessageID (via CFE_SB_SetMsgId), Packet Length (via CFE_SB_SetTotalMsgLength), and Timestamp (via CFE_SB_TimeStampMsg) after each step function.

This implementation works so long as the external code does not modify the header. It was discovered that if the external code overwrote the secondary header flag to indicate no secondary header, CFE_SB_TimeStampMsg, which checks that flag, did not update the time as intended.

To remedy this situation and better define the intent of the external code, I intend to update the ECI such that it overwrite the entire header (using CFE_SB_InitMsg) after the execution of the step function and then update the timestamp (using CFE_SB_TimeStampMsg), which ensures a correct header regardless of what the step function may have done during execution. The external code may disable this functionality by defining `ECI_MSG_HEADER_NO_OVERWRITE`, in which case the external code takes full responsibility for managing the header (including setting the messageID, packet length, and timestamps or checksum). 

This change preserves the current output message definition, but does not allow packet-by-packet control of this behavior. That could be investigated if that's a desired feature.",bug,https://github.com/nasa/ECI/issues/1
Type mismatch between Cleanup stub and implementation,"**Describe the bug**
The stub of these functions is declared as taking a `uint32 AppId` parameter:

- [x] CFE_EVS_CleanUpApp
- [x] CFE_SB_CleanUpApp
- [x] CFE_TBL_CleanUpApp
- [x] CFE_TIME_CleanUpApp

**Expected behavior**
These need to be changed to `CFE_ES_ResourceID_t` to match FSW

**System observed on:**
Ubuntu 20.04

**Additional context**
Was not flagged as an error due to `cfe_private.h` not being included.  After PR #1012 got merged, the stub mismatch is flagged.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1023
Username change,I changed my username from (at)pavll to @paulober. The problem is that someone else claimed my old name an now he's mentioned every time (at)pavll was used(mostly PRs). Do I have to state this change somewhere for my nasa opensource contribs(because GitHub doesn't redirect @ mentions to new usernames)?,non-bug,https://github.com/nasa/cFE/issues/2021
Cast-align warning in OS_TaskGetId_Impl for vxworks,"**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS-GitHub/osal/src/os/vxworks/src/os-impl-tasks.c: In function ‘OS_TaskGetId_Impl’:
/home/jhageman/cFS-GitHub/osal/src/os/vxworks/src/os-impl-tasks.c:411:12: warning: cast increases required alignment of target type [-Wcast-align]
  411 |     lrec = (OS_impl_task_internal_record_t *)taskTcb(taskIdSelf());
```

Recreate by building on Ubuntu 20.04, set `cast-align=strict` in `sample_defs/arch_build_custom.cmake` and prep with `ENABLE_UNIT_TESTS=true`

**Describe the solution you'd like**
Resolve warnings.

**Describe alternatives you've considered**
None

**Additional context**
Observed on Ubuntu 20.04 w/ cast-align=strict

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/606
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/ci_lab/issues/66
Document deprecation process,"**Is your feature request related to a problem? Please describe.**
Process not documented

**Describe the solution you'd like**
Document process and reference.
 - Issue requesting deprecation gets reviewed by CCB, accepted/assigned or rejected
   - evaluate requirements/documentation/operational impacts
 - Pull request(s) wraps deprecated elements in *_OMIT_DEPRECATED ifndef and removes any internal dependencies
   - Default sample configuration does not remove this code
   - make OMIT_DEPRECATED=true prep will compile without it to check code for compliance
   - ideally any deprecated elements address dependency fix (use new element, no longer supported, etc)
   - elements can be deprecated in any build/release
   - CI tests with and without deprecated elements removed to ensure no internal dependencies
  - Issue requesting removal of deprecated code
  - Pull request removes deprecated elements
    - typically done end of cycle prior to a major release

**Describe alternatives you've considered**
Wing it.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/67
Add CFE_PSP_GetLocalMET and CFE_PSP_SetLocalMET API Functions (GSFC DCR 21074),"These functions are called by the cFE/TIME subsystem and were never implemented.
",non-bug,https://github.com/nasa/PSP/issues/75
"Add missing ""cfe_psp_version.c"" to source list","**Describe the bug**
The `cfe_psp_version.c` file was not included in the PSP source list as it should have been.

**To Reproduce**
Referencing any version info call results in linker error.

**Expected behavior**
Link should succeed

**System observed on:**
Ubuntu 20.04

**Additional context**
This was supposed to be part of previous PR #257.  Somehow it got missed/omitted from that PR.  (too much stuff going on at once maybe...)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/277
Local stub helper update to match macro behavior,"**Is your feature request related to a problem? Please describe.**
Custom call to `UT_DefaultStubImpl` don't match standard macro behavior (NULL terminate for functions not including va list).

**Describe the solution you'd like**
Match macro (avoids static analysis warning)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman
",bug,https://github.com/nasa/osal/issues/814
Enhancements to UT assert testing framework,"The UT assert framework stub API supported only ""consumable"" data buffers, which works well for calls such as read/write, where the buffer is filled with each call.

It does not work as well for such things as the critical data store (CDS) in CFE_ES, which require a stub to mimic ""random access"" behavior.  For this, the stub would have to retain the buffer between calls.

This ticket is to add all the necessary enhancements to allow full testing of CFE/CFS.",non-bug,https://github.com/nasa/osal/issues/211
Add transaction watchpoint concept for transaction complete notification,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1211] transaction watchpoint
_Originally submitted by_: Seeger, Steven D. (GSFC-582.0)[Embedded Flight Systems, Inc] on Thu Aug  6 11:02:12 2020

_Original Description_:
It might be useful for operators to have a concept of transaction watchpoints. This could be implemented with the spare 16-bit per-channel register (or the spare 8-bit per-channel) coupled with a ground command specifying a bit in that register to be set when a transaction is complete. The benefit here is a proc could request a watchpoint and wait for the bit to be set when the file is done. This is more useful than a file counter because polling directories being active could skew the file counter.",non-bug,https://github.com/nasa/CF/issues/21
`OS_TaskDelay` implementation wrt errors not consistent,"**Is your feature request related to a problem? Please describe.**
In the RTEMS implementation if `OS_Milli2Ticks` fails (over max int) it'll wait 10 ticks, although comment is somewhat misleading since 10 isn't a minimum... passing in 0 would also cause no wait:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/rtems/src/os-impl-tasks.c#L212-L237
VxWorks doesn't wait a minimum if `OS_Milli2Ticks` fails, just returns an error:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/vxworks/src/os-impl-tasks.c#L325-L343
POSIX just converts to `timespec` and uses `clock_nanosleep`.

**Describe the solution you'd like**
Technically `OS_TaskDelay` should be functionally tested with a 0 and max value input, not that I'd ever want to wait that long (although RTEMS and VxWorks should return quickly due to the OS_Milli2Ticks error response).  It would be nice if behavior was consistent, although for 0 it looks to me like none of them would yield.  If we really want a yield in all cases then it needs an update.

**Describe alternatives you've considered**
None.

**Additional context**
From functional test scrub.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1104
Fix non-compliant header guards,"**Is your feature request related to a problem? Please describe.**
Leading `_` is reserved:
https://github.com/nasa/sample_lib/blob/b500b024b951516e618dcb115f0b8b572df1ed45/fsw/public_inc/sample_lib.h#L27-L28
https://github.com/nasa/sample_lib/blob/b500b024b951516e618dcb115f0b8b572df1ed45/fsw/public_inc/sample_lib.h#L76
https://github.com/nasa/sample_lib/blob/b500b024b951516e618dcb115f0b8b572df1ed45/fsw/src/sample_lib_internal.h#L29-L30
https://github.com/nasa/sample_lib/blob/b500b024b951516e618dcb115f0b8b572df1ed45/fsw/src/sample_lib_internal.h#L55

**Describe the solution you'd like**
Match cFS standard pattern:
https://github.com/nasa/sample_lib/blob/b500b024b951516e618dcb115f0b8b572df1ed45/fsw/src/sample_lib_version.h#L30-L31

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_lib/issues/58
"Rename files, functions, and variables to match LIBNAME_* pattern","**Is your feature request related to a problem? Please describe.**
Naming convention in SAMPLE_LIB is not entirely consistent - some names start with `SAMPLE_Lib`, others just `SAMPLE_`.

**Describe the solution you'd like**
All variables, functions, and other identifiers should use a `SAMPLE_LIB_` prefix.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
See nasa/sample_app#77.  When fixing that, noted some issues in here too.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/sample_lib/issues/33
ECI strip headers from incoming packets,"For prior uses of ECI, keeping the header of ingested packets was desirable because it contained information used in the processing of the packet. For some applications that header is unneeded or burdensome to the external code, which has to allocate space for it in its data structures. To maintain compatibility its likely that keeping the header will continue to be the default ECI behavior, but adding the ability for the ECI to strip the header off an incoming packet and a configuration setting so that the user could enable this functionality might be a good improvement. 

For the envisioned use case, a global setting (applying to all incoming packets) is sufficient but not sure if there are use-cases where the ability to set this per-packet would be needed.",non-bug,https://github.com/nasa/ECI/issues/2
Add a mechanism to push app configurations to the mission definitions folder.,"After working with some of the pre-made utility apps provided by the CFE, I've noticed that at some point (relatively early) developers must abandon reuse in favor of clone/own which, in my opinion, is partly due to the CFS CMake build system not providing a clean method to push build configurations into the top level definitions folder.

An example of an app that could benefit from additional configuration would be the CI and TO lab apps. The current implementation of these apps use a hard coded port value for UDP communication with only a means to change the IP listened to via a command in TO Lab. My solution would most likely take the form of changing...
```
  #define cfgCI_PORT 1234
```
to...
```
  #ifndef cfgCI_PORT
    #define cfgCI_PORT 1234  // Default UDP port
  #endif
```
and having a `config.cmake` located within the missions definitions directory that contains the definition from a cmake instruction...
```
add_definitions(-DcfgCI_PORT=4321)
```

It would be nice for the CMake build system to provide the ability to have a companion configuration folder for each app in the definitions folder. This folder could contain headers and additional .cmake files used to specify certain details about the app being built.

It's currently possible to hijack the behavior of the `targets.cmake` file and add additional instructions like `file(copy ...)` to inject files into the app before it attempts to build but this would clobber the files currently present in the app directory.
",non-bug,https://github.com/nasa/cFS/issues/48
VxWorks build broken - missing include path for net/uio.h,"**Describe the bug**
```
[  1%] Building C object osal/vxworks_impl/CMakeFiles/osal_vxworks_impl.dir/src/os-impl-filesys.c.obj
In file included from /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-filesys.c:43:
/opt/WindRiver/vxworks-6.9/target/h/ioLib.h:161:21: error: net/uio.h: No such file or directory
```

**To Reproduce**
Steps to reproduce the behavior:
1. Set TGT1_SYSTEM to ppc-vxworks6.9 and try to build for mcp750

**Expected behavior**
Should build

**Code snips**
Old includes: https://github.com/nasa/PSP/blob/fc786c0dfb6449c80f01d05ae742eee558ec15e3/fsw/mcp750-vxworks/make/build_options.cmake#L10-L11

Current: https://github.com/nasa/PSP/blob/3c531af44704bd1863b373b052dbf921e6782efb/fsw/mcp750-vxworks/make/build_options.cmake#L21-L23

**System observed on:**
 - cFS vxworks host
 - OS: building for vxworks6.9
 - Versions: current bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/PSP/issues/181
Benchmark replacing strncpy use with local/safe version(s),"**Is your feature request related to a problem? Please describe.**
strncpy null **fills** when not always needed, and doesn't guarantee NULL termination.

**Describe the solution you'd like**
Benchmark current implementation against local inline implementation(s) that always NULL terminates, consider option to null fill or not, etc.  strlcpy flavor with a fill option?  May differ per compiler/platform/etc.

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
Might be a good new user/intern project - @ejtimmon 

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/841
Add GCOV summary report,"We are running GCOV on the OSAL /unit-tests-summary/ programs
and preserving the details, but there is no coverage summary
available from a central location.
",bug,https://github.com/nasa/osal/issues/124
"Add explicit ""return"" after functions that are not supposed to return","Function calls such as `OS_TaskExit()` do not normally return, except when running with a ""stub"" implementation during unit test.

To keep the testing accurate, these functions should be immediately followed by an explicit ""return"" statement so that any instructions later in the function will **NOT** be executed.",bug,https://github.com/nasa/cFE/issues/163
Enhanced build system for cFS,"The alternate build system uses CMake and offers several enhancements:
* Completely isolated build tree - No mixing of source files and generated files
* Dynamic application search path, supports ""app-store"" concept by keeping app repos separate from cFS repos.
* Supports multiple different build configurations from the same source tree
* Includes mechanisms for electronic data sheets (data dictionary) support and Lua functional testing support in the future

",non-bug,https://github.com/nasa/cFE/issues/32
Unreachable flow control statements,"As reported by cppcheck style:

Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.

This message is present in 2 files:

{{{
osal/src/os/vxworks6/osapi.c
osal/src/tests/osal-core-test/osal-core-test.h
}}}



Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.

",bug,https://github.com/nasa/osal/issues/129
Race condition in control requests,"**Describe the bug**
Due to the order of operations in clean up, the ES global lock is given up and then re-acquired:

https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/es/cfe_es_apps.c#L859-L861

The problem is that this provides a window of opportunity for the underlying state to change externally while the global data is unlocked.

**To Reproduce**
This can happen, for instance, if the task that is being cleaned up calls `CFE_ES_ExitApp()` while this state machine is also cleaning up the app.  
This actually does happen because `CFE_ES_RunLoop()` will return false if there is an exit request pending.  It is just masked by the fact that most apps are pending in a message receive queue, so they don't self exit - they are deleted by ES instead.

I was able to get CFE to segfault/crash by allowing SAMPLE_APP to exit itself at the very same time that this state machine was also cleaning it up.

**Expected behavior**
No crashes, proper clean up.

**System observed on:**
Ubuntu 20.04

**Additional context**
Due to the ~5 second exit/cleanup delay it is unlikely to occur ""in the wild"" but it can easily be forced to happen.  In my test I just used a slightly modified `sample_app` that doesn't pend forever on `CFE_SB_RcvMsg`, and also delays itself such that it self-exits at the exact same time that the ES background job is running, which reliably segfaults every time.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/950
"OS_SelectSingle(fd, &SelectFlags, timeout) users require OS_STREAM_STATE_READABLE/OS_STREAM_STATE_WRITABLE","**Describe the bug**
In order to use OS_SelectSingle() a user needs access to the #defines for OS_STREAM_STATE_READABLE and OS_STREAM_STATE_WRITABLE but they are contained in osal/src/os/shared/os-impl.h not in osal/src/os/inc/...

**To Reproduce**
Try to use the OS_SelectSingle API :)

**Expected behavior**
These #defines need to be moved to osal/src/os/inc

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/osal/issues/392
JSC: use fixed width types,"Originally part of trac #45 and isolated for CCB review purposes.

Replace use of native `int` with fixed-width `int32` typedef.",bug,https://github.com/nasa/osal/issues/139
Default to 64 bit memory address/offset for all IO (cmd/tlm/tbl/binary dumps),"**Is your feature request related to a problem? Please describe.**
CFE_ES_MemAddress_t/CFE_ES_MEMADDRESS_C and CFE_ES_MemOffset_t/CFE_ES_MEMOFFSET_C are used to convert cpuaddr into a fixed size for cmd/tlm/tbl/binary output.   Currently they are both hard-coded to uint32:
https://github.com/nasa/cFE/blob/81416f8f3552c2b0f85e820f4f423f62f8aee634/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L377-L426

Problem is this basically is just wasted space on 64 bit and also requires querying a separate element to know if these values are valid.   Also ends up reducing functionality (and not supporting some requirements on certain apps).
https://github.com/nasa/cFE/blob/81416f8f3552c2b0f85e820f4f423f62f8aee634/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L458-L472

There's also cases where validity isn't actually indicated within the element as in tbl tlm:
https://github.com/nasa/cFE/blob/81416f8f3552c2b0f85e820f4f423f62f8aee634/modules/tbl/fsw/inc/cfe_tbl_msg.h#L792-L828

Note MM, CS, and MD also all have memory addresses in IO.

**Describe the solution you'd like**
Default to 64 bit everywhere and reorganize IO to avoid implicit padding where possible based on the change.  This is a breaking change (IO change) so probably appropriate to either provide backwards compatibility or target a major release.

This does waste space on 32-bit systems, but makes it such that the values are always valid (no longer need a special flag as long as the underlying functionality is still valid).  None of the uses are in what would typically be high rate telemetry so should be minimal impact.  If really need we could support configurability, or projects could locally modify if really needed.

**Describe alternatives you've considered**
None

**Additional context**
Discussed at 20220420 CCB

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2093
Please provide va_list variants of variadic functions,"I've recently encountered a need to conditionally call `CFE_EVS_SendEvent` or `CFE_ES_WriteToSysLog` depending on the app's status. Unfortunately, both of these functions are variadic functions, and they can't easily be wrapped in another variadic function. 

The C standard library provides variants of its variadic functions that take a `va_list`. For example, `printf` has the `vprintf` variant.

Please provide similar variants for cFE's variadic functions. The implementation would be simple: the majority of the function's logic can reside in the `va_list` version, and the variadic function can become thin a wrapper around the `va_list` version.",non-bug,https://github.com/nasa/cFE/issues/249
Add a stand-alone example build with osal (modernize src/examples/ tasking-example?),"**Is your feature request related to a problem? Please describe.**
Difficult for new user to set up a new trivial build using just OSAL.

**Describe the solution you'd like**
Helpful to include a simple CMake setup and a bare-bones c file to show simplest version of OSAL use.  There's src/examples, but it's not set up to build/run out of the box.  Also update the instructions in the users guide.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC - Stakeholder request",non-bug,https://github.com/nasa/osal/issues/672
ProcessCmdLineOptions - cyclomatic complexity of 45,"**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

elf2cfetbl.c::[ProcessCmdLineOptions](https://github.com/nasa/elf2cfetbl/blob/46b29f82c76429be97687203f75f4b1b25227c60/elf2cfetbl.c#L921) unnecessarily violates the recommendation with a cyclomatic complexity of 45.  

**Describe the solution you'd like**
Clean up ProcessCmdLineOptions such that it has a cyclomatic complexity of 15 or less.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Imported from JSC static analysis audit

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/elf2cfetbl/issues/128
Documentation on CFE_SB_GetMsgTime()/SetMsgTime() needs updated. They do not set/get timestamps for commands (CFE_SB_CMD_HDR_SIZE).,"**Is your feature request related to a problem? Please describe.**
Documentation does not clearly state that `CFE_SB_GetMsgTime()` and `CFE_SB_SetMsgTime()` are only useful if the message header is big enough. Basically, the `CFE_SB_CMD_HDR_SIZE` does not have this field and so it would return 0. 

**Describe the solution you'd like**
Amend the documentation to let others know that those functions are not used when the `cmdHeader[CFE_SB_CMD_HDR_SIZE]`

**Describe alternatives you've considered**
Actually it would probably be better if there was some kind of assert or check to inform the programmer that the function probably shouldn't be used since returning 0 is really returning nothing.
Maybe?
https://github.com/nasa/cFE/blob/405eaaced2467424e338e47bdbb44457d1035ddd/fsw/cfe-core/src/es/cfe_es_erlog.c#L59
from
https://github.com/nasa/osal/blob/d0f1a397fa3559d3ac0c923b3c2ac7ed5004bd5a/src/os/inc/common_types.h#L44

**Additional context**
Documentation in `cFS Application Developers Guide.doc` pg. 57:
> Before sending an SB Message to the SB, the Application can update the SB Message Header.  The most common update is to put the current time in the SB Message.  This is accomplished with one of two SB API functions.  The most commonly used function would be CFE_SB_TimeStampMsg().  This API would insert the current time, in the mission defined format with the mission defined epoch, into the SB Message Header.  The other SB API that can modify the SB Message Header time is CFE_SB_SetMsgTime().  This API call sets the time in the SB Message Header to the time specified during the call.  This is useful when the Application wishes to time tag a series of SB Messages with the same time.
>
> Other fields of the SB Message Header can be modified by an Application prior to sending the SB Message.  These fields, and the associated APIs, are listed in the following table:

I didn't see anywhere that it said if the message is a Command Msg, i.e.,  `CFE_SB_CMD_HDR_SIZE` then it will not have a timestamp and therefore these functions return 0.

Code: 
https://github.com/nasa/cFE/blob/f12563897df87630c8043740dd5ede4b83725c90/fsw/cfe-core/src/sb/cfe_sb_util.c#L277-L305

Just went down a rabbit hole trying to figure out why the message header sizes didn't match in my test cases.

**Requester Info**
Philip Cooksey at NASA Ames",non-bug,https://github.com/nasa/cFE/issues/499
(re)create OSAL for OSX,"I use OSX as a development environment and, while I can easily use a VM of Linux, it would be nice to be able to compile/run cFS in OSX natively.

There are a couple issues with using the posix OSAL on OSX:

* There is no timer interface.
* pthreads does not include the priority control API's
* There are no ""_init"" or ""_fini"" externs for stack introspection.
* No vfs.h
* dlsym takes special RTLD_* handles to define its namespace search behavior (NULL does not work.)
",non-bug,https://github.com/nasa/osal/issues/203
Implement coverage tests for posix,"**Is your feature request related to a problem? Please describe.**
Coverage tests not implemented for posix

**Describe the solution you'd like**
Add coverage tests

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/412
read() vs OS_read() Clarification,"My application involves reading data from a serial device (IMU) in a nonblocking fashion. Furthermore, I am writing code for a particular linux architecture so benefits from the standpoint of enabling OS abstraction are not really important. So, other than that:
What is the difference between linux's read() and OS_read()?
Is there a specific one that is recommended given my situation? If so, why that one?",non-bug,https://github.com/nasa/osal/issues/1269
Update Version Number for OSAL 4.2.1 Release,"The version number information in the osapi-version.h file needs to be updated to reflect the 4.2 release as follows:

#define OS_MAJOR_VERSION (4)
#define OS_MINOR_VERSION (2)
#define OS_REVISION (1)
#define OS_MISSION_REV (0) ",non-bug,https://github.com/nasa/osal/issues/199
TBL UT failure when max table size is increased,"**Describe the bug**
TBL unit tests do not always initialize a memory pool large enough for table load buffers prior to unit test execution.   

**To Reproduce**
Increase the size of the max allowable table sizes and run unit test.

Example:
#define CFE_PLATFORM_TBL_MAX_DBL_TABLE_SIZE 131072
#define CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE 131072
#define CFE_PLATFORM_TBL_BUF_MEMORY_BYTES (8388608*2)
#define CFE_PLATFORM_TBL_MAX_SIMULTANEOUS_LOADS   4

**Reporter Info**
Dan Knutsen
NASA GSFC
",bug,https://github.com/nasa/cFE/issues/2301
Fix `ECI_CMD_MSG_QUEUE_SIZE` undefined,"`eci_app.c` includes all ECI header files after including `eci_interface.h` because some defines in `eci_interface.h` influence the code implemented in `eci_app.c`. This is intended, however,  `eci_interface.h` used `ECI_CMD_MSG_QUEUE_SIZE` (defined in `eci_app_cfg.h`) if commands are defined, which causes compilation to fail.

Need to update include order. Also need to ensure an test suite includes and example of an app with a command to catch this in the future.",bug,https://github.com/nasa/ECI/issues/45
Document that `OS_ObjCreate()` Id of new obj is > 0,"**Is your feature request related to a problem? Please describe.**
The OS_<obj>Create() functions always generate an ID as an ""out"" parameter and that ID is always > 0 when the creation succeeds. This is useful as users of these API's as they can assume 0 is not a valid ID (such as in arrays or variables that are not always referring to valid objects.)

**Describe the solution you'd like**
Should describe, in the comments for all OS_<obj>Create functions, that ID will always be > 0.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/485
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/ci_lab/issues/102
"ES PERF array size calculation assumes ""uint32"" array base type","**Describe the bug**
The ES perf code uses macros to determine the array length based on the overall array size (via `sizeof()`).  Problem is, these calculations hard-code a `uint32` type as the divisor (element size) which may not always be true.

**To Reproduce**
Change the definition of the masks in TLM to be e.g. uint8-based instead of uint32-based.  Array lengths are now calculated incorrectly, because it divides by `sizeof(uint32)` which would now be wrong.

**Expected behavior**
Should use `[0]` to get the actual type of the element, this makes the calculation future-proof, as it does not assume/repeat the array element type (adheres to DRY principle)

**Code snips**
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/fsw/src/cfe_es_task.c#L51-L57

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/2030
CF_ProcessMsg() function incorrect description,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The CF_ProcessMsg(CFE_SB_Buffer_t *msg) description in the cf_app.h header file is incorrect. It is a duplicate of the CF_Init(void) function.

**To Reproduce**
N/A

**Expected behavior**
N/A

**Code snips**
N/A

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
N/A
",non-bug,https://github.com/nasa/CF/issues/270
Static analysis workflow style warnings,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HK/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HK/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Style warnings in strict cppcheck static analysis workflow causing workflow failure:
```
[fsw/src/hk_utils.c:47] -> [fsw/src/hk_utils.c:59]: (style) Variable 'StartOfCopyTable' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:49] -> [fsw/src/hk_utils.c:60]: (style) Variable 'StartOfRtTable' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:371] -> [fsw/src/hk_utils.c:378]: (style) Variable 'StartOfRtTable' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:437] -> [fsw/src/hk_utils.c:439]: (style) Variable 'HKStatus' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:457] -> [fsw/src/hk_utils.c:461]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:482] -> [fsw/src/hk_utils.c:485]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:556] -> [fsw/src/hk_utils.c:560]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:601] -> [fsw/src/hk_utils.c:606]: (style) Variable 'StartOfCopyTable' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:603] -> [fsw/src/hk_utils.c:607]: (style) Variable 'StartOfRtTable' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:640] -> [fsw/src/hk_utils.c:645]: (style) Variable 'StartOfCopyTable' is reassigned a value before the old one has been used.
[fsw/src/hk_utils.c:642] -> [fsw/src/hk_utils.c:646]: (style) Variable 'StartOfRtTable' is reassigned a value before the old one has been used.
```

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

",non-bug,https://github.com/nasa/HK/issues/9
`OS_ERR_INVALID_PRIORITY` not used,"**Is your feature request related to a problem? Please describe.**
`OS_ERR_INVALID_PRIORITY` error code is defined but not used anywhere.  Documented as a return code for both `OS_TaskCreate` and `OS_TaskSetPriority` APIs.

**Describe the solution you'd like**
Use or remove.

**Describe alternatives you've considered**
Could leave in if it's just not applicable to any of the open source OS's, but seems strange it wouldn't apply for at least one of them.

**Additional context**
Discovered in unit/coverage testing.  Relation to #222.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1103
"Remove ""cpu"" directories from fsw/platform_inc","Keeping separate cpu directories in fsw/platform_inc is redundant, unnecessary, and prone to error when the platform configuration files need to be updated. It is recommended to remove the cpu directories and maintain only one copy of the cfe_platform_cfg.h and cfe_msgids.h files.",bug,https://github.com/nasa/cFE/issues/134
Remove classic build support,Only supporting cmake build going forward.,non-bug,https://github.com/nasa/sample_lib/issues/2
"Internal delete command support not in requirements, doesn't match description","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
FM_DELETE_INT_CC is out of family.  FM is operator interface to the file system, not what other elements should use to delete files.  Also strange handling in that it updates command counters but doesn't send the event message, so it would break normal/simple command counter confirmation approach for ground commands.

**Describe the solution you'd like**
Deprecate and/or directly remove support of this command. Other apps should use OS_remove directly instead of relying on FM.  Goal is to reduce interdependency.

**Describe alternatives you've considered**
None

**Additional context**
Replaces:
- #9 
- #6 

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/FM/issues/41
"Add option for ""build-run-app"" reusable workflow to include dependent libraries","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently the ""build-run-app"" reusable workflow only checks out the app into the ""apps"" directory.  However, some cFS applications, such as BP, also require inclusion of a support library (e.g. BPLib) in order to build and run.

**Describe the solution you'd like**
Add an additional workflow input to specify additional library dependencies, which can be checked out and included in the build.

**Additional context**
Typically these would only libraries (not other apps).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFS/issues/615
Add CI workflow/configuration that enables strict type checking,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The cFS CI scripts currently build with lax/weak type checking, which is the distribution default (in sample_defs) as it is more backward compatible.

**Describe the solution you'd like**
At least one CI build should enable this in `global_build_options.cmake` to enable strict type checking:

    set(MISSION_RESOURCEID_MODE STRICT)

**Additional context**
It's easy to add code that will fail w/strict type checks, unless this is enabled in CI to catch it.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFS/issues/268
Sample App has error counter and command counter reversed,"**Describe the bug**
The SAMPLE_ReportHousekeeping function reports the error count and command count values reversed.

**To Reproduce**
Send a NOOP command, then report housekeeping, and see that the error count is in place of the the command count.

**Expected behavior**
The error count and command count should not be reversed.

**Code snips**

Inside `SAMPLE_ReportHousekeeping()`, it has:

```
    Sample_AppData.SAMPLE_HkTelemetryPkt.sample_command_error_count = Sample_AppData.CmdCounter;
    Sample_AppData.SAMPLE_HkTelemetryPkt.sample_command_count = Sample_AppData.ErrCounter;
```

**System observed on:**
Ubuntu 18.04 LTS 64-bit

**Additional context**
Actually discovered this when writing the unit test for the ReportHousekeeping function (#8), and the test case failed because the counters were backwards.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sample_app/issues/25
Sample app needs to release table to allow management,"**Describe the bug**
Table not released after use

**To Reproduce**
Didn't test it, but likely won't be able to load a new table after sending the SAMPLE_ProcessCC command.

**Expected behavior**
Add CFE_TBL_ReleaseAddress after access of table data

**Code snips**
https://github.com/nasa/sample_app/blob/92311e71371d60d60bdde47734d8f013c065c374/fsw/src/sample_app.c#L433-L442

**Version observed on:**
 - Versions: current bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/19
Remove calls to deprecated PSP functions,"As part of the changes for PSP trac [cfs_psp:7] and [cfs_psp:93] the following functions are proposed to be deprecated:

{{{
int32 CFE_PSP_PortRead8         (cpuaddr PortAddress, uint8 *ByteValue);
int32 CFE_PSP_PortWrite8        (cpuaddr PortAddress, uint8 ByteValue);
int32 CFE_PSP_PortRead16        (cpuaddr PortAddress, uint16 *uint16Value);
int32 CFE_PSP_PortWrite16       (cpuaddr PortAddress, uint16 uint16Value);
int32 CFE_PSP_PortRead32        (cpuaddr PortAddress, uint32 *uint32Value);
int32 CFE_PSP_PortWrite32       (cpuaddr PortAddress, uint32 uint32Value);

int32 CFE_PSP_MemRead8          (cpuaddr MemoryAddress, uint8 *ByteValue);
int32 CFE_PSP_MemWrite8         (cpuaddr MemoryAddress, uint8 ByteValue);
int32 CFE_PSP_MemRead16         (cpuaddr MemoryAddress, uint16 *uint16Value);
int32 CFE_PSP_MemWrite16        (cpuaddr MemoryAddress, uint16 uint16Value);
int32 CFE_PSP_MemRead32         (cpuaddr MemoryAddress, uint32 *uint32Value);
int32 CFE_PSP_MemWrite32        (cpuaddr MemoryAddress, uint32 uint32Value);

int32 CFE_PSP_EepromWrite8      (cpuaddr MemoryAddress, uint8 ByteValue);
int32 CFE_PSP_EepromWrite16     (cpuaddr MemoryAddress, uint16 uint16Value);
int32 CFE_PSP_EepromWrite32     (cpuaddr MemoryAddress, uint32 uint32Value);

int32 CFE_PSP_MemCpy            (void *dest, const void *src, uint32 n);
int32 CFE_PSP_MemSet            (void *dest, uint8 value, uint32 n);
}}}

For CFE_PSP_MemCpy/CFE_PSP_MemSet it is preferred to use the C library memcpy/memset call instead.  For the access functions, just dereference the pointer locally (as this is all they ever did).",non-bug,https://github.com/nasa/cFE/issues/353
Refactor common code between VxWorks/Posix/Rtems into OSAL shared layer,"The OSAL library is essentially three separate libraries sharing a common API.  The VxWorks, Rtems, and Posix implementations do not share any code aside from the common osapi header files.  Depending on the OS selection, one of the three libraries will be compiled.

However, under the hood, many of the operations within these three libraries are very similar.  Although the final call down into the OS differs, much of the ""housekeeping"" that OSAL performs is similar between all three implementations.  

Each of them maintain internal tables that map OS objects to names and numbers, and all the OSAL API calls check their arguments against these internal tables to see e.g. if an object by some ID is valid or if an object by some name already exists.

All this housekeeping //really should be identical// and it could be argued that any difference is really a bug and not a feature, as differences here could affect the portability of application code from one OS to another.

Refactoring this ""common"" functionality into a layer which is actually shared among OS implementations provides several benefits:
* Cuts down on the code in the actual OS-specific portions by about 50%, and the code that is left is much more direct and ""to-the-point"".  For instance, an implementation of creating a semaphore //ONLY// needs to create the actual semaphore and return a success/fail code.  All locking, table manipulation, error checking, and recovery is handled by the shared/common layer.  
* This makes additional operating system layers easier to implement and less costly to maintain in the future.
* Likewise, abstraction of additional OS features (such as network sockets) is easier to implement and less costly to maintain in the future.
* Ensures that the housekeeping operations are done consistently across __ALL__ supported operating systems.  This greatly reduces the chances of operations working differently on one OS vs another.  This is particularly true of error conditions that may not be exactly the same or recovered in the same way between current OS implementations.


 
",non-bug,https://github.com/nasa/osal/issues/28
File/socket can be closed while actively inside a OS_SelectMultiple() call in another thread,"**Is your feature request related to a problem? Please describe.**
Converting FIXME into an issue:

https://github.com/nasa/osal/blob/5a8f0afa3a6ef6945661d6fc893d4592d9360b5a/src/os/shared/src/osapi-select.c#L88-L101

**Describe the solution you'd like**
Address/disposition as an issue.

**Describe alternatives you've considered**
None

**Additional context**
#327

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/630
Fix doxygen warnings,"**Describe the bug**
Warnings are generated when building the documentation.

**To Reproduce**
Steps to reproduce the behavior:
1. Do `make doc` from the cFS directory
2. Observe the warnings in `cFS/build/doc/warnings.log`

**Expected behavior**
No warnings should be generated

**Reporter Info**
Leor Bleier GSFC\582
",bug,https://github.com/nasa/sample_lib/issues/17
Document Applications in trac wiki,"It would be helpful to construct a small Wiki page corresponding to each Application in cFE giving a quick overview of each.

I suggest including hotlinks on each such page back into the doc
subtree of the specific App for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.",bug,https://github.com/nasa/cFE/issues/34
posix: Use RTLD_DEFAULT instead of NULL in dlsym,"In {{{OS_SymbolLookup}}} defined in {{{osloader.c}}} in the POSIX OSAL, [http://pubs.opengroup.org/onlinepubs/9699919799/functions/dlsym.html dlsym] is used to obtain the address of the specified symbol:
{{{
   Function = dlsym((void *)0, SymbolName);
}}}

The behavior of {{{dlsym}}} when called with a null pointer for the first argument is not defined by POSIX. On GNU/Linux, this value corresponds to {{{RTLD_DEFAULT}}}, as found in {{{/usr/include/dlfcn.h}}}.
{{{
# define RTLD_DEFAULT	((void *) 0)
}}}

When called with {{{RTLD_DEFAULT}}} as a first argument, ""The identifier lookup happens in the normal global scope; that is, a search for an identifier using handle would find the same definition as a direct use of this identifier in the program code."" This appears to be the intended behavior in the OSAL.

However, the value of {{{RTLD_DEFAULT}}} is implementation-defined according to POSIX. The macro, rather than the value it happens to have on GNU/Linux, should be used.

This would address part of #203.",non-bug,https://github.com/nasa/osal/issues/214
Add a ContinueRtsOnFailureFlag to SC,"There is currently a ""ContinueAtsOnFailureFlag"" that allows an operator to choose whether the processing of an ATS should continue after an error has been encountered.  There is currently no corresponding option for RTS processing.  

Imported from GSFCCFS-1467",non-bug,https://github.com/nasa/SC/issues/11
Enforce Strict ASCII,Replace all non-ASCII characters (i.e. copyright symbol) with ASCII equivalent.,bug,https://github.com/nasa/PSP/issues/24
Create `CFE_ES_HousekeepingCmd_t` typedef to maintain app-specific command definitions,"**Is your feature request related to a problem? Please describe.**
As part of the message processing pattern, applications currently define a header file (typically ending in `_msg.h`) that define the structures which serve as I/O message.

Notable exception to this pattern is in the ""send housekeeping"" commands - this has no app-defined type, it directly uses the type provided by the MSG module e.g. `CFE_MSG_CommandHeader_t`.

**Describe the solution you'd like**
For consistency in operation we should really make an equivalent app defined message type (e.g. `CFE_ES_HousekeepingCmd_t`) for this - it can be a simple typedef to `CFE_MSG_CommandHeader_t`.  Having a type for this would maintain the pattern of having a dedicated typedef for each command definition that is locally defined/controlled by the app itself.

**Additional context**
App can still _use_ or depend on types provided by other modules - this is OK - the main thing is that it shouldn't be _assumed_ to do so.  The SEND_HK style commands are unique in that they assume use of a bare `CFE_MSG_CommandHeader_t` for this message.  This is fine but the app should say this somewhere, it shouldn't be assumed.

Having an app fully define its own I/O interface (with no assumptions) is also important if/when transitioning to a data dictionary/EDS type message system.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/1015#discussion_r534401433_",non-bug,https://github.com/nasa/cFE/issues/1037
Incorrect printf format code in RTEMS debug message,"**Describe the bug**
Incorrect printf format code in RTEMS debug message

**To Reproduce**
Build on RTEMS with debugging messages enabled and full warnings enabled (-Wall, -Werror)
Compiler generates an error about an incorrect format:
```
osal/src/os/rtems/osfilesys.c:176:9: error: format '%lX' expects argument of type 'long unsigned int', but argument 4 has type 'char *'
```

**Expected behavior**
Code should build warning-free

**System observed on:**
Ubuntu 18.04.2 LTS (build host for i686-rtems4.11)

**Reporter Info**
Joseph Hickey, Vantage Systems Inc.
",bug,https://github.com/nasa/osal/issues/273
Replace magic number in `CFE_SB_IncrBufUseCnt`,"**Is your feature request related to a problem? Please describe.**
The `0x7FFF` limit on an `uint16` doesn't seem to make sense, looks like int16 max instead of uint16 max?
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_buf.c#L200

**Describe the solution you'd like**
Use a defined max, add a comment if the max choice isn't obvious.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1464
Use generated stubs,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
DS unit testing currently uses a set of stubs for its internal units that are not generated by the tool

**Describe the solution you'd like**
Use the generated stubs directly whenever possible, as this makes future maintenance easier - when an API changes, just re-run the generator tool to update the stubs.

**Additional context**
This requires some additional separation of items - global variable stubs should be in a separate compilation unit, as the tool does not generate these.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/DS/issues/100
ut_sb_stubs.c needs a stub for CFE_SB_DeletePipe ,"**Is your feature request related to a problem? Please describe.**
CFE_SB_DeletePipe does not have a stub in ut_sb_stubs.c causing undefined reference error when building unit tests for an app that uses this call.

**Describe the solution you'd like**
Add the stub for CFE_SB_DeletePipe with full context tracking.

**Describe alternatives you've considered**
Create my own locally in the app's unit test, but this does not help everyone.

**Requester Info**
Alan Gibson, NASA",non-bug,https://github.com/nasa/cFE/issues/704
Dynamically choose TLM or CMD message type for PDU,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently, the CF application uses the software bus for PDU transfer.  (This is an issue in itself, see #130).

However, in the meantime, when using SB it must make the PDU messages look like the CMD/TLM messages that SB typically deals with.  CF currently assumes/requires that all ingress/rx direction PDUs will have a CMD header, and all egress/tx direction PDUs will have a TLM header.

This assumption is a barrier to configuration of having two instances of CF potentially send files to each other - in such a configuration, there must be an intermediate entity to forward the ""TLM""-style egress PDU messages and convert them to ""CMD""-style ingress PDU messages on the other node, in both directions.


**Describe the solution you'd like**
To potentially make this configuration a bit easier, CF could dynamically choose which type of message header to use based on the configured MsgID values.  That is, if the user has configured CF to output on a MsgId which (per the MSG module) is identified as a CMD type, it should use a CMD header when assembling those egress PDUs.  Likewise, if the user has configured CF to input on a MsgID which is identified as a TLM type, then CF should strip a TLM header from that message.


**Describe alternatives you've considered**
Currently if CF-CF transfer is required, an intermediate transfer agent must fulfill this role to forward the PDU to the other entity and also convert to the other type (TLM->CMD) for ingest by CF.

**Additional context**
While this would address one pain point of this type of configuration, it still leaves two major ones:
- SB pipes have inherent buffering limits
- SB pipes cannot provide backpressure to sender (they just hit MsgLim and drop)

As a result the backpressure still needs to be implemented separately (via a sync sem) to avoid overflowing pipes.  I'd still rather fix #130 to address all the issues inherent with using SB as a bulk data transfer mechanism - it isn't designed to be that.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/CF/issues/224
Use appropriate atomic type for inter-thread sync,"The RV tool analysis reported several cases of reading/writing shared memory variables without a lock. 

The intention behind the code was that the data type being read/written simultaneously here was atomic in nature, thus the parallel access would be safe, as it is not possible to catch an atomic value mid-update.

To be more portable the code should use the C99 type `sigatomic_t` to ensure that the data type is in fact atomic on the given platform.  Currently it is using `uint32` which is not guaranteed to be atomic on all platforms.

Calling this ""minor"" because the `uint32` type will be atomic on all the platforms that the code in question is actually used on.  There is no bug currently here, this is just to prevent a future bug if this code is expanded to smaller CPUs (microcontrollers) where `uint32` is not atomic.

",bug,https://github.com/nasa/cFE/issues/1034
osal_timer_UT periodic failure,"**Describe the bug**
osal_timer_UT periodically reports a failure on linux for the nominal OS_TimerSet case

**To Reproduce**
1. Build and run
```
make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
make
make install
build/exe/cpu1/osal_timer_UT
```

**Expected behavior**
Should pass

**Code snips**
See ut_ostimer_test.c for UT_os_timercallback (the timer callback function)
See ut_ostimer_timerio_test.c line 654 for the failure location

**System observed on:**
 - cFS Dev 2 Server
 - OS: Ubuntu 18.04
 - Versions: happened to be running the ic-20191230 branches, but not unique (historical issue)

**Additional context**
Added after the tolerance check in the callback function:
```
printf(""\ndeltaTime = %d\n"", deltaTime);
printf(""g_toleranceVal = %d\n"", g_toleranceVal);
printf(""currIntervalTime = %d\n"", currIntervalTime);
printf(""prevIntervalTime = %d\n"", prevIntervalTime);
printf(""endTime = %d sec, %d msec\n"", endTime.seconds, endTime.microsecs);
printf(""currTime = %d sec, %d msec\n"", currTime.seconds, currTime.microsecs);
```
failure result was seen due to unexpected first interval of 1056, where interval was set to 500000:
```
deltaTime = 0
g_toleranceVal = 25000
currIntervalTime = 0
prevIntervalTime = 0
endTime = 1577812468 sec, 179711 msec
currTime = 1577812468 sec, 179711 msec

deltaTime = 1056
g_toleranceVal = 25000
currIntervalTime = 1056
prevIntervalTime = 0
endTime = 1577812468 sec, 180767 msec
currTime = 1577812468 sec, 179711 msec

deltaTime = 498945
g_toleranceVal = 25000
currIntervalTime = 500001
prevIntervalTime = 1056
endTime = 1577812468 sec, 680768 msec
currTime = 1577812468 sec, 180767 msec

deltaTime = 12
g_toleranceVal = 25000
currIntervalTime = 499989
prevIntervalTime = 500001
endTime = 1577812469 sec, 180757 msec
currTime = 1577812468 sec, 680768 msec
```
**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/335
"Unterminated variadic call in UT tools, CodeQL warning","**Is your feature request related to a problem? Please describe.**
CodeQL warning on:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/inc/utstubs.h#L479
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/src/utstubs.c#L845-L855

**Describe the solution you'd like**
Terminate list with NULL in macro

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warning

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/781
Implement Continuous Integration tests of cFS PSP tree,"Need to construct a CI plan that builds everything that can be built in `cfs_psp` and runs all of the local test programs that are suitable for fast turnaround automatic test cycles.

",non-bug,https://github.com/nasa/PSP/issues/18
Use real headers and structures to define tables,"RTS uses a relative time tag that is 32 bit native endian.  Current definition of tables uses a uint16 array which makes the table endian specific.

Could instead define a structure with the real contents (headers and commands), union with an array to make it the right size, then use designated initializers.  This would allow the compiler to handle the endianness.

Imported from GSFCCFS-1841",bug,https://github.com/nasa/SC/issues/17
Enhanced build system for cFS,"This ticket is for the PSP portion of the enhanced build system pushed out under the corresponding cFS ticket:

[https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/1]
",non-bug,https://github.com/nasa/PSP/issues/4
Update CFE to use OS time conversion/access methods,"**Is your feature request related to a problem? Please describe.**
CFE is directly accessing specific fields within `OS_time_t` which will break when the struct definition changes.   

**Describe the solution you'd like**
Instead of directly accessing the `seconds` and `microsecs` fields within `OS_time_t`, use the accessor functions to convert/extract the relevant info from  the value instead.

**Additional context**
see nasa/osal#429

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1051
`OS_SymbolLookup` should also support local symbol lookup,"**Is your feature request related to a problem? Please describe.**
Getting symbol addresses are an integral part of MM and MD.  For systems that load modules with local scope this could still be easily supported by looping through the modules w/o requiring app changes.

Currently it just looks for global or static symbols:
https://github.com/nasa/osal/blob/4cc6dbb5019d0589d5ce52e3755a0b7a012ade3c/src/os/shared/src/osapi-module.c#L352-L388

**Describe the solution you'd like**
Possibly just use OS_ForEach and loop through modules within OS_SymbolLookup, but on systems where local symbol table lookup just calls the global version that would waste cycles if a symbol doesn't exist since it would end up searching the global table for every module.

Consider a slight refactor... a generic OS_SymbolLookup_Impl could search just global on systems with only global, global and local on systems that support it.  Really doesn't seem to be a use case for OS_GlobalSymbolLookup_Impl which only searches the global table... possibly remove?

**Describe alternatives you've considered**
None others.

**Additional context**
See MM and MD use of symbol lookup, helpful to get from global or local scope.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1204
Update toolchain-ppc-vxworks6.9.cmake,"**Is your feature request related to a problem? Please describe.**
Update toolchain-ppc-vxworks6.9.cmake to use mcp750-vxworks name

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/443
Better failure reporting for unit tests in travis CI log,"**Is your feature request related to a problem? Please describe.**
Current log isn't all that useful, for example:
`52/65 Test #52: network-api-test .................***Failed    0.01 sec`

**Describe the solution you'd like**
Exit the test and record the failure to the log

**Describe alternatives you've considered**
Could do more complex storing of results, but just writing out the failure is better than nothing.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/116
Add cmake function to add cpus by function rather than assume consecutive cpu ids.,"Currently, the cmake rules require that cpus are built in order and will stop looking for cpu targets when a cpu idx is not found.

Propose that a cmake function can be executed from the targets.cmake file which explicitly adds the cpus to be built for the mission.",non-bug,https://github.com/nasa/cFE/issues/265
Not correctly checking return code of CFE_TBL_GetAddress,"**Describe the bug**
The `CFE_TBL_GetAddress()` routine is one of the APIs that have multiple ""success"" codes.  Although the intent/hope is to deprecate this (see nasa/cfe#483) - the current implementation still returns values other than `CFE_SUCCESS`.  In particular the first time it is called after loading, one gets `CFE_TBL_INFO_UPDATED`.

**To Reproduce**
Run CFE with sample app and issue the ""Process"" command (2) and observe one gets an ""error"" message e.g.:

    1980-012-14:03:57.00062 Sample App: Fail to get table address: 0x4c00000e

But that error code is actually a ""success"" response.  If the same command is repeated, it works OK because it returns `CFE_SUCCESS` this time.

A bigger issue, however, is that the address acquired from the first invocation is not released.

**Expected behavior**
Should get address and release address correctly.

**System observed on:**
Ubuntu 20.04

**Additional context**
This is an **excellent** example of why multiple success responses are a bad idea.  It is really a bug in the CFE_TBL API -- we didn't as if a table was updated, we only asked to get its pointer.  If TBL services gives back a buffer pointer as requested, the response should be `CFE_SUCCESS`.  The unnecessary over-complexity of the TBL API definitely causes usability problems.

But in the meantime one can change the check from `status == CFE_SUCCESS` to `status < CFE_SUCCESS` and it should resolve the resource leak issue here.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/sample_app/issues/101
ES CDS Functional tests,"**Is your feature request related to a problem? Please describe.**
The functional test currently only test the base cases of the API functions. More in depth tests still need to be written.

**Describe the solution you'd like**
Write tests for all the possible cases

**Additional context**
Follow up to #1418

**Requester Info**
Alex Campbell",non-bug,https://github.com/nasa/cFE/issues/1478
Build system support for linking symbol table,"When using the dynamic loader on some RTOS's (RTEMS notably, but probably others too) there is an extra build step required to build an executable capable of runtime linking.  For RTEMS, this is:

1. Build all objects and link the executable as normal
2. Invoke the `rtems-syms` tool to build a symbol table object
3. Re-link the executable using the objects from (1) and (2)

This is possible in CMake by defining some custom commands, but requires a few hooks in the build system to do this, since it is OS-specific.",non-bug,https://github.com/nasa/cFE/issues/283
remove MESSAGE_FORMAT_IS_CCSDS ifdefs from CFS code,"Currently, most of the functions in cfe_sb_util.c and a few others are like:
{{{
void CFE_SB_InitMsg(void           *MsgPtr,
                    CFE_SB_MsgId_t MsgId,
                    uint16         Length,
                    boolean        Clear )
{
#ifdef MESSAGE_FORMAT_IS_CCSDS

    CCSDS_InitPkt ((CCSDS_PriHdr_t *)MsgPtr,(uint16)MsgId,Length,Clear);

#endif
} /* end CFE_SB_InitMsg */
}}}

It's confusing what else would be done in these functions (and nothing else is done.) As Joe said, if someone implemented a wholly different SB message format, they're likely to write their own set of functions and having a bunch of #if/elseif/elseif/elseif/endif blocks would be confusing and difficult to maintain.

The suggestion from the CCB today was to remove these #ifdefs. It might be worthwhile to put in a check at the top of the file that generates a compiler warning/error if it's not defined...",non-bug,https://github.com/nasa/cFE/issues/240
cFS style guide,"**Is your feature request related to a problem? Please describe.**
Code and file naming in cFS and apps is inconsistent and does not follow a particular set of guidance, and no guidance were developed previously for cFS.

**Describe the solution you'd like**
Develop a ""Style Guide"" in markdown format for inclusion in cFE/docs, describing code formatting conventions, symbol naming conventions, documentation conventions, directory structure and file naming conventions, etc. This should be referenced by the App Developer's guide and any other relevant docs and may incorporate or replace parts of existing documents. Perhaps also link/refer from the github wiki.

**Describe alternatives you've considered**
Other options include adding style information to the app developer's guide or identifier naming conventions documents.

**Additional context**
Jake provided the GSFC ""indent"" flags that are standard at GSFC, this is a good starting point for formatting and should be documented.

**Requester Info**
Chris Knight, NASA Ames Research Center",non-bug,https://github.com/nasa/cFE/issues/394
Coercion alters value caused by incorrect type - static analysis warning,"**Is your feature request related to a problem? Please describe.**
CFE_TBL_FindTableInRegistery returns int16, RegIndex is defined as uint32 and only checked for error (negative)
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c#L1416-L1428

The last parameter passed to CFE_ES_FileWriteByteCntErr for both uses is Status (int32), yet it expects size_t... seems like this isn't defined correctly?
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_syslog.c#L554
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_perf.c#L469
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_task.h#L204

Not a bug, just an inconsistency warnings

**Describe the solution you'd like**
Correct type

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1200
Documentation hasn't been pushed since transition to github actions,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFS/tree/gh-pages, links are 3 months old

**Describe the solution you'd like**
Publish the guides from GitHub Action (add to the build)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/170
Registering 100+ event filters w/ 0x0000 values serves no purpose (and overflows a typical filter buffer),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Registering event filters just to register event filters doesn't do anything but load the system.  If an event needs to be filtered operationally, just use the add filter command.  Note default `CFE_PLATFORM_EVS_MAX_EVENT_FILTERS` is 8, so the rest would get discarded and cause a filter buffer overflow event.

**Describe the solution you'd like**
Remove filter registration for those set to 0x0000 (all of them!)  Add operationally if/when needed, or if eventually an actual filter needs to be applied then add it.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/260
Remove references to CFE_ES_RegisterApp,"**Is your feature request related to a problem? Please describe.**
As part of nasa/osal#853 and nasa/cfe#1215 the registration APIs are getting fully deprecated and removed.  Applications no longer need to call OS_TaskRegister, CFE_ES_RegisterApp, or CFE_ES_RegisterChildTask.

**Describe the solution you'd like**
Remove references to these functions.

**Additional context**
Will be required with nasa/osal#853 and nasa/cfe#1215

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sch_lab/issues/74
Update CFE_MSG_Message_t conversions to use CFE_MSG_PTR macro,"**Is your feature request related to a problem? Please describe.**
In nasa/cfe#1966 introduces a `CFE_MSG_PTR` macro which converts a cmd/tlm header object to a `CFE_MSG_Message_t*` pointer, which is intended to be used rather than assuming a specific member name (e.g. `.Msg`).

**Describe the solution you'd like**
Use the macro instead of assuming `.Msg` member name.

**Additional context**
Required when using generated headers, as the member name may not be ""Msg"" or may be further encapsulated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/to_lab/issues/106
Apply standard coding style,"**Is your feature request related to a problem? Please describe.**
Inconsistent coding style

**Describe the solution you'd like**
Apply standard style to code (see also #24 for enforcement)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/ci_lab/issues/29
Remove OSAL dependencies on deprecated OSAL elements,"Building with OSAL_OMIT_DEPRECATED fails.

First error:

/home/jhageman/cFS/cFS-dev/osal/src/unit-tests/shared/ut_os_stub_platforms.h:83:8: error: unknown type name ‘OS_FDTableEntry’
 extern OS_FDTableEntry OS_FDTable[OS_MAX_NUM_OPEN_FILES];",bug,https://github.com/nasa/osal/issues/258
Add app info structure element descriptions back in,"**Is your feature request related to a problem? Please describe.**
Element descriptions were dropped in #1029 
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L435-L441
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L475-L479

**Describe the solution you'd like**
Add element descriptions

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2032
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen `warnings for documented empty return type`

**Describe the solution you'd like**
Remove unnecessary documentation

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/FM/issues/49
typedef for status return values,"**Is your feature request related to a problem? Please describe.**
Currently most CFE API's return a status code (the return type defines as int32.) The numeric return type is somewhat unclear and could result in confusion with other types of information (such as inadvertent confusion with return values from OSAL functions or numeric ID's).

**Describe the solution you'd like**
```
typedef int32 CFE_Status_t;

CFE_Status_t CFE_SB_CreatePipe()...
```

In order to facilitate better coding practices, I also propose a utility function:
```
bool CFE_Status_IsSuccess(CFE_Status_t status); // returns true if the status is a success return value, false if not (currently < 0 is an error condition, >= 0 is success with possible further status details.)
```

**Describe alternatives you've considered**
This will require quite a lot of code change but could be migrated incrementally as creating the typedef to the same type will be compatible. Eventually it could be changed to a struct wrapper or enum or something that will result in compiler errors when the type is considered a numeric type.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/888
Static Analysis: 'unsigned int' but is of type 'PCS_WIND_TCB *' ,"**Describe the bug**
See <https://github.com/nasa/cFS/security/code-scanning/1?query=ref%3Arefs%2Fpull%2F193%2Fmerge>

Detected in `psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:208`

Not sure we might want to dismiss it 

**To Reproduce**
Run CodeQL

**Code snips**
<img width=""991"" alt=""Screen Shot 2021-02-17 at 1 14 02 PM"" src=""https://user-images.githubusercontent.com/59618057/108248658-25af3c00-7122-11eb-958f-38e2f7619614.png"">

",bug,https://github.com/nasa/PSP/issues/251
Add OS config option for fast mutexes,"**Is your feature request related to a problem? Please describe.**
Currently OSAL always creates recursive mutexes, with no option to control this..  Normal or non-recursive mutexes are more efficient than recursive mutexes.

**Describe the solution you'd like**
Add an OS config compile time option to elect ""fast"" or non-recursive mutexes.

**Additional context**
This is a follow-on to issue #623

CFE currently won't run with non-recursive mutexes due to known issues.  But as long as the default remains to be recursive mutexes, then this option can be added for future use without breaking anything.  Obviously this option couldn't be enabled for CFE until the known issues are fixed.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/624
Remove application/child task registration API requirements,"**Is your feature request related to a problem? Please describe.**
APIs were removed in #1250, registration handled by ES and no longer requires API.

cES1300 and 

**Describe the solution you'd like**
Remove associated requirements, cES1300 - ES: Register Application and cES1313 - ES: Register Child Task

**Describe alternatives you've considered**
None

**Additional context**
#1250, #1215

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1709
Remove reference to _HAVE_STDINT_ in doxygen input file,"Relates to [cfs_osal:226] in cfe_osal, where the _HAVE_STDINT_ define is removed.  Now always using stdint.h (burden is on projects if they use a platform that isn't compliant with C99).",bug,https://github.com/nasa/cFE/issues/341
Enhanced version reporting,"Use SCH_LAB_VERSION from cfecfs_version_info.h if available and report on NOOP and startup (along with classic version numbering)

Classic version numbering can then just be updated on release, vs for every commit.",non-bug,https://github.com/nasa/sch_lab/issues/5
tests: Calling sem_destroy() on semaphores that are still being used,"**Is your feature request related to a problem? Please describe.**

(I would like to open this as a general discussion so using the Feature ticket as the closest one)

Running some of the OSAL's tests on macOS results in `BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""`. Instead of `<semaphore.h>` macOS's provides `<dispatch/semaphore.h>` and with some minor differences, the API is very similar. The above error message is a protection built in the implementation of semaphores to prevent a user from calling `dispatch_release()` on a semaphore that is still being used.

**Describe the solution you'd like**

3 of the current OSAL's test are hitting this error (see Appendix below) and I am wondering if it would be practical to improve the design of these tests.

I would also like to check with someone my understanding that destroying the resources while they are still being used results in undefined behaviour and that the undefined behaviour should be avoided even if the scope is test code, not the OSAL code itself.

**Describe alternatives you've considered**

For now, I am using an alternative implementation of semaphores found [here](https://stackoverflow.com/a/48778462/598057) but I think it would be better to use the `dispatch_semaphore.h` as a more native implementation on macOS.

**Additional context**

`–`

**Requester Info**

Stanislav Pankevich, individual contribution.

---

# Appendix: Calling sem_destroy() when a semaphore is still being used

### 70 - osal_core_UT (ILLEGAL)

```
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
  * frame #0: 0x00007fff2026d229 libdispatch.dylib`_dispatch_semaphore_dispose.cold.1 + 27
    frame #1: 0x00007fff202400bc libdispatch.dylib`_dispatch_semaphore_dispose + 46
    frame #2: 0x00007fff2023ec1a libdispatch.dylib`_dispatch_dispose + 87
    frame #3: 0x000000010804c130 osal_core_UT`mac_sem_destroy(psem=0x00000001082b1f90) at posix-macos-semaphore2.c:44:5
    frame #4: 0x0000000108049964 osal_core_UT`OS_CountSemDelete_Impl(token=0x00007ffee7bcf8d8) at os-impl-countsem.c:114:9
    frame #5: 0x000000010803f386 osal_core_UT`OS_CountSemDelete(sem_id=196634) at osapi-countsem.c:135:23
    frame #6: 0x0000000108038416 osal_core_UT`UT_os_count_sem_take_test at ut_oscore_countsem_test.c:235:9
    frame #7: 0x000000010803e4f9 osal_core_UT`UtTest_Run at uttest.c:174:17
    frame #8: 0x000000010803dae9 osal_core_UT`OS_Application_Run at utbsp.c:232:5
    frame #9: 0x000000010805154a osal_core_UT`main(argc=1, argv=0x00007ffee7bcf9d8) at bsp_start.c:247:5
    frame #10: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #11: 0x00007fff20404f3d libdyld.dylib`start + 1
```
    
```
_dispatch_semaphore_dispose.cold.1:
	movq   %rsi, %rax
	subq   (%rdi), %rax
	leaq   0x62a5(%rip), %rcx         ; ""BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""
	movq   %rcx, 0x604a3566(%rip)     ; gCRAnnotations + 8
	movq   %rax, 0x604a358f(%rip)     ; gCRAnnotations + 56
	ud2
```

### 54 - count-sem-test (ILLEGAL)

```
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
  * frame #0: 0x00007fff2026d229 libdispatch.dylib`_dispatch_semaphore_dispose.cold.1 + 27
    frame #1: 0x00007fff202400bc libdispatch.dylib`_dispatch_semaphore_dispose + 46
    frame #2: 0x00007fff2023ec1a libdispatch.dylib`_dispatch_dispose + 87
    frame #3: 0x0000000102c1f980 count-sem-test`mac_sem_destroy(psem=0x0000000102c3cbc8) at posix-macos-semaphore2.c:44:5
    frame #4: 0x0000000102c1d1c4 count-sem-test`OS_CountSemDelete_Impl(token=0x00007ffeecff47c8) at os-impl-countsem.c:114:9
    frame #5: 0x0000000102c13156 count-sem-test`OS_CountSemDelete(sem_id=196609) at osapi-countsem.c:135:23
    frame #6: 0x0000000102c12e7d count-sem-test`OS_CleanUpObject(object_id=196609, arg=0x00007ffeecff493c) at osapi-common.c:332:13
    frame #7: 0x0000000102c160fc count-sem-test`OS_ForEachDoCallback(obj_id=196609, ref=0x00007ffeecff4880) at osapi-idmap.c:247:5
    frame #8: 0x0000000102c1731d count-sem-test`OS_ObjectIdIteratorProcessEntry(iter=0x00007ffeecff4898, func=(count-sem-test`OS_ForEachDoCallback at osapi-idmap.c:243)) at osapi-idmap.c:1370:14
    frame #9: 0x0000000102c1743a count-sem-test`OS_ForEachObjectOfType(idtype=3, creator_id=0, callback_ptr=(count-sem-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffeecff493c) at osapi-idmap.c:1436:13
    frame #10: 0x0000000102c173a7 count-sem-test`OS_ForEachObject(creator_id=0, callback_ptr=(count-sem-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffeecff493c) at osapi-idmap.c:1410:9
    frame #11: 0x0000000102c12cf9 count-sem-test`OS_DeleteAllObjects at osapi-common.c:386:9
    frame #12: 0x0000000102c12c49 count-sem-test`OS_API_Teardown at osapi-common.c:262:5
    frame #13: 0x0000000102c123b9 count-sem-test`UtTest_Run at uttest.c:180:17
    frame #14: 0x0000000102c11979 count-sem-test`OS_Application_Run at utbsp.c:232:5
    frame #15: 0x0000000102c24c1a count-sem-test`main(argc=1, argv=0x00007ffeecff4a08) at bsp_start.c:247:5
    frame #16: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #17: 0x00007fff20404f3d libdyld.dylib`start + 1
```

```
_dispatch_semaphore_dispose.cold.1:
	movq   %rsi, %rax
	subq   (%rdi), %rax
	leaq   0x62a5(%rip), %rcx         ; ""BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""
	movq   %rcx, 0x604a3566(%rip)     ; gCRAnnotations + 8
	movq   %rax, 0x604a358f(%rip)     ; gCRAnnotations + 56
	ud2
```

### 55 - count-sem-timeout-test (ILLEGAL)

```
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
  * frame #0: 0x00007fff2026d229 libdispatch.dylib`_dispatch_semaphore_dispose.cold.1 + 27
    frame #1: 0x00007fff202400bc libdispatch.dylib`_dispatch_semaphore_dispose + 46
    frame #2: 0x00007fff2023ec1a libdispatch.dylib`_dispatch_dispose + 87
    frame #3: 0x0000000106f7a840 count-sem-timeout-test`mac_sem_destroy(psem=0x0000000106f97bc8) at posix-macos-semaphore2.c:44:5
    frame #4: 0x0000000106f78084 count-sem-timeout-test`OS_CountSemDelete_Impl(token=0x00007ffee8c997b8) at os-impl-countsem.c:114:9
    frame #5: 0x0000000106f6e016 count-sem-timeout-test`OS_CountSemDelete(sem_id=196609) at osapi-countsem.c:135:23
    frame #6: 0x0000000106f6dd3d count-sem-timeout-test`OS_CleanUpObject(object_id=196609, arg=0x00007ffee8c9992c) at osapi-common.c:332:13
    frame #7: 0x0000000106f70fbc count-sem-timeout-test`OS_ForEachDoCallback(obj_id=196609, ref=0x00007ffee8c99870) at osapi-idmap.c:247:5
    frame #8: 0x0000000106f721dd count-sem-timeout-test`OS_ObjectIdIteratorProcessEntry(iter=0x00007ffee8c99888, func=(count-sem-timeout-test`OS_ForEachDoCallback at osapi-idmap.c:243)) at osapi-idmap.c:1370:14
    frame #9: 0x0000000106f722fa count-sem-timeout-test`OS_ForEachObjectOfType(idtype=3, creator_id=0, callback_ptr=(count-sem-timeout-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffee8c9992c) at osapi-idmap.c:1436:13
    frame #10: 0x0000000106f72267 count-sem-timeout-test`OS_ForEachObject(creator_id=0, callback_ptr=(count-sem-timeout-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffee8c9992c) at osapi-idmap.c:1410:9
    frame #11: 0x0000000106f6dbb9 count-sem-timeout-test`OS_DeleteAllObjects at osapi-common.c:386:9
    frame #12: 0x0000000106f6db09 count-sem-timeout-test`OS_API_Teardown at osapi-common.c:262:5
    frame #13: 0x0000000106f6d279 count-sem-timeout-test`UtTest_Run at uttest.c:180:17
    frame #14: 0x0000000106f6c839 count-sem-timeout-test`OS_Application_Run at utbsp.c:232:5
    frame #15: 0x0000000106f7fada count-sem-timeout-test`main(argc=1, argv=0x00007ffee8c999f8) at bsp_start.c:247:5
    frame #16: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #17: 0x00007fff20404f3d libdyld.dylib`start + 1
```

```
_dispatch_semaphore_dispose.cold.1:
	movq   %rsi, %rax
	subq   (%rdi), %rax
	leaq   0x62a5(%rip), %rcx         ; ""BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""
	movq   %rcx, 0x604a3566(%rip)     ; gCRAnnotations + 8
	movq   %rax, 0x604a358f(%rip)     ; gCRAnnotations + 56
	ud2
```
",bug,https://github.com/nasa/osal/issues/1160
Compiling for Raspberry Pi,"Would like to run on my ARM based raspberry pi, the instructions don't seem to detail a means of building for different arch.

Thanks",non-bug,https://github.com/nasa/cFE/issues/9
"Fix ""utbsp.h"" not found failure when building on some platforms","Testing on other platforms revealed an issue regarding the include path for the utassert header files.

In particular, the latest Ubuntu (15.04) failed to build due to ""utbsp.h"" not being found.  (This may be related to the more recent CMake v3.0.2)
",bug,https://github.com/nasa/osal/issues/96
Misleading cFE Doxygen: CFE_SB_DeletePipe,"During app development, a developer commented on the following:

''After testing, it appears that the comments in the CFE_SB_DeletePipe are 
not correct. All created pipes are automatically deleted on CFS shutdown 
and no app specific calls to CFE_SB_DeletePipe is required. Calling DeletePipe
in CleanupCallback function gives the following error:
''
{{{
EVS Port1 66/1/CFE_SB 54: Pipe Delete Error:Caller(CFE_EVS) is not the owner of pipe 9
}}}

The cFE Doxygen has:
'''int32 CFE_SB_DeletePipe	(CFE_SB_PipeId_t PipeId)'''
Description
    This routine deletes an input pipe and cleans up all data structures associated with the pipe. All subscriptions made for this pipe by calls to CFE_SB_Subscribe will be automatically removed from the SB routing tables. Any messages in the pipe will be discarded. '''Applications must call this routine for all of their SB pipes as part of their orderly shutdown process.'''


'''However,''' CFE_ES_CleanUpApp(uint32 AppId) calls CFE_SB_CleanUpApp(AppId) (in cfe_sb_priv.c) which deletes all of an app's pipes.  So when the app developer tries to do that same cleanup themselves they get an error.

It's a question of resource management.  How should the documentation be updated to tell the developer what to do?",bug,https://github.com/nasa/cFE/issues/196
Fix startup file pathnames in CMake version of the sample configurations,"The cmake install currently does not create an extra /apps/ subdirectory to install the files.  This makes it incompatible with the current platform config file that specifies the startup file to be:

{{{/cf/apps/cfe_es_startup.scr}}}

With the current installation script it should simply be:

{{{/cf/cfe_es_startup.scr}}}

This change only affects the sample configurations, nothing in the runtime code.


",bug,https://github.com/nasa/cFE/issues/91
Remove defines for EVS LogMode,"**Is your feature request related to a problem? Please describe.**
Enum is defined here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_evs_extern_typedefs.h#L66-L81

Defines here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/inc/cfe_evs_msg.h#L910-L912

**Describe the solution you'd like**
Remove defines, replace any references with the enums.

**Describe alternatives you've considered**
Boolean for overwrite (although cmd/tlm should be fixed size)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1446
CFE_ES_CreateObjects calls CFE_ES_WriteToSysLog while holding shared data lock,"**Describe the bug**
During core service task create, `CFE_ES_CreateObjects()` calls `CFE_ES_WriteToSysLog()` while already holding the shared data lock in two places, resulting in a recursive lock / deadlock.
* [Location 1](https://github.com/nasa/cFE/blob/master/fsw/cfe-core/src/es/cfe_es_start.c#L846)
* [Location 2](https://github.com/nasa/cFE/blob/master/fsw/cfe-core/src/es/cfe_es_start.c#L858)

**Expected behavior**
It appears it should be calling `CFE_ES_SysLogWrite_Unsync()` instead.

**Code snips**
The second location makes the issue pretty clear:
```
                  CFE_ES_WriteToSysLog(""ES Startup: Core App: %s created. App ID: %d\n"",
                                       CFE_ES_ObjectTable[i].ObjectName,j);
                                       
                  /*
                  ** Increment the registered App and Registered External Task variables.
                  */
                  CFE_ES_Global.RegisteredTasks++;
                  CFE_ES_Global.RegisteredCoreApps++;
                  
                  CFE_ES_UnlockSharedData(__func__,__LINE__);
```

**System observed on:**
 - OS: FreeRTOS 10
 - Versions: cFE 6.7.0, OSAL 5.0.0

**Reporter Info**
Mike Stewart, Capella Space Corporation
",bug,https://github.com/nasa/cFE/issues/591
Add abstraction for condition variables,"**Is your feature request related to a problem? Please describe.**
POSIX condition variables can be useful for implementing worker thread pools, allowing worker task(s) to pend for work and dispatcher/manager tasks to unblock those workers once a job becomes available.  

**Describe the solution you'd like**
Abstraction of something like POSIX condition variables via OSAL APIs.

**Describe alternatives you've considered**
Some of the worker pool concepts may be implemented with simple semaphores, but those aren't ideal for some use cases:

- a counting sem needs a 1:1 relationship between gives and takes, so it is not ideal for cases where work can be ""batched"" - either where a single input can unblock multiple worker jobs, or multiple inputs can be handled by a single worker job.
- a binary sem helps the second case by capping the semaphore count at 1, such that multiple ""gives"" on the dispatch side only cause a single worker run.  But it does not allow for a dispatcher to unblock multiple workers, nor can it act on other conditions than a simple boolean.
 
Note that in the POSIX OSAL the binary semaphore is, in fact, implemented using condition variables underneath - where the condition is just a single boolean value.  But only this limited use-case is exposed/available to applications.  

As a backward-compatible compromise of sorts - it may be possible to build on the current binary sem concept but allow the application to register its own ""condition test"" routine beyond the simple boolean.  

**Additional context**
VxWorks support is not fully clear, I think VxWorks 7 has the underlying APIs to implement this, but 6.x might not.  

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1252
Release 1.1.0 prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- added standard Apache 2.0
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/32
Decode procedures read header fields without checking length,"CF uses many variable-length fields in its header structure.  This requires aggressive buffer bounds checking at each point during decode, since a bad value (such as a bad ""length"" on an LV parameter) can throw off the decoder which may end up reading past the end of data and into undefined behavior territory.

CF really only sanity checks the length at a couple points here in the initial header receive:

Headers alone:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L874

Full PDU length field:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L886

However, note that even for the first check above (line 874) the code has already invoked CF_HeaderSize here:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L870

Notably, the `CF_HeaderSize()` function reads data from the packet header to compute header size.  Therefore this has already read some packet data before the length is even initially sanity checked.  If the input data was very short (such as from a MID misconfiguration) this would potentially segfault by immediately reading beyond the buffer.

Furthermore, every packet type that utilizes an LV or TLV style sub-fields (e.g. EOF, FIN, MD) needs to re-check the bounds at each of these entries.  For example in RecvMd it only confirms that the size is sufficient for fixed-size fields here:

https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L926

But later on when copying the LV data at these places, there is no check:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L939
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L950-L951

These functions only check that the length is less than `CF_FILENAME_MAX_LEN` ... it does not check if the length has gone beyond the end of the input buffer.

__Recommendation__: Each and every step of encode + decode should confirm that the process is not reading or writing past the end of the buffer.  Particularly for variable length fields.

",bug,https://github.com/nasa/CF/issues/116
CI_LAB should split message handlers into separate functions,"**Is your feature request related to a problem? Please describe.**
The ""process ground command"" routine in CI_LAB processes some commands ""inline"".  This does not match the current/recommended style which is to put command handling into a separate function.

**Describe the solution you'd like**
Putting each command into a separate function is the preferred CCB style and it improves modularity of the code.

**Additional context**
All CFE core apps the sample_app all implement the preferred pattern.  CI_LAB should be consistent.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/34
Code in CFE TIME fails to compile with strict compiler settings,"When strict compiler flags are used, there are several instances of unused variables in CFE TIME.  These are related to the configuration options (e.g. CFE_TIME_CFG_DEFAULT_TAI) where under some configurations a variable is declared and/or set but not actually used.

The preprocessor macros need to be adjusted such that the variable is not declared unless it is used.",bug,https://github.com/nasa/cFE/issues/54
Construct return status codes from defined flags,"**Is your feature request related to a problem? Please describe.**
Error codes are hardcoded:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L128

**Describe the solution you'd like**
Could construct using defined field values, could utilize macros

**Describe alternatives you've considered**
Leave as-is, full definition makes them easier to find from a status message.  Pattern to comment full value to retain this search capability is fragile.  Questionable benefit of changing at this point since they are all already defined.

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1313
Add test to validate priority-based wakeup on semaphores,"**Is your feature request related to a problem? Please describe.**
OSAL semaphores should implement priority-based wakeup, as opposed to FIFO.  This currently is not validated by any test.

**Describe the solution you'd like**
Should implement a new unit test to confirm that priority-based semaphores are working as expected.  Basic procedure should be something like:

1. Create a semaphore with value 0
2. Create a low priority task which blocks on the semaphore
3. Create a high priority task which also blocks on the semaphore
4. Give the semaphore
5. Confirm only high priority task woke up, low priority still blocked
6. Give the semaphore again
7. Confirm low priority task woke up

**Additional context**
This test depends on actual task priorities being set in the OS scheduler, which may not happen when running as a normal user and using OS_CONFIG_PERMISSIVE_MODE option.  This test would have to be bypassed in that case.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1059
Add CFE_UtAssert macros to support tests where status is not predictable,"**Is your feature request related to a problem? Please describe.**
The typical method of using `UtAssert_INT32_EQ` to validate the result of a CFE call will both invoke the function and check the result in a single macro.  However, this requires advance knowledge of what the result is _supposed to be_, before the call is made.

In some functional test circumstances, particularly where the test is not being run in a clean/isolated environment, it may not always be feasible to predict the ""correct"" return code from an API call before it is made.  For instance, there may be cases where a set of return values are acceptable, or the correct value depends on another aspect of system state that isn't known beforehand.

A test case may handle this currently by using a stack variable, for instance:

```
CFE_Status_t Status;

Status = CFE_SB_CreatePipe(&Pipe, ...);

<check other system state....determine that result should have been SUCCESS>

UtAssert_INT32_EQ(Status, CFE_SUCCESS);
```

While this works, the test log entry will only show the check for `Status == CFE_SUCCESS`, it will not show the full function call that was tested here (`CFE_SB_CreatePipe(&Pipe, ...)`).  To make the logs most useful, this should show the full function call that was made, and that it was CFE_SUCCESS (the fact that the assertion was retroactive doesn't really matter).

Of course this can be done with the free-form `UtAssert_True` macro, but that requires the programmer to repeat the text of the function call, and is subject to getting stale/incorrect or cut/paste errors as any ""repeated"" info always is.

**Describe the solution you'd like**
Implement CFE UtAssert macros that decouple the function call from the expected return status value, so the test case can call the function and then retroactively/separately determine what the correct result should have been.

The CFE UtAssert library can temporarily hold the status in a temp variable.  This makes it simpler for the programmer to use, avoids issues with repeating the info, keeping things honest.  The use pattern would be:

```
/* call CFE_SB_CreatePipe() but do not actually assert specific status immediately */
CFE_UtAssert_STATUS_STORE(CFE_SB_CreatePipe(&PipeId[NumPipes], 10, PipeName));

<check other system state....determine that result should have been SUCCESS>

CFE_UtAssert_STATUS_WAS(CFE_SUCCESS);
```

With this pattern, the assert library holds the full text of the function between the store and assert, so it can be logged in the same format as UtAssert_INT32_EQ does, and not require the programmer to repeat it, or jump through other hoops to make sure that the call gets into the test log as it should.

**Describe alternatives you've considered**
Leave as is, but this imposes burdens on the programmer for corner cases (by repeating info unnecessarily, and having to be explicitly concerned with writing it to the test log to make the test count) and/or makes tests more fragile by repeating info (after cut/paste/move the text of the copy can get out of sync with the real call).  Having a false/incorrect log is often worse than not having a log at all.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1815
Data pointer argument to CFE_ES_CalculateCRC() should be const,"Since CFE_ES_CalculateCRC() does not modify the data passed into it, the pointer should be declared ""const"" in the prototype.

This will not affect any existing usage of the function, but it will allow usage in areas where the data is already ""const"".",bug,https://github.com/nasa/cFE/issues/52
Update copyright for cFE 6.7 release,"**Is your feature request related to a problem? Please describe.**
Copyright update (comment change only)

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/ci_lab/issues/25
Update comments/documentation in the example targets.cmake file,"The `targets.cmake` file that is included as a sample has some documentation that is incomplete/outdated.  New features have been added since this file was originally written.
",bug,https://github.com/nasa/cFE/issues/327
Squash static analysis (CodeQL) uninitialized variable warning,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Code snips**
https://github.com/nasa/SC/pull/55/checks?check_run_id=11949908681
![image](https://user-images.githubusercontent.com/9024662/224636936-1ad8d906-11e0-4a81-85dc-643e239fd2b7.png)

**Describe the bug**
`ListCmdTime` variable triggering CodeQL (potentially) uninitialized variable warning on some PRs.
CodeQL is apparently unable to confirm if `ListCmdTime` is assigned a value in all execution paths (i.e. if the top while block will always execute at least once).

**Expected behavior**
Code should compile without any serious static analysis failures.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/SC/issues/76
Add PSP_VERSION creation as part of version.cmake,"PSP build is unique in that it doesn't follow the pattern of apps, cfe, and osal for producing version information (as part of version.cmake).  Consistent build framework is preferred.",non-bug,https://github.com/nasa/cFE/issues/352
cFE Performance IDs are Private Definitions,"Performance identifier definitions should not be ""hidden"" in private header files.  They should be made public in a configuration file.

Attached email thread contains additional information on mission use case for need to change a cFE performance identifier value.",bug,https://github.com/nasa/cFE/issues/215
OS_TimerCreate() callback functions & event messages,"Event messages in callback functions seem to associate the event app ID with timer ID. The first timer created gets a timer ID of zero and events in the callback are get associated with CFE_EVS (APP_ID=0). The second timer gets a TID of 1 so events are associated with CFE_SB (APP_ID=1).

I did not dig through all of the code to prove this and I observed this behavior on a Linux deployment.

",bug,https://github.com/nasa/osal/issues/225
Playback Directory Command - timing bug,"Related to issue #11 

The playback queue is starting to process a new file after the End-of-File (EOF) PDU is sent for an old transaction, while the old transaction isn’t truly finished (and the ‘active transactions’ count decremented) until the ACK-FIN PDU is received. Due to this, one or more transactions can still be active waiting for their ACK-FIN PDU to be received while the playback queue starts a new transaction. If I had to guess, this is a relic of class1 (unacknowledged) transactions which end after the EOF PDU is sent. 

This issue must have gone unnoticed for so long because in most cases it is hidden, as long as your files are reasonably large and your maximum number of simultaneous transactions is greater than 1 (ours is 7). This is because as long as the file is reasonably large, it will take more time to downlink the new file than it will take for the ACK-FIN from the old transaction to be received and fully closed out. Since the playback queue only transfers one file at a time, you’ll only have a maximum of two transactions active at once.

With maximum number of simultaneous transactions set to 7, if you try to download 8 small files via the playback directory command we encounter the issue (and is the case which found this bug in the first place). This is because the files are so small that 7 separate files can send all of their data and hit the ‘EOF’ phase before the first transaction receives its ‘ACK-FIN’ and fully closes out.

Even if the files are quite large, if I set the maximum number of simultaneous transactions to 1 the issue is encountered every time and the second file will fail to download. This is because a new transaction always attempts to start while the old transaction was between the ‘EOF Sent’ and ‘ACK-FIN received’ phases. 

Would it be valuable for me to submit a bug fix to this repository? Unsure if this repository is monitored. 

",bug,https://github.com/nasa/CF/issues/12
CFE ES unit test failures caused by startup sync fix,"The startup sync fix (#71) caused some unit test failures.

This is due to the fact that the counters never get incremented as expected, since this is done by the child thread.  Therefore the verification that the child thread actually started cannot be unit tested.

As an interim fix this check will be removed from the main code. This will make unit tests pass in 6.4.2.  Ironically, this is making the main code slightly less robust in order to appease unit tests.

In the future a unit test ""hook"" function can be implemented for {{{OS_TaskCreate()}}} that imitates the counter increment so the startup verification can be but back in at that time.

",bug,https://github.com/nasa/cFE/issues/105
Remove comment referencing CFE_TBL_ERR_FILE_NOT_FOUND,"**Describe the bug**
Reference to deprecated error code in comments




> Should remove it from here as well
> 
> https://github.com/nasa/cFE/blob/a0c2de62934e61a93bb4282c0fc784cf4be50da9/modules/cfe_testcase/src/tbl_content_mang_test.c#L56

_Originally posted by @zanzaben in https://github.com/nasa/cFE/pull/1859#pullrequestreview-735207143



**To Reproduce**
Inspect `tbl_content_mang_test`

**Expected behavior**
No references to deleted items

**Code snips**
See above 

**System observed on:**
Source code coment

**Additional context**
See #1859

**Reporter Info**
@astrogeco ",non-bug,https://github.com/nasa/cFE/issues/1863
OSAL 4.2 Configuration Guide Updates,"OSAL 4.2 will be delivered with cmake and UT Assert library stubs and hook functions.  The OSAL configuration guide should be updated to provide instruction for using cmake.  The UT Assert library and coverage tests should be mentioned in the ""OSAL source distribution directories"" table under section 2.1.1.",non-bug,https://github.com/nasa/osal/issues/163
Missing Doxygen for function CFE_PSP_SetupReservedMemoryMap,"Missing the Doxygen for function CFE_PSP_SetupReservedMemoryMap
https://github.com/nasa/PSP/blob/e3d28d85a49c849c79f83e7414be65a318a8f834/fsw/pc-linux/src/cfe_psp_memory.c#L649",non-bug,https://github.com/nasa/PSP/issues/336
osal core test is not a good example of how to write tasks,"**Describe the bug**
The `osal-core-test.c` refers to task functions that are actually defined (not just declared) in `osal-core-test.h`

Furthermore, these tasks just implement a tight loop:
https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/tests/osal-core-test/osal-core-test.h#L254-L262

Multiple Problems:
1. Against coding standards to implement code in a header.
2. Same function is defined 20 times.
3. The task has no blocking statement at all, so it spins using 100% cpu after it is started.
4. On some operating systems (e.g. POSIX), unless async task cancellation is enabled this also means the task also cannot be deleted, because it will never execute a cancellation point.

Although the `osal-core-test` program passes and attempts to delete these tasks, in reality they keep running on POSIX and do not actually exit.

**To Reproduce**
View in a debugger after creating + deleting these tasks - the threads are still there.   CPU usage is also very high (e.g. 300%) for the remainder of the test because these tasks are spinning and do not exit.

**Expected behavior**
There is no need to redefine the same function. Recommend to use the `task_generic_no_exit()` function (which already exists) for all of these tasks.  This function also uses `OS_TaskDelay()` so it does not consume max CPU and also this serves as a cancellation point thus allowing the task to be deleted normally.

**System observed on:**
Ubuntu 20.04

**Additional context**
This becomes a bigger issue when #642 is done, as the tasks effectively are un-deletable.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/670
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/105
Clarify acceptable actions on a shared table along with expected patterns and add functional tests,"**Is your feature request related to a problem? Please describe.**
Currently table sharing management requires careful design or restricting the design space to avoid block/priority concerns.

- There isn't a ""read only"" way to get a table address to restrict capability for management to a single ""owner""
- Since update/management can be done by any app with shared access, blocking/priority has to be managed
- Not immediately clear how the locking/sharing is all intended to work together

**Describe the solution you'd like**
Should clarify the sharing design documentation, there's currently ""hints"" in the APIs and a very short section in the cFE Application Developer's Guide but there aren't functional tests that actually implement/exercise all the sharing patterns or a full description of how it's intended to work.

- Clearly describe how unregistering a shared table is expected to work (or not)
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L655-L658

**Describe alternatives you've considered**
Consider additions/simplification to the sharing model like read only access, etc.  Need to tie to requirements, funding, use cases, etc and trade against the additional complexity.

**Additional context**
Code review, see also #1509

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1493
ES - Add Ability to Recreate the RAM Disk via Command (GSFC DCR 21594),"The ES startup creates and initializes the RAM disk. If the RAM disk becomes corrupted there is no ground interface provided to recreate the RAM disk.
 
During GSFC GPM TV testing, a RAM disk corruption was experienced. A processor reset was needed in order to restore the RAM disk to an operational state. See the attached PFR description for more details.",non-bug,https://github.com/nasa/cFE/issues/125
Update EDS based on latest compatibility testing,"**Describe the bug**
The CTF/CCDD JSON files produced by the EDS tool from the XML files (see nasa/EdsLib#44) do not exactly match the current scripts.

**To Reproduce**
Generate JSON products from EDS, then run CTF-based tests using those JSON files, observe mismatch errors

**Expected behavior**
Should run cleanly - the generated JSON files should be fully compatible with the existing JSON files.

**System observed on:**
Test/Validation VM

**Additional context**
This means there are a few cases where the EDS file does not exactly match how it is currently implemented.  Things like missing ""Spare"" bits, or a different width type, etc.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/2310
CPU utilization calculation and Idle task,CPU utilization is currently calculated using an idle task. This can waste power and prevents the processor(s) from entering sleep or other power management states. As part of the SMP implementation this issue should also be addressed.,non-bug,https://github.com/nasa/cFE/issues/290
Add CFE_Status_t conversion macros/functions,"**Is your feature request related to a problem? Please describe.**
Various issues/complexities relative to CFE_Status_t handling:
- #921 
- #1676
- #2010

But there are no conversion wrappers/apis.

**Describe the solution you'd like**
Add CFE_STATUS_C and CFE_StatusToString to support future enhancements to error handling.  Matches OSAL pattern (except OSAL doesn't have OSAL_StatusToString yet).

**Describe alternatives you've considered**
See linked issues.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2110
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/to_lab/issues/113
Add ${ARGN} to add_cfe_coverage_test in arch_build.cmake,"**Is your feature request related to a problem? Please describe.**
Trying to build CF unit tests with additional libraries through add_cfe_coverage_test does not work because ARGN is not added in the target_link_libraries call.  

**Describe the solution you'd like**
Add `${ARGN}` into target_link_libraries call in add_cfe_coverage_test so that additional libraries can be given where necessary.

**Describe alternatives you've considered**
Writing my own coverage test addition for my use case, but just adding the ${ARGN} in add_cfe_coverage_test works, so why re-invent?

**Additional context**
The addition should be transparent to any other calls currently in use; it is opt in only.  ARGN should be empty in current use cases (it could not be, but that is unlikely).

**Requester Info**
Alan Gibson  NASA/GSFC 587
",non-bug,https://github.com/nasa/cFE/issues/1490
Simplify HK_SendCombinedHKCmd and remove stray printfs,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HK/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HK/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Unnecessary variable:
https://github.com/nasa/HK/blob/fbb231ebcdc31c84ab47129adcdff267789fda83/fsw/src/hk_app.c#L397-L406

Stray printfs (leftover debugging?):
https://github.com/nasa/HK/blob/fbb231ebcdc31c84ab47129adcdff267789fda83/fsw/src/hk_utils.c#L156
https://github.com/nasa/HK/blob/fbb231ebcdc31c84ab47129adcdff267789fda83/fsw/src/hk_utils.c#L497

**Describe the solution you'd like**
Clean/remove.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/HK/issues/19
Port VxWorks OSAL to shared/ng OSAL architecture,"This is a follow-on to #28.

The original change set was merged to development branch as of the 2018-10-09 CCB, without yet having an implementation for VxWorks that uses the refactored architecture.

Before the next OSAL release, there should be an implementation for VxWorks using the shared layer, to go with posix-ng and rtems-ng.

",non-bug,https://github.com/nasa/osal/issues/231
Report version and add include Build name and Build number ,"**Is your feature request related to a problem? Please describe.**
 Need a better way to describe versions during development. 
Currently the tool does not report its version when compiled.

**Describe the solution you'd like**
Create a version file (see #4) and use the template in sample_app and other ""version.h"" files throughout the framework.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/tblCRCTool/issues/21
Adjust usage of feature support macros for glibc/posix,"Glibc (de-facto standard C library for GNU/Linux) uses compiler macros to select features from the various C standards out there.

At a bare minimum, the POSIX build currently relies on some features in XPG5 and POSIX.1c (1995).

In order to ensure these are enabled, the osapi.c file #defines ""USE_UNIX98"" immediately before including pthread.h.  This is not the proper way to do this -- USE_UNIX98 (with underbars) is an internal macro defined by the glibc headers based on OTHER macros that were specified.

It should also be done in such a way that all source files adhere to the same general standard (for sanity sake).

== Recommended Fix ==

Use ""XOPEN_SOURCE=600"" across the entire build.  This will enable XPG6 features.  XPG6 adds some more realtime features that are likely to be useful to applications such as this, e.g. clock_nanosleep() and some others.",bug,https://github.com/nasa/osal/issues/55
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/sch_lab is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/sch_lab while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/sch_lab/issues/69
Define and apply naming standard for event ID definitions,"**Is your feature request related to a problem? Please describe.**
Some services include the error type as part of the name of the EID/EventID/Event id, others don't:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/inc/cfe_tbl_events.h#L68
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_events.h#L60

**Describe the solution you'd like**
Define and apply standard naming pattern.  Suggest append either _INFO_EID, DEBUG_EID, ERR_EID, or CRIT_EID to the name.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1532
No null pointer check on TblHandles in CFE_TBL_GetAddresses and CFE_TBL_ReleaseAddresses,"**Describe the bug**
CFE_TBL_GetAddresses does not check that the array of TblHandles is not NULL and will cause a segmentation fault. A similar issue appears to also exist in CFE_TBL_ReleaseAddresses.

**To Reproduce**
Steps to reproduce the behavior:
1. The following line from my fork for #1734 will cause a segmentation fault instead of gracefully returning a CFE_TBL_BAD_ARGUMENT
`UtAssert_INT32_EQ(CFE_TBL_GetAddresses((void ***)&TblPtrs, numValidTbls, NULL), CFE_TBL_BAD_ARGUMENT);`
Whereas when the input TblPtrs is NULL, CFE_TBL_BAD_ARGUMENT is correctly returned.
2. Similarly the following line will cause a segmentation fault from CFE_TBL_ReleaseAddresses
`UtAssert_INT32_EQ(CFE_TBL_ReleaseAddresses(numValidTbls, NULL), CFE_TBL_BAD_ARGUMENT);`

**Expected behavior**
* CFE_TBL_GetAddresses should return CFE_TBL_BAD_ARGUMENT when the pointer TblHandles is NULL.
* CFE_TBL_ReleaseAddresses should return CFE_TBL_BAD_ARGUMENT when the pointer TblHandles is NULL.

**System observed on:**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Reporter Info**
Niall Mullane - GSFC 582 Intern",non-bug,https://github.com/nasa/cFE/issues/1751
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/FM/issues/15
OS_SocketAccept fails,"**Describe the bug**
When using OS_SocketAccept on a stream (TCP) server socket, it fails because the accept code calls OS_ObjectIdGetById() passing a OS_LOCK_MODE_REFCOUNT, but then OS_SocketAccept sees the refcount > 0 and fails out.

**To Reproduce**
Create code (e.g. an app) that creates a TCP socket server and try using OS_SocketAccept() to receive the incoming connections.

**Expected behavior**
OS_SocketAccept should work as expected/documented.

**Code snips**
OS_SockAddr_t Addr;
int Socket = 0, ClientFd;
int32 Status = 0;

OS_SocketAddrInit(&Addr, OS_SocketDomain_INET);
OS_SocketAddrFromString(Addr, ""127.0.0.1"");
OS_SocketOpen(&Socket, OS_SocketDomain_INET, OS_SocketType_STREAM);
OS_SocketBind(Socket, &Addr);
Status = OS_SocketAccept(Socket, &ClientFd, &Addr, 0);

**System observed on:**
Debian 9 64-bit x86

**Additional context**
removing the check for refcount results in expected behavior, OS accept() call should be thread-safe so need not maintain lock through SocketAccept() function.

**Reporter Info**
Chris Knight, NASA Ames",bug,https://github.com/nasa/osal/issues/349
Remove deprecated code (release candidate prep),"**Is your feature request related to a problem? Please describe.**
`OSAL_OMIT_DEPRECATED` elements exist to help with upgrade/transition and reduce frequency of breakage.

**Describe the solution you'd like**
Remove deprecated code for major release.

**Describe alternatives you've considered**
Could tag before removal for any user that would benefit from a ""gentle"" transition.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/770
OSAL unit tests terminate before the console thread prints the results,"**Describe the bug**
Most of the OSAL unit tests terminate before the console thread is allowed to execute and write the results to the console.

**To Reproduce**
Steps to reproduce the behavior:
1. Build with unit tests, i.e. the initial build created using the instructions in the cFS repository.
2. Run the unit tests manually, not with ctest.  ctest hides the console output anyway.

**Expected behavior**
Running osal_core_UT should look like:
```
[BEGIN] PC-LINUX UNIT TEST
OS_printf() - #1 Nominal [ This is the expected stdout output after API call]
OS_printf_enable() - #1 Nominal [This is the expected stdout output after API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output before API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output after test reset]


ut_oscore HAS 167 tests total.
ut_oscore PASSED 135 tests.
ut_oscore FAILED 0 tests.
ut_oscore HAS 5 tests requiring manual inspection.
ut_oscore SKIPPED 26 tests relating to OS-call-failure.
ut_oscore SKIPPED 1 tests not applicable to the platform.
```
Instead, depending on the timing of the target under test, you might see:
```
[BEGIN] PC-LINUX UNIT TEST
OS_printf() - #1 Nominal [ This is the expected stdout output after API call]
OS_printf_enable() - #1 Nominal [This is the expected stdout output after API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output before API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output after test reset]
```

**Code snips**
The easiest fix is to add:
```
    /* Yield to allow the console thread to complete writing to the console. */
    OS_TaskDelay(2000);
```

to the end of the function ""void UT_os_teardown(const char* testSuiteName)"" in file ""ut_os_stubs.c"".  This will ensure the caller thread pends for long enough time (hopefully) for the console thread to release and complete printing to the console.  However, this is not 100% bullet proof since it still relies on the console thread starting and completing the print in the time provided to the OS_TaskDelay() function.  For example, if you are stepping through code with your debugger inside the OS_ConsoleOutput_Impl() function on the last call in the unit test, you have 2 seconds to get whatever information you need to get before the process is terminated.

**System observed on:**
 - VirtualBox virtual machine
 - Ubuntu 16.04
 - OSAL 5.0.3-bv

**Additional context**
Most platforms (all platforms I know of) use a separate, kernel created thread, to print to the console already.  The OSAL provided console thread just adds a third thread to 2 already existing threads.  I'm not sure why the additional thread needed to be added.  But if it wasn't there, this problem is resolved by calling fflush, which pends until the output has successfully been sent out.  Aside from making the OSAL more complicated, I'm not sure what problem the new console thread is solving.

**Reporter Info**
Mathew Benson
Owner
Windhover Labs, LLC

",bug,https://github.com/nasa/osal/issues/512
"String checks in UT should check only the spec/format string, not the fully rendered text.","**Describe the bug**
As the comment in the code suggests, the ""fully-rendered"" text is really a derived output that depends on a lot of external factors.  It isn't a direct output of the unit under test.

As an example, the unit test is currently getting thrashed around due to a message ID check due to the fact that there is no specific text that is always ""correct"" here.  

It broke when updated to 32 bit (#87), attempted to fix in #94, which only broke the original case (v1 header).

**To Reproduce**
Run unit test using v1 (16-bit) message IDs.
**Currently failing in the integration-candidate branch**

**Expected behavior**
Tests should pass.

**System observed on:**
Ubuntu 20.04 and Travis-CI (current integration candidate).

**Additional context**
Recommendation is to only check the SPEC STRING (`0x%x`) which will be the same regardless of what the ""invalid msgid"" value actually is.  That's all that really matters.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/sample_app/issues/97
"Refactor ""target_config.c"" logic to avoid #include of data fragments","**Is your feature request related to a problem? Please describe.**
The content of the various CONFIGDATA global data structures is dynamically generated from a combination of build scripts, some which run at prep/generation time and some which run at build time.  

The pattern currently used here is that the scripts generate ""fragment"" data files that only contain the dynamic content, without any C declarations or any other syntax.  This is then paired/combined with the `target_config.c` file which is a regular version-controlled file that has the basic structure and declarations (i.e. all the non-dynamic bits) and uses `#include` to pull in the data fragments where needed (i.e. a ""fill-in-the-blank"" approach).  

This works well but there are some rules against using the `#include` directive with anything other than an normal/conventional fully formed C header file (i.e. it has `.h` extension, fully self contained, syntactically correct, standalone, include-able by any C source file at will).   So a ""dynamic data fragment"" file which is implemented here doesn't meet the criteria.

**Describe the solution you'd like**
Have the build system generate fully-formed source files before passing to C compiler in some way.

Currently evaluating/considering several approaches or combination thereof.

1. Put more of the non-dynamic ""C"" content (structure) into CMake `configure_file` templates, generating a separate but fully-resolved .c source for each object that has dynamic content.
2. Pass the file through another explicit macro-processing step (such as C preprocessor or m4) before compiling (basically introduce another layer of indirection) to generate a final file.

Either way the result should be a fully formed .c/.h file without any `#include` in its body - as all data items should be ""filled in"" already - which is then built and linked as the current file is.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1170
Update CFE_ES_SYSTEM_LOG_SIZE Verify to Allow Larger Sys Log Files (GSFC DCR 22684),The ES verify.h file will only allow a max sys log file of 16384 bytes.  There is no documented rational for this limit. ,bug,https://github.com/nasa/cFE/issues/131
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen warnings for `multiple @param documentation settings`

**Describe the solution you'd like**
Resove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CS/issues/42
vxworks OS_SymTableIterator() name arg too long,"The OS_SymTableIterator() name arg could be too long and could be strncpy/copied without a terminating null into SymbolRecord_t's char SymbolName[OS_MAX_SYM_LEN];.  This unterminated null would then be written into the OS_sym_table_file_fd.

See osloader.c, ln 189.

Recommend: an explicit name length check: 
{{{
if (strlen >= OS_MAX_SYM_LEN) { 
return(FALSE);
} 
}}}
before strncpy.

(Discovered as part of #45 coverage testing.)",bug,https://github.com/nasa/osal/issues/100
os_dirent_t.FileName uses OS_MAX_PATH_LEN for array size,"typedef struct
{
   char FileName[OS_MAX_PATH_LEN];
} os_dirent_t;

It's probably the case that FileName should be of OS_MAX_FILE_NAME size instead.

The use case is to build a filename from a path and a filename from an os_dirent_t. This path, including the filename, would be OS_MAX_PATH_LEN.",non-bug,https://github.com/nasa/osal/issues/344
OSAL not reporting correct error string if clock_getres() call in OS_Posix_TimeBaseAPI_Impl_Init fails,"https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/os/posix/src/os-impl-timebase.c#L228

From clock_getres man pages:
> clock_gettime(), clock_settime() and clock_getres() return 0 for success, or -1 for failure (in which case errno is set appropriately).

The return value of `clock_getres()` is just 0 or -1. If it returns -1 in the event of a failure, it sets `errno`, so the `OS_DEBUG` line should use `strerror(errno)`, not `strerror(status)`, otherwise it always reports:

```
OS_Posix_TimeBaseAPI_Impl_Init():222:failed in clock_getres: Unknown error -1
```

",bug,https://github.com/nasa/osal/issues/686
Consolidate bit manipulation (and other general) macros,"**Is your feature request related to a problem? Please describe.**
Various services define various bit manipulation or other general macros, repeated/inconsistent logic.

Bit manipulation:
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_sb.h#L114-L120

https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_es.h#L60-L63

https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/ccsds.h#L66-L73

OS_PRINTF:
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_es.h#L51-L58

https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_evs.h#L53-L60

**Describe the solution you'd like**
Better scoping, consolidation into general bit manipulation macro header

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/844
Ut Assert argument name association,"**Is your feature request related to a problem? Please describe.**
UT assert passes ""static"" function arguments to hook functions as an array of opaque pointers, based on the order of calls to the `UT_Stub_RegisterContext()` API inside the stub.  This is basically equivalent to argc/argv on a command line.

This requires test cases to ""know"" which position the argument they need to access is in, and basically hard-code that number.  This could become more problematic if hook functions are used more frequently.

**Describe the solution you'd like**
Offer a variant of `UT_Stub_RegisterContext()` that also stores the argument name, and offer a ""getter"" that a hook function can use in order to get by that name.

Registering and retrieving values by name will provide greater stability as the APIs and test cases evolve over time.

The downside is that its slower and uses more memory to look up based on name, but that doesn't matter much for UT.

**Describe alternatives you've considered**
Leave as is using number/sequence based args.  It works but concerned it's too easy to get out of sync.

**Additional context**
Could also use some macros to make both the register (stub-side) and get (hook-side) operations a little more user-friendly.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/479
select-test fails if network isn't included,"**Is your feature request related to a problem? Please describe.**
select-test hung when run with all the include options being false, suspect it's due to OSAL_CONFIG_INCLUDE_NETWORK

**Describe the solution you'd like**
Select test should handle either configuration (check for OS_ERR_NOT_IMPLEMENTED and skip tests that don't apply)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/798
Avoid using aux_source_directory,"**Is your feature request related to a problem? Please describe.**
The example build script should __not__ use `aux_source_directory()` as it is not well defined/controlled behavior - it depends on files that existed at the time ""prep"" was run.

**Describe the solution you'd like**
`CMakeLists.txt` should list the app source files explicitly.  This is recommended CMake practice for most normal build cases.

**Additional context**
This is a prime example of why `aux_source_directory()` is discouraged, because in this case it incorrectly pulled in the ""sample_table.c"" source file into the app binary.  This is incorrect; the table file is built separately by the table generator script.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sample_app/issues/41
Create accessor functions for Counter resources,"**Is your feature request related to a problem? Please describe.**
The generic counter API uses a zero based ID to directly index an array

**Describe the solution you'd like**
Make the ""generic counter"" API follow the same pattern as was done for apps and tasks in #797 

**Additional context**
This is for consistency and future development.  All resource management should follow this pattern.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/870
CFE_ES_ClearCDS: check status before while loop to zero,"**Is your feature request related to a problem? Please describe.**
Status not checked from CFE_ES_CDS_CachePreload:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L534

**Describe the solution you'd like**
Analyze, check status if needed otherwise document why not for future reference

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1338
additional ut699 changes from trac-10,"Ticket for the purpose of building a change set, for review, from the existing trac-10 ticket.",bug,https://github.com/nasa/PSP/issues/58
Improve commenting throughout CF v3.0,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1194] Improve commenting throughout CF v3.0
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Mon Jul 20 13:32:23 2020

_Original Description_:
CF v3.0 needs improved commenting throughout. Specifically:  
  
- file comments in every file describing the purpose of the file  
- explanations and limits for all configuration parameters  
- ensure that all comments are accurate",non-bug,https://github.com/nasa/CF/issues/18
Remove backwards compatibility provided by _ENHANCED_BUILD_,"No longer supporting classic build (doesn't work with next-gen osal either), remove old backwards compatibility support and the associated _ENHANCED_BUILD_ flag.",bug,https://github.com/nasa/cFE/issues/349
Typo in README.md,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
First section header lacks space between `#` and `core Flight System (cFS) CFDP Application (CF)`

**To Reproduce**
Observe that ""#core Flight System (cFS) CFDP Application (CF)"" is literal and does not look like a section header

**Expected behavior**
""core Flight System (cFS) CFDP Application (CF)"" looks like a section header

**Code snips**
https://github.com/nasa/CF/compare/main...jhnphm:patch-1

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
John N Pham, Northrop Grumman",non-bug,https://github.com/nasa/CF/issues/251
Automate Changelog for README,"**Is your feature request related to a problem? Please describe.**
When merging an integration candidate branch into main, the author must manually update the changelog for the README.md file. This can be automated to reduce time and possible missed pull requests.

**Describe the solution you'd like**
Automate the creation of a changelog and use it to replace/update the existing README.md file. An example can be found in cFS, https://github.com/nasa/cFS/blob/main/.github/workflows/changelog.yml, but it will need to be tweaked so that only merged PRs are included. 

**Describe alternatives you've considered**
Keep as is.

**Additional context**
Can use GitHub actions or GitHub cli like gh.

**Requester Info**
Ariel Adams, MCSG Tech
",non-bug,https://github.com/nasa/cFE/issues/2149
Add search option for relating message id to route,"**Is your feature request related to a problem? Please describe.**
Core implementation is message id == message key, leading to a large, sparse message table to get the route index.

**Describe the solution you'd like**
Eliminate message table.  Order routing table by ID and binary search, or other search options (optimal solution may depend on configured sizes such as number of supported message IDs and number of supported routes).

**Describe alternatives you've considered**
See also #929, hash.

**Additional context**
Allowed by #928

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/930
Travis is truncating logs again (repeat of #79),"**Describe the bug**
#79 repeat... the full log doesn't always get retained for review.

**To Reproduce**
Observe a travis log... for example https://travis-ci.com/github/skliper/cFS/jobs/389476945

**Expected behavior**
Shouldn't trucate

**Code snips**
Previously was ""resolved"" by adding:
https://github.com/nasa/cFS/blob/068cd8ca103bb5dd0636d43f31ccdec992694d91/.travis.yml#L139-L141

**System observed on:**
 - Travis-ci.com

**Additional context**
#79 

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFS/issues/141
Clean up unused local variables,"Compiling with -Wall complains about unused local variables in some functions.  This will cause the build to fail if -Werror is also used.

This change is a prerequisite to turning on strict compiler settings in the default build.

",bug,https://github.com/nasa/cFE/issues/58
mqueue test program,OSAL should include a simple mqueue test program to validate that the user has the correct settings and permissions to create/open/close/delete mqueues. Often users stumble on mqueue configuration and it is more difficult to diagnose when it's wrapped in the entirety of OSAL/cFS.,non-bug,https://github.com/nasa/osal/issues/229
SB Unit test failure on PowerPC target,"When reviewing the unit test results for the 5 test systems for the CFE 6.6 release, there was one unit test failure case.  On the 32-bit powerpc test target, this unit test failure was observed:

{{{
[ FAIL] 13.018 sb_UT.c:10406 - CFE_SB_MessageStringGet - Destination size = 0
}}}
",bug,https://github.com/nasa/cFE/issues/252
"CFE_ES_SysLogReadData requires synchronization, add _unsync to name","**Is your feature request related to a problem? Please describe.**
`CFE_ES_SysLogReadData` requires external synchronization:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_syslog.c#L292

**Describe the solution you'd like**
Add _unsync to name to match pattern

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1358
vxworks OS_FS_GetErrorName() errors,"The vxworks OS_FS_GetErrorName() in osfilesys.c doesn't check for a null pointer argument.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].
",bug,https://github.com/nasa/osal/issues/113
Update directory diagrams in application developer guide,"**Is your feature request related to a problem? Please describe.**
After PR #1203 the directory structure diagrams in the user guide are in need of an update.  Only the text was updated in that PR.

**Describe the solution you'd like**
Diagrams should be updated to match the text.

**Additional context**
See #1203

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1216
Incomplete coverage test for src/fs,"**Is your feature request related to a problem? Please describe.**
Current coverage 91.3%

Missing coverage for the following: cfe_fs_decompress.c

FS_gz_eat_header_Reentrant
```
     214           2 :                 if ( (flags & CONTINUATION) != 0 ) {
     215           0 :                         NEXTBYTE();
     216           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     217           0 :                         NEXTBYTE();
     218           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     219             :                 }
     220             :                 
     221           2 :                 if ( (flags & EXTRA_FIELD) != 0 ) {
     222             :                         uint32 len;
     223           0 :                         len  = NEXTBYTE();
     224           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     225           0 :                         len |= NEXTBYTE() << 8;
     226           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     227           0 :                         while (len--) {
     228           0 :                                 NEXTBYTE();
     229           0 :                                 if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     230             :                         }
```

```
     251           0 :                         keep_going = true;
     252           0 :                         while ( keep_going ) {
     253             : 
     254             :                                 /* Get the next byte */
     255           0 :                                 thisByte = NEXTBYTE();
     256             : 
     257             :                                 /* Header failure when end of file is reached or a read failure occurs */
     258           0 :                                 if ((thisByte == EOF) || (State->Error != CFE_SUCCESS)) return CFE_FS_GZIP_READ_ERROR_HEADER;
     259             : 
     260             :                                 /* End of string was found */
     261           0 :                                 if (thisByte == 0) keep_going = false;
```

FS_gz_huft_build_Reentrant

```
     399           0 :                 *m = 0;
     400           0 :                 return CFE_SUCCESS;
```

```
     529             :                         {
     530           0 :                                 return CFE_FS_GZIP_BAD_CODE_BLOCK;
```

```
     583           0 :                 State->bk -= 8;
     584           0 :                 State->inptr--;
```

`     634           0 :         else               res = CFE_FS_GZIP_BAD_CODE_BLOCK;    `

`     689           0 :                  return CFE_FS_GZIP_INDEX_ERROR;`

```
     703           0 :             State->outcnt = w;
     704           0 :             FS_gz_flush_window_Reentrant(State);
     705           0 :             w = 0;
```

`     736           0 :                   return CFE_FS_GZIP_INDEX_ERROR;`

FS_gz_inflate_dynamic_Reentrant

```
     928           0 :          NEEDBITS(7);
     929           0 :          j = 11 + ( (uint32)b & 0x7f );
     930           0 :          DUMPBITS(7);
     931           0 :          if ( (uint32)i + j > n ) return CFE_FS_GZIP_BAD_DATA;
     932           0 :          while (j--) ll[i++] = 0;
     933           0 :          l = 0;
```

FS_gz_inflate_stored_Reentrant

```
    1053           0 :         n = ( (uint32)b & 0xffff );
    1054           0 :         DUMPBITS(16);
    1055             : 
    1056           0 :         NEEDBITS(16);
    1057           0 :         if ( n != (uint32)( (~b) & 0xffff) )  return CFE_FS_GZIP_BAD_DATA;    /* error in compressed data */
    1058           0 :         DUMPBITS(16);
    1059             : 
    1060             : 
    1061             :         /*  read and output the compressed data */
    1062           0 :         while (n--) 
    1063             :    {
    1064           0 :                 NEEDBITS(8);
    1065           0 :       State->window[w++] = (uint8)b;
    1066           0 :                 if ( w == WSIZE ) 
    1067             :       {
    1068           0 :                 State->outcnt = w;
    1069           0 :                 FS_gz_flush_window_Reentrant(State);
    1070           0 :                 w = 0;
    1071             :                 }
    1072           0 :                 DUMPBITS(8);
    1073             :         }
    1074             : 
    1075             :         /*  restore the globals from the locals */
    1076           0 :         State->outcnt = w;                                   /* restore global window pointer */
    1077           0 :         State->bb     = b;                                   /* restore global bit buffer */
    1078           0 :         State->bk     = k;
    1079             : 
    1080           0 :         return CFE_SUCCESS;
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/470
CFE_TBL_ERR_FILE_NOT_FOUND error defined but not used,"**Is your feature request related to a problem? Please describe.**
This is documented as a return code from `CFE_TBL_Load` however this function actually returns `CFE_TBL_ERR_ACCESS` when it cannot open the file.  This ""file not found"" status code is not used- and it cannot be used - because OS_OpenCreate does not really differentiate between the file not existing and existing but not having permission to open it.

**Describe the solution you'd like**
Remove unused status code

**Additional context**
Found as part of scrub in #1724

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1858
"Remove ""debug"" build in CodeQL workflow","From comment in #165

> release test would be sufficient in my mind... always with OMIT_DEPRECATED
>
_Originally posted by @skliper in https://github.com/nasa/cFS/pull/165#r557700506_",non-bug,https://github.com/nasa/cFS/issues/178
Remaining alignment warnings in unit test,"**Describe the bug**
There are a few remaining warnings in the unit test stubs and test cases when compiling on an architecture that has strict alignment requirements.

**To Reproduce**
Build with ENABLE_UNIT_TESTS=true on a platform that requires strict alignment (e.g. SPARC, MIPS, etc).

**Expected behavior**
Should compile cleanly

**Code snips**
Example error (first one to appear in my build):
```
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_es_stubs.c: In function ‘CFE_ES_GetPoolBuf’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_es_stubs.c:420:23: error: cast increases required alignment of target type [-Werror=cast-align]
             *BufPtr = (uint32 *)PoolPtr;
                       ^
cc1: all warnings being treated as errors
```

**System observed on:**
Ubuntu 20.04, cross compiling for MIPS CPU.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/679
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/LC/issues/19
FM should use CFE_FS_InitHeader,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [X] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [X] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
FM initializes and populates the CFE FS header itself 
This requires FM to understand the details of the header structure and could break if that structure changes.

**Describe the solution you'd like**
FM should instead use the CFE_FS_InitHeader function which is designed to do exactly this.

**Requester Info**
Haven Carlson",non-bug,https://github.com/nasa/FM/issues/52
Consider implementing a common task library,"**Is your feature request related to a problem? Please describe.**
There's things we code over and over again, and where we don't follow standard patterns we probably should.

**Describe the solution you'd like**
Create a common set of utilities for a task (aka a task library) that the core services could also use.

Candidates:
- CFE_Task_VerifyCmdLength(MsgPtr, ExpectedLength, ErrorEventId, ErrorCounter)
  - Could also pass in MsgId and FcnCode so they don't need to be looked up twice?  See #1426 
- CFE_Task_ResetAllCounters - see #1427
- CFE_Task_GetAppTaskName - see #1457 for use in API reporting to provide consistent information
- CFE_Task_FormFullName - see #1412 if a common formation pattern is implemented (vs just naming pattern)
- Generic double-linked list support

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
Observed when implementing #777, duplicated code is all over for a few of the standard task elements.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/994
CFE_ES_ReloadAppCmd References Incorrect Data in Call to CFE_ES_ReloadApp,"In the CFE_ES_ReloadAppCmd function, the wrong data is being passed into the call to the CFE_ES_ReloadApp function.  The CFE_ES_ReloadApp function takes in the AppID and the name of the application file to load.  Instead of the filename being passed in, the name of the application is being passed in.

See code snippet below from cfe_es_task.c lines 1154-1160:

CFE_SB_MessageStringGet(LocalApp, (char *)cmd->Application, NULL, OS_MAX_API_NAME, sizeof(cmd->Application));

        Result = CFE_ES_GetAppIDByName(&AppID, LocalApp);

        if (Result == CFE_SUCCESS)
        {
           Result = CFE_ES_ReloadApp(AppID, LocalApp);",bug,https://github.com/nasa/cFE/issues/191
coverage-vxworks-timebase: potential bug in the test implementation reported by Clang Address Sanitizer on macOS,"**Describe the bug**

When the Address Sanitizer is enabled in macOS / clang, I get the following error in the `OS_VxWorks_TimeBaseAPI_Impl_Init` test. The reproducibility is 100%.

There are two more issues found using Address Sanitizer. I have linked them to this ticket in the form of a comment.

```
17/75 Test #17: coverage-vxworks-timebase .........Subprocess aborted***Exception:   0.32 sec

[BEGIN] UNIT TEST

[BEGIN] 01 SETUP
[  END] No test cases

[BEGIN] 01 OS_VxWorks_TimeBaseAPI_Impl_Init
=================================================================
==32782==ERROR: AddressSanitizer: global-buffer-overflow on address 0x0001018062b8 at pc 0x000101860845 bp 0x7ffeee4446e0 sp 0x7ffeee443ea8
WRITE of size 480 at 0x0001018062b8 thread T0
    #0 0x101860844 in __asan_memset+0xf4 (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x46844)
    #1 0x1017c238b in Osapi_Test_Setup+0x6b (coverage-vxworks-timebase-testrunner:x86_64+0x10000738b)
    #2 0x1017de8c7 in UtTest_Run+0x237 (coverage-vxworks-timebase-testrunner:x86_64+0x1000238c7)
    #3 0x1017d79a8 in OS_Application_Run+0x8 (coverage-vxworks-timebase-testrunner:x86_64+0x10001c9a8)
    #4 0x1017df318 in main+0x178 (coverage-vxworks-timebase-testrunner:x86_64+0x100024318)
    #5 0x7fff20404f3c in start+0x0 (libdyld.dylib:x86_64+0x15f3c)

0x0001018062b8 is located 40 bytes to the left of global variable 'OS_stub_timecb_table' defined in '/Users/stanislaw/workspace/projects/code/osal/src/unit-test-coverage/ut-stubs/src/osapi-shared-idmap-table-stubs.c:42:20' (0x1018062e0) of size 240
0x0001018062b8 is located 0 bytes to the right of global variable 'OS_stub_timebase_table' defined in '/Users/stanislaw/workspace/projects/code/osal/src/unit-test-coverage/ut-stubs/src/osapi-shared-idmap-table-stubs.c:41:20' (0x101806240) of size 120
SUMMARY: AddressSanitizer: global-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x46844) in __asan_memset+0xf4
Shadow bytes around the buggy address:
  0x100020300c00: 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9 f9
  0x100020300c10: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9
  0x100020300c40: f9 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00
=>0x100020300c50: 00 00 00 00 00 00 00[f9]f9 f9 f9 f9 00 00 00 00
  0x100020300c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c70: 00 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9
  0x100020300c80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300ca0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==32782==ABORTING
```

**To Reproduce**

Enable Address Sanitizer in the root CMakeLists.txt.

```
add_compile_options(""-fsanitize=address"")
add_link_options(""-fsanitize=address"")

#add_compile_options(""-fsanitize=thread"")
#add_link_options(""-fsanitize=thread"")

#add_compile_options(""-fsanitize=undefined"")
#add_link_options(""-fsanitize=undefined"")
```

Run the tests, including the 

**Expected behavior**

I suspect a memory management error that needs to be investigated. When the issue is fixed, the Address Sanitizer should report no issues.

**Code**

`–`

**System observed on:**
 - Hardware Mac
 - OS: macOS Big Sur
 - Versions https://github.com/nasa/osal/pull/1161

**Additional context**

`–`

**Reporter Info**

Stanislav Pankevich (Personal contribution)
",bug,https://github.com/nasa/osal/issues/1163
Add unsubscribe test case to cover #862,"**Is your feature request related to a problem? Please describe.**
#862 looks like it could have resulted in a seg fault, fixed in #865
 Unsubscribe after no subscriptions are left...

**Describe the solution you'd like**
Add test case.

**Describe alternatives you've considered**
None.  Should add test to confirm code works.

**Additional context**
#862 #865 

**Requester Info**
Jacob Hageman - NASA/GSFC
@CDKnightNASA ",non-bug,https://github.com/nasa/cFE/issues/873
Clean up OSAPI prototypes,"There are still several functions, mainly in the filesystem area, where input string parameters are missing the `const` qualifier.

These prototypes should be fixed.  Note that adding `const` typically will not affect user code, as it is OK to pass non-const into const, just not the other way.

This will fix warnings on the CFE side.
",bug,https://github.com/nasa/osal/issues/212
"Documentation deployment is being skipped as part of duplicate check, documents stale","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFS/tree/gh-pages, documents are months stale.

**Describe the solution you'd like**
Always run the PDF generation and deployment on a push to main on github.

**Describe alternatives you've considered**
None

**Additional context**
#249 - possible race in deployment

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @ArielSAdamsNASA @astrogeco ",non-bug,https://github.com/nasa/cFS/issues/286
Update CFE_FS_InitHeader to to Handle Error/Invalid Length Conditions,"The CFE_FS_InitHeader API function should perform checks on the header information being passed into the function and return an appropriate error code.  See Ticket #37 for additional details.

cFE services that make calls to this API should be updated to handle the error code.",non-bug,https://github.com/nasa/cFE/issues/69
CS CRC values may lead to confusion,"The CS application relies on the CFE_ES_CalculateCRC function to report the CRCs that it calculates. However, this function calculates the CRC as an int16 value and returns that value as a uint32 value. This causes the sign bit of the int16 (bit 15) to be propagated to the upper 16 bits of the uint32. If this bit is set, it can cause confusion since a CRC of 0x845E would result in the CS application having a value of 0xFFFF845E.

Imported from GSFCCFS-929",bug,https://github.com/nasa/CS/issues/22
TestReadWriteLseek has off by one error,"**Describe the bug**
TestReadWriteLseek calls strlen but fails to account for null terminator, causing garbage characters to be written to test log

**To Reproduce**
Build and run file-api-test
Depending on the contents of memory, bogus characters may be written to build/[arch]/default_[cpu]/Testing/Temporary/LastTest.log

**Expected behavior**
Valid characters in LastTest.log

**Code snips**
Should be `size = strlen(buffer)+1`
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/tests/file-api-test/file-api-test.c#L333

**System observed on:**
Linux

**Reporter Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/osal/issues/761
Resolve signed/unsigned comparison warnings,"**Is your feature request related to a problem? Please describe.**
Enable -Wsign-compare and observe warnings.

From code reivew:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1056

**Describe the solution you'd like**
Resolve these

**Describe alternatives you've considered**
None

**Additional context**
Code review, specific case of #1307

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1332
Replace if's with table and loop in `CFE_TIME_GetClockInfo`,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_GetClockInfo` could just be a table/loop instead of individual `if`'s:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_api.c#L204-L288

**Describe the solution you'd like**
Simplify with table/loop

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1534
CFE_ES_ScanAppTable() possible race conditions,"The `CFE_ES_ScanAppTable()` is called from the ES message processing thread, but it does not lock the global ES data structure when reading/writing from the global data.

ES software bus command messages are safe because this function is called by the same thread that is processing those messages, therefore concurrency is not possible here.

But other functions, like `CFE_ES_DeleteApp()` and `CFE_ES_ReloadApp()` are part of the public API and these also update the same fields within the app state data structure that `CFE_ES_ScanAppTable()` is reading.  `CFE_ES_RunLoop()` can also modify fields within this structure and this is called by pretty much every app in the system.

This issue was noted while reviewing the fix for a similar issue in #279.
",bug,https://github.com/nasa/cFE/issues/295
Module list is duplicated/hard coded so can't be modified,"**Is your feature request related to a problem? Please describe.**
Part of the intent of modules was to be able to replace them.  Hard-coding of the module list at:
https://github.com/nasa/cFE/blob/eaa343c2e5d457f7d04b65ada8881b24e4fb46bc/modules/core_api/CMakeLists.txt#L18

defeats this capability.

**Describe the solution you'd like**
Define the module list in a way it can be modified/customized by configuration.

**Describe alternatives you've considered**
None

**Additional context**
Currently breaks message header customization.

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping - @excaliburtb",non-bug,https://github.com/nasa/cFE/issues/1287
MM command handlers cast away const,"**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/MD/blob/main/CONTRIBUTING.md).
* [ x] I reviewed the [README file](https://github.com/nasa/MD/blob/main/README.md) to see if the feature is in the major future work.
* [x ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Several MM functions cast away const on their command buffer such that they can manipulate it internally.  Buffers should be copied to a local variable prior to manipulation. 

Examples include:
MM_LoadMemFromFileCmd
MM_DumpMemToFileCmd
MM_SymTblToFileCmd

**Describe the solution you'd like**
Audit MM and clean up.

**Requester Info**
Dan Knutsen
NASA Goddard
",bug,https://github.com/nasa/MM/issues/66
DS and FM use the same default subtype,"DS and FM both use ""12345"" as the default file subtype

ds/fsw/platform_inc/ds_platform_cfg.h:#define DS_FILE_HDR_SUBTYPE 12345
fm/fsw/platform_inc/fm_platform_cfg.h:#define FM_DIR_LIST_FILE_SUBTYPE 12345

Imported from GSFCCFS-1735",non-bug,https://github.com/nasa/FM/issues/13
fails to build under Raspbian - alignment of pointers,"**Describe the bug**
Trying to build under Raspbian, sample_app fails with ""cast increases required alignment of target type"" errors.

```
/home/pi/cFS/apps/sample_app/fsw/src/sample_app.c:365:25: error: cast increases required alignment of target type [-Werror=cast-align]
     CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &Sample_AppData.SAMPLE_HkTelemetryPkt);
                         ^
/home/pi/cFS/apps/sample_app/fsw/src/sample_app.c:366:20: error: cast increases required alignment of target type [-Werror=cast-align]
     CFE_SB_SendMsg((CFE_SB_Msg_t *) &Sample_AppData.SAMPLE_HkTelemetryPkt);
```

**To Reproduce**
Build on Raspbian.

**Expected behavior**
Should not cause warnings/errors.

**Code snips**

**System observed on:**
Raspberry Pi Zero W

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/sample_app/issues/38
"Stub for CFE_ES_RunLoop default return is false, should it be?","**Describe the bug**
CFE_ES_RunLoop uses UT_DEFAULT_IMPL which typically returns CFE_SUCCESS, which happens to also equal 0.  CFE_ES_RunLoop returns UT_DEFAULT_IMPL !=0, which causes the default return to be false (0 != 0).  Is that the desired default behavior?

**To Reproduce**
Steps to reproduce the behavior:
1. Write a unit test that expects CFE_ES_RunLoop to succeed by default.
2. Run test, see that is not the behavior.

**Expected behavior**
I had expected 'true' to be the default.

**Code snips**
https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/ut-stubs/ut_es_stubs.c#L1085-L1089

To run a single loop for a unit test, this is required:
`UT_SetForceFail(UT_KEY(CFE_ES_RunLoop), true);`
`UT_SetDeferredRetcode(UT_KEY(CFE_ES_RunLoop), 2, false);`

The main reason this requirement does not make sense is UT_SetForceFail makes one think it should fail, not succeed.

**System observed on:**
RHEL 7.6

**Additional context**
If this is the desired behavior, close and disregard this issue.

**Reporter Info**
Alan Gibson  NASA GSFC/587
",non-bug,https://github.com/nasa/cFE/issues/927
Process cFE Application Developers Guide with Doxygen to allow linkage to code/files,"As discussed at the 5-24-16 CCB meeting (reference cFS Systems Engineering Handbook discussion in the minutes), the cFE application developers guide contains a significant amount of API references.  Indirectly referencing the cFS API's in an external document is prone to error.  The API information should be referenced directly from the code.  It is highly recommended to move the Application Developers Guide to the cFE Doxygen User’s Guide.",non-bug,https://github.com/nasa/cFE/issues/202
OS_chmod is requiring read access ,"**Describe the bug**
If you don't have read access to a file then OS_chmod will not be able to change it. This is most likely caused by chmod opening the file as a way to avoid filename race potential, see the code snip. 

**To Reproduce**
1) Set the file access to write only. 
2) Try to change the access using OS_chmod
3) will get an OS_ERROR

**Expected behavior**
You should be able to change the permissions of a file without read access. 

**Code snips**
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/portable/os-impl-posix-files.c#L201-L206

**System observed on:**
 Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC
",bug,https://github.com/nasa/osal/issues/650
Hardcoded queue depth of 64,"**Describe the bug**
TO_LAB creates a queue depth of 64, which is beyond the limit of some queue implementations.

**To Reproduce**
Run TO_LAB on a system that does not allow a queue depth of 64.

**Expected behavior**
Should not hard code a large queue depth that could be beyond the implementation limit.

**Code snips**
https://github.com/nasa/to_lab/blob/545710c3eb9c3b63821b7cc41489f69da2bb2c30/fsw/src/to_lab_app.c#L179

**System observed on:**
Ubuntu 20.04, after enabling max depth enforcement in OSAL.

**Additional context**
If the goal is to create a deep queue, then use OS_MAX_QUEUE_DEPTH.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/to_lab/issues/36
User/beginner friendly permissive mode implementation,"Failure when running as a normal user due to not setting the permissive mode should be user friendly.  Both for message queues and priorities failures.

Also requesting a command line option, or default to permissive mode for the bundle (should just work out of the box on a linux system for a new user, the bundle is not a flight distribution).  Maybe relate it to SIMULATION=native setting?  Note current way it's set up (as an #undef in default_osconfig.h precludes passing it in as an option). 

Worth discussing since currently the bundle defaults to debug mode with no optimization anyways.  Perhaps permissive mode is also appropriate?  Distribution guide (or whatever documentation is available) could cover transition to more flight-like configuration.",non-bug,https://github.com/nasa/cFE/issues/358
Apply clang-format-10 formatting,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Was formatted w/ clang-format-13, rest of the repos (and CI) still use clang-format-10

**Describe the solution you'd like**
Apply clang-format-10 so CI will pass.

**Describe alternatives you've considered**
None, we can bulk update to 13 in the future.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/210
Add documentation build/deploy workflow,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Build/deploy documentation not in workflow

**Describe the solution you'd like**
Add workflow to build and deploy documentation, see nasa/cFS#451

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFS#451

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/229
Add Compile -Time Assert to Ensure 8-Bit Char Type,"Ticket #156 - JSC: change uint8 to char for strings in interface structures.  This change however, assumes use of the ""char"" data type as an 8-bit type.  This assumption is stated in the cFE doxygen and readme release notes however, this information could be missed by users.  Assumptions should always be explicit.  Adding a compile-time assert would be useful. 

It was recommended by the community CCB to place this assert in the cFE vs. the OSAL since the OSAL is not dependent on the char type being 8-bits.

The cfe_es_erlog.c file also contains a compile-time assert.  It is not a good practice to scatter/hide compile-time asserts across multiple source files.  It is highly recommended to move all cFE compile-time asserts to a separate/shared C file i.e cfe_compiletime_assert.c",non-bug,https://github.com/nasa/cFE/issues/204
Entry Point function name too long,"**Describe the bug**
When trying to run the cfe test runner I got this error 

1980-012-14:03:20.46280 ES Startup: Loading file: /cf/cfe_testrunner.so, APP: TESTRUN_APP
OS_GenericSymbolLookup_Impl():118:Error: CFE_TestRunner_AppM: ./cf/cfe_testrunner.so: undefined symbol: CFE_TestRunner_AppM
1980-012-14:03:20.46306 ES Startup: Could not find symbol:CFE_TestRunner_AppM. EC = 0xFFFFFFFF

It should be trying to use CFE_TestRunner_AppMain but is getting truncated at 19 characters. 
When I shortened the function name it worked fine. 

**To Reproduce**
1. add the start test scripts for the startup test. [Found Here](https://github.com/nasa/cFE/blob/2b8844871d374219cef7c0026e6c43460e11b22b/docs/README_functionaltest.md)
2. Start it. 

**Expected behavior**
It should run the tests. 

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC
",non-bug,https://github.com/nasa/cFE/issues/1223
CCSDS Electronic Data Sheet (EDS) integration,"Integrate Consultative Committee for Spacecraft Data Systems (CCSDS) Electronic Data Sheets (EDS) into the cFS tool chain and code base. An EDS is a formal machine readable (XML) specification of interfaces for both hardware and software components. The primary use cases are to support: 
a) Exchange of unambiguous interface definitions in a standard format between organizations (As CCSDS is an international standards body, organizations includes other international agencies, and industry partners)
b) Automatic generation of interface code, system models, system tests, and mission operational databases
c) Run-time support for Plug-and-Play systems

There are two CCSDS standards documents that specify the schema and terms to be used in the data sheets for cFS
1) XML Specification for Electronic Data Sheets for Onboard Devices and Software Components (CCSDS Blue Book 876.0) 
2) Specification for Dictionary of Terms for Electronic Data Sheets for Onboard Components (CCSDS Magenta Book 876.1)

This ticket is intended to address EDS use at the cFS message layer (Software Bus). Another major use is at the device layer (hardware component) which is the target of major studies at the European Space Agency, and the China Academy of Space Technology. The device layer use case will be a future cFS ticket.

",non-bug,https://github.com/nasa/cFE/issues/207
Return success on multiple OS_API_Init calls,"**Is your feature request related to a problem? Please describe.**
OS_API_Init writes error to the syslog and returns error if called multiple times.  Doesn't really cause any issues, could just write to the syslog and return success.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L115-L119

**Describe the solution you'd like**
Consider returning success

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/871
TblHandle used before validation in CFE_TBL_Load,"**Describe the bug**
TblHandle used before validation

**To Reproduce**
See code snip, invalid handle could cause fault

**Expected behavior**
Validate handle before using

**Code snips**
https://github.com/nasa/cFE/blob/8365a0c69b810e313afe0fe19cdc8987374621e3/fsw/cfe-core/src/tbl/cfe_tbl_api.c#L681-L687

**System observed on:**
In code

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/687
Use a changelog to keep track of changes instead of having them in the Readme ,"**Is your feature request related to a problem? Please describe.**
The version history in the Readme file clutters useful information

**Describe the solution you'd like**
Move the ""version history"" from `Readme.md` to `CHANGELOG.md` and start following this spec: https://keepachangelog.com/en/1.0.0/

**Describe alternatives you've considered**
Move changelog section in the readme to a section at the very bottom of the file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/cFE/issues/782
Add free-run tick counter API to OSAL,"Many times it is simpler and more efficient to deal with a simple free-running tick counter than to deal with the full-blown time API.  On some OS platforms this is as simple as reading an internal timer tick register, but in the worst case it can always be generated from gettimeofday() or whatever the OS_GetLocalTime() already uses.

The OSAL currently has an API call for OS_GetLocalTime() that fills in an OS_time_t structure.  The problem with this structure is that it has two parts, seconds and microseconds, which makes it difficult to add and subtract from other OS_time_t structures.  Even if this were C++ and the code could be ""hidden"" behind an overloaded +/- operator, there is still the issue of an extra function call and checking for overflow which makes it slow and inefficient no matter how you mask it.

It can be argued that the majority of client code that calls functions such as this are really interested in ""relative"" time i.e. the amount of time elapsed since some prior event, as this is how timeouts and error handling are typically invoked.

A simpler way to solve this is via a single ever-incrementing (free-running) integer counter that simply increments each period and wraps around if INT_MAX is reached.  The major advantage is fast and simple add/subtract/compare operations to acquire relative times.  The disadvantage is that it is not easy to display as a human-readable time but this is typically not a problem -- the OS_GetLocalTime works for this.  It also is not able to measure relative times more than 2^31^ ticks (about 24.8 days for 1ms period), but if time spans that long need to be measured then typically a 1-second resolution is preferable anyway and that is already available via OS_GetLocalTime().

As this is a new API call, it will not affect any existing code, it only provides a new call to simplify operations where it is more appropriate than OS_GetLocalTime().

",non-bug,https://github.com/nasa/osal/issues/32
Filesystem should differentiate between FS_BASED (known) and unknown filesystem types,"**Is your feature request related to a problem? Please describe.**
The existing `OS_FILESYS_TYPE_DEFAULT` type is used to cover basically any filesystem mapping that doesn't directly fall into the other categories (e.g. NORMAL_DISK, VOLATILE_DISK, etc).  This includes the traditional `FS_BASED` types, which just map to another existing place in the filesystem.

**Describe the solution you'd like**
The code should provide a unique value for `FS_BASED` maps, which is a valid mapping type, as opposed to not knowing what mapping is being used.

**Additional context**
Distinction between known FS types and unknown types is required for running without Volume Table in BSP.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/456
Remove references to CFE_ES_RegisterApp,"**Is your feature request related to a problem? Please describe.**
As part of nasa/osal#853 and nasa/cfe#1215 the registration APIs are getting fully deprecated and removed.  Applications no longer need to call OS_TaskRegister, CFE_ES_RegisterApp, or CFE_ES_RegisterChildTask.

**Describe the solution you'd like**
Remove references to these functions.

**Additional context**
Will be required with nasa/osal#853 and nasa/cfe#1215

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/to_lab/issues/95
Investigate various VerifyCmdLength implementations and possible common utility,"**Is your feature request related to a problem? Please describe.**
CFE_*_VerifyCmdLength is defined for each service except TBL, and TBL does it slightly differently within CFE_TB_TaskPipe.

**Describe the solution you'd like**
Suggest a common implementation.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/416
Value stored is never used,"As reported by cppcheck style:

Variable % is assigned a value that is never used.

This message is present in 3 files:

{{{
osal/src/os/vxworks6/ostimer.c
osal/src/unit-tests/oscore-test/ut_oscore_task_test.c
osal/src/unit-tests/osloader-test/ut_module.c
}}}

Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.
",bug,https://github.com/nasa/osal/issues/130
String truncation warnings with newer GCC,"**Describe the bug**
Ubuntu has released 20.04 LTS which includes GCC 9.3.0.  When using this compiler it implements a much stricter (and often over-zealous) checking of string ops.

For instance: 
```
In file included from /usr/include/string.h:495,
                 from /home/joe/code/cfecfs/github/tools/elf2cfetbl/elf2cfetbl.c:34:
In function ‘strncpy’,
    inlined from ‘ProcessCmdLineOptions’ at /home/joe/code/cfecfs/github/tools/elf2cfetbl/elf2cfetbl.c:945:13:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 32 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘strncpy’,
    inlined from ‘ProcessCmdLineOptions’ at /home/joe/code/cfecfs/github/tools/elf2cfetbl/elf2cfetbl.c:939:13:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 38 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
```

**To Reproduce**
Build code with default config using GCC 9.3.0, with optimization enabled and full warnings.

**Expected behavior**
Code should build cleanly.

**System observed on:**
Ubuntu 20.04 LTS 64 bit.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/elf2cfetbl/issues/37
Use osal common config to resolve OSAL doxygen references and provide default settings,"**Is your feature request related to a problem? Please describe.**
Path dependencies in cfe on OSAL

**Describe the solution you'd like**
Use the osal-common.doxygen instead, removes cfe dependency on OSAL paths

**Describe alternatives you've considered**
None

**Additional context**
Depends on nasa/osal#1232

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2064
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/188
Resolve uninitialized variable warnings in fsw when compiling unit tests,"**Is your feature request related to a problem? Please describe.**
Static analysis warnings observed relative to fsw when compiling the unit tests based on how the stubs are implemented.

**Describe the solution you'd like**
Fix since it also makes the code more robust to underlying API changes.  Not marking as bug since non unit test analysis does not identify issues.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2101
Posix - optionally disable use of some realtime features for debugging,"It was discovered that the pthreads library supplied by Xilinx for their Microblaze platform does not properly support the PTHREAD_PRIO_INHERIT attribute on mutexes.

The problem occurs when a higher-priority thread becomes blocked on a mutex owned by a lower-priority thread, in this pthreads implementation the higher priority task starts ""spinning"" and ultimately uses 100% CPU, locking out any other process, including the ability to kill or stop the process - reboot is the only recourse.

This bug is a problem in the Xilinx-supplied pthreads library, but until a real fix is done, we need to disable the PTHREAD_PRIO_INHERIT option.  Disabling this feature may also be useful to others during debugging if another user runs into a similar issue.

It was also useful to disable RT scheduling entirely while debugging this problem.

This ticket will add compile-time macros that can be added to the ""osconfig.h"" file that will control these features.  The default (if nothing is defined) will be to use the same features that are currently in place (no change).



",non-bug,https://github.com/nasa/osal/issues/67
OSAL Library API Document Cut and Paste Errors,"In the ""OSAL Library API"" document:
 
1. The description of the OS_write function is a cut and paste of the OS_read function.
 
2. In the description of the OS_BinSemTimedWait"" function, the syntax section states ""OS_BinSemTimeWait"" (without the 'd').",non-bug,https://github.com/nasa/osal/issues/70
CI - build multiple targets,"**Is your feature request related to a problem? Please describe.**
The build process becomes increasingly more complex when building for multiple targets. CI should build for at least two targets to ensure that the build system is functioning properly.

**Describe the solution you'd like**
Have CI create relevant build configuration to build for multiple targets.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFS/issues/95
"Non-constant format string in sprintf call, lgtm warning","**Is your feature request related to a problem? Please describe.**
Recommended issues from lgtm:

elf2cfetbl.c
```
line 2101:
sprintf(Result, Map->String, Key);
--
  | The format string argument to sprintf should be constant to prevent security issues and other potential errors.
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/elf2cfetbl/issues/31
"Local variable hides global in queue-test.c, bin-sem-timeout-test.c, bin-sem-test.c","**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/tests/queue-test/queue-test.c#L56
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/tests/queue-test/queue-test.c#L61

Similar in bin-sem-timeout-test.c and bin-sem-test.c

**Describe the solution you'd like**
Preference is to implement a style such that it's easy to differentiate global vs local variables (local lower case, global camel or similar) or put global variables in a structure (easy to init/clear).

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warning

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/779
New printf warnings in RTEMS build,"**Describe the bug**
A recent change re-introduced some printf type warnings on the 32-bit RTEMS build

**To Reproduce**
Build for RTEMS i686 target
Warnings are issued:
```
[ 65%] Building C object cfe-core/CMakeFiles/cfe-core.dir/src/sb/cfe_sb_api.c.o
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function 'CFE_SB_SubscribeFull':
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:899:9: error: format '%u' expects argument of type 'unsigned int', but argument 6 has type 'uint32' [-Werror=format=]
         (unsigned int)CFE_SB_MsgIdToValue(MsgId), Collisions);
         ^
cc1: all warnings being treated as errors
```

**Expected behavior**
Should build cleanly

**System observed on:**
Ubuntu 20.04 build host for i686-rtems4.11 target.

**Additional context**
This always happens with fixed width types, needs explicit cast when used with printf.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/988
Remove CFE_PSP_MemSet use on addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/HS/issues/27
Build fails with deprecated cFE/OSAL elements removed,"**Describe the bug**
Build fails on 7 undeclared errors:
[Errors.txt](https://github.com/nasa/sample_app/files/4036322/Errors.txt)

**To Reproduce**
make OMIT_DEPRECATED=true prep (requires https://github.com/nasa/cFE/pull/457)

**Expected behavior**
Clean build

**System observed on:**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: mostly 6.7 (+ commit above)

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/35
Add source-routing feature to Software Bus,"**Is your feature request related to a problem? Please describe.**
Normally, software bus messages are fully assembled by clients, then passed to the software bus via e.g. `CFE_SB_TransmitMsg()` for delivery to subscribers.  This routing to subscribers is currently done based on the `MsgId` value that is present in the message - that is, the MsgId is looked up in the routing table, which is in turn translated to a list of destinations (subscribers) to deliver that message to.

**Describe the solution you'd like**
Add an alternative API that allows the message to be routed to destination(s) that are are given explicitly in the API call.  That is, allow the caller to specify the `MsgId` that SB should use to route and deliver the message.  Specifically - this passed-in `MsgId` for routing may be different than the MsgId value contained in the message.

**Describe alternatives you've considered**
N/A

**Additional context**
The use-case for this feature has to do with complex systems with distributed software bus services across many instances of CFE.  In this context the destination may not be directly reachable from the source, but reachable through some sort of intermediate hop.  This feature gives the needed flexibility to work with such an architecture, by allowing messages to be routed to an intermediate delivery assistant app that may not be the final destination of the message.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/2362
Create separate app and libraries directories,"**Is your feature request related to a problem? Please describe.**
Having libraries in the apps folder can be confusing especially for beginners.

**Describe the solution you'd like**
New directory called ""lib"" or ""libs"" where libraries can ""live""

**Describe alternatives you've considered**
Add documentation justifying why it ""makes sense"" to keep libraries in the apps directory",non-bug,https://github.com/nasa/cFS/issues/247
Function prototypes can be moved out of `cs_app.c`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
These function prototypes can/should be moved into the header file. It's a little incongruous with the rest of cFS.
https://github.com/nasa/CS/blob/591d0823eaf1240eafaff67b8f7398a4efd1e956/fsw/src/cs_app.c#L54-L132
I assume the original intent was to keep them private if they were not needed as part of the interface.

**Expected behavior**
Unless these are specifically being kept private, it seems better to keep CS consistent with the other apps and move these to the header file.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/CS/issues/76
CFE_FS subsystem has no tracking information,"**Describe the bug**
All the app core modules are tracked by ES, because apps all have an entry in the global app table.  So one can get an ID and all other expected operations such as name/ID lookups work.

However CFE FS subsystem is not an app, it is a library. As a result, it cannot be identified/queried in any way.

**To Reproduce**
Call e.g. `CFE_ES_GetLibIDByName(&LibId, ""CFE_FS"")` and one will get a result of `CFE_ES_ERR_NAME_NOT_FOUND`, even though the CFE_FS subsystem definitely exists.

**Expected behavior**
The FS subsystem should be registered in the global table as a library, so it can be identified and referred to.

**System observed on:**
Ubuntu 20.04

**Additional context**
Noticed this with extended testing of #28 - queries for CFE_ES, CFE_SB, etc all work, but an attempt to query CFS_FS doesn't work, but it probably should.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/974
Replace OS_FS_* return codes with common definitions,"**Is your feature request related to a problem? Please describe.**
There is mixed use of OS_* and OS_FS_* return codes.   

**Describe the solution you'd like**
Suggest deprecation of the OS_FS_ERR_* defines and switch to common definitions.

**Additional context**
nasa/osal#262
nasa/osal#118

**Requester Info**
Dan Knutsen
NASA/Goddard",non-bug,https://github.com/nasa/cFE/issues/623
Add random number capability for OSAL and UT assert,"**Is your feature request related to a problem? Please describe.**
There are some circumstances where software (validly) needs high-quality random numbers, such as for cryptographic algorithms.  The ISO C standard API is not sufficient, as functions like `rand()` are only psuedo-random and thus are not useful for algorithms where true randomness is necessary.

Furthermore, to support the notion of ""fuzz testing"" the UT assert framework should also have a facility to easily get random numbers.

**Describe the solution you'd like**
Many OS's have a facility to interface with a true hardware random number generator or get much higher-quality random numbers through software by gathering entropy from a local platform-specific source (like keystrokes or mouse movements, or electrical noise from an ADC, etc).

**Describe alternatives you've considered**
Initially, this can be as simple as calling `srand()` once during startup with an unpredictable value, or the system clock tick counter if no real random source is available.  This way, if the application does call `rand()`, the numbers at least will not be the same every time.  

That would be good enough for low impact tasks like fuzz testing and things of that nature, but wouldn't be sufficient for crypto.

**Additional context**
To clarify - fuzz testing described here is a functional test concept, independent of coverage testing.  For coverage testing using UT assert, it is important that the test case follows predictable branches, and thus random numbers should **not** be used there.  Fuzz testing, if implemented, would be done as a completely separate test.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1316
Send a message when new files are completed,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/DS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Send a message when new files are completed in DS.

**Describe the solution you'd like**

- Initialize and send a message using `CFE_MSG_INIT()` and `CFS_SB_TransmitMsg()` respectively. 
- Define a new packet `DS_FileCompletePkt_t` for a single `DS_FileInfo_t` payload.
- Define a new MsgID.
- May need to include logic that will use ""movename"" when DS_MOVE_FILES == FALSE and use ""filename"" when DS_MOVES_FILES == TRUE. 
- This feature will be implemented at the close of a file within the `FileCloseDest()` function.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Justin Figueroa, ASRC Federal
",non-bug,https://github.com/nasa/DS/issues/37
Inconsistent OS_MAX_MODULE limit/documentation,"**Is your feature request related to a problem? Please describe.**
Comments don't match check:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-module.c#L49-L58

**Describe the solution you'd like**
Fix implementation (if needed), fix comments (if needed)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/882
Remove non-CCB controlled PSPs,"sp0 and grut699 are not CCB controlled PSPs, remove them from development branch.

Note techdev branches were created to store the work (both have diverged from current dev)",non-bug,https://github.com/nasa/PSP/issues/91
DS could limit the maximum number of files,"The DS file table could be modified to (optionally) enforce a maximum number of files for each type of file.  This could be useful for missions with file space constraints.

Currently DS will keep creating files until space is entirely consumed.

Imported from GSFCCFS-1173",non-bug,https://github.com/nasa/DS/issues/9
JSC: Audit vxworks6 global table protections,"Originally part of trac #45, isolated for CCB review purposes.

Audit the usage of `semTake()` / `semGive()` calls surrounding global table accesses and adjust where needed.



",bug,https://github.com/nasa/osal/issues/138
Remove old CFE_ARINC653 related tests,"**Is your feature request related to a problem? Please describe.**
Code breaks if CFE_ARINC653 is defined.

**Describe the solution you'd like**
Remove old ifdef'ed out test code

**Describe alternatives you've considered**
None

**Additional context**
Only used in fsw/cfe-core/unit-test/es_UT.c

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/637
Reorder conditions to optimize code,"In SC_ProcessAtpCmd, the following condition could be reordered:
if ((!SC_CompareAbsTime (SC_AppData.NextCmdTime[SC_ATP], SC_AppData.CurrentTime)) &&
            (SC_AppData.NextProcNumber == SC_ATP) &&
            (SC_OperData.AtsCtrlBlckAddr -> AtpState == SC_EXECUTING))


Since SC_CompareAbsTime() is more complex than the next two conditions, put it as the last one to save CPU cycles should any of the simple comparisons fail


Another small optimization: the ""StillProcessing = false"" condition could be moved out of the if and else blocks starting at line 201 in the SC_LoadAts function

Imported from GSFCCFS-1460",non-bug,https://github.com/nasa/SC/issues/8
"EDS: The ES ""LoadLibrary()"" call - avoid duplicates and pass ID","The `CFE_ES_LoadLibrary()` call currently does not check if a library with the same name is already loaded.  It should probably do this, and if a duplicate is found it should return an error code indicating that the library is already loaded.

In the same area, the Library ID should be passed to the init function so any data structures/api calls associated with the library can be properly tracked in case the library is unloaded in the future.",non-bug,https://github.com/nasa/cFE/issues/171
Consider skipping/truncating symbol if name to long,"os-impl-sytab::OS_SymTableIteratro_Impl will exit a symbol table dump if it detects a symbol name that violates the maximum defined length.  This results in an inability to dump the symbol map if a symbol does violate the max length.  Consider skipping the symbol or truncating it + notify user via entry in dump file.

    if (memchr(name, 0, OS_MAX_SYM_LEN) == NULL)
    {
        OS_DEBUG(""%s(): symbol name too long\n"", __func__);
        state->StatusCode = OS_ERR_NAME_TOO_LONG;
        return (false);
    }

path to file: osal/src/os/vxworks/src/os-impl-sytab.c

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/1270
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/MM/issues/15
"Add doxygen dependencies to ""doc-prebuild"" abstract target","**Is your feature request related to a problem? Please describe.**
nasa/cFE#2214 adds an abstract target for dependencies of the documentation build.  Currently OSAL requires generating the file `osal-public-api.doxyfile` before documentation builds are run, so this should be registered as a dependency.

This only affects documentation builds of CFE and CFS apps that in turn include OSAL headers as part of the document.  These are depending on some artifacts that are generated by the OSAL build recipe.

**Describe the solution you'd like**
Add dependencies so that CFE and CFS app documentation builds that refer to OSAL files will work.

**Additional context**
See nasa/CFE#2214 and nasa/CF#344 for more context

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1339
Remove MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",non-bug,https://github.com/nasa/to_lab/issues/4
Incorrect call to OS_ObjectIdCompose_Impl in OS_TimerDelete,"**Describe the bug**
OSAL has an incorrect setting of `first_cb` when deleting timers.

https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-time.c#L432-L436

The second argument to `OS_ObjectIdCompose_Impl()` is a serial number, not a table index.  These are only the same value until table entries start to be re-used, after this they become different, and this will start to fail.  This should really not be using `OS_ObjectIdCompose_Impl()` at all here.

**To Reproduce**
- Create and delete several timebases - at least `OS_MAX_TIMEBASES` - such that table entries start to be re-used.
- Create another valid timebase for the test (do not delete).
- Create at least two timers based on this timebase
- Delete one of the timers.

At this point the ID in the timebase callback ring (`first_cb` member) may refer to an invalid entry - a timebase ID which does not exist.

**Expected behavior**
Should look up the `active_id` from the actual table entry instead - do not re-compose the ID, because `next_ref` is a table index, not a serial number.

**System observed on:**
Ubuntu 20.04

**Additional context**
It is only possible to trigger this after a rather extensive sequence of creating and deleting these resources.  So this is probably unlikely to ever occur in a real system where timers are typically created and run forever.    Should still be fixed though.

This was initially discovered by enforcing type-safety in the `osal_index_t` and `osal_id_t` - during this scrub it revealed that this was passing an `osal_index_t` to a function which is supposed to accept a serial number.  So type safety = good.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/649
Simplify Function Pointer Manipulations,"There are a number of places within the CFS Projects where the usage of Function Pointers is somewhat obfuscated by the inclusion of redundant operators. Removing those operators can improve the clarity of the code.

The redundancies are based on code that, when written, did not properly base itself on the following aspects of Function Pointers in the C programming language.

1. Function names decay into Function Pointers in the same way
   that Array names decay into pointers to their first elements,
   which means that an `&` operator is redundant when setting a
   pointer to point at a function. For the classical example of
   this, see most `qsort` examples, where no `&` is applied to
   the comparison function when passing it as the last argument,
   which has type ''pointer to function...''

2. The function call operator `(`''args''`)` operates on a
   function pointer -- so every function call you see actually
   is invoking the above decay semantics. This means that
   the `*` operator is ''not'' needed when calling a function
   via a function pointer. Happily, this also often means that
   you also do not need an extra level (or two?!) of parentheses
   to asure that the `*` is applied to the function pointer and
   not to the return value.

3. Calling a function pointed to by a structure member is a
   very common operation, and with the above in mind, note that
   there is no parsing or evaluation order ambiguity; no extra
   parentheses are required to assure that `.` and `->` and the
   function call operator are evaluated in the proper order.

My task -- embodied in this ticket -- is to seek out cases in
the CFE source code where redundant operations are applied
to function pointers (at assignment sites ''and'' at call sites),
and provide recommended changes to improve clarity.

Specific examples will accumulate in the Comments below.

Ticket to be closed when my scan of the project is complete,
and all call sites have been resolved (whether the resolution
is to improve them now, file a ticket for later improvement,
or where we will be leaving the code unchanged).

''(This also makes the code robust against the rare but troublesome
case where an external function changed from a function to
a function pointer ... we may never do this, but it is always
good to foster good code hygene.)''",non-bug,https://github.com/nasa/cFE/issues/143
FM `int32` return codes and variables should be converted to `CFE_Status_t`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
FM has quite a few return codes (as well as local `status`/`return` variables which hold CFE return codes) that can be easily converted over to the `CFE_Status_t` typedef.

**Expected behavior**
Use the more expressive `CFE_Status_t` and improve consistency with cFS.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/FM/issues/99
Shift overflow compiler warning in endian macros,"**Is your feature request related to a problem? Please describe.**
```
cfe/modules/core_api/fsw/inc/cfe_endian.h:66:12: error: result of '13398 << 24' requires 39 bits to represent, but 'int' only has 32 bits [-Werror=shift-overflow=]
((((n) << 24) & 0xFF000000) | (((n) << 8) & 0x00FF0000) | (((n) >> 8) & 0x0000FF00) | (((n) >> 24) & 0x000000FF))
```

From:
https://github.com/nasa/cFE/blob/10898c9b1292be87cd851fb58eeda253dfdc4358/modules/core_api/fsw/inc/cfe_endian.h#L64-L66

**Describe the solution you'd like**
Mask, then shift.

**Describe alternatives you've considered**
None

**Additional context**
- #1209 

Or really transition to serializer/deserializaer concepts.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2118
JSC: Update CFE unit tests,Roll-up of all JSC changes to the CFE unit tests,bug,https://github.com/nasa/cFE/issues/162
If you get a PATH_MAX undefined issue...,"The inclusion of the PATH_MAX has introduced a compilation error when compiling on linux systems. While this is a little confusing, the PATH_MAX definition is located in <linux/limits.h> not <limits.h> which is currently included [here](https://github.com/nasa/elf2cfetbl/blob/3c4be5954cccc845fb329b81872d94df3780d126/elf2cfetbl.c#L40).

Steps to reproduce the behavior:
1. Pull the latest build of the CFS that uses this tool (as of commit b7dcc71360467ce2443dff27ea6314199f5c3ef0)
2. Attempt to build using the sample cmake

**Expected behavior**
No compilation errors.

**System observed on:**
 - OS: Ubuntu 18.04.4 LTS
 - Versions: cFE 6.7.11, OSAL 5.0.10, PSP 1.4.7 for linux",non-bug,https://github.com/nasa/elf2cfetbl/issues/35
CF method CF_CList_Remove appears to accept bad arguments,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1719] CF method CF_CList_Remove appears to accept bad arguments
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Thu Aug 26 13:23:38 2021

_Original Description_:
A bad node is passed to CF\_CList\_Remove, but it carries on unaware. This was found because branch 3 of `if((node->next==node)&&(node->prev==node))` can only be covered by a test that passes this situation, node->next == node, node->prev != node.  
  
The issue: should a single node enter, that has a node->next == node (meaning: pointing to itself), but a node->prev != node (meaning: NOT pointing to itself), the code continues as if this is a valid state. It may be impossible for a bad node to enter here, but that is not apparent at the unit test level for CF\_CList\_Remove nor is the Doxygen brief clear on that assumption.",non-bug,https://github.com/nasa/CF/issues/27
Improve cppcheck configuration for OSAL,"The initial level of support for ""cppcheck"" within the OSAL build plan is a simple implementation using default checking, widened to maximize coverage but not otherwise tuned.

While any individual mission or project using OSAL may decide to do this work, this is only mildly in their direct interest, but it is very much in the interest of the CFS Community as a whole that it gets done.

We can make cppcheck more useful, both for checking the OSAL itself and for checking code that uses it, by setting up a configuration file that tells cppcheck as many details as possible about the intended interfaces. For example:

- indicating functions that acquire and release resources so that cppcheck can attempt to report failures to release a resource; this is not just memory allocation but includes lock aquisition and anything else managed using one function to acquire (or open or connect ...) and another to release (or close or disconnect).

- indicating where a function requires that a pointer, passed as a function parameter, must point to initialized memory, so that cppcheck can report things like ""trying to strcopy where the source array has not been initialized.""

There are other details we can also express in the cppcheck library configuration file, generally of flavor similar to the above.
",non-bug,https://github.com/nasa/osal/issues/132
Use macro in CFE_ResourceId_IsDefined,"**Is your feature request related to a problem? Please describe.**
Compares directly to 0
See https://github.com/nasa/cFE/pull/1283#discussion_r611506161

**Describe the solution you'd like**
Use macro

**Describe alternatives you've considered**
None

**Additional context**
Code review #1283

**Requester Info**
Jacob Hageman - NASA/GSFC, submitted by @ezpollack
",non-bug,https://github.com/nasa/cFE/issues/1302
"Remove references to ""CCSDS"" structures","**Is your feature request related to a problem? Please describe.**
Applications should NOT refer to the ""CCSDS"" data types and macros, as there should be no assumption of a particular message framing type at this level.

**Describe the solution you'd like**
Use the abstract types provided in `cfe_sb.h` rather than directly using `ccsds.h` types.

**Additional context**
Related to nasa/cfe#554

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/68
Remove OS_DIRENTRY_NAME macro,"**Is your feature request related to a problem? Please describe.**
os_dirent_t is exposed, don't really need a macro to get to the element
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-dir.h#L37-L38

**Describe the solution you'd like**
Remove references, deprecate, remove.

**Describe alternatives you've considered**
Leave it, provides a layer of abstraction if names change.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/845
Consolidate similar commands,"Several command handler functions are nearly identical.  Could be consolidated.

CS_DisableAppCmd/CS_EnableAppCmd
CS_DisableNameAppCmd/CS_EnableNameAppCmd
CS_DisableEepromCmd/CS_EnableEepromCmd
CS_DisableMemoryCmd/CS_EnableMemoryCmd
CS_DisableEntryIDMemoryCmd/CS_EnableEntryIDMemoryCmd
CS_DisableTablesCmd/CS_EnableTablesCmd
CS_DisableNameTablesCmd/CS_EnableNameTablesCmd

Imported from GSFCCFS-1322",non-bug,https://github.com/nasa/CS/issues/17
Add OSAL debug messages for cases where multiple error conditions result in the same return code,"**Is your feature request related to a problem? Please describe.**
There are multiple functions in which multiple error conditions result in the same return code.  For instance, in OS_FileRename_Impl, the return code OS_ERROR is used for any failure of the rename() function.  This obscures the cause of the error and makes debugging more challenging.  

**Describe the solution you'd like**
Add an OS_Debug statement in these cases to provide additional information (such as errno value) describing the specific cause of the error.  

**Describe alternatives you've considered**
Alternatives include:
- Adding unique return codes -> this would greatly bloat the number of return codes.
- Using some kind of future event mechanism (see OSAL #221 ) 

**Additional context**

**Requester Info**
Elizabeth Timmons/NASA GSFC Code 582
",non-bug,https://github.com/nasa/osal/issues/609
"GCOV results for ""osapi"" obscured.","The ""make gcov"" target for the ""osapi"" coverage test
feeds the output of GCOV through some SED scripting
that was originally constructed to handle GCOV output
for a single source file.

For the OSAPI case, however, GCOV is being handed data
that covers both the adapter source file and the original
source file.

The sequence of line joins and line edits provided does
not produce correct output for this case: it does manage
to generate the coverage line for the adapter source, but
the heuristic deals badly with the remainder of the file.
It would have worked if the second ""File"" line happened
to fall on an odd line number.
",bug,https://github.com/nasa/osal/issues/125
CFE_ES_CalculateCRC Header has incorrect return description ,"**Describe the bug**
The return in the header of CFE_ES_CalculateCRC says it returns error codes but it doesn't. When things go wrong it returns either the input crc or 0 depending on how it went wrong, 

**Expected behavior**
Header should correctly explain what CFE_ES_CalculateCRC can return. 

**Additional context**
If TypeCRC is a non-implemented type then it returns 0. 
If DataPtr is null or DataLength is zero it returns the input crc

**Reporter Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1585
Remove obsolete `_USING_RTEMS_INCLUDES_`,"**Is your feature request related to a problem? Please describe.**
`_USING_RTEMS_INCLUDES_` is no longer used for anything.

https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/bsp/pc-rtems/src/bsp_start.c#L26
https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/os/rtems/src/os-impl-timebase.c#L29
https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/os/rtems/src/os-impl-loader.c#L30
https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/os/rtems/src/os-impl-no-module.c#L30

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1346
"Update ""beaglebone-linux"" PSP","LaRC is contributing a Beagle Bone Linux PSP, which is based on the CFS 6.4.1 version of the PC-Linux PSP. It is now present in the cfs_psp project tree under the ""ic-LaRC-beaglebone-linux"" branch on Babelfish, based at the 6.4.1 release.

This PSP does not yet have the following updates to bring it up to match the development versions of the other PSPs:

#4  enhanced build script
#5 - change uint32 to cpuaddr
#6 - dependency management
#19   compatibility with CFE ""const"" API
#21 - clean up build macros

",non-bug,https://github.com/nasa/PSP/issues/30
"Update ""cfe-OSS-readme.txt""","The OSS Readme file was updated when the CFE 6.4.2 Hotfix release tarball
was prepared for and distributed to SourceForge, but the updated text was
not then also stored in the cfe/docs directory.

This commit captures the updated Readme text from the OSS tarball and
places it in the cfe/docs tree.
",bug,https://github.com/nasa/cFE/issues/119
Fix build failures on RTEMS,"There are two issues that cause a build failure when using a recent RTEMS toolchain/library:

* {{{MSG_DONTWAIT}}} now //is// defined by the library headers.  This is re-defined in {{{fsw/cfe-core/src/inc/network_includes.h}}} - possibly an older library did not define this?

* {{{putchar()}}} is a defined as a macro, but the {{{fsw/cfe-core/unit-test/osprintf_priv.h}}} file has a function prototype for this which conflicts.  This function prototype really should not be here.

",bug,https://github.com/nasa/cFE/issues/110
"Rename ""doc"" to ""docs"" for consistency","**Is your feature request related to a problem? Please describe.**
Most other cFS modules put the documentation in a `docs` subdirectory, except OSAL and PSP, which put it in `doc`

**Describe the solution you'd like**
Be consistent, use `docs` since this is what cFE and the majority of cFS apps use.

**Additional context**
Inconsistent naming means over complicated scripts and tools, that have to look in multiple different possible names/locations

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/293
"Add missing "".Payload"" structure member designations","The `.Payload` structure access was missing in certain conditionally-compiled code paths within `cfe_time_tone.c`.

This caused compilation failure when these options were enabled and the compiler attempted to build this code.
",bug,https://github.com/nasa/cFE/issues/153
Improve EVS event filter documentation,"**Is your feature request related to a problem? Please describe.**
`CFE_EVS_ResetFilter` API documentation not clear, would help to add something like it will treat the next event with that EID like it was the first (independent of filter method) along with an example.
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_evs.h#L290-L292

Add description of how they actually work:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_evs_api_typedefs.h#L42-L55

**Describe the solution you'd like**
Improve documentation

**Describe alternatives you've considered**
None

**Additional context**
Code review, note conversion to variables is in #1439

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1390
cFE 6.5 Documentation Updates,"This ticket will be used for all cFE 6.5 documentation updates including the VDD.  A listing of the needed documentation updates will be added to this ticket as tickets, requiring code updates, are reviewed and determined there is an associated documentation change.  ",non-bug,https://github.com/nasa/cFE/issues/167
Unit tests no longer installing correctly,"**Describe the bug**
Some unit tests show up in build directory after install
```
.../build$ ls -1
cfecfs_build_info.h.in
cfecfs_version_info.h.in
CMakeCache.txt
CMakeFiles
cmake_install.cmake
coverage-ut-mcp750-vxworks-testrunner
CTestTestfile.cmake
doc
exe
inc
install_manifest.txt
Makefile
mission_vars.cache
msg_UT
native
sample_app-sample_app-testrunner
sample_lib-sample_lib-testrunner
tools
```

**To Reproduce**
make SIMULATION=native ENABLE_UNIT_TESTS=true prep
make
make install

**Expected behavior**
They should all show up in build/exe/cpu1 (for default config)

**Code snips**
No idea

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/881
Overrun for CFE_MSG_Message_t ,"**Describe the bug**
Out-of-bounds access (OVERRUN). Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 39 using argument 40UL.

**Expected behavior**
Fix overrun

**Code snips**
https://github.com/nasa/ci_lab/blob/12b8cdd5cc8945fe4dfd4423e57f48114f1948d8/fsw/src/ci_lab_app.c#L189

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/ci_lab/issues/97
No tests were found,"**Describe the bug**
`make test` on a freshly cloned repository does not find any tests.

**To Reproduce**
Steps to reproduce the behavior:
1. `git clone https://github.com/nasa/cFS.git`
2. `cd cFS`
2. `cp cfe/cmake/Makefile.sample Makefile`
3. `cp -r cfe/cmake/sample_defs sample_defs1`
4. `make SIMULATION=native ENABLE_UNIT_TEST=true prep`
5. `make`
6. `make install`
7. `make test`

**Observed behavior**

```
lcov --capture --initial --directory build/native/default_cpu1 --output-file build/native/default_cpu1/coverage_base.info
Capturing coverage data from build/native/default_cpu1
Found gcov version: 9.3.0
Using intermediate gcov format
Scanning build/native/default_cpu1 for .gcno files ...
geninfo: WARNING: no .gcno files found in build/native/default_cpu1 - skipping!
Finished .info-file creation
(cd build/native/default_cpu1 && ctest -O ctest.log)
Test project /home/XXX/cFS/cFS-ic/build/native/default_cpu1
No tests were found!!!
```

**Expected behavior**
Tests run and pass.

**System observed on:**
VirtualBox 6.1 running Linux Mint 20, Kernel: Linux 5.4.0-40-generic, Architecture: x86-64
",non-bug,https://github.com/nasa/cFS/issues/113
Convert software bus destination linked list to circular,"**Is your feature request related to a problem? Please describe.**
Linear linked list requires more logic at insertion/removal

**Describe the solution you'd like**
Convert to circular

**Describe alternatives you've considered**
None

**Additional context**
https://github.com/nasa/cFE/pull/947#discussion_r504896779

**Requester Info**
Jacob Hageman - NASA/GSFC (spawned from discussion on #947)
",non-bug,https://github.com/nasa/cFE/issues/953
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/PSP/blob/d7af7a05e92df18854a12ed40543064ebba4630f/fsw/mcp750-vxworks/src/cfe_psp_exception.c#L61

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/265
OS_statvfs_t types do not match corresponding POSIX types,"When building for 64-bit, Wconversion shows issues with OS_statvfs_t's types. They don't match the types in struct statvfs on POSIX systems. It may be worth a discussion to change these types of just handle the conversions in the specific implementation.",non-bug,https://github.com/nasa/osal/issues/570
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/248
Refactor similar ES ID/Info related functions to share common logic,"**Is your feature request related to a problem? Please describe.**
Very similar pattern in the following sets of APIs, consider refactor:
- CFE_ES_GetAppIDByName, CFE_ES_GetLibIDByName, CFE_ES_GetTaskIDByName
- CFE_ES_GetAppID, CFE_ES_GetTaskID, 
- CFE_ES_GetAppName, CFE_ES_GetLibName, CFE_ES_GetTaskName
- CFE_ES_GetAppInfo, CFE_ES_GetLibInfo, CFE_ES_GetTaskInfo

**Describe the solution you'd like**
Factor out common logic

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1327
Give the UtAssert_<type here>_<comparison here> macros versions that can add user 'desc',"**Is your feature request related to a problem? Please describe.**
Output is generic and some additional information is desired.  e.g. Turn '*received.RunStatus (3) == *test->expected.RunStatus (3)' into 'CFE_ES_RunLoop:*received.RunStatus (3) == *test->expected.RunStatus (3)'

**Describe the solution you'd like**
Take each of the macros in [utassert.h](https://github.com/nasa/osal/blob/main/ut_assert/inc/utassert.h) that are designed for these checks and add a second version that has _WITH_DESC or something of that nature.

**Describe alternatives you've considered**
Already written my own locally needed versions.

**Additional context**
As an example for UT_UNT32_EQ would look like extended:
```
#define UtAssert_UINT32_EQ_WITH_DESC(actual, ref, desc)                                                                           \
    UtAssert_GenericUnsignedCompare((uint32)(actual), UtAssert_Compare_EQ, (uint32)(ref), UtAssert_Radix_DECIMAL, \
                                    __FILE__, __LINE__, desc, #actual, #ref)
```

**Requester Info**
Alan Gibson
NASA/GSFC 587
",non-bug,https://github.com/nasa/osal/issues/1194
Add tracking for order of stub calls during a unit test,"**Is your feature request related to a problem? Please describe.**
It can sometimes be important to know that calls in a function are done in a proper order; i.e. ability to verify that a message is timestamped before it is sent.

**Describe the solution you'd like**
An addition that allows a stub to report that it was called to a central location and this information accessible to a unit test for verification.  Add this to the default stub implementation, but have it be available to stubs that do not use the default.

**Describe alternatives you've considered**
Write local hooks for all stubs used in unit testing that use a local version of this concept.

**Additional context**
Example of situation that requires this:
```    
CFE_SB_TimeStampMsg((CFE_SB_Msg_t*) &XX_AppData.hk);   
CFE_SB_SendMsg((CFE_SB_Msg_t*) &XX_AppData.hk);
```

**Requester Info**
Alan Gibson NASA GSFC/587
",non-bug,https://github.com/nasa/osal/issues/588
Add replacement for deprecated OSAL - OS_IntLock and OS_IntUnlock,"**Is your feature request related to a problem? Please describe.**
OS_IntLock and OS_IntUnlock were deprecated from OSAL since there wasn't a platform independent way to implement the actual intent.

**Describe the solution you'd like**
Need a replacement implemented where possible to support the concept of executing a uninterrupted block of code.

**Describe alternatives you've considered**
Non-portable implementation of uninterruptible code?

**Additional context**
Memory manager has a Load Memory with Interrupts Disabled command.  Perhaps operationally could be done differently?

*NOTE* - Priority to come up with a solution to support upcoming MM release.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/180
"""NULL"" entry no longer supported for libraries in startup script","**Describe the bug**
Set sample_lib entry point to NULL:
```
OS_GenericSymbolLookup_Impl():118:Error: NULL: ./cf/sample_lib.so: undefined symbol: NULL
1980-012-14:04:03.48915 ES Startup: Could not find symbol:NULL. EC = 0xFFFFFFFF
```

**To Reproduce**
See above.

**Expected behavior**
NULL should skip the symbol lookup and load.  Note it does skip if the field is just left empty, as in:
`CFE_LIB, /cf/fs_lib.so, , FS_LIB, 0, 0, 0x0, 0;`

**Code snips**
Only skips if empty string:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/es/fsw/src/cfe_es_apps.c#L453
Probably could just convert ""NULL"" to empty in the CFS_LIB processing section.

**System observed on:**
 - Hardware: Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
Found by @excaliburtb

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1505
Convert doc/OSAL-Configuration-guide.doc to markdown,"**Is your feature request related to a problem? Please describe.**
Doc and PDF not GitHub friendly

**Describe the solution you'd like**
Convert to markdown and remove doc/pdf

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/679
EVS Unit Test Code Coverage Incomplete in Task.c (GSFC DCR 8492),"cfe_evs_task.c - 99.61% % coverage (2 Lines of Code NOT executed)

The lines not covered are in CFE_EVS_TaskInit:

        -:  385:   /* Register EVS task for event services */
        5:  386:   Status = CFE_EVS_Register(NULL, 0, CFE_EVS_BINARY_FILTER);
        5:  387:   if (Status != CFE_SUCCESS)
        -:  388:   {
    #####:  389:      CFE_ES_WriteToSysLog(""EVS:Call to CFE_EVS_Register Failed:RC=0x%08X\n"",(unsigned int)Status);
    #####:  390:      return Status;
        -:  391:   }

REASON: None",non-bug,https://github.com/nasa/cFE/issues/189
OS_readdir cannot be called with a closed handle,"ut_osfile_dirio_test.c closes a directory handle with OS_closedir but then uses it again with OS_readdir to perform a test. This causes a memory issue on vxWorks. (Either the osal should return some id from a table that guards against this, and that id should never be used again to prevent double-free, or the test is invalid.)",bug,https://github.com/nasa/osal/issues/177
CFE_FS_ReadHeader & WriteHeader api headers state wrong returns,"**Describe the bug**
In the header api's for ReadHeader and WriteHeader they both say that they return the execution status, however the implementation has them return the size of the file they read/wrote if successful and an error code if not. 

**Reporter Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1299
Replace remaining loops through all objects with iterators,"**Is your feature request related to a problem? Please describe.**
Previous changes introduced the concept of an iterator in the OSAL shared layer to iterate across all objects of a particular type.  However there remains a few cases where code is still doing a ""for"" loop through each index.

**Describe the solution you'd like**
For consistency of operation, these should be converted to iterators.

**Additional context**
Importantly the iterator handles locking of the global table.  Using the iterator ensures that this is done consistently, and provides the appropriate token object for any calls to other functions.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/702
Clean up EVS ports implementation,"Fix a few minor issues with EVS ports implementation:

1. Although a macro is used when checking bits of the ""OutputPort"" mask, the value is still effectively hard coded with the shift, so the macro cannot change without also breaking these checks (violates the spirit of using the macro to begin with).  A simplification of the conditional will allow them to change independently (just mask and non-zero):
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L831-L847
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L885-L901
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L469-L502

2. When sending to multiple ports, the (essentially) same snprintf() is done for each one and only one digit in the string changes.  Would be way more efficient to construct the later half of the string once, and change the port number.

The first issue should be resolved prior to integration with EDS as those macros become part of the EDS.  Therefore they should be changeable without breaking the implementation that uses them.  The second issue is just a performance/size enhancement.

",non-bug,https://github.com/nasa/cFE/issues/93
vxworks osapi.c OS_Milli2Ticks() problems,"Two problems found:
1) OS_Milli2Ticks() returns type 'int32' from variable declared as 'uint32'.
2) There are no limit checks on input value.  The calculation may generate overflow on the resulting output type.

Identified with #45 white-box coverage testing.",bug,https://github.com/nasa/osal/issues/104
Improve API consistency for functions accepting a software bus message,"**Is your feature request related to a problem? Please describe.**
The data types accepted by the SB API are not entirely consistent.  Most API functions that operate on software bus message buffers accept a `CFE_SB_MsgPtr_t`.

There are some exceptions, most notably the `CFE_SB_InitMsg()` function accepts a `void*`.

**Describe the solution you'd like**
All SB API functions that operate on message buffers should use the `CFE_SB_MsgPtr_t` type (or `CFE_SB_Msg_t *`)

**Additional context**
Making the interface type-correct helps the compiler's type checking do its intended job, helping to catch/avoid the possibility of passing a data buffer which is not actually an SB message buffer.  Using `void*` permits anything to be passed in, effectively disabling all checking.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/440
More consistent types for OSAL resources,"**Is your feature request related to a problem? Please describe.**
CFE issue nasa/cfe#663 describes mismatched types used across CFE for certain items, such as stack size and priority of tasks.
To help resolve this OSAL should provide a typedef for the ""right"" types to use when interfacing with OSAL.

**Describe the solution you'd like**
Should add at least:
- `osal_priority_t` - type used for OSAL task priority
- `osal_stackptr_t` - type used for OSAL stack pointer

**Additional context**
This will identify the correct type to use, instead of the mishmash currently seen in CFE as described in nasa/cfe#663.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/635
vxworks OS_SymTableIterator() unchecked write(),"In OS_SymTableIterator() write() is used.  It returns the # of bytes actually written. However, the # of bytes isn't actually checked by this code.  Only if a -1 was returned. An assumption is made that the entire set of sizeof(SymbolRecord_t) is copied.

From the VxWorks Kernel Programmer's Guide, 6.7 .pdf:
''""The write( ) routine ensures that all specified data is at least queued for output before returning to the caller, though the data may not yet have been written to the device (this is driver dependent). The write( ) routine returns the number of bytes written; if the number returned is not equal to the number requested, an error has occurred.""''

From the VxWorks 6.7 write() man page:
{{{
RETURNS
     The number of bytes written (if not equal to nbytes, an error has
     occurred), or ERROR if the file descriptor does not exist, the driver does
     not have a write routine, or the driver returns ERROR. If the driver does
     not have a write routine, errno is set to ENOTSUP.
}}}

BTW, that's two error return codes, not just a -1.

Recommend: checking the return val vs. desired # of bytes, then erroring out the same path.",bug,https://github.com/nasa/osal/issues/101
Static analysis issues relative to flight code,"Handful of static analysis issues in the ""red"" identified (non-Style issues).  Need to resolve these.

Filter: -file:elf -file:ut -file:cfe -file:os -file:cf_ -file:_lab_app.c !(significance:style)

should resolve and/or disposition the higher ranked ones at minimum.

Note license restricts publishing issues.

Imported from GSFCCFS-1958",bug,https://github.com/nasa/SC/issues/23
CFE_ES_RegisterCDSEx: clear block if new allocation is needed but not new block size,"**Is your feature request related to a problem? Please describe.**
May need to clear block if a new allocation is needed without a changed block size
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L383

**Describe the solution you'd like**
Analyze, clear block if needed

**Describe alternatives you've considered**
If not needed, document why for future reference

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1337
Clarify schedule table guidance,"`sch_lab_table.c` has some guidance for creating the scheduling table, including [""Make sure the table is terminated by the SCH_LAB_END_OF_TABLE entry""](https://github.com/nasa/sch_lab/blob/fdc1ed1a18b12a70f512be6f6b95d0b309024aff/fsw/src/sch_lab_table.c#L30). But In looking at the file history, it doesn't look like the default schedule table has included a `SCH_LAB_END_OF_TABLE` entry ever in the past year, which is as far back as that file history goes. Should that guidance be removed?",non-bug,https://github.com/nasa/sch_lab/issues/44
cFE_SB line/branch coverage not 100%,"**Is your feature request related to a problem? Please describe.**
Currently CFE_SB is not seeing full code coverage during the unit tests. There are two conditions that seem to be causing this:

1. In various functions there are checks for - PendingEventId != 0 and Status = CFE_SUCCESS. However, both of these variables are being changed together, such that conditions are mutually exclusive. The end results is that there is no path for PendingEvent to still be non-0 if the status does not equal CFE_SUCCESS.

Example (cfe_sb_api.c line 428):

    if (Status == CFE_SUCCESS)
    {
        CFE_SB_PipeDescSetFree(PipeDscPtr);
        --CFE_SB_Global.StatTlmMsg.Payload.PipesInUse;
    }
    else if (PendingEventID != 0)
    {
        CFE_SB_Global.HKTlmMsg.Payload.CreatePipeErrorCounter++;
    }

2. Another issue that is occurring is in all usages of switch statements.  Without a default case capturing an unknown event ID, SB assumes that the case will always fall within the defined EIDs - which causes an issue with gcov coverage statistics.

Example:

        switch (PendingEventID)
        {
            case CFE_SB_DEL_PIPE_ERR1_EID:
                CFE_EVS_SendEventWithAppID(CFE_SB_DEL_PIPE_ERR1_EID, CFE_EVS_EventType_ERROR, CFE_SB_Global.AppId,
                                           ""Pipe Delete Error:Bad Argument,PipedId %ld,Requestor %s"",
                                           CFE_RESOURCEID_TO_ULONG(PipeId), FullName);
                break;
            case CFE_SB_DEL_PIPE_ERR2_EID:
                CFE_EVS_SendEventWithAppID(CFE_SB_DEL_PIPE_ERR2_EID, CFE_EVS_EventType_ERROR, CFE_SB_Global.AppId,
                                           ""Pipe Delete Error:Caller(%s) is not the owner of pipe %ld"", FullName,
                                           CFE_RESOURCEID_TO_ULONG(PipeId));
                break;
        }

**Describe the solution you'd like**
I believe these were already adjudicated as part of the coverage analysis.  However, they were pointed out by JSC SA and it is likely the non100% coverage statistics will keep coming up such that it would be worthwhile to revisit/fix or document why we think the branch coverage meets requirements.  Further, we may want to audit our branch coverage for the other core apps as well.

**Requester Info**
Dan Knutsen
NASA GSFC
",non-bug,https://github.com/nasa/cFE/issues/2252
Possible Buffer Underrun in cfe_fs_decompress.c [MMS-IVV-013] [OBS-1238] [GSFC DCR 22838],"Source Code File: cfe\fsw\cfe-core\src\fs\cfe_fs_decompress.c 
Line 530 
Output from Code Analysis tool: ""Buffer overflow, array index of 'x' may be outside the bounds. Array 'x' of size 17 declared at line 367 may use inde""
    
{{{
530  while ( ( i & ((1 << w) - 1) ) != x[h] ) { 
531      h--;  /* don't need to update q */ 
532      w -= l;   
}}}

The array x could be under run if h attains a value of -1. This will occur if the condition does not evaluate to true before h is decremented below 0. This could also lead to an infinitely executing loop.",bug,https://github.com/nasa/cFE/issues/135
Missing stub function for OS_FileSysAddFixedMap,"**Is your feature request related to a problem? Please describe.**
Coverage Unit tests being added for the PSP will likely require a stub of this function.

**Describe the solution you'd like**
Provide the stub function as part of the OSAL stub library

**Describe alternatives you've considered**
N/A - all public API functions should have UT stubs.  This one was overlooked/missed.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/494
Standardize Version Numbering (in PSP),"Bring version number management within OSAL into line
with the cFS standards documented at

https://babelfish.arc.nasa.gov/trac/cfs_test/wiki/ReferenceVersion

",bug,https://github.com/nasa/PSP/issues/50
Utilize new macros and correct some sb_UT.c merge conflicts,"**Describe the bug**
Doing the merge conflicts for the ic merges, I mis-merged a couple of Joe's changes ( fix #245 ).

**Reporter Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/693
Outdated License(?),"Many files in the PSP (and one in the CFS) contain a file license header that seems to be outdated?  It doesn't reference the NOSA, and seems to include restrictions that are in conflict with the NOSA (see the 2nd paragraph).  Note, Working with the SourceForge cFE release.

An example:
{{{
**      Copyright (c) 2004-2006, United States government as represented by the
**      administrator of the National Aeronautics Space Administration.
**      All rights reserved. This software(cFE) was created at NASA Goddard
**      Space Flight Center pursuant to government contracts.
**
**      This software may be used only pursuant to a United States government
**      sponsored project and the United States government may not be charged
**      for use thereof.
}}}

A quick grep showed these files:
{{{
find . -type f -exec grep -li ""This software may be used only"" {} \;
./CFS/hs/fsw/unit_test/cfe_psp_timer.c
./cFE/psp/fsw/mcp750-vxworks6.4/inc/psp_version.h
./cFE/psp/fsw/mcp750-vxworks6.4/inc/cfe_psp_config.h
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_support.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_start.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_ssr.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_voltab.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_exception.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_watchdog.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_timer.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c
./cFE/psp/fsw/inc/cfe_psp.h
./cFE/psp/fsw/arm-linux/inc/psp_version.h
./cFE/psp/fsw/arm-linux/inc/cfe_psp_config.h
./cFE/psp/fsw/arm-linux/src/cfe_psp_support.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_start.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_ssr.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_voltab.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_exception.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_watchdog.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_timer.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_memory.c
./cFE/psp/fsw/pc-cygwin/inc/psp_version.h
./cFE/psp/fsw/pc-cygwin/inc/cfe_psp_config.h
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_support.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_start.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_ssr.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_voltab.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_exception.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_watchdog.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_timer.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_memory.c
./cFE/psp/fsw/mac-osx/inc/psp_version.h
./cFE/psp/fsw/mac-osx/inc/cfe_psp_config.h
./cFE/psp/fsw/mac-osx/src/cfe_psp_support.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_start.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_ssr.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_voltab.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_exception.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_watchdog.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_timer.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_memory.c
./cFE/psp/fsw/pc-linux/inc/psp_version.h
./cFE/psp/fsw/pc-linux/inc/cfe_psp_config.h
./cFE/psp/fsw/pc-linux/src/cfe_psp_support.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_start.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_ssr.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_voltab.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_exception.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_watchdog.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_timer.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_memory.c
./cFE/psp/fsw/grut699-vxworks6/inc/psp_version.h
./cFE/psp/fsw/grut699-vxworks6/inc/cfe_psp_config.h
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_support.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_start.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_ssr.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_voltab.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_exception.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_timer.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c
./cFE/psp/fsw/mcf5235-rtems/inc/psp_version.h
./cFE/psp/fsw/mcf5235-rtems/inc/cfe_psp_config.h
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_support.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_start.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_ssr.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_voltab.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_exception.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_watchdog.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_timer.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_memory.c
}}}
",bug,https://github.com/nasa/PSP/issues/29
Re-add static code analysis for pull requests,"**Describe the bug**
The Travis CI runner ran cppcheck which we don't have anymore

**To Reproduce**
Submit pull request, notice that Travis CI doesn't run anymore.

**Expected behavior**
A success or failure report of a cppcheck run.

**Code snips**
Check from travis.yml

```
  #cppcheck flight software osal/src/bsp, osal/src/os
    - cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1
      --enable=warning,performance,portability,style --suppress=variableScope
      --inconclusive --quiet src/bsp src/os 2>cppcheck_flight_osal.txt
    - |
      if [[ -s cppcheck_flight_osal.txt ]]; then
        echo ""You must fix cppcheck errors before submitting a pull request""
        echo """"
        cat cppcheck_flight_osal.txt
        exit -1
      fi
```

**System observed on:**
n/a

**Additional context**
Part of ongoing TravisCI to GitHub Actions migration
",bug,https://github.com/nasa/osal/issues/740
Add double-lock detection for OSAL mutexes as a debug option,"**Is your feature request related to a problem? Please describe.**
A recent issue in nasa/cfe#591 was due to an application double-locking the same mutex from the same task.  This wasn't detected during testing because POSIX allows this recursive locking.  However, other RTOS's do not allow it, nor is it intended behavior.

**Describe the solution you'd like**
OSAL should check/enforce that a single task ID only takes a mutex once, and must release it before locking again.  Violations of this pattern should be reported to the debug console, so they can be addressed by the developer.

As there is a small overhead cost to doing this, it can be selectively enabled as a debug feature, and remain off by default.

**Additional context**
See nasa/cfe#591

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/434
Incorrect loop bounds in UT_CheckEventHistoryFromFunc,"**Describe the bug**
Incorrect check for events in Unit test code in `UT_CheckEventHistoryFromFunc()` helper routine.  The event storage is an array of event IDs (`uint16`) but stored in a generic byte buffer.   This forgets to divide the `Position` (which is in bytes) by `sizeof(uint16)` when reading this, so it ends up checking double the number of entries it is supposed to.

After fixing this issue, it also exposes that some tests in TBL unit tests are also broken.

**To Reproduce**
Found by inspection.

**Expected behavior**
Should check the correct number of events.

**Code snips**
Loop at issue is here:
https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/unit-test/ut_support.c#L402-L411

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1090
unld PSP core unit test causes a processor exception,"load and run test, then unload, and load again to run test a 2nd time and redirect output to a file results in an exception on the 2nd load.  This issue is only see in the way the unit tests were trying to be run.  It is not any sort of system runtime issue.

-> unld ""core_UT.o""                                                             
value = 0 = 0x0                                                                 
-> ld<core_UT.o  

grlib> run 0
IU in error mode (tt = 0x2b)
 652c35f8  80a06063   cmp  %g1, 99
grlib> hist
 1042809817            ahb read,  mst=0, size=2    [6117d400 06117881]
 1042809824            ahb read,  mst=0, size=2    [61178800 06117891]
 1042809831            ahb read,  mst=0, size=2    [61178900 0000008e]
 1042809837            ahb write, mst=0, size=2    [61178900 000000ae]
 1042809873            ahb read,  mst=0, size=2    [00000000 10800400]
 1042809874  652c35d8  ld  [%g1], %g1              [10800400]
 1042809877  652c35dc  add  %g1, 1, %g2            [10800401]
 1042809878  652c35e0  sethi  %hi(0x0), %g1        [00000000]
 1042809879  652c35e4  or  %g1, %g1                [00000000]
 1042809886            ahb write, mst=0, size=2    [61178900 000000ee]
 1042809889  652c35e8  st  %g2, [%g1]              [00000000 10800401]
 1042809890  652c35ec  sethi  %hi(0x0), %g1        [00000000]
 1042809891  652c35f0  or  %g1, %g1                [00000000]
 1042809892            ahb write, mst=0, size=2    [00000000 10800401]
 1042809892  652c35f4  ld  [%g1], %g1              [10800401]
 1042809903            ahb read,  mst=0, size=2    [652c3600 01000000]
 1042809904            ahb read,  mst=0, size=2    [652c3604 03000000]
 1042809904  652c35f8  cmp  %g1, 99                [trapped]

grlib> reg

	  INS       LOCALS      OUTS     GLOBALS
   0:  00000064   F3401FC4   6123E878   00000000
   1:  00000000   652C35C8   6123EB10   10800401
   2:  6123EB10   652C35CC   00000000   10800401
   3:  0000000A   00000010   00000177   00010007
   4:  652C7FC8   00000800   00002800   00000007
   5:  0000000A   00000177   00000001   00000000
   6:  61175150   611B88B8   611750E8   00000000
   7:  6013FB3C   601CC000   600ACEE4   00000000

 psr: F3401FE4   wim: 00000008   tbr: 60001050   y: 00000000

 pc:  652c35f8  cmp  %g1, 99                
 npc: 652c35fc  ble  0x652c363c     

",bug,https://github.com/nasa/PSP/issues/42
Trick PSP,There is growing interest in being able to use the Trick OSAL/PSP so that a CFS build can be executed within a Trick simulation - basically allowing developers to fly unmodified FSW within an all SW simulation environment on their desktop.  The approach was used extensively and successfully on the Morpheus project.  The Trick OSAL/PSP were developed a few years ago.  Some work will be necessary to get them up and running again with the latest CFS.,non-bug,https://github.com/nasa/PSP/issues/55
Module list count includes both `CFE_PSP_BASE_MODULE_LIST` and the configurable `PspModuleList` but some APIs use just the latter.,"**Describe the bug**
Both lists are initilized:
https://github.com/nasa/PSP/blob/c3a3f6ecaa33e62ded0d9b95dc91dd25b9e36a46/fsw/shared/src/cfe_psp_module.c#L82-L89

which increments the `CFE_PSP_ModuleCount`:
https://github.com/nasa/PSP/blob/c3a3f6ecaa33e62ded0d9b95dc91dd25b9e36a46/fsw/shared/src/cfe_psp_module.c#L72

but then the API's use `CFE_PSP_ModuleCount` to limit references to just the configurable list (and other related issues):
https://github.com/nasa/PSP/blob/c3a3f6ecaa33e62ded0d9b95dc91dd25b9e36a46/fsw/shared/src/cfe_psp_module.c#L120-L142

**To Reproduce**
For example if there's 1 entry in `CFE_PSP_BASE_MODULE_LIST` and 1 in the additional `PspModuleList`, then `CFE_PSP_ModuleCount` will == 2.  Then if you call CFE_PSP_MODULE_FindByName with any module not in the `PspModuleList` it'll actually go off the end of the `PspModuleList` since it's limited to 2... and it won't find anything in the `CFE_PSP_BASE_MODULE_LIST`.

**Expected behavior**
A complete module list should be used for APIs that includes both the built in and added.

**Code snips**
See above.

**System observed on:**
N/A - code inspection

**Additional context**
Stakeholder identified issue

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/PSP/issues/319
Buffer overflow possibility on command processing from `strcpy` use and in `DS_FileCreateDest` w/ bad size to `strncpy`,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Pathname from cmd used in strcpy, could overflow table Pathname if not terminated:
https://github.com/nasa/DS/blob/9d0651c221fa8db1403063ca6cb0911ca29ab9d6/fsw/src/ds_cmds.c#L766

If DestFile->Pathname isn't null terminated garbage could be added to the Workname which gets copied back to the file name:
https://github.com/nasa/DS/blob/9d0651c221fa8db1403063ca6cb0911ca29ab9d6/fsw/src/ds_file.c#L588

**To Reproduce**
This was actually happening in the test, although the test overflowed the buffer to get this condition:
https://github.com/nasa/DS/blob/9d0651c221fa8db1403063ca6cb0911ca29ab9d6/unit-test/ds_file_tests.c#L1038-L1042

**Expected behavior**
Only copy up to the size of the Pathname.

**Code snips**
See above

**System observed on:**
CI

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/DS/issues/46
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/DS/issues/27
Update 5 cFE requirements,"As part of the cFE certification effort, several requirements have been identified as in need of update:
1.	cES1005.1 (cFE-59 in JIRA): Need to remove Application Load Address from the list of command parameters in the start application command (ES) to reflect implementation.
2.	cTBL6003.1 (CFE-311 in JIRA): Need to update requirement verbiage to reduce ambiguity.
a.	Old verbiage: If a Table Validation Function exists for the specified Table, the Inactive Table Image shall be validated.   
b.	New verbiage: The cFE shall reject an activate table command for a table that has a validation function but has not been validated.
3.	cEVS3103.4, cEVS3103.5, and cEVS3001 (CFE-237, 239, and 201): Requirements imply that the Event Format Mode is SB controlled/commandable when in fact it is controlled by EVS.  Need to swap SB with EVS.

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/787
Correct const in generic memory pool APIs,"**Is your feature request related to a problem? Please describe.**
CFE_ES_GenPoolRecord_t pointer should be const:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L234
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L247
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L261

**Describe the solution you'd like**
Make const

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1348
Possibly outdated OS_initfs/OS_mkfs logic for creating /ram,"**Describe the bug**
cFE 6.7.0+ still retain the original logic for setting up `/ram`. For poweron resets it works fine, however I think the logic may now be outdated for processor resets. On a processor reset, the flow is:

1. Attempt to initialize the filesystem with `OS_initfs()`.
2. If that fails, format the filesystem with `OS_mkfs()`.

This logic may have made sense for older OSALs, but I don't see how it is helpful with OSAL 5.0+. In the new OSAL, both `OS_initfs()` and `OS_mkfs()` call `OS_FileSys_Initialize()`, with only the final argument `should_format` differing. Both call `OS_FileSysStartVolume_Impl()` to initialize the ram disk. For `OS_initfs()`, this is the only Impl function called. In the `OS_mkfs()` case, `should_format` is only checked if `OS_FileSysStartVolume_Impl()` succeeded, and only if it did, then `OS_FileSysFormatVolume_Impl()` is called.

Because the two OSAL functions follow exactly the same path up until the check for `should_format`, it seems to me that if `OS_initfs()` fails, then `OS_mkfs()` cannot possibly succeed. In other worse, if `OS_initfs()` fails, then the cFE will inevitably panic instead of actually attempting to reformat `/ram`.

**To Reproduce**
n/a

**Expected behavior**
I think the intended logic in the cFE start up was to attempt to initialize an existing `/ram` filesystem on a processor reset, but reformat it if that failed and continue to boot. With the current OSAL, the only way I can see for that to work would be something like this:
1. Initialize the filesystem with `OS_initfs()`. If that fails, panic.
2. Attempt to mount the filesystem with `OS_mount()`.
3. If that fails, use `OS_rmfs()` to remove it, and then call `OS_mkfs()`.
4. Attempt again to mount with `OS_mount()`. If that fails, panic.

The other possible change for this to work as I think it is intended would be to make `OS_initfs()` fail if given an invalid filesystem. But as written for that to happen,  `OS_FileSysStartVolume_Impl()` would need to fail, which would also make `OS_mkfs()` always fail.

**Code snips**
cFE RAM disk creation on processor reset:
```
      RetStatus = OS_initfs((void *)RamDiskMemoryAddress, ""/ramdev0"", ""RAM"", CFE_PLATFORM_ES_RAM_DISK_SECTOR_SIZE, CFE_PLATFORM_ES_RAM_DISK_NUM_SECTORS );
      if ( RetStatus != OS_FS_SUCCESS )
      {
         CFE_ES_WriteToSysLog(""ES Startup: Error Initializing Volatile(RAM) Volume. EC = 0x%08X\n"",(unsigned int)RetStatus);
         CFE_ES_WriteToSysLog(""ES Startup: Formatting Volatile(RAM) Volume.\n"");
         
         RetStatus = OS_mkfs((void *)RamDiskMemoryAddress, ""/ramdev0"", ""RAM"", CFE_PLATFORM_ES_RAM_DISK_SECTOR_SIZE, CFE_PLATFORM_ES_RAM_DISK_NUM_SECTORS );
         if ( RetStatus != OS_SUCCESS )
         {
            CFE_ES_WriteToSysLog(""ES Startup: Error Creating Volatile(RAM) Volume. EC = 0x%08X\n"",(unsigned int)RetStatus);
```

OS_FileSys_Initialize() logic:
```
        return_code = OS_FileSysStartVolume_Impl(local_id);

        if (return_code == OS_SUCCESS)
        {
            /*
             * The ""mkfs"" call also formats the device.
             * this is the primary difference between mkfs and initfs.
             */
            if (should_format)
            {
                return_code = OS_FileSysFormatVolume_Impl(local_id);
            }
```

**System observed on:**
 - OS: Shared OSAL
 - Versions cFE 6.7.0, OSAL 5.0.0

**Additional context**
It's very possible that I'm misunderstanding something here, in which case I apologize in advance for the noise!

**Reporter Info**
Mike Stewart, Capella Space Corporation
",non-bug,https://github.com/nasa/cFE/issues/589
OS_ShellOutputToFile_Impl in src/os/rtems/src/os-impl-shell.c issues,"**Is your feature request related to a problem? Please describe.**
 - Does a strncpy to LoadCmd, then a snprintf to LocalCmd
 - Doesn't check for no truncation prior to sending so could do strange things
 - cmd could take up more than allotted space

**Describe the solution you'd like**
Remove the strncpy?  Check the full command fit prior to execution?

**Describe alternatives you've considered**
Already can be optionally excluded from build...

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/806
ES Globals need cleanup,"**Is your feature request related to a problem? Please describe.**
The ES core app is quite disorganized in terms of its internal headers (what defines what) and global data structures.  In particular there are three global data objects in this module.

https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_task.h#L148
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_global.h#L161
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_global.h#L166

**Describe the solution you'd like**
Make a single `CFE_ES_Global` object as was done for other apps in PR #1124.  Further clean up/re-org the internal headers to create a more logical/consistent content would be nice.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1181
CFE_EVS_SendEventWithAppID design improvements wrt EID context and calling context,"**Is your feature request related to a problem? Please describe.**
CFE_EVS_SendEventWithAppID is really intended to provide the EID context when an event is created from a library.  Unfortunately the EID context replaces the app context info (name), which means for short events the ground does not have app context (can't tell what app generated the event).  Also means filtering by app context isn't possible for these types of events, and apps really have no insight into or control over these events.

**Describe the solution you'd like**
Consider options to include both EID context and app context in short messages, filtering, etc.  Could utilize extra bits, could add a field, etc.  May even help to rename CFE_EVS_SendEventWithAppID to something that indicates overriding the EID context.  Note if special bits were just reserved, this may collapse down to one API again (CFE_EVS_SendEvent), but depends on how the rest is addressed.

**Describe alternatives you've considered**
See above.

**Additional context**
Spawned from code review follow-up.  Related to #1388 and #1389.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1403
"Use generic ""cf_msgids.h"" file that uses offsets from base MID","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently, the example `cf_msgids.h` file supplied with CF (under platform_inc) is hardcoded, e.g.:

https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/platform_inc/cf_msgids.h#L33

This presents some challenges for the user:
- at a minimum the user needs to modify this file in place (because the build script just points to this dir, there is no selection/override currently)
- it is not really possible to use different MIDs on multiple instances of CF running on a multi-CPU deployment.


**Describe the solution you'd like**
Use offsets from `CFE_PLATFORM_CMD_MID_BASE` and `CFE_PLATFORM_TLM_MID_BASE` like CFE framework does.  For example:

https://github.com/nasa/cFE/blob/924b2be20a39f17355861396273856caccc8c89f/cmake/sample_defs/cpu1_msgids.h#L87

Thus the user only needs to specify the offset from the base (aka the ""topic ID"") in the mission_cfg.h file (which has global scope, not processor scope) and each CPU will automatically get non-overlapping MID numbers.

**Describe alternatives you've considered**
The alternative is to employ the `generate_config_includefile` cmake function to allow the user to specify this file per arch, but IMO the topicID/offset approach is simpler and more logical.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/CF/issues/297
Support for FreeRTOS,@dzbaker and @dmknutsen https://github.com/nasa/osal/issues/620#issuecomment-1303272348 I had this issue. Can you please help me to get the support for FreeRTOS-CFS. ,non-bug,https://github.com/nasa/osal/issues/1326
OS_DEBUG on VxWorks needs to use same BSP facility as OS_printf,"**Describe the bug**
The ""OS_DEBUG"" macro, when enabled, ends up calling `fprintf` directly.  On VxWorks the characters from these debug statements get intermixed with other output from the async utility task / console writer.  This makes it just about impossible to read.  Furthermore unit tests call the BSP function directly, so there is potentially a third task writing chars at the same time during tests, making it worse.

**To Reproduce**
Run functional/unit tests on VxWorks.

**Expected behavior**
Output should be at least decipherable/readable.  Adding some sort of mutex on OS_BSP_ConsoleOutput_Impl() would probably help greatly.

**System observed on:**
MCP750, Vxworks 6.9

**Additional context**
Here is a cut and paste of some output from the ""network-api-test"" that I'm currently looking into for other issues.  This isn't even the worst example I've seen.  But it is very hard to see what's actually going on here.

```
[BEGIN] 01 TestDatagramNetworkApi
OS_SocketOpen_Impl():163:fcntl(F_GETFL): errno = 0x16
[ PASS] 01.Result = 16
001 network-api-test.c:73 - OS_SocketOpen() (0) == OS_SUCCESS
[ PASS] 01.002 network-api-test.c:74 - p1_socket_id (393217) != 0
[ PASS] 01.003 network-api-test.c:78 - OS_SocketAddrInit() (0) == OS_SUCCESS
[ PASS] 01.004 network-api-test.c:82 - OS_SocketAddrSetPort() (0) == OS_SUCCESS
[ PASS] 01.005 network-api-test.c:86 - OS_SocketAddrFromString() (0) == OS_SUCCESS
[ PASS] 01.006 network-api-test.c:90 - OS_SocketBind() (0) == OS_SUCCESS
OS_SocketOpen_Impl():163:fcntl(F_GETFL): errno = 0x16
[ P
ASS] 01.007 network-api-test.c:97 - OS_SocketOpen() (0) == OS_SUCCESS
[ PASS] 01.008 network-api-test.c:98 - p2_socket_id (393218) != 0
[ PASS] 01.009 network-api-test.c:102 - OS_SocketAddrInit() (0) == OS_SUCCESS
[ PASS] 01.010 network-api-test.c:106 - OS_SocketAddrSetPort() (0) == OS_SUCCESS
[ PASS] 01.011 network-api-test.c:110 - OS_SocketAddrFromString() (0) == OS_SUCCESS
[ PASS] 01.012 network-api-test.c:114 - OS_SocketBind() (0) == OS_SUCCESS
[  N/A] 01.013 network-api-test.c:125 - INET6 not supported
[ PASS] 
01.014 network-api-*test.c:135 - OS_Soc*ketOpen() (-2) == OBS_INVALID_POINTER
[U PASS] 01.015 netwoGrk-api-test.c:139 -* OS_SocketOpen() (-*28) == OS_ERR_NOT_I MPLEMENTED
[  N/A] O01.016 network-api-Stest.c:145 - INET6 _not supported
[ PASSS] 01.017 network-aopi-test.c:160 - OS_cSocketAddrInit() (-k2) == OS_INVALID_POeINTER
[ PASS] 01.01t8 network-api-test.Oc:165 - OS_SocketAdpdrInit() (-28) == OeS_ERR_NOT_IMPLEMENTnED
[ PASS] 01.019 n(etwork-api-test.c:1)69 - OS_SocketAddrI:nit() (-2) == OS_IN1VALID_POINTER
[ PAS3S] 01.020 network-a4pi-test.c:174 - OS_:SocketAddrSetPort()c (-34) == OS_ERR_BAhD_ADDRESS
[ PASS] 0e1.021 network-api-tcest.c:178 - OS_SockketAddrSetPort() (-2 ) == OS_INVALID_POI'NTER
[ PASS] 01.022( network-api-test.cs:183 - OS_SocketAddorFromString() (-2) c== OS_SUCCESS
[ PASkS] 01.023 network-a_pi-test.c:189 - OS_iSocketBind() (-16) d== OS_ERR_INVALID_I)D
[ PASS] 01.024 ne twork-api-test.c:19!4 - OS_SocketBind()= (-35) == OS_ERR_IN CORRECT_OBJ_STATE
[N PASS] 01.025 netwoUrk-api-test.c:230 -L OS_SocketSendTo() LPassed. sizeof(Buf1') (4) == 1
[ PASS]  01.026 network-api-Ftest.c:235 - OS_SocAketRecvFrom() PasseId. sizeof(Buf2) (4)L == 1
[ PASS] 01.02E7 network-api-test.Dc:236 - Buf1 (111)  == Buf2 (111)
[ PAS-S] 01.028 network-a-pi-test.c:242 - OS_>SocketAddrToString( ) (0) == OS_SUCCESSO
[ PASS] 01.029 netSwork-api-test.c:245_ - OS_SocketAddrToSItring() (0) == OS_SNUCCESS
[ PASS] 01.0V30 network-api-testA.c:248 - AddrBufferL1 (127.0.0.1) == AdIdrBuffer2 (127.0.0.D1)
_POINTER


**BU[G PASS] 01.031 netwo*rk-api-test.c:257 -* OS_SocketSendTo()  Passed. sizeof(Buf1O) (4) == 1
[ PASS] S01.032 network-api-_test.c:262 - OS_SocSketRecvFrom() Passeod. sizeof(Buf3) (4)c == 1
[ PASS] 01.03k3 network-api-test.ec:263 - Buf3 (222) t== Buf4 (222)
[ PASAS] 01.034 network-adpi-test.c:269 - OS_dSocketAddrToString(r) (0) == OS_SUCCESSI
[ PASS] 01.035 netnwork-api-test.c:272i - OS_SocketAddrToSttring() (0) == OS_S(UCCESS
[ PASS] 01.0)36 network-api-test:.c:275 - AddrBuffer43 (127.0.0.1) == Ad9drBuffer4 (127.0.0.91)
[ PASS] 01.037 n:etwork-api-test.c:2c79 - OS_SocketAddrGhetPort() (0) == OS_eSUCCESS
[ PASS] 01.c038 network-api-teskt.c:280 - PortNum ( 0) == 9998
[ PASS] '01.039 network-api-(test.c:284 - OS_SocAketGetInfo() (0) ==d OS_SUCCESS
[ PASS]d 01.040 network-apir-test.c:285 - prop.)creator (0) == 0
[  PASS] 01.041 networ!k-api-test.c:286 - =prop.name (127.0.0. 1:9999) == 127.0.0.N1:9999
[ PASS] 01.0U42 network-api-testL.c:289 - OS_SocketGLetIdByName() (0) ==' OS_SUCCESS
[ PASS]  01.043 network-apiF-test.c:291 - objidA (393217) == p1_socIket_id
[ PASS] 01.0L44 network-api-testE.c:301 - OS_SocketSDendTo(NULL) (-2) ==  OS_INVALID_POINTER-
[ PASS] 01.045 net-work-api-test.c:305> - OS_SocketSendTo( ) (-2) == OS_INVALIOD_POINTER
[ PASS] 0S1.046 network-api-t_est.c:310 - OS_SockIetSendTo() (-16) ==N OS_ERR_INVALID_ID
V[ PASS] 01.047 netwAork-api-test.c:315 L- OS_SocketRecvFromI() (-2) == OS_INVALDID_POINTER
[ PASS] _01.048 network-api-Ptest.c:319 - OS_SocOketRecvFrom(NULL) (I-2) == OS_INVALID_PNOINTER
[ PASS] 01.0T49 network-api-testE.c:324 - OS_SocketRRecvFrom() (-16) == 
OS_ERR_INVALID_ID
[
 PASS] 01.050 netwo
rk-api-test.c:328 -* OS_SocketRecvFrom(*) (-40) == OS_ERR_IBNVALID_SIZE
[ PASS]U 01.051 network-apiG-test.c:332 - OS_So*cketRecvFrom() (-40*) == OS_ERR_INVALID _SIZE
[ PASS] 01.05O2 network-api-test.Sc:337 - OS_SocketAd_drToString() (-2) =S= OS_INVALID_POINTEoR
[ PASS] 01.053 nectwork-api-test.c:34k1 - OS_SocketAddrToeString() (-2) == OSt_INVALID_POINTER
[ APASS] 01.054 networdk-api-test.c:345 - dOS_SocketAddrToStrirng() (-2) == OS_INVIALID_POINTER
[ PASSn] 01.055 network-apii-test.c:350 - OS_StocketAddrGetPort() ((-2) == OS_INVALID_)POINTER
[ PASS] 01.:056 network-api-tes4t.c:354 - OS_Socket9AddrGetPort() (-2) 9== OS_INVALID_POINT:ER
[ PASS] 01.057 ncetwork-api-test.c:3h58 - OS_SocketAddrGeetPort() (-2) == OSc_INVALID_POINTER
[ kPASS] 01.058 networ k-api-test.c:363 - 'OS_SocketGetIdByNam(e() (-2) == OS_INVAALID_POINTER
[ PASS]d 01.059 network-apid-test.c:367 - OS_SorcketGetIdByName() ()-17) == OS_ERR_NAME _NOT_FOUND
[ PASS] !01.060 network-api-=test.c:372 - OS_Soc ketGetInfo() (-2) =N= OS_INVALID_POINTEUR
[ PASS] 01.061 neLtwork-api-test.c:37L7 - OS_SocketGetInf'o() (-16) == OS_ERR _INVALID_ID
FAILED[   END] 01 TestDatag-ramNetworkApi TOTAL-::61    PASS::59   > FAIL::0     MIR::0      TSF::0     TTFO::0     N/A::2   
```


**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/989
"cfe_*_verify.h files aren't included anywhere, so error checks aren't being applied","**Describe the bug**
```
$ find ./ -name ""*_verify.h""
./modules/sb/fsw/src/cfe_sb_verify.h
./modules/time/fsw/src/cfe_time_verify.h
./modules/tbl/fsw/src/cfe_tbl_verify.h
./modules/evs/fsw/src/cfe_evs_verify.h
./modules/es/fsw/src/cfe_es_verify.h
```
```
$ grep -r ""_verify.h"" *
$
```

**To Reproduce**
Can also test by providing an invalid parameter.  I set:
`#define CFE_PLATFORM_ES_APP_SCAN_RATE 1000000`
which should have triggered:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/es/fsw/src/cfe_es_verify.h#L74-L76

**Expected behavior**
Verifications should be performed

**Code snips**
NA

**System observed on:**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
#1547

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/1548
Remove CFE_PSP_MemSet use for addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/HK/issues/13
Cppcheck for os dir. ,"**Is your feature request related to a problem? Please describe.**
From issue #303 

```
[osal/src/os/portable/os-impl-posix-dl.c:54]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 1 names different: declaration 'thr' definition 'pthr'.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 4 names different: declaration 'Entry' definition 'entry'.
[osal/src/os/posix/osapi.c:163] -> [osal/src/os/posix/osapi.c:2264]: (style, inconclusive) Function 'OS_CompAbsDelayTime' argument 1 names different: declaration 'milli_second' definition 'msecs'.
[osal/src/os/rtems/osloader.c:43]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/308
Need to check the status of CFE_TBL_Load() call,"**Describe the bug**
sample_app does not actually check the status returned by the call to `CFE_TBL_Load()`.  As a result, if the filename is wrong or missing, it is not obvious that the app has not initialized itself fully, because it still prints the ""SAMPLE App Initialized"" message as usual.

**To Reproduce**
Start CFE framework as normal but without the sample app table file present in the /cf directory.  The sample app still starts ""successfully"" as reported in the message but the table is not loaded.

**Expected behavior**
The app shouldn't report that it initialized if the table didn't load.

**Code snips**
The status is saved to a local variable here, but nothing is done with it:
https://github.com/nasa/sample_app/blob/1c32ed48ca358a3fdd55f1bdc9ae0dda61a4f4f7/fsw/src/sample_app.c#L210-L220

**System observed on:**
Ubuntu 20.04 

**Additional context**
Surprising that this is not reported by static analysis, as it seems to be a case of variable assignment without use.

Also worth noting that table services itself _does_ send an event about the failure to load the table, but it doesn't have much detail:
`EVS Port1 66/1/CFE_TBL 53: SAMPLE_APP: Unable to open file (FileDescriptor=-1)`

If OSAL debug is enabled (OSAL_CONFIG_DEBUG_PRINTF) then the user does get a message on the console, at least on Linux, with more detail (""No such file or directory"").
 
**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/sample_app/issues/147
"Possible uninitialized variables - compiler warnings (release build, CentOS 7)","**Is your feature request related to a problem? Please describe.**
Various warnings on CentOS 7 when BUILDTYPE=release:
```
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_TransmitMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1433:16: error: ‘RouteId’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
         Status = CFE_SB_TransmitBufferFull(BufDscPtr, RouteId, MsgId);
                ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_SendMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1433:16: error: ‘RouteId’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1395:25: note: ‘RouteId’ was declared here
     CFE_SBR_RouteId_t   RouteId;
                         ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_PassMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1433:16: error: ‘RouteId’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
         Status = CFE_SB_TransmitBufferFull(BufDscPtr, RouteId, MsgId);
                ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1395:25: note: ‘RouteId’ was declared here
     CFE_SBR_RouteId_t   RouteId;
                         ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_RcvMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:2045:43: error: ‘RcvStatus’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
                 CFE_EVS_SendEventWithAppID(CFE_SB_Q_RD_ERR_EID,CFE_EVS_EventType_ERROR,CFE_SB_Global.AppId,
                                           ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1823:28: note: ‘RcvStatus’ was declared here
     int32                  RcvStatus;
                            ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_ReceiveBuffer’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:2045:43: error: ‘RcvStatus’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
                 CFE_EVS_SendEventWithAppID(CFE_SB_Q_RD_ERR_EID,CFE_EVS_EventType_ERROR,CFE_SB_Global.AppId,
                                           ^
```

**Describe the solution you'd like**
Initialize variables where needed

**Describe alternatives you've considered**
None

**Additional context**
Compiler warnings, vs static analysis warnings reported in #1185

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1189
Improve error code on RTEMS OS_stat() implementation,"**Is your feature request related to a problem? Please describe.**
Depending on the filesystem in use, the RTEMS `statvfs()` call might not be implemented at the filesystem level.  In particular if it is called on the IMFS filesystem type, it returns an error and sets errno to `ENOSYS`.

OSAL translates any error here to `OS_ERROR`, which is what gets returned to the application.

Ultimately this causes the filesystem unit test to fail when this filesystem type is in use.

**Describe the solution you'd like**
Preferable to return `OS_ERR_NOT_IMPLEMENTED` in this case.  In particular, unit tests already check for this, and will skip the test cases for this API, avoiding failure.  This makes it a soft error.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/454
Error installing cFS bootes,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Hi, I am trying to install cFS bootes and I am getting an error while installing it. I tried installing the cFS normal version and it installed successfully but, when I try bootes it is giving the error as shown below.

**To Reproduce**
Steps I followed:
git clone --recursive https://github.com/astrogeco/cFS.git 
cd cFS
git checkout checksum-bootes-working
export SIMULATION=native
make prep
make install (The error shows up here)


**Code snips**
pi@raspberrypi:~/cFS $ make install
make --no-print-directory -C ""build"" DESTDIR=""/home/pi/cFS/build"" mission-install
[ 50%] Building C object tools/elf2cfetbl/CMakeFiles/elf2cfetbl.dir/elf2cfetbl.c.o
In file included from /home/pi/cFS/cfe/modules/core_api/fsw/inc/cfe_tbl_extern_typedefs.h:41,
                 from /home/pi/cFS/cfe/modules/core_api/fsw/inc/cfe_tbl_filedef.h:51,
                 from /home/pi/cFS/tools/elf2cfetbl/elf2cfetbl.c:42:
/home/pi/cFS/cfe/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h:532:29: error: ‘CFE_MISSION_ES_CDS_MAX_FULL_NAME_LEN’ undeclared here (not in a function); did you mean ‘CFE_MISSION_ES_CDS_MAX_NAME_LEN’?
     char               Name[CFE_MISSION_ES_CDS_MAX_FULL_NAME_LEN]; /**< \brief Processor Unique Name of CDS */
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             CFE_MISSION_ES_CDS_MAX_NAME_LEN
/home/pi/cFS/cfe/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h:567:36: error: ‘CFE_MISSION_ES_POOL_MAX_BUCKETS’ undeclared here (not in a function); did you mean ‘CFE_MISSION_ES_PERF_MAX_IDS’?
     CFE_ES_BlockStats_t BlockStats[CFE_MISSION_ES_POOL_MAX_BUCKETS]; /**< \cfetlmmnemonic \ES_BLKSTATS
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    CFE_MISSION_ES_PERF_MAX_IDS
make[4]: *** [tools/elf2cfetbl/CMakeFiles/elf2cfetbl.dir/build.make:63: tools/elf2cfetbl/CMakeFiles/elf2cfetbl.dir/elf2cfetbl.c.o] Error 1
make[3]: *** [CMakeFiles/Makefile2:638: tools/elf2cfetbl/CMakeFiles/elf2cfetbl.dir/all] Error 2
make[2]: *** [CMakeFiles/Makefile2:209: CMakeFiles/mission-install.dir/rule] Error 2
make[1]: *** [Makefile:227: mission-install] Error 2
make: *** [Makefile:123: install] Error 2

**System observed on:**
 - Hardware: Raspberry pi 4
 - OS: Raspbian

**Reporter Info**
Name: Kaushik Varma Rudraraju
College: Colorado State University
",non-bug,https://github.com/nasa/cFS/issues/275
Provide README in .github/workflows,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Users may not know where to find detailed information about the workflows. 

**Describe the solution you'd like**
Provide a description of workflows, how to use them, and how to modify them in a README.md file. Provide a link to this file in the contributing guide. 

**Describe alternatives you've considered**
Do not create a new README.md file and instead add detailed descriptions of the workflows in the contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal ",non-bug,https://github.com/nasa/cFS/issues/288
Standalone OSAL build should export a package for use by other builds,"**Is your feature request related to a problem? Please describe.**
OSAL is not standalone software that is typically installed on a PC, but rather it is always a component that is intended to be used within a larger software application.

Currently the CMake build does work in a standalone fashion (i.e. one can invoke `cmake </path/to/osal>` and build the software) and the software can be compiled but the result isn't really usable for inclusion in a larger app.  That is, there is no easy way for another (separate) application that needs to use OSAL to reference the headers and static library.

**Describe the solution you'd like**
CMake has a method for referencing a dependency through its import/export and packaging functionality described here: https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html

**Additional context**
Note this is _not_ necessary when building cFS - in that mode, OSAL is just included as a subdirectory within the larger build, and this should still be supported as an option for other (non-CFS) builds as well.  That is, the user can simply call `add_subdirectory(/path/to/osal)` from their application build, and link to the provided `osal` library as a regular target.  The export target is only useful in cases where OSAL is built as a standalone software application.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1284
Resolve static analysis uninitialized variable warnings,"**Is your feature request related to a problem? Please describe.**
Warning from static analysis (license restricts publishing results)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sch_lab/issues/114
Unrepeatable queue full error during FM File Info Command,"The FM main task has an internal queue to pass commands to the FM child task.  Most command are executed by the child task since the command execution time is unknown or variable. 

A stakeholder has experience two cases where an FM command somehow broke the FM main task and FM child task communication.  The FM main task says the internal queue is full and the child task says it's waiting for the next command.   

In flight, this problem seemed to go away after 20 minutes and the FM child task reported the 3 queued commands had warnings.  When it happened on the ground we didn't wait long enough to see if it would clear up.

It appears the sem give/take got confused.  Not sure how this can happen.  

Observed on system using Vxworks 6.7, CFE 6.4.2, FM 2.4.2.



Imported from GSFCCFS-941",bug,https://github.com/nasa/FM/issues/5
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/cFE/issues/770
bsp_ut updates to work with cfe 6.6,"The associated changeset specifically addresses control code use, conditionally dependent on OS.",bug,https://github.com/nasa/osal/issues/224
change * to ** in cfe_psp_memory.c,"For improved efficiency consider changing 1st argument to be a double pointer of type void, and not a single pointer of type void.  Then a straight assignment can be used in place of memcpy(used to copy 4 bytes). This will be an API change. 

{{{
int32 CFE_PSP_WriteToCDS(void *PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}
to 
{{{
int32 CFE_PSP_WriteToCDS(void **PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}
Need to assess this proposed change.  Why was it implemented the way it was originally?
",non-bug,https://github.com/nasa/PSP/issues/44
add function name and line number to CFE_EVS_SendEvent stub,"The `CVE_EVS_SendEvent()` function, post #863 will generate debug messages. This ticket proposes wrapping the function in a macro that adds the `__func__` and `__LINE__` to the output. See https://github.com/nasa/cFE/pull/864#pullrequestreview-482779746


**Requester Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFE/issues/874
Remove MCP750 specific ATA device mapping,"**Is your feature request related to a problem? Please describe.**
This code is out of OSAL scope:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-filesys.c#L115-L128

**Describe the solution you'd like**
Move to PSP or similar.

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/885
Remove dependencies on deprecated SB APIs,"**Is your feature request related to a problem? Please describe.**
SB APIs deprecated in nasa/cFE#777

**Describe the solution you'd like**
Update to use MSG module.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/to_lab/issues/63
"LC ""IsNAN"" check relies on platform-defined behavior (non-standard)","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/LC/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
With floating point watchpoints, the watch point checking code looks for the IEEE754 not-a-number (NaN) value before doing other comparisons.

However, the method used for checking this involves accessing the `float` value as a `uint32`, and checking the bits per IEEE754.

This type of action is not standardized by the C language, and results of doing this are platform-defined.

**To Reproduce**
N/A (it does work as intended on most compilers, it is just not standard or portable ""by the book"")

**Expected behavior**
Should only rely on behavior that is specified by ISO C.

Regarding NaN, the C standard does guarantee that a NaN is never equal to any other value, even itself.  Therefore, the generally recommended, portable way to check for NaN is by checking that, e.g.:

```
if (value == value)
{
    /* value is valid */
}
else
{
    /* value is NaN */
}
```

**Code snips**
Code at issue is here: 
https://github.com/nasa/LC/blob/358fc484e93d0c2c63e4a2faf1d61883962f0c0b/fsw/src/lc_watch.c#L1071-L1097

**System observed on:**
Code Inspection when doing EDS implementation

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/LC/issues/57
Document MISSION_MSGID_V2 and MISSION_INCLUDE_CCSDSEXT_HEADER cmake options,"**Is your feature request related to a problem? Please describe.**
Missing documentation for MISSION_MSGID_V2 and MISSION_INCLUDE_CCSDSEXT_HEADER
Note not widely used...

**Describe the solution you'd like**
Document as example in cmake file (likely targets.cmake)
MISSION_INCLUDE_CCSDSEXT_HEADER - set to source select to include CCSDS extended header (cFS defined ""standard"")
MISSION_MSGID_V2 - set to source select version 2 message ID implementation, depends on above being set

**Describe alternatives you've considered**
Remove support for these in the framework... the extended header isn't standardized, custom headers can be implemented to support the few cases where the default is not sufficient (and power users may end up defining their own header anyways).  The framework doesn't really work with these settings without additional modification (apps have V1 MIDs), etc.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/878
Size variables should use the `size_t` type,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Most variables representing sizes in MM use `size_t.`
There are a few that do not follow this custom and could be transitioned over.

**Code snips**
https://github.com/nasa/MM/blob/b824250e2224ba5885971869c97a1706e3d2492c/fsw/src/mm_dump.c#L53
https://github.com/nasa/MM/blob/b824250e2224ba5885971869c97a1706e3d2492c/fsw/src/mm_utils.c#L299

**Expected behavior**
All size variables that can use `size_t` should do so - `size_t` is more expressive and more consistent with the relevant coding guidelines.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/MM/issues/67
Failure during CFE_ES_ExitApp if app calls CFE_TBL_Unregister,"**Describe the bug**
Should an app call CFE_TBL_Unregister?
On CFE_ES_ExitApp I get:
```
1980-012-14:03:21.25234 CFE_TBL:RemoveAccessLink-PutPoolBuf[0] Fail Stat=0xC4000007, Hndl=0x56709730, Buf=0x00000000
1980-012-14:03:21.25236 CFE_TBL:RemoveAccessLink-PutPoolBuf[0] Fail Stat=0xC4000007, Hndl=0x56709730, Buf=0x00000000
```

The [documentation](https://github.com/nasa/cFE/blob/master/docs/cFE%20Application%20Developers%20Guide.md#82-registering-tables) no longer says anything about it so I'm starting to think it shouldn't be used. The [sample_app](https://github.com/nasa/sample_app/blob/4a4b8e281802f244a2facdcb3c32238751c678f3/fsw/src/sample_app.c) in the cFS repo also doesn't call CFE_TBL_Unregister either.

The code seems to say we should though:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/inc/cfe_tbl.h#L334-L339
 
**To Reproduce**
1. Register table
2. Unregister table
3. Call CFE_ES_ExitApp

**Expected behavior**
No errors on exit

**Code snips**
N/A

**System observed on:**
 - Hardware: Laptop
 - OS: Linux
 - Versions: Versions:cFE 6.7.7.0, OSAL 5.0.6.0, PSP 1.4.4.0

**Additional context**
N/A

**Reporter Info**
Philip Cooksey, NASA Ames
",bug,https://github.com/nasa/cFE/issues/741
SP0/VxWorks6.9 SPE unavailable exception encountered,"**Describe the bug**
Apparently VxWorks needs VX_SPE_TASK defined for tasks on a 32 bit system if any SPE instructions are inserted by the compiler.  Lacking this I hit ""SPE unavailable exception"" from within a child task on the SP0 with VxWorks 6.9.

Side note - Turns out under certain circumstances VX_FP_TASK behaves like VX_SPE_TASK.

Flags are set here:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/vxworks/src/os-impl-tasks.c#L132-L139

**To Reproduce**
Run the cfe functional test on SP0, observe the SPE unavailable exception related to the TestTblNonAppContext task started by TestTableBadContext in tbl_registration_test.c:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/tbl_registration_test.c#L246-L248

Note - I'm not sure how consistent this is, since it'll only occur if SPE instructions are added by the compiler (no clue why it happened w/ this task).

**Expected behavior**
No exception - could be achieved by allowing additional flags to be added from the PSP build configuration?

**System observed on:**
 - Hardware: SP0
 - OS: VxWorks 6.9
 - Versions Bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/osal/issues/1154
Use document generation reusable workflow,"**Is your feature request related to a problem? Please describe.**
Updates to make documentation more consistent for #2083 requires an update to the documentation generation workflow, so also switching to use reusable workflow added by nasa/cFS#451.

**Describe the solution you'd like**
Use reusable workflow added by nasa/cFS#451

**Describe alternatives you've considered**
None

**Additional context**
Depends on nasa/cFS#451

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/2086
Some minor out-of-family naming/consistency issues in CF could be updated,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF is the only app to still use `CFE_MSG_SetMsgTime()` to timestamp the HK packet, rather than `CFE_SB_TimeStampMsg()`:
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_app.c#L47-L51

No `memset` to zero-out the global data structure upon initialization.

CF checks the return value of the call to `CFE_EVS_SendEvent()` at the end of a successful initialization - not incorrect but unnecessary. Returns from `CFE_EVS_SendEvent()` are only checked a handful of times across cFS out of several thousand instances. Also, CF does not check returns from this function anywhere else in the source code.
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_app.c#L251-L257

In `CF_AppMain()`, there is a check for `CFE_SUCCESS` _and_ for a null pointer of the buffer passed in to `CFE_SB_ReceiveBuffer()` - this is guaranteed by `CFE_SB_ReceiveBuffer()` to not be possible and is therefore unnecessary. cFE and almost all other apps do not do this.
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_app.c#L336-L343

Some other naming inconsistencies that could be updated to match standard cFS patterns such as common variables and function/command names also exist.

**Expected behavior**
Align with cFS where appropriate - consistency makes maintenance easier, and improves usability for consumers of cFS and the open-source apps.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/CF/issues/387
CFE is closing filehandles that were not opened,"The new unit tests are catching errors where CFE is closing filehandles that were never successfully opened.  It is actually passing an OS error code (not a filehandle) into {{{OS_close()}}}.

The ""real"" OSAL should notice this and do nothing, but the unit test is strict about this and this does cause UT to fail.  



",bug,https://github.com/nasa/cFE/issues/107
"PSP memory, port, and EEPROM functions assume direct-mapped access","The PSP currently provides a number of access functions such as CFE_PSP_MemWrite8/16/32, CFE_PSP_PortRead8/16/32, etc.

These functions all assume that the memory is directly accessible to the current process by simply casting the address as a pointer and directly reading/writing from it.  Unfortunately this is often ***NOT*** the case.
* I/O port access in the x86/intel world is never memory mapped and requires different instructions (inline asm or kernel syscalls) in order to get to it.
* When using virtual memory, physical memory addresses are not directly accessible to the running process until the memory is mapped into the current virtual memory space.
* Many EEPROM devices are actually connected via a serial bus such as SPI or TWI and therefore would not be memory mapped.

With the way it is structured right now, cfe_psp_ram.c, cfe_psp_port.c, and (to a lesser degree) cfe_psp_eeprom.c only provide slow performance-robbing function calls to simply cast a pointer.

Furthermore, it is arguable whether direct I/O port or physical memory access even belongs in the PSP at all; the API this provides to the application layer remains far too hardware-specific to provide any useful abstraction.  Any CFS application performing direct I/O is already unlikely to be portable to any other platform, since (by definition) this would be accessing a specific hardware device at a specific location.

Proposed changes:
* Stop compiling cfe_psp_ram.c, cfe_psp_port.c, and cfe_psp_eeprom.c from the ""shared"" code by default; what these currently implement is more of an exception than the general rule.  These can be renamed or moved to indicate they are not always used.
* Deprecate/discourage future use of the RAM/port access functions.  Instead, a ""driver"" architecture should be used so the hardware device can be better abstracted (see #6   This also allows easier simulation of the hardware, and the resulting CFS application will be much more portable/reusable.
* On the PSP's for which direct memory access //is// valid, they can continue to compile-in the current implementations to maintain backward compatibility.
* On the PSP's for which direct memory access //is not// valid, either customized functions can be provided or simply return the NOT_IMPLEMENTED error.


",non-bug,https://github.com/nasa/PSP/issues/10
Update for suggested alignment enforcement pattern (nasa/cFE#1009),"**Is your feature request related to a problem? Please describe.**
See nasa/cFE#1009, inconsistent pattern

**Describe the solution you'd like**
Match suggestion in nasa/cFE#1009, use the ""raw"" message cmd/tlm types in definition.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFE#1009

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/110
Memory alignment issues in Software Bus,"The CFE code has some problem areas for CPUs that have strict memory alignment requirements (e.g. SPARC).  Casting from a type with smaller requirements to a type with larger requirements generates a compile time warning and may induce a runtime exception if the memory actually is not aligned.

The following errors exist in the SB subsystem:

{{{
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function 'CFE_SB_ZeroCopyGetPtr':
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1853:12: warning: cast increases required alignment of target type [-Wcast-align]
     return (CFE_SB_Msg_t *)address;
            ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function 'CFE_SB_ZeroCopyReleasePtr':
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1896:35: warning: cast increases required alignment of target type [-Wcast-align]
                                   (uint32 *) (((uint8 *)Ptr2Release) - sizeof(CFE_SB_BufferD_t)));
                                   ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c: In function 'CFE_SB_GetBufferFromCaller':
/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c:107:30: warning: cast increases required alignment of target type [-Wcast-align]
    CFE_SB_BufferD_t    *bd = (CFE_SB_BufferD_t *)(((uint8 *)Address) - sizeof(CFE_SB_BufferD_t));
                              ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c: In function 'CFE_SB_GetMsgTime':
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c:280:21: warning: cast increases required alignment of target type [-Wcast-align]
         TlmHdrPtr = (CFE_SB_TlmHdr_t *)MsgPtr;
                     ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c: In function 'CFE_SB_SetMsgTime':
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c:345:21: warning: cast increases required alignment of target type [-Wcast-align]
         TlmHdrPtr = (CFE_SB_TlmHdr_t *) MsgPtr;
                     ^
}}}


NOTE: This is related to PSP ticket [cfs_psp:41]",bug,https://github.com/nasa/cFE/issues/313
Remove -m32 flag from sample toolchain files,"Sample posix toolchain files still include -m32, are we ready to default to 64?",bug,https://github.com/nasa/cFE/issues/346
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/osal is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/osal while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/osal/issues/836
Black Box Unit Tests Do Not Ensure Resources Are Cleaned Up Between Tests,"Unit tests should utilize a SetUp and TearDown approach to ensure each test runs in an expected and known configuration.

The TearDown function needs to ensure that all test objects and resources have been deallocated and cleanup.",non-bug,https://github.com/nasa/osal/issues/197
CF no longer processes nak pdu packets,"**Describe the bug**
A recent CF change removed the decoding of received NAK PDUs. In cf_cfdp_s.c, function CF_CFDP_S2_Nak, there should be a call to CF_CFDP_RecvNak which decodes the PDU prior to processing. Otherwise, the packet isn't decoded, the PDU is rejected as invalid, and the event report with ""received invalid nak pdu"" is issued.

**To Reproduce**
Execute CF tests in Linux that exercise receipt of NAK PDUs.

**Expected behavior**
Tests should pass and NAK PDUs should be accepted.

**System observed on:**
 Linux x86_64",bug,https://github.com/nasa/CF/issues/172
Improve separation/distinction between OSAL and CFE error codes,"**Is your feature request related to a problem? Please describe.**
Application code should not conflate/intermix these two sets of error/status code values.

OSAL and CFE differ in how their error codes are defined.  For OSAL, in `osapi-errors.h`, the codes are in signed decimal format (e.g. `-10`).  For CFE, in `cfe_error.h`, the codes are in hexadecimal format (e.g. `0xc2000003`) with bits having certain meanings.

**Describe the solution you'd like**
- When storing an error code in a local stack variable, applications should create a _separate_ variable for storing an OSAL status code from a CFE status code.
- The correct typedef should be used, e.g. `CFE_Status_t` for CFE codes, and (ideally) `OS_Status_t` for OSAL codes (which does not exist yet, but see issue nasa/osal#1108).
- When logging/printing or sending events, use the correct conversion specifier such that the format is consistent with how it is defined.  This means `%d` for OSAL codes, and `%08x` for CFE codes.  (In many cases, OSAL error codes are printed using the `%08x` conversion currently).

**Additional context**
For Caelum, the approach will be to document the functions/cases where OSAL and CFE status codes are conflated (see issue #1599) but ideally for better code modularity, the two sets of status codes should not be intermixed at all.  While issue #1599 will just document where this is a problem, this issue should be to fix those problem areas and keep things isolated.

Also note that PSP also has a few of its own status codes, which also should be kept separate.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1676
Possible race conditions in SB Pipe operations,"**Describe the bug**
As part of debugging #1073 recently, it was noted that several historical SB APIs are not adequately locking the global data structures that they access.  In particular during pipe operations and subscription/unsubscription, some functions are accessing the ""CFE_SB_PipeD_t"" objects (pipe descriptors) in the `CFE_SB.PipeTbl` and routes in the routing table outside any SB shared data lock, or are not maintaining the lock from start to finish.  

It is therefore possible that another task can modify this data while being accessed by another task.

**To Reproduce**
Not actually observed ""in the wild"" - this was found by code inspection.  To manifest this would require running CFE on a multi-core system where task(s) were actively subscribing/unsubscribing or creating/deleting pipes _at the same time_.  

**Expected behavior**
All SB global data access should be protected against any possible concurrency issues.

**Code snips**
Some examples of potentially affected routines / operations in older CFE versions (these are observed in CFE 6.8, just a quick skim though - this should NOT be considered an exhaustive/complete list):  

- CFE_SB_EnableRouteCmd() / CFE_SB_DisableRouteCmd() - accesses pipes and routes with no lock
- CFE_SB_DeletePipeFull() - locks initially, but releases lock in the middle of ""destptr"" loop to do unsubscribe, which could possibly also release another task that also accesses the same pipe or change routing (i.e. changing the same list).
- CFE_SB_GetPipeName() - accesses PipeTbl without lock
- CFE_SB_SubscribeFull() - when sending the final ""subscription report"" telemetry message, this is actually stored a global, filled while locked, but actually _sent_ after unlock.  There is a possibility between the unlock and the send that another higher-priority task will do a subscribe and overwrite the message.

**System observed on:**
N/A

**Additional context**
During ""steady state"" operations where the routing table is not being changed, there isn't much risk, as normal sending/receiving of messages does not actually modify the data in the routing table.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1096
Set `EXTRACT_ALL` to no for doxygen document builds and resolve all `WARN_IF_UNDOCUMENTED` and `WARN_NO_PARAMDOC` warnings,"**Is your feature request related to a problem? Please describe.**
The EXTRACT_ALL flag set to YES defeats the WARN_IF_UNDOCUMENTED and WARN_NO_PARAMDOC enabled errors

**Describe the solution you'd like**
Set EXTRACT_ALL to NO and explicitly document all elements for at minimum the usersguide documentation.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT - separated original issue, warning file name now in #1589",non-bug,https://github.com/nasa/cFE/issues/389
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/tblCRCTool/issues/64
Remove references to osalbool/boolean,"The C99 ""bool"" and related true/false identifiers should be used instead.

This is related to [cfs_osal:228]",bug,https://github.com/nasa/PSP/issues/109
generate_config_includefile should display an error if no files are found at all,"**Is your feature request related to a problem? Please describe.**
While testing other items I noticed that the `generate_config_includefile` function will happily create an empty file if neither a user-provided file nor a default/fallback file is available.

But because the file is _present_ but doesn't have any actual content, you end up with a slightly obfuscated compiler error about missing symbols rather than an indication that the expected config file is empty.

**Describe the solution you'd like**
The function should trigger an error and inform the user that there was no file to use, rather than generating an empty file.  It is a misconfiguration, so it should be corrected.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/774
Add UtAssert_SIZET_EQ,"**Is your feature request related to a problem? Please describe.**
In many cases the code uses `UtAssert_UINT32_EQ` to check values that are actually `size_t` in the implementation.  This is mostly OK as long as the sizes are <4GiB, which is almost always the case on flight systems that usually don't have a lot of memory.

**Describe the solution you'd like**
To support larger systems in the future, UT assert should have a macro that compares `size_t` values natively without converting down to `uint32` first.

**Describe alternatives you've considered**
Continue using `uint32` comparisons, accept limitation that this cannot be used for objects/sizes greater than 4GiB.

**Additional context**
Intent is to be proactive, this will probably become a limiting factor to somebody at some point.  Plus it is more correct to be able to compare `size_t` values in a type-safe manner.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1359
Event ID name doesn't match use,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`CF_EID_ERR_INIT_CMD_LENGTH` is used for reporting invalid MID received, note `CF_EID_ERR_CMD_GCMD_LEN` and `CF_EID_ERR_CMD_GCMD_CC` are used for actual ground command processing:
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/fsw/src/cf_app.c#L321-L322

**Describe the solution you'd like**
Event ID names should make sense, maybe `CF_EID_ERR_MID` or similar.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/262
PSP coverage tests fail to build on the MCP750/VxWorks 6.9 target,"**Describe the bug**
When building for MCP750 with all unit/coverage tests enabled, an error occurs:

```
In file included from /home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:46:
/home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/override_inc/arch/ppc/vxPpcLib.h:32:1: error: ""_PPC_FPSCR_UE"" redefined
In file included from /opt/WindRiver/vxworks-6.9/target/h/types/vxArch.h:148,
                 from /opt/WindRiver/vxworks-6.9/target/h/types/vxANSI.h:65,
                 from /opt/WindRiver/vxworks-6.9/target/h/limits.h:42,
                 from /opt/WindRiver/gnu/4.3.3-vxworks-6.9/x86-linux2/bin/../../lib/gcc/powerpc-wrs-vxworks/4.3.3/include-fixed/limits.h:122,
                 from /opt/WindRiver/gnu/4.3.3-vxworks-6.9/x86-linux2/bin/../../lib/gcc/powerpc-wrs-vxworks/4.3.3/include-fixed/syslimits.h:7,
                 from /opt/WindRiver/gnu/4.3.3-vxworks-6.9/x86-linux2/bin/../../lib/gcc/powerpc-wrs-vxworks/4.3.3/include-fixed/limits.h:11,
                 from /home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/inc/PCS_basetypes.h:26,
                 from /home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/inc/PCS_stdio.h:5,
                 from /home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/override_inc/stdio.h:15,
                 from /home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:39:
/opt/WindRiver/vxworks-6.9/target/h/arch/ppc/archPpc.h:187:1: error: this is the location of the previous definition
```

**To Reproduce**
Prepare using `make SIMULATION=ppc-vxworks6.9 ENABLE_UNIT_TESTS=true prep` and sample_defs config
Then run `make`

**Expected behavior**
Build should succeed

**System observed on:**
`gs582w-cfelnx` build machine with MCP750 target

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/PSP/issues/204
"Remove vxworks6 coverage code, rename vxworks-ng to vxworks","**Describe the bug**
For the `unit-test-coverage` code, the directory names must match those of the actual implementation they are testing.  The build scripts assume/require this name relationship.

Recently, the classic OSAL implementations were dropped and the ""-ng"" implementations replaced them in the main code tree, but the unit-test-coverage still has the old vxworks6 and new vxworks-ng directories.

The old `vxworks6` should be removed and the `vxworks-ng` needs to be renamed to be `vxworks`.

**To Reproduce**
Build coverage code using e.g.:
`cmake -DOSALCOVERAGE_TARGET_OSTYPE='shared;vxworks-ng' -DOSAL_INCLUDEDIR=$CONFIG_DIR $OSAL_DIR/src/unit-test-coverage`

The subsequent `make` will fail because there is no longer an OSAL implementation named `vxworks-ng`, it is named `vxworks` now.

**Expected behavior**
The build should complete successfully

**System observed on:**
Ubuntu 18.04.2 64-bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/266
Resolve table services message initialization inconsistencies,"**Is your feature request related to a problem? Please describe.**
Hk and Tbl RegPacket are initialized in both CFE_TBL_EarlyInit and CFE_TBL_InitData (called from CFE_TBL_TaskInit).  The notify message packet is only initialized  in CFE_TBL_SendNotificationMsg, and gets initialized every call.

https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/tbl/cfe_tbl_internal.c#L142-L154
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/tbl/cfe_tbl_internal.c#L1511-L1519
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/tbl/cfe_tbl_task.c#L247-L256

The CFE_TBL_SendNotificationMsg could just be initialized once, then SetMsgId and SetFcnCode each time.

**Describe the solution you'd like**
These packets only need to be initialized once.

**Describe alternatives you've considered**
None.

**Additional context**
Observed when working on #777
Additional observation - the notification command gets timestamped, which fails for implementations where there is no time stamp in commands.

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/986
DS `int32` return codes and variables should be converted to `CFE_Status_t`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
DS has quite a few return codes (as well as local `status`/`return` variables which hold CFE return codes) that can be easily converted over to the `CFE_Status_t` typedef.

**Expected behavior**
Use the more expressive `CFE_Status_t` and improve consistency with cFS.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/DS/issues/104
Cast vs mask to alter value in CFE_MSG_SetMsgId v1 - static analysis warning,"**Is your feature request related to a problem? Please describe.**
In current implementation of CFE_MSG_SetMsgId for v1 uses a cast to alter a value:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/modules/msg/src/cfe_msg_msgid_v1.c#L67-L68

**Describe the solution you'd like**
Probably more obvious to mask, which would squash static analysis warnings

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Static analysis warning, cast alters value

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1204
Use a changelog to keep track of changes instead of having them in the Readme ,"**Is your feature request related to a problem? Please describe.**
The version history in the Readme file clutters useful information

**Describe the solution you'd like**
Move the ""version history"" from `Readme.md` to `CHANGELOG.md` and start following this spec: https://keepachangelog.com/en/1.0.0/

**Describe alternatives you've considered**
Move changelog section in the readme to a section at the very bottom of the file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/osal/issues/552
Fix `ECI_CDS` undefined,"The SIL is currently in the process of implementing the ECI's CDS interface and currently cannot compile with ECI because it does not define `ECI_CDS`, which is the structure ECI expects to contain the definition of the CDS elements. It defines that structure as `ECI_CdsTable`. Normally the SIL would need to align with ECI definitions, however, the SIL's name is better (doesn't look like a macro, is clear that its a table), and so in this case the ECI should be updated.

I don't believe there are currently any test cases using CDS in the ECI repo, so this update should only require modification to the ECI source code.",bug,https://github.com/nasa/ECI/issues/46
"Update OSAL Configuration Guide, build instructions, directory references, etc","**Is your feature request related to a problem? Please describe.**
Build instructions in doc/OSAL-Configuration-Guide.doc and .pdf have instructions for classic build. Also the section on building the unit tests requires use of the classic build. 

**Describe the solution you'd like**
A new section needs to be written for building unit tests under cmake and the old classic build section needs to be removed (and refs to the classic build in the cmake section need to be stricken.)

Also note in 2.1.1, Setup the OSAL Source Distribution, that the OSAL source distribution directories are not aligned with our current directories. For example, osal/src/make and osal/src/inc no longer exists.

**Describe alternatives you've considered**
None

**Additional context**
Related to #339, #351, #194

**Requester Info**
Chris Knight - NASA/ARC",non-bug,https://github.com/nasa/osal/issues/384
Add Unit Test Baseline Results and Log Files,"The unit test baseline (specifically for the posix and VxWorks implementations that have undergone unit testing for the 4.2.0 release) needs to be included and delivered with the release.  

It is recommended to create a ""Results"" directory under /src/unit-test-coverage/os for each os implementation that has been unit tested for this release.  ",bug,https://github.com/nasa/osal/issues/169
RTEMS example toolchain file incompatible with current PSP,"**Describe the bug**
The example `toolchain-i686-rtems4.11.cmake` file is no longer compatible with the RTEMS module within the PSP.

CMake fails to configure, I get output as follows:

```
CMake Error at /usr/share/cmake-3.10/Modules/CMakeTestCCompiler.cmake:52 (message):
  The C compiler

    ""/home/joe/rtems-4.11/bin/i386-rtems4.11-gcc""

  is not able to compile a simple test program.

```

**To Reproduce**
Build using example toolchain file from sample_defs with unmodified PSP, adjusting only for local installation paths (RTEMS_BSP_TOP).

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 18.04 LTS 64-bit (build host) building for i686-rtems4.11

**Additional context**
Failures is related to the ""specs"" options on the compiler.  The toolchain file and RTEMS module in the PSP got out of sync somewhere along the development path.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/573
posix impl should use timer_t instead of uint32 for host_timerid,"The POSIX implementation of OSAL uses timer_create in ostimer.c but stores the timerid in a uint32 instead of a timer_t as per the posix specification. This would also deal with any size issues (32-bit vs 64-bit) that may occur when building.

I've checked in a fix [changeset:5773e4faf0]",bug,https://github.com/nasa/osal/issues/170
"Refactor CFE_ES_RestartApp, CFE_ES_ReloadApp, CFE_ES_DeleteApp to use common code","**Is your feature request related to a problem? Please describe.**
Logic duplicated in CFE_ES_RestartApp, CFE_ES_ReloadApp, CFE_ES_DeleteApp

**Describe the solution you'd like**
Refactor to utilize common logic

**Describe alternatives you've considered**
None

**Additional context**
Code Review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1323
SB unreachable code in CFE_SB_AppInit,"**Describe the bug**
The following conditional is never reachable with the default config:

https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/sb/fsw/src/cfe_sb_task.c#L192-L195

To reach this would require that the code is built with a config where `CFE_PLATFORM_EVS_MAX_EVENT_FILTERS` (from platform config, defaults to 8) is less than `CFE_SB_MAX_CFG_FILE_EVENTS_TO_FILTER` (hardcoded to 8).

**To Reproduce**
Build code with default config and run coverage report.

**Expected behavior**
Code could be cleaned up to not have unreachable lines in any config, or at least convert the check such that it can be evaluated at compile time (if `CFE_PLATFORM_EVS_MAX_EVENT_FILTERS` >= `CFE_SB_MAX_CFG_FILE_EVENTS_TO_FILTER` then the code becomes unreachable).

**System observed on:**
Ubuntu

**Additional context**
Somewhat related to #1468, if this is fixed hopefully it would get both of these

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1669
Add cFE Memory Manager API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Memory Manager API functional tests
– CFE_ES_PoolCreate - Initializes a memory pool created by an application while using a semaphore during
processing.
– CFE_ES_PoolCreateEx - Initializes a memory pool created by an application with application specified block
sizes.
– CFE_ES_PoolCreateNoSem - Initializes a memory pool created by an application without using a
semaphore during processing.
– CFE_ES_GetPoolBuf - Gets a buffer from the memory pool created by CFE_ES_PoolCreate or CFE_ES -
_PoolCreateNoSem.
– CFE_ES_PutPoolBuf - Releases a buffer from the memory pool that was previously allocated via CFE_E -
S_GetPoolBuf.
– CFE_ES_GetMemPoolStats - Extracts the statistics maintained by the memory pool software.
– CFE_ES_GetPoolBufInfo - Gets info on a buffer previously allocated via CFE_ES_GetPoolBuf.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/811
posix-ng / posix OS_ModuleLoad flag inconsistency,"In the POSIX OSAL, modules are loaded by `dlopen` with a flags value of 
`RTLD_LAZY | RTLD_GLOBAL` whereas in posix-ng the flags value is `RTLD_NOW | RTLD_GLOBAL`. Changing from `RTLD_LAZY` to `RTLD_NOW` alters the behavior of `dlopen`. It may be desirable to make that change, but it should be consistent between the POSIX OSAL implementations.",bug,https://github.com/nasa/osal/issues/217
implement osapi-os-net.h,"SBN, and other applications, would benefit from an OSAL layer over network interfaces.

Per the CCB action item 29, ""Update SBN to use the new OSAL network/socket APIs"". But there is no implementation of the osapi-os-net.h interfaces.",non-bug,https://github.com/nasa/osal/issues/184
Silence logic around error event broken on semaphore timeout,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
If the semaphore times out there's no attempt to allocate a buffer.  If a buffer isn't allocated and silent is false, an error event is sent claiming there was no buffer available.

https://github.com/nasa/CF/blob/b0269effd3c0c3f8120bba1abbdd50abcaf53e59/fsw/src/cf_cfdp_sbintf.c#L91-L116

This silent logic doesn't make any sense to me, since it's passed in as 0 from all the non-file data PDUs but 1 for data.  If it was intended for the allocate buffer why only non-data PDUs?  I doubt it was ever intended for the semaphore timeout.

**To Reproduce**
I saw it when waiting for the semaphore to send an Eof PDU.  Could probably see it on the metadata send, but I initialize w/ a nonzero sem count.

**Expected behavior**
No event on semaphore timeout, this is nominal behavior for flow control.  TBH I'm not a huge fan of a possible flooding event on the failure to get a buffer.  I'd rather see a combined approach of a counter and probably a single event sent at the maximum rate of each HK cycle only when the counter increments.

**Code snips**
See above.

**System observed on:**
Ubuntu 20.04

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/CF/issues/377
Enhanced build system for OSAL,"This ticket is for the OSAL portion of the enhanced build system pushed out under the corresponding cFS ticket:

​[https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/1]

The CMake script for OSAL can also be used to generate a standalone OSAL library for use with projects other than CFS",non-bug,https://github.com/nasa/osal/issues/25
"Rename ""doc"" to ""docs"" for consistency","**Is your feature request related to a problem? Please describe.**
Most other cFS modules put the documentation in a `docs` subdirectory, except OSAL and PSP, which put it in `doc`

**Describe the solution you'd like**
Be consistent, use `docs` since this is what cFE and the majority of cFS apps use.

**Additional context**
Inconsistent naming means over complicated scripts and tools, that have to look in multiple different possible names/locations

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1068
MM Should include the status of the EEPROM write enable in housekeeping telemetry,"MM includes commands to enable or disable writing to EEPROM.  That setting cannot currently be verified in telemetry.  The status of the write enable for each EEPROM bank should be added to the housekeeping packet.  

Imported from GSFCCFS-1613",non-bug,https://github.com/nasa/MM/issues/14
Eliminating recursive locks in SB could allow for using more efficient resource,"**Describe the request**
Recursive locks possible in the following code (may also be in other locations):

https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_api.c#L1110-L1113
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_api.c#L1121-L1124
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_task.c#L1172-L1173
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_task.c#L1200-L1201

Related - the locking in the SendPrevSubs command handling doesn't look like it really helps since it has to unlock to send the message (same issues as the commands to record route/map info to file), typical use case is to enable subscription reporting, then send all previous subscriptions so may make sense to refactor (and possibly throttle).

**To Reproduce**
Clear filters on the debug messages and trigger (I stopped SAMPLE_APP to cause the pipe deletion), or just subscribe and unsubscribe twice to trigger CFE_SB_UNSUB_NO_SUBS_EID.

**Expected behavior**
Avoiding recursive lock could allow for using a more efficient resource on platforms where it's supported.

**Code snips**
See above.

**System observed on:**
From code analysis, tested on Ubuntu 18.04.

**Additional context**
From analysis during #928 and #947 

**Reporter Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/948
Wrong token name used in accept call,"https://github.com/nasa/osal/blob/afb5f7ba3ea48823e44490ce4258aa92a073087f/src/os/shared/src/osapi-sockets.c#L269

This is a bug. I think it should be conn_token.. not sock_token",bug,https://github.com/nasa/osal/issues/969
Remove references to LRO,"**Describe the bug**
Need to clean up multiple references to LRO heritage in source code

**To Reproduce**
See source code; ctrl-f lro shouls find multile occurences.

**Expected behavior**
No references to specific missions.

**Code snips**
```
/*
**  This program calculates the CRC of a given file using the same
**  algorithm as the LRO spacecraft cFE Table Services flight software uses.
*/

/*
**             Function Prologue
**
** Function: CFE_ES_CalculateCRC  (taken directly from lro-cfe-4.2.1 delivery - 2/4/09)
**
** Purpose:  Perform a CRC calculation on a range of memory.
**
*/

```

**System observed on:**
Source code

**Additional context**
None

**Reporter Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/tblCRCTool/issues/20
Repetitive AppID lookups in CFE_SB_SendMsgFull,"**Describe the bug**
SB has some code to filter an app's own messages via `CFE_SB_PIPEOPTS_IGNOREMINE`.   This gets the appid and compares to the AppID of the pipe creator, and skips the destination if its a match:

https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/src/sb/cfe_sb_api.c#L1359-L1369

The problem is that this is ""inside the loop"" of all destinations in the routing entry.  So it will (potentially) call `CFE_ES_GetAppId()` multiple times.  This also creates a double locking situation, because the SB lock is being held at the time this executes, and the ES lock needs to be acquired by `CFE_ES_GetAppId()`

**Expected behavior**
Code should query the caller AppID early, before taking the SB lock.

**Additional context**
The code works but is inefficient, and double locking is a potential deadlock.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/923
MCP750 Causes cES1702.2 and cES1703.2 Requirement Failures on VxWorks 6.9,"Although the mcp750 vxworks PSP directory is named ""mcp750-vxworks6.4"", this implementation should support all 6.x versions of VxWorks.  It was found the CFE_PSP_SetDefaultExceptionEnvironment function defined in cfe_psp_exception.c does not set all the required flags in order to produce a task restart following a CPU or Float Point exception produced via task running under 6.9.  The Recoverable Interrupt flag (_PPC_MSR_RI) is missing in the call to vxMsrSet.  It was recommended by WindRiver to update how we setup the default exception environment using the vxMsrGet call.  The following code will resolve the issue in vxworks 6.9 and will also not affect 6.4 from producing the desired behavior:

vxMsrSet(vxMsrGet() |_PPC_MSR_FE0|_PPC_MSR_FE1|_PPC_MSR_EE|_PPC_MSR_FP|_PPC_MSR_ME|_PPC_MSR_DR);
       
vxFpscrSet(vxFpscrGet() | _PPC_FPSCR_VE | _PPC_FPSCR_OE|_PPC_FPSCR_NI|_PPC_FPSCR_ZE);

vxFpscrSet(vxFpscrGet() | _PPC_FPSCR_XE | _PPC_FPSCR_UE );
",non-bug,https://github.com/nasa/PSP/issues/77
CFE_SB_TimeStampMsg in ut_sb_stubs.c does not record MsgPtr argument value,"**Describe the bug**
The value passed into CFE_SB_TimeStampMsg cannot be checked because the context value is not put into the UT_Stub_CopyFromLocal function.  

**To Reproduce**
Write a unit test that attempts to check this value by setting up UT_SetDataBuffer.
Test fails because the value was never saved so it will not equal the expected value.

**Expected behavior**
UT_SetDataBuffer when used for CFE_SB_TimeStampMsg will copy the argument value from local (UT_Stub_CopyFromLocal).

**Code snips**
Current code:
```
void CFE_SB_TimeStampMsg(CFE_SB_MsgPtr_t MsgPtr)
{
    UT_DEFAULT_IMPL(CFE_SB_TimeStampMsg);
}
```

**System observed on:**
 - Hardware : PC
 - OS: RHEL7 - 3.10.0-1062.1.2.el7.x86_64
 - Versions cFE 6.7

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Full name and company/organization if applicable
",bug,https://github.com/nasa/cFE/issues/747
"CFE ES ""StartupSyncSemaphore"" subject to multiple race conditions","The ""Startup Sync"" mechanisms are based on a binary semaphore, a boolean flag, and a counter.

The handling of these various separate entities leaves several opportunities for race conditions to occur. At a minimum, this could cause ""WaitForStarupSync"" to pend incorrectly, but could have other more serious side effects (unknown) depending on how the apps are using this.

This is one problem that the EVA team at GRC are experiencing while deploying CFS on the Xilinx Microblaze platform.
",bug,https://github.com/nasa/cFE/issues/71
Add helper for `CFE_SB_Write*InfoCmd` to implement common logic,"**Is your feature request related to a problem? Please describe.**
Repeated logic/pattern in `CFE_SB_WriteRouteInfoCmd`, `CFE_SB_WriteMapInfoCmd`, and `CFE_SB_WritePipeInfoCmd`.

**Describe the solution you'd like**
Put common logic in a helper, pass in info.

**Describe alternatives you've considered**
Might even be able to make a generic function in #994 for all apps/services to use since it's likely a very common pattern.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1473
Publish html version of users guide and leverage github pages,"**Is your feature request related to a problem? Please describe.**
The current deploy of the documentation is a pdf that while useful, could be better implemented as a webpage which doxygen already generates.

**Describe the solution you'd like**
Leverage github pages to host a ""live"" version of the users guide.

**Describe alternatives you've considered**
figure out how to get doxygen to generate markdown instead of html and use Jekyll or another static site generator


**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/cFS/issues/105
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the sch_lab repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/sch_lab/issues/72
Return OS_ERROR if `OS_ObjectIdGetById` fails in vxworks `OS_ShellOutputToFile_Impl`,"**Is your feature request related to a problem? Please describe.**
Coverage test highlights somewhat unexpected behavior in the VxWorks `OS_ShellOutputToFile_impl` where it will still return success if `OS_ObjectIdGetById` doesn't return OS_SUCCESS.  There isn't a real case where `OS_ObjectIdGetById` would fail that I know of, but the logic is a bit strange.
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/vxworks/src/os-impl-shell.c#L79-L102

**Describe the solution you'd like**
Return OS_ERROR if there is an error.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1102
cFE time service should be endian-neutral,"Currently the cFE time service assumes time messages are in platform-endian format, which will cause headaches in mixed-endian environments. cFE time messages should standardize on one byte ordering (I suggest network-order, aka big-endian).",bug,https://github.com/nasa/cFE/issues/231
Redundant Initializations,"If a variable is declared and initialized, then a value is
immediately stored in it, we get a warning. The redundant
initializer did not need to be added and we are removing them.
",bug,https://github.com/nasa/cFE/issues/181
Table Services Task Pipe Function Incorrectly Handling Commands,"When calling the appropriate command message handler, the Table Services TaskPipe function is failing to pass the entire message to the command processing function, resulting in a truncated message.",bug,https://github.com/nasa/cFE/issues/247
Attitude control,I am looking for the Attitude Control System or GN&C. Is there any documentation that can point me to where the code is?,non-bug,https://github.com/nasa/cFS/issues/124
Enhanced versioning reporting updates,"GitHub repos don't include the name in the tag (since each repo is separate), so the git describe with --match ""${NAME}*"" comes up blank.  The most recent tag in every branch (babelfish and github) is legit, so no need to filter.

Recommend removing this match, and including the names in the print string:

As in: CFE: %s, OSAL: %s

Looks like MISSION_PSPMODULES is not coming through as expected, suggest adding PSP: %s?",bug,https://github.com/nasa/cFE/issues/348
OS_SelectFdZero/OS_SelectFdAdd/OS_SelectFdClear/OS_SelectFdIsSet does not ensure Set is != NULL,"**Describe the bug**
Users of these API's will cause a seg fault if they call these functions with a null pointer.

**To Reproduce**
Call OS_SelectFdZero(NULL), etc.

**Expected behavior**
These API's should return an error code when provided a NULL pointer.

**Code snips**
```
int32 OS_SelectFdZero(OS_FdSet *Set)
{  
   memset(Set,0,sizeof(OS_FdSet));
   return OS_SUCCESS;
} /* end OS_SelectFdZero */
```

**System observed on:**
Debian 9

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/osal/issues/390
Question: where is the cFS Deployment Guide?,"https://github.com/nasa/cFE/blob/main/cmake/README.md says
""For a more in-depth guide and specific examples, see Appendix A of the cFS Deployment Guide.""   I have searched for the cFS Deployment Guide and cannot find it.   Has the name changed?   Where is it now?",non-bug,https://github.com/nasa/cFE/issues/1166
Define a const global for `OS_MAX_API_NAME * 2` and use it,"**Is your feature request related to a problem? Please describe.**
`Fullname` and similar is defined hardcoded as size `OS_MAX_API_NAME * 2`, example:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L100

**Describe the solution you'd like**
Create a const global and use it.

**Describe alternatives you've considered**
May make sense to actually scrub reporting in APIs to use consistent reporting style/technique.  Suspect there's either repetition or variation across the services.  Candidate for generic utility function - #994

**Additional context**
Code review.  Note FullName in SB is actually appname.taskname.  

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1457
Comments on header guard endif don't match ifdef,"**Is your feature request related to a problem? Please describe.**
For example:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L31-L32
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L191

**Describe the solution you'd like**
Comments should be consistent w/ code

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/916
Move osal guide into this repository,"**Is your feature request related to a problem? Please describe.**
The osal guide currently ""lives"" inside the cFE repo in the [`cmake`](https://github.com/nasa/cFE/tree/main/cmake) directory. It would make more sense to keep the documentation files in the osal repository. 

**Describe the solution you'd like**
Move `.dox` and `doxyfile.in` files to this repository. Will need to add a script that builds those in a standalone fashion.

**Describe alternatives you've considered**
Keep as is. Move ALL docs to the bundle repository.

**Additional context**
None
",non-bug,https://github.com/nasa/osal/issues/913
Incorrect limit check in CFE_ES_GenPoolValidateState,"**Describe the bug**
A check for the ""NumBuckets"" member should be `<=` but it is using `<`.

**To Reproduce**
Attempt to validate PoolID 1 which uses the max number of buckets.  Function returns false, but record is valid.

**Expected behavior**
CFE_ES_GenPoolValidateState() should return true if using the max number of buckets (17 by default).

**Code snips**
One-liner here:
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_generic_pool.c#L604

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1270
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2049
Filesystem using wrong length for device_name field,"**Is your feature request related to a problem? Please describe.**
The `device_name` field within the `OS_filesys_internal_record_t` is using a length of `OS_MAX_API_NAME`, which is not correct/ideal.

**Describe the solution you'd like**
The length should be `OS_FS_DEV_NAME_LEN`

**Additional context**
This is an existing symbol defined in the `osapi-os-filesys.h` public API header file.  Noted when working on BSP volume table removal.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/455
Registration of events with 0x0000 filters isn't all that helpful,"**Is your feature request related to a problem? Please describe.**
Registration of all events with `0x0000` filters just loads the system without actually filtering anything.  Also fills the event filter buffer for the app and likely drops some since default limit is 8.

**Describe the solution you'd like**
Remove zero entries from initialization and add a filter when/if needed (or operationally via command).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/ci_lab/issues/110
Obsolete logic in `CFE_ES_QueryAllCmd` file handling (related to OpenCreate),"**Is your feature request related to a problem? Please describe.**
Obsolete logic, second `OS_OpenCreate` will truncate anyways:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.c#L1287-L1298

**Describe the solution you'd like**
Simplify

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1362
Refactor common code out of `CFE_EVS_ResetFilter` and `CFE_EVS_ResetAllFilters`,"**Is your feature request related to a problem? Please describe.**
Common code in the reset filter related APIs is duplicated

**Describe the solution you'd like**
Refactor to reduce duplication.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1399
JSC: change fpu get/set mask function return code,"Originally done as part of trac #45 and isolated for CCB review purposes.

Changes the return code of the `OS_FPUExcSetMask()` and `OS_FPUExcGetMask()` functions to return `OS_ERR_NOT_IMPLEMENTED` for builds that do not have such a mask register.",bug,https://github.com/nasa/osal/issues/140
Duplicate Function in Readme,"**Describe the bug**
In the version history of the readme, it states: 
> Removes the now-unnecessary CFE_SB_ZeroCopyHandle_t type and all APIs that refer or require it .Replaces CFE_SB_ZeroCopyGetPtr() and CFE_SB_ZeroCopyGetPtr() with two new simplified functions CFE_SB_AllocateMessageBuffer() and CFE_SB_ReleaseMessageBuffer() , respectively. These new functions do not use a separate handle. Updates the CFE_SB_TransmitBuffer() API to also remove the handle. Does affect public APIs. 

The issue is that the version history is stating that the same function, CFE_SB_ZeroCopyGetPtr, is being replaced by two different functions. 

In reality, CFE_SB_ZeroCopyGetPtr was replaced by CFE_SB_AllocateMessageBuffer. CFE_SB_ZeroCopyReleasePtr and CFE_SB_ZeroCopySend, not CFE_SB_ZeroCopyGetPtr, was replaced by CFE_SB_ReleaseMessageBuffer.  

**Expected behavior**
State that CFE_SB_ZeroCopyReleasePtr and CFE_SB_ZeroCopySend, not CFE_SB_ZeroCopyGetPtr, was replaced by CFE_SB_ReleaseMessageBuffer. 

**Code snips**
https://github.com/nasa/cFE/pull/1257/files 

**Reporter Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFE/issues/1277
Incomplete OSAL error conversion in CFE_ES_GetTaskName,"**Describe the bug**
The CFE_ES_GetTaskName function uses an OSAL API to perform its work.  However, its error handling path is not complete, it assumes any underlying OSAL failure is due to the resource ID not being valid:

https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/es/fsw/src/cfe_es_api.c#L988-L993

Although a bad ID is a _likely_ cause for failure, it is not the only possible cause of failure - for example, if the name is too large to fit in the buffer, OSAL may return `OS_ERR_NAME_TOO_LONG`.

**To Reproduce**
Call `CFE_ES_GetTaskName` with a valid task ID and string buffer size of 1 (such that the task name is too long to fit in the buffer).  The function will return `CFE_ES_ERR_RESOURCEID_NOT_VALID` status, even though the real error was that the buffer was too short.

**Expected behavior**
Should do better error conversion - only `OS_ERR_INVALID_ID` should translate to `CFE_ES_ERR_RESOURCEID_NOT_VALID`, and other potential/foreseeable OSAL errors converted to the nearest CFE ES error, or the generic catch-all `CFE_STATUS_EXTERNAL_RESOURCE_FAIL` can be returned for other unexpected/unhandled errors.

**Additional context**
See #1599, for Caelum will document the existing behavior, but a future release should correct this.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1672
PSP modifications for const-correct CFE API,"For context, see trac 28 in the CFE repository: [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/28]

The CFE API has been updated such that the pointer arguments in functions called via the PSP are now declared ""const"".  This helps in several ways, but the most important reason is so they can be safely supplied from a data structure in ROM rather than requiring that the data structure be copied to RAM first.



",bug,https://github.com/nasa/PSP/issues/19
About the PSP mak file,"Hi
I'm very new for write .mak file. I checked gcc(5.5.0) manual, found some symbols such as -Wall, -m32, but did not find __ix86__. Could you tell me how can I find this? Which manual should I reference to? I want to make psp and osal for raspberry or freertos! Thanks
Sincerely",non-bug,https://github.com/nasa/cFE/issues/16
Consolidate switch logic in OS_SocketOpen_Impl,"**Is your feature request related to a problem? Please describe.**
Duplicate switch cases that could be consolidated:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L102-L113
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L129-L138

**Describe the solution you'd like**
Consolidate

**Describe alternatives you've considered**
Was separate if future domains were added... but is currently awkward looking.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/859
Default file name for Task Info is too long,"**Describe the bug**
The default filename for the task info file is defined here:

https://github.com/nasa/cFE/blob/fcaa1d0c6b9e8244b071b8cafc765078680e24b4/cmake/sample_defs/cpu1_platform_cfg.h#L924

The filename portion of the string - ""cfe_es_task_info.log"" - is exactly 20 chars, and `OSAL_CONFIG_MAX_FILE_NAME` is also 20 chars, so it fails the max length test - because it needs to be less than the max for the NUL char.

**To Reproduce**
Build with default config, issue CFE_ES_QUERY_ALL_TASKS_CC command with no filename - which causes it to use default.
Observe error about failure to create file - error code `OS_FS_ERR_NAME_TOO_LONG`. 

**Expected behavior**
Defaults should work.

**System observed on:**
Ubuntu 20.04

**Additional context**
The prefix `cfe_es_` is 7 chars by itself.  A simple fix would be to trim this back to just `cfe_`.  Would recommend changing all the default filenames for consistency.  ER log is already just `cfe_erlog.log` (no es).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1160
Apply code style,"**Is your feature request related to a problem? Please describe.**
Inconstant style

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/pull/30 and https://github.com/nasa/ci_lab/pull/28

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/37
network-api-test timeout still too short for MCP750,"**Describe the bug**
The console/printf operations on MCP750 take a considerable amount of time (only 9600 baud serial).  It appears some extra assert statements added in this test have made it so even 1000ms is not sufficient.  (looks like the ServerFn might be timing out on a write while the client is printing a bunch of asserts, which then causes an error later when the client finally gets to the read).

**To Reproduce**
Run test on MCP750, observe unexpected timeout error:

    [ FAIL] 04.040 network-api-test.c:680 - OS_TimedRead() (-4) == 4

**Expected behavior**
Test should pass

**System observed on:**
MCP750 VxWorks 6.9

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/1086
HS_IdleTask has no cancellation point,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The default `HS_IdleTask` has no cancellation point, so hangs up on Linux for Cntrl-C.

**Describe the solution you'd like**
Add a cancellation point

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

@excaliburtb",bug,https://github.com/nasa/HS/issues/37
"CFE_SB_Default_Qos exposed globally, with internal defaults, passing structure by value","**Is your feature request related to a problem? Please describe.**
CFE_SB_Default_Qos is extern from cfe_sb.h (so any code including cfe_sb.h could change it's value!):
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/inc/cfe_sb.h#L175-L185

But the defines are ""internal"" to SB:
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/sb/cfe_sb_priv.h#L86-L87

Also structure passed by value:
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/inc/cfe_sb.h#L381

There is no underlying implementation, so currently just a placeholder in the API.

**Describe the solution you'd like**
Possibly convert to bits in a uint32/16 or similar (structure is overkill), provide default and the other values publicly as defines, don't expose as a global variable.

**Describe alternatives you've considered**
None

**Additional context**
Found when working #1036, it's out of family since it's not at task global scope.

**Requester Info**
Jacob Hageman
",bug,https://github.com/nasa/cFE/issues/1123
SB: remove AppName (and PipeName?) from CFE_SB_PipeD_t,"In looking at SB code, I noticed that CFE_SB_PipeD_t has two character arrays, AppName and PipeName. AppName, particularly, is a waste of memory to have in each pipe structure (it should be maintained in one location) and there is an AppId field in the PipeD_t so it's not needed for finding pipes.

Same may go with PipeName, as the OSAL queue takes the name as a parameter (need to ensure the pipe name doesn't already exist in OSAL.)",non-bug,https://github.com/nasa/cFE/issues/287
Include cfe_private.h in stub implementations so they don't diverge,"**Is your feature request related to a problem? Please describe.**
See #1010

**Describe the solution you'd like**
Include the header

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1012
Add JSC coverage tests (originally #22),"Separated from original trac #45 - Add ""white box"" coverage tests for vxworks6 OSAL.

",non-bug,https://github.com/nasa/osal/issues/133
"Move ""FM_GlobalData"" back into private/local data structures","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The `FM_GlobalData` object is only used within the FM app for private data storage.  It should not be visible externally.  However, it is currently defined here in the public `fm_msg.h` file:

https://github.com/nasa/FM/blob/c8569975ba4d0a4ab656565b22511812385ad0bb/fsw/inc/fm_msg.h#L542-L594

**Describe the solution you'd like**
This should be defined in one of the internal header files, not in a public interface file.

**Additional context**
Public API should generally only be constants / `#define`'s, and typedefs.  API calls only for libraries - apps do not have public API calls.  Extern data structs / globals should not be exposed in either apps or libs for a variety of reasons.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/FM/issues/75
TBL missing branch coverage of run-time endian logic (and sometimes line),"**Is your feature request related to a problem? Please describe.**
TBL suffers from the unfortunate pattern of run time checks for endian (and associated logic), which leads to uncovered branches and possibly uncovered code (depending on endian of platform).
```
    1158         [ +  - ]:         33 :                     if ((*(char *)&EndianCheck) == 0x04)
    1159                 :            :                     {
    1160                 :            :                         /* If this is a little endian processor, then the standard cFE Table Header,   */
    1161                 :            :                         /* which is in big endian format, must be swapped so that the data is readable */
    1162                 :         33 :                         CFE_TBL_ByteSwapTblHeader(TblFileHeaderPtr);
    1163                 :            :                     }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L1158-L1163

same pattern in:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L740-L748

**Describe the solution you'd like**
Complete coverage is possible if run on each system, but should be resolved in the future.  Possibly in concert with #1209 and related abstraction such that this code doesn't care (whatever underlying API/implementation that handles raw data should do the appropriate conversion).

**Describe alternatives you've considered**
None

**Additional context**
Same as #1882 for FS

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1900
"lgtm issues for os-impl-posix-files.c, osapi-filesys.c","**Is your feature request related to a problem? Please describe.**
os-impl-posix-files.c

```
line 240:

if ( chmod(local_path, st.st_mode) < 0 )
--
  | The filename being operated upon was previously checked, but the underlying file may have been changed since then.
```


osapi-filesys.c

```
line 330:
OS_FileSysStopVolume_Impl(local_id);
--
  | This expression has no effect (because OS_FileSysStopVolume_Impl has no external side effects).
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/333
"Update name of macros/functions added to ""cfe_assert""","**Is your feature request related to a problem? Please describe.**
Per the naming convention, any symbols provided by a given app/lib should be prefixed with the name of that module.  For ""cfe_assert"" library, this would be `CFE_Assert_` prefix.  But the new macros that were directly lifted from the coverage test are using a `CFE_UtAssert_` prefix.

**Describe the solution you'd like**
Search and replace the `CFE_UtAssert_` prefix with `CFE_Assert_` to be consistent.

**Additional context**
This came from migrating the macros in haste; the extra ""Ut"" that doesn't really belong wasn't caught during initial implementation or review.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1835
OS_TaskExit() on VxWorks causes task table owner to be the deleted task,"**Describe the bug**
OS_TaskExit() calls OS_ObjectIdFinalizeDelete(). This function sets  the task's record->active_id to 0, which is also being used as the task ID on VxWorks. ObjectIdFinalizeDelete() subsequently calls OS_Unlock_Global, which errors out and does not clear the owner, as the task ID is now zeroed out and does not match the owner of the table. This does not occur on Linux

**To Reproduce**
Steps to reproduce the behavior:
On VxWorks, call CFE_ES_ExitChildTask with OSAL_CONFIG_DEBUG_PRINTF  enabled

**Expected behavior**
Error message should not be printed out

**Code snips**
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-idmap.c#L745-L777
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-idmap.c#L625-L676
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/vxworks/src/os-impl-tasks.c#L385-L413
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/posix/src/os-impl-tasks.c#L736-L751

**System observed on:**
 - SP0
 - OS: VxWorks 6.9
 - Versions: CFE 6.8, OSAL  5.1.0-rc1+dev16, 

**Additional context**
See attached screenshots for stack traces
![image](https://user-images.githubusercontent.com/63735778/98269251-82b02900-1f5b-11eb-83f9-0af820169aa8.png)
![image](https://user-images.githubusercontent.com/63735778/98269098-5b595c00-1f5b-11eb-836c-4abd911c123e.png)
**Reporter Info**
John N. Pham, Northrop Grumman


",bug,https://github.com/nasa/osal/issues/645
"elf2cfetbl does not handle files without a separate "".shstrtab"" section","**Describe the bug**
In ELF files all strings are put into string table sections (`SHT_STRTAB` type).

Many tools dedicate a separate STRTAB section specifically for the section names, with the number of this section indicated in the main ELF header `e_shstrndx` field.

However there is no requirement to put these strings in a separate table section.  Some compilers generate a single STRTAB section containing all strings, section names and symbol names.  In this case the ELF header `e_shstrndx` field points to this unified section.

**To Reproduce**
Pass an ELF table object file generated from `clang` compiler to `elf2cfetbl` - it fails to identify the symbol names correctly, and it therefore fails to find the `CFE_TBL_FileDef` symbol.

**Expected behavior**
elf2cfetbl should work with these ELF files and produce an output.

**System observed on:**
Ubuntu 20.04 (build host)

**Additional context**
Note that ELF also doesn't say any maximum number of string table sections either.  There could be just one (this bug) or there could be more than two.

As best I can tell, the string table used for the `.symtab` section should always be named `.strtab` - so this is probably a better way to identify the right section.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/elf2cfetbl/issues/48
Implement message dispatch table within SB for unified validation and invocation of handler,"**Is your feature request related to a problem? Please describe.**
Most (but not all!) applications use a big `switch` statement to interpret the MID and command code, and invoke a handler.

Problem is:
- Still done very inconsistently. Styles of this `switch` vary significantly in terms of where the checks are done, and the type of validation that is done (some apps still don't do length checks before casting)
- Fundamentally still requires interpretation of MsgId as integer value, because a `switch` in C only works on integer values.  Ideally apps should treat MsgId as opaque, not do any local interpretation of the value.
- Some apps don't use the `switch` approach at all, implementing a dispatch table instead.  Notable examples are TBL services, and the CF app.  While these both use the general concept of a table lookup to a function pointer, they are implemented pretty differently.

**Describe the solution you'd like**
The dispatch table is a cleaner design, since it allows the application code to be more agnostic to how MIDs work.  Notably, the part that interprets/matches the MIDs can be put into SB, thereby no longer requiring the _app itself_ to interpret/match the MIDs.

But rather than letting every app individually migrate to this pattern and have each one done differently, the framework should preemptively add a generic dispatch routine within SB.

The generic function should:
- Validate the initial message MID coming in (does it match any known MID in the table)
- Interpret and validate the command code, if the msg has one (does it match any known CC in the table)
- Confirm that the length of the message is correct
- Cast the message to the correct ""real"" type and invoke the handler function that was provided from the app.

**Describe alternatives you've considered**
See TBL services and CF app, its the same idea.

**Additional context**
Framework needs to add this alternative method of dispatching first, but apps wouldn't be required to use it (backward compatible).

The framework apps in Draco could all be converted to a dispatch table.  But GSFC and other external CFS apps would continue using their existing methods in order to remain ""Caelum-compatible"" but could be updated over time to the unified dispatched as warranted, if/when changed for other reasons....

This is also somewhat related to/part of #994 ... it would cover one of the items listed in there (generic length check)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/2038
OS_PEND and OS_CHECK are backwards,"For functions that have a ""timeout"" parameter, two special values are defined: ""OS_PEND"" can be used to wait forever, and ""OS_CHECK"" can be used to not wait at all / return immediately.

The issue is that ""OS_PEND"" is defined as ""0"" and ""OS_CHECK"" is defined as ""-1"".  These should be the other way around.

The problem is not so much when the special values are used but rather when they are NOT used and the timeout is computed by subtracting a current time from a deadline time.  If the result of that computation happens to be zero, the OSAL will interpret this as ""OS_PEND"" and will end up waiting forever.

Simply swapping the definitions of OS_CHECK and OS_PEND would make the operation much more logical by making a computed timeout of zero get the behavior of OS_CHECK and not OS_PEND.

",non-bug,https://github.com/nasa/osal/issues/39
JSC: general code cleanup,"Originally implemented as part of trac #45 and isolated for CCB review purposes.

General code clean up modifications:
* Make all if/then/else as compound statements
* add ""void"" to functions that do not take parameters
* add final ""else"" to all ""else if"" constructs
* make sure all cases in switch stametents have break
* add explicit casting where the compiler may emit warnings
* Add ""static"" and ""extern"" keywords where needed
",bug,https://github.com/nasa/osal/issues/141
"VxWorks OSAL uses potentially unsafe ""strcpy"" operations","In at several locations the VxWorks OSAL is using `strcat()` and `strcpy()` functions to copy strings between string buffers that are sized using different macros.

At least one of the sizes in play, the `OS_MAX_PATH_LEN` comes from the user-configurable ""osconfig.h"" file.  Other sizes, such as `OS_FS_PHYS_NAME_LEN` are specified in the local headers and are **not** user-configurable.

In some functions, such as `OS_mkfs` (but not limited to this), a local buffer of size `OS_MAX_PATH_LEN` is copied into a global buffer of size `OS_FS_PHYS_NAME_LEN`.  

However, because the `OS_MAX_PATH_LEN` is configurable via the osconfig.h file, it is not guaranteed that `OS_MAX_PATH_LEN` is less than or equal to `OS_FS_PHYS_NAME_LEN`.



",bug,https://github.com/nasa/osal/issues/195
SB Only Increments Message Sequence Count Where There are Subscribers,"In the current implementation of the Software Bus, sequence counter management is handled in the routing table.  The routing table only includes entries that have subscribed messages.  This results in the sequence counter being incremented only if there are subscribers to a message.  If a message is unsubscribed to and then resubscribed, the sequence counter will be reset to zero.

A message sequence count should reflect the production of the message vs. the receipt of a message.  One use case for this implementation is to support the filtering of a message via the sequence count.

APL/SPP project implemented a solution to increment the sequence count upon production of the message regardless of whether or not there are any subscribers.  The solution involved removing the sequence count table from the routing table.  This exact solution may not support the new/expanded APID/message ID name space.  Expanding the message ID name space will need to be considered when implementing the overall solution to increment the sequence count to reflect message production.     ",bug,https://github.com/nasa/cFE/issues/101
cFS header definition Version 2 CI,"**Is your feature request related to a problem? Please describe.**
Certification configuration is CCSDS extended header, 32bit.  Default config is currently CCSDS primary only, 64 bit.

**Describe the solution you'd like**
CI with cFS header definition V2, and any other minor tweaks for cert config.

**Describe alternatives you've considered**
Leaning towards adding a V2 config that maps to the cert configuration to CI
Won't be the full CI until related issues get resolved.

**Additional context**
Will need to resolve any related V2 issues (cmdUtil doesn't support it, etc), issues in implicit packet padding differences, etc.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFS/issues/75
JSC: Update code constructs to MISRA recommendations,"* Modify loops to //not// use `continue`
* Do not modify loop control variables within the loop, use break instead
* Make sure all `else if` constructs have final `else`
",bug,https://github.com/nasa/cFE/issues/155
Add option to enable --coverage flag on full stack,"**Is your feature request related to a problem? Please describe.**
Enhancement to be able to report coverage from full stack testing if desired

**Describe the solution you'd like**
Maybe ENABLE_COVERAGE=true, and global_build_options.cmake could add --coverage if defined?  Would duplicate the coverage enabled in unit test executables... but does it matter?

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/565
Bring in 64 bit support and machine additions from babelfish,See https://babelfish.arc.nasa.gov/trac/cfs_tools/ticket/57,non-bug,https://github.com/nasa/elf2cfetbl/issues/7
Use `CFE_MSG_SequenceCount_t` for `seqcnt` in `CFE_SBR_GetSequenceCounter`,"**Is your feature request related to a problem? Please describe.**
Not using `CFE_MSG_SequenceCount_t`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sbr/fsw/src/cfe_sbr_route_unsorted.c#L172

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1476
Remove mcpx750.h,"**Is your feature request related to a problem? Please describe.**
mcpx750.h doesn't belong in open source release.

**Describe the solution you'd like**
Remove file, real version gets picked up as part of include path for this platform cross-compiler toolset.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/136
"CFE cmake rules for tables copy the files into /cf, not /cf/tables where expected","**Describe the bug**
cFE cmake rules copy the *.tbl files into /cf/ and not into /cf/apps where most apps seem to expect them:

**To Reproduce**
Steps to reproduce the behavior:
1. Build your own cFS tree based on https://github.com/nasa/cFS
2. remove the *_lab apps
3. add the official repos for CFS_SCH. CFS_TO, CFS_TO, HK, HS and others
4. Configure everything
5. Build (I was able to build specifically 32 bit on my 64 bit machine using cmake 3.13 or newer - with the attached config)
[cFS_32bit_on_64bit.tar.gz](https://github.com/nasa/cFE/files/4319379/cFS_32bit_on_64bit.tar.gz)
6. run
```
.
.
1980-012-14:03:20.25884 ES Startup: SCH loaded and created
1980-012-14:03:20.25917 CFE_TBL:Load-App(5) Fail to load Tbl 'SCH.SCHED_DEF' from '/cf/apps/sch_def_schtbl.tbl' (Stat=0xFFFFFFFF)
EVS Port1 42/1/CFE_TBL 93: SCH Failed to Load 'SCH.SCHED_DEF' from '/cf/apps/sch_def_schtbl.tbl', Status=0xFFFFFFFF
EVS Port1 42/1/SCH 9: Error (RC=0xFFFFFFFF) Loading SDT with /cf/apps/sch_def_schtbl.tbl
.
.
```
7. Stop it, and do an ls
```
cpu1$ ls cf/*.tbl
cf/beer_lab_iloads.tbl  cf/gti_to_config.tbl  cf/hk_cpy_tbl.tbl  cf/lc_def_adt.tbl  cf/lc_def_wdt.tbl  cf/sch_def_msgtbl.tbl  cf/sch_def_schtbl.tbl

```
8. grep the app tree
```
~/source/cFS$ grep -r apps apps/ | grep ""#define"" | grep -v ""\.html""
apps/hk/fsw/platform_inc/hk_platform_cfg.h:#define HK_COPY_TABLE_FILENAME  ""/cf/apps/hk_cpy_tbl.tbl""
apps/sch/fsw/platform_inc/sch_platform_cfg.h:#define SCH_SCHEDULE_FILENAME  ""/cf/apps/sch_def_schtbl.tbl""
apps/sch/fsw/platform_inc/sch_platform_cfg.h:#define SCH_MESSAGE_FILENAME   ""/cf/apps/sch_def_msgtbl.tbl""
apps/md/fsw/platform_inc/md_platform_cfg.h:#define MD_TBL_FILENAME_FORMAT                ""/cf/apps/md_dw%02d.tbl""
apps/md/fsw/unit_test/md_platform_cfg.h:#define MD_TBL_FILENAME_FORMAT                ""/cf/apps/md_dw\%02d.tbl""
apps/fm/fsw/platform_inc/fm_platform_cfg.h:#define FM_TABLE_DEF_NAME               ""/cf/apps/fm_freespace.tbl""
apps/sc/fsw/platform_inc/sc_platform_cfg.h:#define SC_ATS_FILE_NAME                ""/cf/apps/sc_ats""
apps/sc/fsw/platform_inc/sc_platform_cfg.h:#define SC_APPEND_FILE_NAME             ""/cf/apps/sc_append.tbl""
apps/sc/fsw/platform_inc/sc_platform_cfg.h:#define SC_RTS_FILE_NAME               ""/cf/apps/sc_rts""
apps/sc/fsw/unit_test/sc_platform_cfg.h:#define SC_ATS_FILE_NAME                ""/cf/apps/sc_ats""
apps/sc/fsw/unit_test/sc_platform_cfg.h:#define SC_APPEND_FILE_NAME             ""/cf/apps/sc_append.tbl""
apps/sc/fsw/unit_test/sc_platform_cfg.h:#define SC_RTS_FILE_NAME               ""/cf/apps/sc_rts""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_EEPROM_TABLE_FILENAME                ""/cf/apps/cs_eepromtbl.tbl""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_MEMORY_TABLE_FILENAME                ""/cf/apps/cs_memorytbl.tbl""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_TABLES_TABLE_FILENAME                ""/cf/apps/cs_tablestbl.tbl""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_APP_TABLE_FILENAME                   ""/cf/apps/cs_apptbl.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_AMT_FILENAME                ""/cf/apps/hs_amt.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_EMT_FILENAME                ""/cf/apps/hs_emt.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_XCT_FILENAME                ""/cf/apps/hs_xct.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_MAT_FILENAME                ""/cf/apps/hs_mat.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_AMT_FILENAME                ""/cf/apps/hs_amt.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_EMT_FILENAME                ""/cf/apps/hs_emt.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_XCT_FILENAME                ""/cf/apps/hs_xct.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_MAT_FILENAME                ""/cf/apps/hs_mat.tbl""
apps/beer_lab/fsw/tables/beer_lab_tbldefs.h:#define BEER_LAB_ILOAD_FILENAME     ""/cf/apps/beer_lab_iloads.tbl""
apps/gti_to/fsw/src/gti_to_app.h:#define TO_CONFIG_FILENAME      ""/cf/apps/to_config.tbl""
apps/gti_to/fsw/examples/multi_tf/to_platform_cfg.h:#define TO_CONFIG_FILENAME ""/cf/apps/to_config.tbl""
apps/gti_to/fsw/examples/multi/to_platform_cfg.h:#define TO_CONFIG_FILENAME ""/cf/apps/to_config.tbl""
apps/gti_to/fsw/examples/rs422/to_platform_cfg.h:#define TO_CONFIG_FILENAME ""/cf/apps/to_config.tbl""
apps/ds/fsw/platform_inc/ds_platform_cfg.h:#define DS_DEF_DEST_FILENAME            ""/cf/apps/ds_file_tbl.tbl""
apps/ds/fsw/platform_inc/ds_platform_cfg.h:#define DS_DEF_FILTER_FILENAME          ""/cf/apps/ds_filter_tbl.tbl""
apps/ds/fsw/unit_test/ds_platform_cfg.h:#define DS_DEF_DEST_FILENAME            ""/cf/apps/ds_file_tbl.tbl""
apps/ds/fsw/unit_test/ds_platform_cfg.h:#define DS_DEF_FILTER_FILENAME          ""/cf/apps/ds_filter_tbl.tbl""
apps/lc/fsw/platform_inc/lc_platform_cfg.h:#define LC_WDT_FILENAME                ""/cf/apps/lc_def_wdt.tbl""
apps/lc/fsw/platform_inc/lc_platform_cfg.h:#define LC_ADT_FILENAME                ""/cf/apps/lc_def_adt.tbl""
apps/lc/fsw/unit_test/lc_platform_cfg.h:#define LC_WDT_FILENAME                ""/cf/apps/lc_def_wdt.tbl""
apps/lc/fsw/unit_test/lc_platform_cfg.h:#define LC_ADT_FILENAME                ""/cf/apps/lc_def_adt.tbl""
```
**Expected behavior**
All .TBL files should be installed into /cf/apps/

Change to **CFE**: cmake/arch_build.cmake:
install directory in add_cfe_tables needs to include apps
```
      # Create the install targets for all the tables
      install(FILES ${TABLE_DESTDIR}/${TBLWE}.tbl DESTINATION ${TGT}/${INSTALL_SUBDIR}/apps)
    endforeach(TGT ${APP_INSTALL_LIST})
``` 

**System observed on:**
 - HW: Dell Laptop XPS 15
 - OS: Linux GTI-UID0110 5.3.0-26-generic #28~18.04.1-Ubuntu SMP Wed Dec 18 16:40:14 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux (Distro Linux Mint 19.3)
 - Versions [Versions:cFE 6.7.7.0, OSAL 5.0.6.0, PSP 1.4.4.0, chksm 60524 on Linux, SCH 2.2.2, CFS_TO commit 4589edb, CFS_CI, and other apps

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Maurice Smulders
Geneva Technologies Inc
",non-bug,https://github.com/nasa/cFE/issues/550
Investigate whether TX and RX PDU sizes need to be different,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1196] Investigate whether TX and RX PDU sizes need to be different
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Mon Jul 20 13:37:06 2020

_Original Description_:
Need to investigate uses cases where TX and RX PDU sizes need to be different. Need to investigate the impact of making a change to allow that.  
",non-bug,https://github.com/nasa/CF/issues/19
Cleanup - remove OS_ObjectIdMap/Unmap internal prototypes,"**Is your feature request related to a problem? Please describe.**
The functionality provided by OS_ObjectIdMap and OS_ObjectIdUnmap has been replaced by other functions and these are neither used nor defined in the current OSAL, but they are still declared/prototyped in `os-shared-impl.h`

**Describe the solution you'd like**
Remove unused/leftover prototypes

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/557
Clean up endian temporary compatibility macro,"**Is your feature request related to a problem? Please describe.**
Missing an else (likely error) case (or !defined(__BYTE_ORDER))
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L145-L171

It's also a misnomer (BYTE not BIT), and one of many various patterns (see nasa/cFE#1209)

**Describe the solution you'd like**
At minimum add the error case, ideally clean/remove/consolidate.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFE#1209

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/843
Add OSAL abstraction for network/socket interface,"Currently the OSAL has a very minimal abstraction for network/socket functions.

Network operations are a common requirement and the presence/type of network stack can vary, such as BSD-style sockets or the lightweight IP (LwIP) stack.  This is a prime candidate for addition to the OSAL.  The abstraction layer should contain:

* Abstraction of OS socket address (sockaddr_in/_in6 for IPv4 and IPv6 at least)
* Abstraction of Stream/TCP & Datagram/UDP socket creation
* Bind/Listen for TCP
* Sendto/Recvfrom for UDP
* Abstractions for the basic inet_aton()/inet_ntop() IP-address ",non-bug,https://github.com/nasa/osal/issues/31
Tainted Expression get_sh_entsize(SectionHeader),"**Describe the bug**
Using tainted expression get_sh_entsize(SectionHeader) as the divisor in get_sh_size(SectionHeader) / get_sh_entsize(SectionHeader).

**Expected behavior**
Check that get_sh_entsize(SectionHeader) does not equal to 1 so get_sh_entsize(SectionHeader) is not divided by 0. 

**Code snips**
https://github.com/nasa/elf2cfetbl/blob/10f55fb3663efce8724affbcbbeac52a028ea781/elf2cfetbl.c#L1777

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Additional context**
Untrusted divisor (TAINTED_SCALAR)

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/elf2cfetbl/issues/89
"Timer ""reconfig"" tests do not work on RTEMS or VxWorks","**Describe the bug**
The ""reconfig"" tests were added to verify that timer config calls from the context of a timer callback are rejected. Unfortunately the underlying mechanism that allows this to happen only works on POSIX (via the pthread keys, which can do this).  On RTEMS and VxWorks, the mechanism which gets the task ID (`OS_TaskGetId_Impl`) doesn't return the timer ID when called from a timer task.

**To Reproduce**
Run timer tests on VxWorks or RTEMS, timer reconfig tests will fail.

**Expected behavior**
Test should pass.

**System observed on:**
MCP750 VxWorks 6.9
RTEMS 4.11.3

**Additional context**
Might be fixable on RTEMS but probably difficult to fix on VxWorks.  May want to consider just skipping this test?

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1083
ES Performance Child Task Priority Is Not Configurable,Task priorities should not be hidden read-only cFE files.  It is recommended to place all cFE application and task priority settings in the platform configuration file.,bug,https://github.com/nasa/cFE/issues/140
SMP: CFE_ES_WriteToSyslog() is not multi-thread safe,"The CFE_ES_WriteToSyslog() function is called from many places across CFE and many different threads (upwards of ~400 references to this function throughout CFE and CFS).  

Internally this uses the shared ""reset area"" pointed to by CFE_ES_ResetDataPtr and makes multiple references to the ""SystemLogIndex"" and ""SystemLogEntryNum"" in the reset area.  However, the read/modify/update sequence of these members is not protected by any sort of mutex.

",bug,https://github.com/nasa/cFE/issues/75
Improve uniqueness in resource IDs,"**Is your feature request related to a problem? Please describe.**
In the event that a resource ""A"" such as an app/counter/pool etc is created, then deleted, then another resource ""B"" is created, the code will re-issue the same resource ID for ""B"" as was used for ""A"".

This means if a stale reference to ""A"" is stored somewhere, it silently now becomes an alias to ""B"".  All validation/checks will pass.

**Describe the solution you'd like**
Should not immediately recycle ID values.

**Additional context**
This is the way OSAL already works, and is enabled by using abstract IDs.

With the recently introduced resource ID abstractions, it is no longer necessary to limit to the respective table size(s), because IDs are not directly used as table indices anymore.  This means that a much larger set of potential ID values is available, and thus means that IDs of old/deleted objects can be different than the new objects while keeping table size the same.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/924
Fix travis-CI config warnings and add badge,"**Is your feature request related to a problem? Please describe.**
Build config validation (from travis-CI) -
root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux

Also add badge on README

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/commit/6cf5a57f5995710345b2a5411d11af2b2d7f80ee

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/569
Remove duplicate status check in `CFE_EVS_EnableAppEventTypeCmd`,"**Is your feature request related to a problem? Please describe.**
Checking for status and outputing command handler debug event here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L1110-L1115

Could output event within the first check here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L1087-L1090

**Describe the solution you'd like**
Move event.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1450
vxworks osapi.c utility task doesn't exit,"The vxworks osapi.c has an optional task that is started in OS_API_Init():
```
/*---------------------------------------------------------------------------
 * Name:    UtilityTask
 * Purpose: If turned on, this task will print out the messages from
 *          the OS_printf buffer at a low priority. This will mean
 *          that the functions calling OS_printf will not block due to
 *          writing data to the UART
----------------------------------------------------------------------------*/
#ifdef OS_UTILITY_TASK_ON
void UtilityTask()
...
```

However, this utility task implementation has a while(TRUE) loop with no exit logic.  For a ""load and forever run it"" scenario this may work, but for any other scenario where an orderly shutdown is desired by the user this means the task is never killed.  One can get kernel crashes if the vxworks module is unloaded while that thread is still writing to output.  The forever loop thread also makes line coverage difficult.

We need a robust method to always end this thread and to ensure the parent thread doesn't return to OS control while this thread is still hanging out there.",bug,https://github.com/nasa/osal/issues/120
CFE ES memory pool parameter order inconsistent,"**Is your feature request related to a problem? Please describe.**
Some APIs have handle first, some don't, example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1193
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1316

**Describe the solution you'd like**
Make consistent

**Describe alternatives you've considered**
Could be I/O based ordering, if so justify as such somewhere (document typical pattern that can be followed)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1318
Make BSPs more generic,"**Is your feature request related to a problem? Please describe.**
Users requiring custom PSP packages should not need to create both -- a CFE PSP and OSAL BSP.  The existing OSAL BSP should be used whenever possible.

The ""mcp750-vxworks"" BSP (at least) is not particularly hardware-specific and should be usable on any vxworks platform.  Likewise ""pc-linux"" should be usable on any generic linux platform.

The main purpose of the OSAL BSP is just to provide an entry point to get into the common/modular code.

**Describe the solution you'd like**
Rename these BSPs to be generic and allow use by many PSPs.

**Describe alternatives you've considered**
User needs to add a custom BSP for each board.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/449
elf2cfetbl classic build include path order issues,"Originated by abrown (67 on babelfish):

elf2cfetbl Makefile doesn't include paths in the correct order (classic build)

Using cFE 6.5.0a with the ""classic"" makefile system: the tools/elf2cfetbl/for_build/Makefile has include paths in the wrong order such that it always picks up config files from the defined source first, rather than what is in your actual mission or local build directory. Ex: you change OS_MAX_FILE_NAME in your flight build and there is a table header mismatch with elf2cfetbl.",bug,https://github.com/nasa/elf2cfetbl/issues/4
Additional CFE start up state for application sync,"Although the cFE 6.4.2 release improved synchronization during start up, it only implements a single state (`OPERATIONAL`) which is supposed to indicate when everything is ready.

However, this may not be sufficient for all applications.  Specifically, some applications have an ""early"" init in which its local data structures are all set to an initial state, followed by a ""late"" init that may require some communications with other applications or libraries.

An application would need to also complete this ""late"" initialization in order to be considered completely up and running.

Currently the start up sync only handles the early init; late init, if required, is generally done while in the ""operational"" state but this also a race condition in that requests can be made to an application that has not been fully initialized.

This race condition was observed in the EVA CWS project where one app needed to wait for other apps to be fully loaded before completing its initialization, so it was using `CFE_ES_WaitForStartupSync()` before doing its late-phase init.  But other applications (also using the same sync call) were calling other functions before the late-phase init had completed.

The solution is to add another CFE startup state for this late-phase init.  
",non-bug,https://github.com/nasa/cFE/issues/198
OSAL: OS_EOF Macro is Not Defined (GSFC DCR 22719),EOF can be defined differently for different platforms. The OSAL should define this value and make reference to this return value in the OSAL Library API documentation.,non-bug,https://github.com/nasa/osal/issues/66
TX FILE command does not validate channel parameter,"The TX FILE command does not validate the channel parameter value prior to execution. When specifying a channel value other than 0 or 1, the system crashes.",bug,https://github.com/nasa/CF/issues/123
"Use (foo), not &(foo[0]), where appropriate","In a number of places, code jumps through extra hoops
to take the address of the first element of an array,
rather than just allowing the array name to gracefully
decay into the pointer.

Where just using the array name is more correct, we should
simplify the code to use it.
",non-bug,https://github.com/nasa/PSP/issues/66
Remove stray terminators,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/MD/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/MD/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/MD/blob/376070776e6bf9e8212c063a9e852793bdd70412/fsw/src/md_dwell_tbl.c#L456

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MD/issues/26
ES Performance debug messages have incorrect parameter,"The second parameter in the following two debug event messages are incorrect:

            CFE_EVS_SendEvent(CFE_ES_PERF_FILTMSKCMD_EID, CFE_EVS_DEBUG,
                        ""Set Performance Filter Mask Cmd rcvd, num %d, val 0x%x"",
            (int)cmd->FilterMaskNum,(unsigned int)cmd->FilterMaskNum);


            CFE_EVS_SendEvent(CFE_ES_PERF_TRIGMSKCMD_EID, CFE_EVS_DEBUG,
                      ""Set Performance Trigger Mask Cmd rcvd,num %d, val 0x%x"",
                   (int)cmd->TriggerMaskNum,(int)cmd->TriggerMaskNum);

In both cases ""Num"" should be removed from the second parameter variable. The casting should also be examined. ",bug,https://github.com/nasa/cFE/issues/315
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/MM/issues/50
Improve consistency and reduce duplication in PSP BSP implementation,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/osal/issues/261, where this ticket is to address item 3 to reduce code duplication in the PSP's.

**Describe the solution you'd like**
The CFE PSP should be an extension of the OSAL BSP, not a replacement for it. The PSP already defines a CFE_PSP_Main() entry point for itself, and this can be invoked as a second-stage after OS_Application_Startup to do the additional startup tasks required for CFE.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/121
DATAGRAM Network Function OS_SocketSendTo Segfault,"**Describe the bug**
OS_SocketSendTo() Segfaults when passed in NULL for Remote Address (last parameter) and all the other parameters are valid.


**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Reporter Info**
Y. M. K.
Emergent ",bug,https://github.com/nasa/osal/issues/544
Inconsistent default CPU ID/Spacecraft ID between PC-Linux and other platforms,"**Describe the bug**
The CPU ID/Spacecraft ID on Linux differs from the VxWorks build due to the Linux build deriving the value from the targets.cmake and other platforms deriving it from the value of [target name]_platform_cfg.h and [mission name]_mission_cfg.h

**To Reproduce**
Set CFE_MISSION_SPACECRAFT_ID in [mission name]_mission_cfg.h different than SPACECRAFT_ID in targets.cmake. Do same for CFE_PLATFORM_CPU_ID and the <x> value in TGT<x>. Build for Linux and a VxWorks target. CPU IDs will be different  when attempting to run SBN

**Expected behavior**
The same default CPU IDs should show up across both platforms.

**Code snips**
It appears this is due to the Linux PSP using GLOBAL_CONFIGDATA in CFE's target_config.c and the other platforms using CFE_MISSION_SPACECRAFT_ID and CFE_PLATFORM_CPU_ID  directly. 

**System observed on:**
 - OS: [e.g. Linux 4.4]
 - Versions cFE 6.7.12 , PSP 1.4 for mcp750, Linux, sp0

**Additional context**
Add any other context about the problem here.

**Reporter Info**
John Pham, Northrop Grumman
",non-bug,https://github.com/nasa/PSP/issues/154
CFE_MSG_InitMsg does not always set secondary header bit,"**Describe the bug**

The behavior of CFE_MSG_InitMsg seems to be a regression from the old 6.7 CFE_SB_InitMsg, which always set the secondary header flag regardless of the Clear/InitMsg parameter. There's always a CCSDS secondary header, so this bit should always be set.


**To Reproduce**
Call CFE_MSG_InitMsg with the `Clear` parameter set to false

**Expected behavior**
Secondary header flag on message is set to 1 

**Code snips**
https://github.com/nasa/cFE/blob/307725172952e35953f7a2815d664602afcb4709/modules/msg/src/cfe_msg_init.c#L43-L47
CFE_MSG_InitDefaultHdr should always be called. 

**System observed on:**
 - SP0
 - OS: VxWorks
 - Versions: cFE 6.8

**Additional context**
Discovered when SBNg did not properly set the command code due to missing secondary header flag. This was worked around by calling CFE_SB_InitMsg w/ the InitMsg parameter set to true. 


**Reporter Info**
John N Pham, Northrop Grumman",non-bug,https://github.com/nasa/cFE/issues/973
Unit tests should use cFE defines instead of OS_MAX_PATH_LEN and OS_MAX_API_NAME,"**Is your feature request related to a problem? Please describe.**
Scrub unit tests for OS size use vs cFE size, related to #705, #899.

Anything in IO structures should be using cFE sizes (cFE size is maximum of all platform OS maximums).

**Describe the solution you'd like**
OS_MAX_API_NAME -> CFE_MISSION_MAX_API_LEN
OS_MAX_PATH_LENGTH -> CFE_MISSION_MAX_PATH_LEN
In the code use sizeof instead of hard coded sizes.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC (spawned from 9/30/2020 CCB discussion)
",bug,https://github.com/nasa/cFE/issues/932
CS_TableInit - cyclomatic complexity of 20,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

cs_table_processing.c::[CS_TableInit](https://github.com/nasa/CS/blob/1ce636e4f2f04a0c98f905a3cc2bda9d05a3995d/fsw/src/cs_table_processing.c#L801) unnecessarily violates the recommendation with a cyclomatic complexity of 20.  

**Describe the solution you'd like**
Clean up CS_TableInit such that it has a cyclomatic complexity of 15 or less.

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/CS/issues/64
Assert return codes specified in API in functional tests,"I noticed that osal-core-test.c only tests if the function returns OS_SUCCESS or does NOT return OS_SUCCESS.  It does not actually test that the return code is correct.  For example, the test to ensure that the OSAL does not create a queue with a name that already exists does not actually test for OS_ERR_NAME_TAKEN.  It merely passes if the return is not OS_SUCCESS.  A quick spot check indicates this design pattern is systemic.

These unit tests were used to certify (per NPR7150A) the ARINC 653 version of CFS.  This requires requirements have tracing back to tests.  Testing the actual expected return code is a better pattern, but is required if there is an actual requirement defining the return codes.
",non-bug,https://github.com/nasa/osal/issues/331
Add Testing Tools to the Security Policy ,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/sample_app is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/sample_app while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/sample_app/issues/128
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/ci_lab/issues/71
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/sample_app/blob/0faa72a9b4eff8167865e8bde1f5b5a817b7c4ee/unit-test/coveragetest/sample_app_coveragetest_common.h#L35-L42

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/133
Recommend using FcnCode (instead of CommandCode) terminology in the code,"The current implementation of the sample app mixes terminology, [calling the field which identifies a command a `CommandCode`](https://github.com/nasa/sample_app/blob/bd4a5fe53c22246998b29eecf3cfa9c5c323f6cc/fsw/src/sample_app.c#L264)  whereas the CFE APIs call it a `FcnCode`.

Since this app is the starting point for many people, it might make sense to use consistent terminology. Since the CFE APIs call it a `FcnCode`, it seems like the code should too.",non-bug,https://github.com/nasa/sample_app/issues/167
Alternative entry point for UT-Assert based test applications,"**Describe the bug**
Applications which utilize the UT Assert library to do testing (either functional or coverage) share the same entry point with ""normal"" OSAL applications, specifically the  `OS_Application_Startup` function.

For testing, this is not ideal as there is some extra setup/teardown when using UT Assert.  This prevents using the OSAL-provided BSP directly and necessitates an alternative BSP that includes the extra setup/teardown.

If the UT Assert based applications used a differently-named entry point, this could be properly layered and some duplicate logic in the OSAL BSPs can then be removed.

**To Reproduce**
Build with ENABLE_UNIT_TESTS=TRUE, and observe that the system builds a ut-bsp in addition to the normal OSAL BSP.  On pc-linux for instance, both of this libraries include a `main()` function.  The difference is that the ut-bsp includes extra UT Assert setup/teardown logic before and after the call to OS_Application_Startup().  It also duplicates the `OS_VolumeTable` object.

**Expected behavior**
The `main()` routine and `OS_VolumeTable` should _not_ be duplicated.  Rather, the UT Assert setup/teardown should be an extension layer to the normal BSP.

**System observed on:**
Ubuntu 18.04 LTS, 64 Bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/294
MM Unclear app configuration assumptions,"Stakeholder:
Discovered and added comments to the config file that some app configuration values have assumptions on modulo-2 or modulo-4 sizes.  For example, these 16 and 32-bit dump routines would fail if these config #defines are not set with the appropriate values.

Imported from GSFCCFS-925",non-bug,https://github.com/nasa/MM/issues/1
Add ES application control API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Application Control APIs
– CFE_ES_RestartApp - Restart a single cFE Application.
– CFE_ES_ReloadApp - Reload a single cFE Application.
– CFE_ES_DeleteApp - Delete a cFE Application.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/806
Improve ABORT handling in RTEMS unit test,"**Is your feature request related to a problem? Please describe.**
If an unit testing error occurs that causes the test to abort, the implementation just calls the system `abort()` function.  In RTEMS, this causes the entire system/kernel to shutdown.  This leaves no ability to use the shell to check the system state or diagnose what went wrong.

**Describe the solution you'd like**
Defer handling of the abort to the BSP.  In RTEMS, when the shell is available, this should just suspend the calling task to stop the tests, allowing the shell to continue being used.

**Additional context**
This used to be the case, but probably an artifact of merging the UT BSP with regular BSP that this got lost in translation, and it only shows up if an abort failure occurs.  Fairly trivial/easy to add it back in though.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/457
Deprecate SB elements relative to msg module adaption,"**Is your feature request related to a problem? Please describe.**
Many APIs will be updated for consistency relative to the MSG module, also element scoping improvements (SB doesn't actually care about the header, it just needs to route).

**Describe the solution you'd like**
Per 2020-07-28 discussion SB for once #726 is in.

Deprecating:
- [x] CFE_SB_PKTTYPE_* -> CFE_MSG_Type_t
- [x] CFE_SB_MsgPtr_t -> CFE_MSG_Message_t *
- [x] CFE_SB_Msg_t -> CFE_MSG_Message_t
- [x] CFE_SB_MsgPayloadPtr_t (use pointer to payload in structure)
- [x] CFE_SB_InitMsg -> CFE_MSG_Init
- [x] CFE_SB_GetTotalMsgLength -> CFE_MSG_GetSize
- [x] CFE_SB_SetTotalMsgLength -> CFE_MSG_SetSize
- [x] CFE_SB_GetMsgTime -> CFE_MSG_GetMsgTime (this gets rid of structure return, similar to #45 issue)
- [x] CFE_SB_SetMsgTime -> CFE_MSG_SetMsgTime
- [x] CFE_SB_GetCmdCode -> CFE_MSG_GetFcnCode
- [x] CFE_SB_SetCmdCode -> CFE_MSG_SetFcnCode
- [x] CFE_SB_GetChecksum (no use case defined, what do you need it for?)
- [x] CFE_SB_GenerateChecksum -> CFE_MSG_GenerateChecksum
- [x] CFE_SB_ValidateChecksum -> CFE_MSG_ValidateChecksum
- [x] CFE_SB_GetMsgId -> CFE_MSG_GetMsgId
- [x] CFE_SB_SetMsgId -> CFE_MSG_SetMsgId
- [x] CFE_SB_GetPktType -> CFE_MSG_GetTypeFromMsgId
- [x] CFE_SB_SetMsgSeqCnt -> CFE_MSG_SetSequenceCount

NOT deprecating, but will note in API that these are fragile (guesses based on assumptions).  Future implementation could be replaced via data dictionary sort of access or standards based header definitions (including secondary header, and flags or extra internal data to mange the real sizes):
- CFE_SB_MsgHdrSize: use actual message structure where possible
- CFE_SB_GetUserData: use actual message structure where possible
- CFE_SB_GetUserDataLength: use actual message structure where possible
- CFE_SB_SetUserDataLength - use CFE_MSG_SetSize with full message structure where possible
- CFE_SB_CMD_HDR_SIZE -> sizeof CFE_MSG_CommandHeader_t) preferrred
- CFE_SB_TLM_HDR_SIZE -> sizeof (CFE_MSG_TelemetryHeader_t) preferred

Note CFE_SB_Qos_t and CFE_SB_Default_Qos will likely be used for #926 (critical subscription)

NOT deprecating, MSG types are unaligned, SB types are now aligned:
- CFE_SB_Msg_t, CmdHdr_t, TlmHdr_t -> CFE_MSG_*

NOT deprecating CFE_SB_TimeStampMsg.  See #26 that requests making this part of send.

**Describe alternatives you've considered**
Just need to manage these, unique deprecation flag... not all actually need to go, but reduced/simplifies unit testing

**Additional context**
#711, #726

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/777
SCH_LAB should consolidate its globals into a single structure,"**Is your feature request related to a problem? Please describe.**
Other CFE core apps all use a single global structure to keep its runtime state.  This is preferable because the structure acts as a ""namespace"" and keeps the globals separate from those of other apps.

**Describe the solution you'd like**
Replace individual globals with a single `SCH_LAB_Global` structure which contains all the global variables as members.

**Additional context**
This is particularly important on systems where globals go into a ""common"" section and strange behavior can happen if a name collision occurs.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc
",non-bug,https://github.com/nasa/sch_lab/issues/32
Consistent loop implementation in `CFE_TBL_FindTableInRegistry` and `CFE_TBL_FindFreeRegistryEntry`,"**Is your feature request related to a problem? Please describe.**
Loops could be the same but aren't:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L510-L525
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L543-L556

**Describe the solution you'd like**
Consistent implementation

**Describe alternatives you've considered**
None

**Additional context**
Code review - note this is style suggestion only

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1517
Eliminate redundant switch in CFE_ES_CleanupObjectCallback,"**Is your feature request related to a problem? Please describe.**
Redundant switch cases, could be eliminated by setting local status variable in first switch:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1650

**Describe the solution you'd like**
Eliminate redundant switch

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1335
Move `CFE_FS_RunBackgroundFileDump` to internal API,"**Is your feature request related to a problem? Please describe.**
`CFE_FS_RunBackgroundFileDump` is only used internally, shouldn't be exposed as external API

**Describe the solution you'd like**
Move to *_core_internal.h

**Describe alternatives you've considered**
None

**Additional context**
Code review, once moved would also benefit from #1387

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1393
Unable to set return code of CFE_ES_CalculateCRC using UT_SetDeferredRetcode,"**Describe the bug**
The CFE_ES_CalculateCRC  stub always return the value of 332424 regardless of what deferred return code I set it to. 

**To Reproduce**
Steps to reproduce the behavior:
1. Create a functionX that calls CFE_ES_CalculateCRC
2. Write a unit test for the functionX
3. In UT_functionX, set the return code of CFE_ES_CalculateCRC  as below
    `UT_SetDeferredRetcode(UT_KEY(CFE_ES_CalculateCRC), 1, 0);`
4. Run the unit test

**Expected behavior**
I expect the return value of CFE_ES_CalculateCRC to be 0 as I set it to.

**Actual behavior**
However, the return value of CFE_ES_CalculateCRC will be 332424 instead of 0.

**Code snips**
N/A

**System observed on:**
 - Hardware
 - OS: Centos7
 - Versions: cFS Development Build: 6.8.0-rc1+dev28

**Additional context**
N/A

**Reporter Info**
N/A
",non-bug,https://github.com/nasa/cFE/issues/890
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-dir.h#L32

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/868
Question: Getting cFS to communicate with Ground Station running on different host,"Hey,

So this may have a simple solution, but I'm new to cFS and I'm trying to figure out how to get a Ground Station running on a VM to communicate with a cFS instance running on a Raspberry Pi to communicate.  I can see the packets being received by the cFS instance but it doesn't send any data.  There are no firewalls blocking anything. I'm also running the sample Makefile and sample_defs. 

I know I need to modify the ci_lab and to_lab files, but I'm not sure what to modify.

Ryan",non-bug,https://github.com/nasa/cFS/issues/191
Incomplete coverage test for cfe_es_task.c ,"**Is your feature request related to a problem? Please describe.**
Missing code coverage for the following:

CFE_ES_TaskInit
`     363           0 :        snprintf(EventBuffer, sizeof(EventBuffer), ""Mission %s"", GLOBAL_CONFIGDATA.Config);`

```
     385           3 :     if ( Status != CFE_SUCCESS )
     386             :     {
     387           0 :        CFE_ES_WriteToSysLog(""ES:Error sending version event:RC=0x%08X\n"", (unsigned int)Status);
     388           0 :        return(Status);
     389             :     }
```

```
     395           3 :     if ( Status != CFE_SUCCESS )
     396             :     {
     397           0 :        CFE_ES_WriteToSysLog(""ES:Error sending build info event:RC=0x%08X\n"", (unsigned int)Status);
     398           0 :        return(Status);
     399             :     }
```

CFE_ES_HousekeepingCmd

```
      696           0 :             CFE_ES_TaskData.HkPacket.Payload.PerfTriggerMask[PerfIdx] = 0;
     697             :         }
     698             :     }
```

```
    708             :         {
     709           0 :             CFE_ES_TaskData.HkPacket.Payload.PerfFilterMask[PerfIdx] = 0;
     710             :         }
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/468
ES requirements scrub,"**Is your feature request related to a problem? Please describe.**
ES requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cES1000 - HK requirement not consistent (not a real command, update wording)
- cES1007.2 - Restart app claims app will continue running if file missing (#424 ), fix req
- cES1010 - Fix TBD in rational
- cES1013, cES1013.1 - shell requirements - remove (#484)
- cES1316.1 - Copy from CDS, invalid data case copies data and returns error (make req match code)
- cES1522 - Log mode discard on processor reset (make configurable, #410)
- NEW cES1523- Log mode on power-on reset (make configurable, #410)
- cES1700 - Max apps (remove, platform specifc)
- cES1702*, cES1703* - remove exception handling requirements from cFE (they are PSP)
- cES1704, cES1705, cES1706, cES1707, cES1708 - remove sizing, platform dependent
- cES1302, cES1303 - processor and spacecraft ID are PSP APIs, remove from cFE req
- cES1026 - DumpCDS doesn't dump integrity (update requriement)
- NEW API Requirements:
    - cES1329: CFE_ES_PoolCreateNoSem (cES1321 also updated to note it's the protected version)
    - cES1330: CFE_ES_GetMemPoolStats
    - cES1331: CFE_ES_GetPoolBufInfo
    - cES1332: CFE_ES_ReloadApp
    - cES1333: CFE_ES_RunLoop
    - cES1334: CFE_ES_WaitForSystemState
    - cES1335: CFE_ES_WaitForStartupSync
    - cES1336: CFE_ES_GetAppInfo
    - cES1337: CFE_ES_IncrementTaskCounter
    - cES1338: CFE_ES_RegisterGenCounter
    - cES1339: CFE_ES_DeleteGenCounter
    - cES1340: CFE_ES_IncrementGenCounter
    - cES1341: CFE_ES_SetGenCount
    - cES1342: CFE_ES_GetGenCount
    - cES1343: CFE_ES_GetGenCounterIDByName
    - cES1600: CFE_FS_ReadHeader
    - cES1601: CFE_FS_InitHeader
    - cES1602: CFE_FS_WriteHeader
    - cES1603: CFE_FS_SetTimestamp
    - cES1604: CFE_FS_ExtractFilenameFromPath, 

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT-* Remove shell requirements added, cES3121 update noted, added new requirement numbers",non-bug,https://github.com/nasa/cFE/issues/509
UtAssert_Message doxygen comments should include params,"**Describe the bug**
There are no param items listed in the UtAssert_Message method in utassert.h

**To Reproduce**
N/A

**Expected behavior**
Add param descriptions.

**Code snips**
https://github.com/nasa/osal/blob/ff5b38db00c9ff1882fdf5cd5f757a6b96829598/ut_assert/inc/utassert.h#L267-L276

**System observed on:**
RHEL 7.6

**Additional context**
N/A

**Reporter Info**
Alan Gibson NASA GSFC/587
",non-bug,https://github.com/nasa/osal/issues/574
PSP API prototype fixes for warning cleanup,"Some PSP API calls were missing a `const` qualifier from their prototypes (e.g. the memcpy wrapper) which means that it triggered a compiler warning any time application code used these functions with a value that was correctly qualified as `const`.  

The prototype and all definitions of the function should be fixed.",bug,https://github.com/nasa/PSP/issues/82
Update unit test stubs to use size_t,"**Is your feature request related to a problem? Please describe.**
As part of nasa/osal#635 the unit test routines were updated to use `size_t` rather than `uint32` for object sizes.

**Describe the solution you'd like**
PSP stub implementations need to use `size_t` instead of `uint32` to avoid a compiler type mismatch error on some platforms.

**Additional context**
This needs to go with/dependency on PR nasa/osal#654.

This issue is only for stubs as it will cause a build issue without it.  There will be a separate change/to-do item to fix PSP FSW APIs that are still using uint32.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/217
Possible alias warning on certain compiler versions,"**Is your feature request related to a problem? Please describe.**
When getting the address of a memory pool buffer directly as a `CFE_SB_BufferD_t *` type, it may trigger an alias warning in certain compilers/configurations.

Example when using `-O3 -fstrict-aliasing -Wstrict-aliasing=2` on GCC 10.3:
```
cfe/modules/sb/fsw/src/cfe_sb_buf.c: In function ‘CFE_SB_GetBufferFromPool’:
cfe/modules/sb/fsw/src/cfe_sb_buf.c:115:54: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  115 |     stat1 = CFE_ES_GetPoolBuf((CFE_ES_MemPoolBuf_t *)&bd, CFE_SB_Global.Mem.PoolHdl, AllocSize);
      |                                                      ^~~
cfe/modules/sb/fsw/src/cfe_sb_buf.c: In function ‘CFE_SB_GetDestinationBlk’:
cfe/modules/sb/fsw/src/cfe_sb_buf.c:221:53: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  221 |     Stat = CFE_ES_GetPoolBuf((CFE_ES_MemPoolBuf_t *)&Dest, CFE_SB_Global.Mem.PoolHdl, sizeof(CFE_SB_DestinationD_t));
      |                                                     ^~~~~
```

**Describe the solution you'd like**
Should build clean

**Additional context**
Using a local `CFE_ES_MemPoolBuf_t` intermediate value should avoid this.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1971
Make invalid ID a generic define and use (always 0),"**Is your feature request related to a problem? Please describe.**
Hardcoded zero instead of `CFE_SBR_INVALID_ROUTE_ID` used by `CFE_SBR_IsValidRouteId`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_private/fsw/inc/cfe_sbr.h#L143

**Describe the solution you'd like**
Define a generic CFE_INVALID_ID (= 0), and confirm it's used everywhere.  

**Describe alternatives you've considered**
At minimum replace this specific use with define.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1475
"Deprecate multiple ""success"" code responses","**Is your feature request related to a problem? Please describe.**
API's with multiple ""success"" codes are frequently mishandled

**Describe the solution you'd like**
Single success response, unique information should be passed back in parameters

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/483
Add message id to message key hash option,"**Is your feature request related to a problem? Please describe.**
Core implementation is message id == message key, leading to a large, sparse message table to get the route index.

**Describe the solution you'd like**
Hash message and deconflict on lookup (confirm route matches MsgId).  Could decrease message table size to a small multiple (2 or 4 maybe) of the routing table size depending on how many conflicts are acceptable.

**Describe alternatives you've considered**
Ordering the routing table and implement binary search and completely eliminate message table.

**Additional context**
See #928

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/929
CFE intermittently showing invalid message ID errors,"**Describe the bug**
When leaving CFE running for long periods of time, I am seeing occasional errors related to bad message IDs/Commands appear.

For instance:
`EVS Port1 66/1/CFE_EVS 5: Invalid command packet, Message ID = 0x00001810`

I was actually able to catch one of these in a core dump, and I can confirm that `SBBufPtr->Msg` looks like a perfectly well-formed message with MsgID of 0x1810.  This particular example was caught at https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/evs/cfe_evs_task.c#L378.

```
(gdb) print /x *((CFE_MSG_CommandHeader_t*)SBBufPtr)
$2 = {Msg = {CCSDS = {Pri = {StreamId = {0x18, 0x10}, Sequence = {0xc0, 0x0}, Length = {0x0, 0x1}}}, Byte = {0x18, 0x10, 0xc0, 0x0, 0x0, 0x1}}, Sec = {FunctionCode = 0x0, Checksum = 0x0}}
```

What is particularly mysterious is that 0x1810 is `CFE_TIME_TONE_CMD_MID` ... These MIDs should be delivered only to CFE_TIME - EVS does not subscribe to these - yet for some reason it appears to be delivered to EVS....

**To Reproduce**
Build CFE in default debug config (SIMULATION=native, etc).  Start up CFE core and just let it run.  It may take several hours for the first error to appear.  CFE appears to continue running normally afterwards though.

**Expected behavior**
EVS (or other apps!) should not randomly see messages it didn't subscribe to.

**System observed on:**
Ubuntu 20.04 (native)

**Additional context**
Not sure when this started because everything seems fine when debugging CFE for shorter time periods.   But over the last couple weeks I've noticed these messages randomly appearing in terminal windows where I've started CFE and forgotten about it (overnight or longer).

Although I cite EVS here (because its the one I actually caught in a core file) this phenomenon occurs in other apps too (SB, TIME, etc) all randomly getting a delivered message ID they didn't subscribe to.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1073
Add semaphore speed test,"During discussions of the NG architecture, a recurring concern was regarding the additional function calls and possible increase in overhead related to this.

Rather than act on assumptions, it is better to actually benchmark the code in question to determine if optimizations are necessary, and if so, where those optimizations should be done.",non-bug,https://github.com/nasa/osal/issues/240
User's guide scrub,"**Is your feature request related to a problem? Please describe.**
User's guide out of date and inconsistant

**Describe the solution you'd like**
General scrub of users guide
 - Replace non-documented formatting mechanisms for return codes (causes errors)
    - Custom table aliases for return values causing issues, use built in
 - Make references into links where needed
 - Fix links where needed (remove private links)
 - Remove duplicated documentation in *.c files (API's documented in *.h, with prototype)
 - Remove duplicated brief in API table (pull from object brief)
 - Remove xrefitem style formatting (caused warnings, see #553)
 - Fix glossary table
 - Fix use of BSP where PSP applies
 - Performance collection focused on cFE, not tool (updated reference for java tool)
 - Update Event Message Format documentation to match order/contents
 - Update applicable documents with modern references
 - Removed no-longer-up-to-date dox templates (eclipse header templates)
 - Cleaned up SB sequence counter section
 - Added a couple FAQs
 - Single sourced the versioning section
 - Resolved ALL doxygen warnings (including those detailed in #403)

**Describe alternatives you've considered**
None

**Additional context**
Related issues: #212, #261, #267, #389, #403, #499, #506, #508, #531, #536
Looks like EDS file for SB needs GetPipeIdByNameErrorCounter

**Future considerations** 
- scrub return codes, not all listed in current API documentation
- remove autodoc, explicitly document (futureproof from missing documentation)

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/540
Add new installation instructions to the README.md,"**Is your feature request related to a problem? Please describe.**
Several user experience improvements can be made to the general cFS README.md to help brand new cFS users (like interns who've never encountered cFS before) through the installation process.

**Describe the solution you'd like**
1. Add in a brief introductory statement at the very top explaining what cFS is.
2. Under the ""Setup and Build and Run"" sections add a list of prerequisite software that should be preinstalled before cloning cFS (i.e. make, cmake, gcc, and git).
3. Under the ""Send commands, receive telemetry section"" add in the specific installation commands for pyqt5, zmq, and libcanberra-gtk-module from the ground system's readme (I and some of my fellow interns ran into issues with installation because cFS was very picky in how these three were installed).

**Requester Info**
Submitted by: Jandlyn Bentley, NASA-GSFC
",non-bug,https://github.com/nasa/cFS/issues/114
Compiler warning when using optimized/release build,"**Describe the bug**
A compiler warning pops up when enabling full optimizations:

```
In function ‘strncpy’,
    inlined from ‘CFE_ES_ReloadApp’ at /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_api.c:259:12:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 64 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
```

**To Reproduce**
Build with `BUILDTYPE=release` using a recent GCC (e.g. v9.0+) such as the one with Ubuntu 20.04

**Expected behavior**
Should build cleanly

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/970
Fix PSP to use updated names for macros and symbols,"CFE 6.6 addresses a number of naming convention inconsistencies, and many of the symbol names are updated to be clearer about the intent and purpose of the symbol.

As part of CFE 6.6 a backward-compatibility mapping is also provided.

This ticket is to do the corresponding updates to the PSP to use the correct new-style name, and not rely on the backward compatibility macro anymore.  This will need to be done before the compatibility names can be turned off.",bug,https://github.com/nasa/PSP/issues/84
Typo in osapi.h,"**Describe the bug**
Typo in osapi.h causes compilation failure when included into a c++ file

**To Reproduce**
Include osapi.h into a c++ file

**Expected behavior**
Successful compilation

**Code snips**

The following line is missing its corresponding `extern ""C"" {` and fails to build under C++: 
https://github.com/nasa/osal/blob/89bd11a98fa529538a851139a5682bc7ac5b4373/src/os/inc/osapi.h#L97-L99

Appears to be introduced in https://github.com/nasa/osal/commit/f0bd42edb8d731c2ba899292b3fd8f56e0f5fcb4

**System observed on:**
Linux


**Reporter Info**
John N Pham, Northrop Grumman



",bug,https://github.com/nasa/osal/issues/757
Main user guide build warnings (and they weren't caught by actions),"**Describe the bug**
Warnings generated when building user's guide

**To Reproduce**
I did standard setup, and `make SIMULATION=native prep` but likely exists for any config.
Then `make usersguide`, observe warnings in build/doc/warnings.log:
```
/export/home/jhageman/cFS/cFS-GitHub/osal/src/os/inc/osapi-bsp.h:95: warning: end of file while inside a group
/export/home/jhageman/cFS/cFS-GitHub/osal/src/os/inc/osapi-idmap.h:274: warning: end of file while inside a group
```

**Expected behavior**
No warnings.
Also the new GitHub actions should have caught this.  @astrogeco 

Note the warnings file at https://github.com/nasa/cFS/suites/1693812098/artifacts/31817568 is not empty... not clear why this didn't trigger a failure.

**Code snips**
None yet.

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFS/issues/167
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/FM/issues/31
make prep broken out of the box,"**Describe the bug**
Prep fails out of the box when following README instructions:

```
-- Configuring for system arch: cpu1
-- The C compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- OMIT_DEPRECATED=false: Deprecated elements included in build
Error: """" is not a valid BSP type
CMake Error at /export/home/jhageman/cFS/cFS-GitHub/osal/CMakeLists.txt:66 (message):
  OSAL_SYSTEM_BSPTYPE must be set to the appropriate BSP
```

**To Reproduce**
Steps to reproduce the behavior:
1. Follow the README instructions, make prep fails.

**Expected behavior**
Expected it to default to pc-linux as in the past.

**Code snips**
The following does not set OSAL_SYSTEM_BSPTYPE since CFE_SYSTEM_PSPNAME and OSAL_SYSTEM_OSTYPE is defined...

https://github.com/nasa/cFE/blob/0648a47bf4369138c31f9019458ab2eceec738a8/cmake/arch_build.cmake#L275-L289

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: master bundle

**Additional context**
Short term work around - pass in SIMULATION=native at prep, or likely can define the target system in targets.cmake (2nd approach not tested yet)

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/629
Task not found case not explicitly handled in CFE_ES_RunExceptionScan,"**Is your feature request related to a problem? Please describe.**
Not clear if task not found case is handled correctly:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_erlog.c#L360-L362

**Describe the solution you'd like**
Analyze and explicitly handle if needed or document why not needed for future reference

**Describe alternatives you've considered**
None

**Additional context**
Code Review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1345
Remove old MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",non-bug,https://github.com/nasa/sample_app/issues/3
Function names MM_ResetHk and MM_WriteMemWID are misleading,"

Imported from GSFCCFS-1569",non-bug,https://github.com/nasa/MM/issues/10
Type-safe implementation for osal_id_t,"**Is your feature request related to a problem? Please describe.**
The `osal_id_t` type is currently just a plain `uint32` to make it backward-compatible.  The problem is that a plain number does not convey the purpose/intent of this ID value.  Users can still do things like addition, subtraction, or interchange with other numbers, which are all invalid for a number being used as an ID.

As long as users are using the `osal_id_t` type and the associated checks/conversions also provided by OSAL (e.g. OS_ObjectIdDefined, etc) then this should be transparent.

**Describe the solution you'd like**
Make `osal_id_t` type-safe

**Additional context**
This was the intent all along with creating a separate `osal_id_t` typedef and using it across the CFE and PSP.
It does depend on having all the dependent code using the typedef, so probably want to stage this in using OSAL_OMIT_DEPRECATED flag or similar, so we can find the things that are still broken in this regard.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1208
Replace hardcoded message limits in TIME services,"**Is your feature request related to a problem? Please describe.**
Hard coded as 4, although if there's 2 messages in the pipe that'd be an issue...
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_task.c#L201
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_task.c#L217
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_task.c#L233

**Describe the solution you'd like**
The default subscriptions just use `CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT` so could just use it to keep subscriptions the same, even though 2 would be bad it's likely handled by the related verification logic.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1537
Automatic suppression of flooding events,"**Is your feature request related to a problem? Please describe.**
We've observed that overly verbose event messages can take down a processor, especially if the generation of events can induce the production of more events due to increased SB/SBNg traffic. Some ability to rate-limit events regardless
of filter state seems to be desirable, as the default for many apps is often unfiltered, and during an event storm it may not be possible to command an event to be filtered.

In addition, there are concerns about critical event messages being lost amongst a flood of less critical events, especially when not commandable due to being in a temporary loss-of-signal state.

There's also the desire to automatically re-enable an event if it is no longer flooding, and the proposed solution would have that characteristic. This is important if the event notifying that the filter has been activated gets lost due to flooding.
Events could still be permanently suppressed w/ the existing binary filters. 

**Describe the solution you'd like**
A filter that is applied per-app, per event type (priority). A token counter for (app, event type)  is incremented every time an event message arrives for (app, event type). Meanwhile, the token counter is decremented at a fixed rate.
If the token counter exceeds a certain threshold, incrementing stops and all incoming events for that (app, event type) are discarded until the counter is below a threshold (could be the same as the suppress threshold, then it'll
effectively rate limit after allowing a small burst).

**Describe alternatives you've considered**
To simplify the implementation, this could be done globally for all events instead of on a per-app basis. There would be the problem of a misbehaved app flooding out another app sending more critical event messages, but this could
be mitigated somewhat by doing this per-event type or prioritizing by event type.

A more granular solution would filter only excessively verbose events by (app event ID) but this would probably require registration of all events and enforcement. It appears that not all apps register all events w/ EVS (i.e. SBNg).

Another solution that only addresses the auto-reenabling of formerly flooding events would be to add another filter type besides binary filter that uses the above mentioned token scheme. This doesn't help too much since the filter 
type is set by the app during registration, if events are registered at all.


**Additional context**
Initial driver was SBNg doesn't come w/ default filters for floodable events, and one of our other apps also sends off a lot of events on startup. Obvious solution is to modify these apps to setup default filters, but this doesn't address reenabling the events automatically when the transients go away, nor does it address unexpectedly flooding messages due to unforeseen edge cases. 

**Requester Info**
John N Pham, Northrop Grumman",non-bug,https://github.com/nasa/cFE/issues/2095
Use generated stubs for all internal functions,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
FM divides its coverage test into separate units and uses stubs for all units other than the unit under test.  However, this appears to be a mixture of hand-written and some generated stubs, and the hand written stubs can diverge from the implementation.

**Describe the solution you'd like**
Re-run the UT assert generate stubs script and use the generated stubs only.

**Additional context**
This makes the UT stubs easier to maintain - any time a header file changes, just re-run the tool and re-commit the stubs.  It is best not to modify the generated stub in any way, if it can be avoided.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/FM/issues/79
LC Transitions Active Action Points to Passive When Application is in Passive Mode," During a stakeholder rehearsal there were several APs that were commanded ""active"" while the LC application state was in ""passive"" mode. Before operations could command the application state to ""active"" mode, some of the APs that were activated and had ""tripped"" causing the AP to transition back to passive mode. The purpose of changing a ""tripped"" APs state from active to passive is to prevent an RTS from getting initiated more than once. In ""passive"" mode, LC performs all limit tests as in ""active"" mode, but no stored command sequences are invoked as the result of AP failures. Having the AP's state transition while the application is in passive mode will make enabling APs with a low threshold while LC is in passive mode very difficult. The rational for this design feature needs to be clearly understood and documented. The LC user's guides (both doxygen and word/pdf) do not make this design feature clear. If no rational exists this design feature should be removed from LC.

Imported from GSFCCFS-744",bug,https://github.com/nasa/LC/issues/4
Enforce Strict ASCII,Replace all non-ASCII characters (i.e. copyright symbol) with ASCII equivalent.,bug,https://github.com/nasa/osal/issues/63
CFE_PSP_Module_FindByName uses incorrect list limit/stop condition,"**Describe the bug**
The internal variable `CFE_PSP_ModuleCount` is used as the limit for searching for a matching name in the PSP module list here:

https://github.com/nasa/PSP/blob/15c2ced1185461aeb67db189f8a8ffd79f4ab8c6/fsw/shared/src/cfe_psp_module.c#L127

However, a while back the set of modules was split into two, so now we have separate lists:

    CFE_PSP_BASE_MODULE_LIST
    GLOBAL_CONFIGDATA.PspModuleList

The `CFE_PSP_ModuleCount` value reflects the total number of entries (sum) of both lists.
But the `CFE_PSP_Module_FindByName` function is only searching the second list (GLOBAL_CONFIGDATA.PspModuleList).  This means that if there is no matching entry, it might read beyond the end of the list.

**To Reproduce**
Call `CFE_PSP_Module_FindByName` on a module name that does not actually exist in the system.  The loop will segfault when it gets to the NULL entry that normally terminates the `GLOBAL_CONFIGDATA.PspModuleList`.

**Expected behavior**
The search should cover `CFE_PSP_BASE_MODULE_LIST` and `GLOBAL_CONFIGDATA.PspModuleList`  like the init function does

**Code snips**
Init function uses a helper function that does each list at: https://github.com/nasa/PSP/blob/15c2ced1185461aeb67db189f8a8ffd79f4ab8c6/fsw/shared/src/cfe_psp_module.c#L80-L87

Search function should mirror this.

**System observed on:**
Ubuntu 22.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc. on behalf of Alan Cudmore (GSFC)
",bug,https://github.com/nasa/PSP/issues/353
Tests that use network stack do not run on RTEMS,"**Is your feature request related to a problem? Please describe.**
The RTEMS network stack needs to be explicitly initialized in a platform-specific manner.  However, the barebone/minimal BSP that runs the unit tests does not do this initialization.  Therefore when running the network tests, it just gives an immediate error:

```
[BEGIN] 01 TestDatagramNetworkApi
rtems-net: network sema obtain: network not initialised

fatal error, exiting
```

**Describe the solution you'd like**
Not clear at this point.  The network init is quite board specific (refers to a specific nic driver) so probably doesn't fit as part of the OSAL BSP.  Suggest just documenting this limitation.


**Additional context**
As the network tests only use the loopback address (127.0.0.1) it might be possible to bring up the RTEMS network stack with only this interface and no ""real"" nic.  That might be a possibility to get these tests to run without making the BSP too complicated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/705
Replace UT_DisplayPkt with UtPrintx,"**Is your feature request related to a problem? Please describe.**
UT_DisplayPkt is just a specialized version of UtPrintx, duplication of logic (don't need the custom version).

**Describe the solution you'd like**
Update internal unit tests to use UtPrintx, make UT_DisplayPkt a macro that just calls UtPrintx

**Describe alternatives you've considered**
Deprecate and eventually remove UT_DisplayPkt (note there are external users that would need to update)

**Additional context**
nasa/osal#973 - this actually fixes UtPrintx, once in no need for custom fuction.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1422
Check Return Value of CFE_ES_PutPoolBuf,"**Describe the bug**
Calling CFE_ES_PutPoolBuf without checking return value (as is done elsewhere 4 out of 5 times).

**Expected behavior**
Check return value of CFE_ES_PutPoolBuf as seen elsewhere. 

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_buf.c#L167

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Additional context**
Examples of return value being checked for CFE_ES_PutPoolBuf

https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_buf.c#L258-L259

https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L354-L362

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFE/issues/1985
Update for suggested alignment enforcement pattern (nasa/cFE#1009),"**Is your feature request related to a problem? Please describe.**
See nasa/cFE#1009, inconsistent pattern

**Describe the solution you'd like**
Match suggestion in nasa/cFE#1009, use the ""raw"" message cmd/tlm types in definition.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFE#1009

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sch_lab/issues/56
CFE_ES_GetPoolBuf() return value is confusing,"On error, CFE_ES_GetPoolBuf() returns a status code, but on success, it returns the size allocated (which is actually the Size input parameter, so the return value is redundant.) I suggest either make the Size parameter an in/out parameter, or just return a CFE status and the caller can assume CFE_SUCCESS means the memory size requested was allocated.

https://github.com/nasa/cFE/blob/318f3451304e0d7e2269054fe170af99189ec560/modules/es/fsw/src/cfe_es_mempool.c#L424",non-bug,https://github.com/nasa/cFE/issues/2136
CFE ES CRC does not document polynomial,"4/16/18: Mark Pallone (GSFC PACE/OCI)reported
The generator polynomial used in a CRC implementation is fundamental information. The CFE_ES_CalculateCRC function does not state what generator polynomial it's using:

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/inc/cfe_es.h#L1188-L1214

Dave McComas Addition:  This is a subset of a larger documentation issue. The cFE should have a flight-ground ICD

EDIT - updated link",non-bug,https://github.com/nasa/cFE/issues/266
Update CI pipeline to use Github Actions,The existing Travis CI pipeline is out of date and no longer functional. We should migrate to using github actions to get the pipeline working again.,bug,https://github.com/nasa/ECI/issues/54
Fix doxygen warnings,"**Describe the bug**
Doxygen generates warnings when building the documentation

**To Reproduce**
Steps to reproduce the behavior:
1. Do a `make doc` in the `cFS` directory
2. Observe the warnings in `cFS/build/doc/warnings.log`

**Expected behavior**
No warnings should be generated.

**Reporter Info**
Leor Bleier GSFC\582
",non-bug,https://github.com/nasa/osal/issues/407
UT stubs for CFE_SB_TimeStampMsg and CFE_SB_SetMsgTime very inconsistent,"**Describe the bug**
These two functions do almost the same thing in FSW but the UT stubs have entirely different side effects.  `CFE_SB_TimeStampMsg` stores the Message pointer in a UT buffer, but the `CFE_SB_SetMsgTime` stores the given time in the UT metadata for the message.

**Expected behavior**
These should be more consistent.  The `CFE_SB_TimeStampMsg` should update the metadata like `CFE_SB_SetMsgTime` does because that's what FSW expects.

**System observed on:**
Code Inspection (N/A)

**Additional context**
Noticed this as part of #937 review/discussion.

Probably also impacted by #998 .... perhaps we can just focus on getting stubs for the CFE_MSG module replacements right.

We should get away from storing the message pointer in ANY of these stubs - because it references internal data objects and the life cycle of this object may not be persistent (i.e. it could be on the stack) so storing the pointer passed to any of the SB message functions is probably not a good idea.  The newer method of creating a UT ""metadata"" object associated with the message pointer is better, because it has a lifespan of the unit test case - so guaranteed to be still valid when the function under test returns.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1026
vxworks OS_initfs() logic errors,"Testing form trac-22 branch, [changeset:0f36fb6] revealed logic errors in the OS_initfs() of osfilesys.c. when running down off-nominal paths and handling the OS_VolumeTable[idx].FreeFlag.  

This ticket is to fix those errors.",bug,https://github.com/nasa/osal/issues/110
JSC: Type correctness fixes,"Use the correct types for interacting with the system library.

* Use `size_t` to store results from functions such as `strlen()`.
* Use correct type when calling `scanf()` 

Elsewhere, where //NOT// interacting with the system library, use fixed-width types instead of native types.

",bug,https://github.com/nasa/cFE/issues/159
App should treat CFE_SB_MsgId_t values as opaque,"**Is your feature request related to a problem? Please describe.**
For compatibility going forward, code should not assume that `CFE_SB_MsgId_t` is an integer.

**Describe the solution you'd like**
When dealing with an integer, such as when printing in events/messages or for backward compatibility with MID `#define`'s, the code may use `CFE_SB_ValueToMsgId()` and `CFE_SB_MsgIdToValue()` conversion routines.  

**Additional context**
Architecturally, the `CFE_SB_MsgId_t` is supposed to be an opaque/abstract value that identifies an endpoint on the software bus routing domain.  The specific meaning of integer values is already different in an ""extended header"" (CCSDS v2) build vs. the standard header build.  Therefore apps should never make assumptions regarding the specific integer values, and all introspection of `CFE_SB_MsgId_t` values should be through the CFE SB API only.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/45
Increase Exception Action choices in PSP Handler,"**Is your feature request related to a problem? Please describe.**
If, during *application development*, a task fails and raises a Kernel exception, the PSP handler can only choose between Processor Reset (zero) or Restart the Application (non-zero value). When that happens, all the information about the exception are lost during the memory reset.

**Describe the solution you'd like**
Add extra options to the Exception Action field in the startup script to “Do nothing” in case of exception, and therefore keep memory intact for task autopsy. Maybe if Exception Action is below zero ignore. 

**Describe alternatives you've considered**


**Additional context**
I can see this easily expanded to handle special cases where we want to recover data from the failed task, or communicate to another task/application this information.

**Requester Info**
Claudio Olmi NASA-JSC
Doyle Mills NASA-JSC
",non-bug,https://github.com/nasa/PSP/issues/179
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/321
Update all community email management references for new service,"**Checklist (Please check before submitting)**

- [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
- [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
- [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Community email system is transitioning (currently May 8th target), which changes join/leave process.

**Describe the solution you'd like**
Update instructions in sync with system change over:
```
To subscribe to [INSERT LIST NAME]: 
Send an e-mail to LISTNAME-join@lists.nasa.gov (no subject or text in the body is required).

To unsubscribe to [INSERT LIST NAME]:
Send an e-mail to LISTNAME-leave@lists.nasa.gov (no subject or text in the body is required).

Having trouble subscribing or unsubscribing from a list?
Get help by sending an e-mail to the list owner at LISTNAME-owner@lists.nasa.gov
```

**Describe alternatives you've considered**
#207

**Additional context**
Note a web interface is pending.  Not clear if it will support review of archives by members.

**Requester Info**
Jacob Hageman
",non-bug,https://github.com/nasa/cFS/issues/245
osconfig.h OS_QUEUE_MAX_DEPTH unused,"OS_QUEUE_MAX_DEPTH is defined as 50 in osconfig.h for both pc-rtems and pc-linux, but the limit isn't applied/checked/or even used within OSAL.

Queue depth is accepted as input by OS_QueueCreate with no limiting within OSAL.  Note cFE also has a max pipe depth (CFE_PLATFORM_SB_MAX_PIPE_DEPTH) that is applied by the cFE prior to calling OS_QueueCreate, but it's set to 256.  This limit seems arbitrary at the cFE level.

Linux depth limit by default is 10 on at least CentOS, would be nice if it worked out of the box.
",non-bug,https://github.com/nasa/osal/issues/235
update UT_SetDefaultReturnValue comment,"While I agree with the new function name, the comments are duplicated from the (now deprecated) `UT_SetForceFail()`, I suggest a re-write of the comments for this important function.

https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/ut_assert/inc/utstubs.h#L183",non-bug,https://github.com/nasa/osal/issues/722
Hardcode of spacecraft id to 42 in psp unit test stub,"**Is your feature request related to a problem? Please describe.**
Likely should be 0x42 since that's the historical sample setting.  Not critical since this is just stub data, but easier to understand intent if the settings are consistent.

**Describe the solution you'd like**
Default spacecraft ID to the historical setting.

**Describe alternatives you've considered**
Some random value, or use CFE_SPACECRAFT_ID_VALUE

**Additional context**
nasa/cfe#710, nasa/cfe#828

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/PSP/issues/187
Consider Adding a Timed Wait Function to the Mutex API (GSFC 22628),"The OSAL does not include a mutex wait with a timeout.  This was originally requested by APL.  

See also Trac Ticket #28

",non-bug,https://github.com/nasa/osal/issues/69
Further simplify SB unit tests,"**Is your feature request related to a problem? Please describe.**
Recently the software bus unit tests were updated to employ macros for common code bits, but this only amplifies the fact that the SB unit tests don't follow the typical UT assert model.

In particular, they ""collect"" a bunch of conditions together and then assert at the end that all the conditions where true.  There is no reason to do this deferred reporting with UT assert, and it only serves to obfuscate the true failure because the UT assert failure message line number can be quite different than what actually failed.

**Describe the solution you'd like**
Now that the macros/wrappers are in place, rather than having them only mimic the old test logic, have them implement the preferred UT assert patterns.

- Remove `TestStat` global variable.  Do not keep global state outside UT assert.
- Remove separate text messages inside ""if"" conditionals and replace with UT assert statements.  That's what the UT assert API is for, after all.
- Remove `VERBOSE` compile-time option.  The UT assert has a runtime verbosity flag, just call `UtDebug` and the message will only be printed when set to verbose mode.

**Additional context**
This really just the next step along the path to using UT assert as it was intended, and removing the ""compatibility crutches"" that were put into place because CFE (and SB in particular) didn't employ the same test patterns as other apps/modules.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/734
Add simpler/semi-automatic unit test handling for pointer returns from stubs,"**Is your feature request related to a problem? Please describe.**
For implementation functions which return some form of `int32`, the stub generator and default handler automatically makes this return 0 if nothing sets up anything else.  The framework also provides a common method to provide alternate values.  This `int32` return was singled out because it is very common across OSAL, CFE, PSP, and apps.

The next most common return type (aside from void) is probably a pointer value.  But this is not handled automatically, the user is required to provide a handler function just to be able to use the stub at all - even just to get it to return NULL.  Furthermore there is no common method to get any other return value either.

Currently on a 64-bit platform one gets an error if attempting to use a generated stub ""out of the box"" because the framework sees a return type of size 8 which it refuses to translate from the int32 status value.

**Describe the solution you'd like**
Expand the automatic/int32 return paradigm to pointer returns.  Note on a 32-bit platform this probably already happens implicitly, since a pointer an an int32 are probably the same size, and ""0"" can be easily translated to NULL.  

This is just two things:
- Provide equivalent of `UT_SetDefaultReturnValue()` and `UT_SetDeferredRetcode()` but for pointers, so tests can have a common method to register a pointer return.
- If the handler/hook does not set a return pointer/override, then grab the pointer from the registered value if its was set, or return NULL (basically the same as is done for `int32` currently).

**Describe alternatives you've considered**
Leave as-is where tests must always implement a custom handler for every function that returns a pointer.

**Additional context**
Noted when developing CF unit tests, there are a number of FSW functions that return pointers, and it would be a good timesaver if one could simply run ""generate_stubs"" and use the stubs immediately as-is.  While this is true for integer return codes, functions returning pointers all require extra work in order to use the generated stubs.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1198
Pass message ID and function code into verify command length functions,"**Is your feature request related to a problem? Please describe.**
Both message ID and function code are already available in typical calling function for the functions that verify command length, so could pass them in instead of extract them from the message (again).

Note #994 is open to provide an API to verify command length, so this could be generalized even more by passing in the event ID.

**Describe the solution you'd like**
Generalize function, pass in values.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1426
"Code in ""unit-test"" should use UT Assert","**Describe the bug**
The tests in the ""unit test"" directory use an entirely different result reporting mechanism.  Although they do currently link with UT assert, they keep a local record of test cases and do not use any of the UT assert functions.

This is a maintenance issue.  The code makes extensive use of macros which makes it difficult to understand and also duplicates much of the logic that UT assert already has.  Furthermore, the tests do not run on all OSAL platforms (e.g. RTEMS) because the macros are incomplete, even though UT assert does support this platform.

**To Reproduce**
Build with ENABLE_UNIT_TESTS=TRUE and run all tests.  The osal ""unit-tests"" produce entirely different log files than the rest of the tests.

**Expected behavior**
The osal ""unit-tests"" should be more consistent in behavior and log file format with all the other tests.

**System observed on:**
 - Ubuntu 18.04 LTS 64-bit

**Additional context**
This is becoming more of an issue due to a parallel effort to avoid clobbering `CMAKE_C_FLAGS` (#312).  But this unit test build currently relies on `CMAKE_C_FLAGS` and OS-specific definitions (e.g. `_LINUX_OS_`, `_VXWORKS_OS_`, etc) to pick the right macros to use.  So this breaks the unit test if not setting `CMAKE_C_FLAGS` anymore.

Although it could probably be patched up again with some more hacks, it is probably worth some extra effort to just clean this up properly so it stops being a perpetual issue.

Since most things are macro based already, it is likely that simply changing the macro definitions to direct the output to UT assert instead of the local structure is probably sufficient.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/313
Remove classic build support,Only supporting cmake build going forward.,non-bug,https://github.com/nasa/sample_app/issues/4
Improve consistency in application of CFE_SB_MsgIdToValue/ValueToMsgId conversions,"**Is your feature request related to a problem? Please describe.**
A `CFE_SB_MsgId_t` value, like other IDs, is supposed to be a unique type/opaque value that identifies a message within the SB application context.   Although it is currently implemented using an integer (`uint32` specifically) application should not assume this.  Instead, a set of macros and inline conversion functions (CFE_SB_MsgIdToValue and CFE_SB_ValueToMsgId) are provided for when the application needs to interpret the value as an integer for a valid purpose.

**Describe the solution you'd like**
Add conversions where they are currently missing

**Additional context**
See nasa/cfe#1945 for full info.  A separate issue+PR will be submitted for each framework app.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sch_lab/issues/90
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg. Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/HS/issues/9
Copyright/License and README update for 5.0 release,"**Is your feature request related to a problem? Please describe.**
Old markings and documents need to be updated for release

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/519
"Posix implementation comments refer to old time APIs, update to OS_GetLocalTime and OS_SetLocalTime","**Describe the bug**
A clear and concise description of what the bug is.

`OS_GetLocalTime`
src/os/portable/os-impl-posix-gettime.c: * This file contains implementation for OS_GetTime() and OS_SetTime()
Update comment to `OS_GetLocalTime` / `OS_SetLocalTime`


**To Reproduce**
Steps to reproduce the behavior:
git grep OS_GetTime

**Expected behavior**
A clear and concise description of what you expected to happen.

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Sam Price
",non-bug,https://github.com/nasa/osal/issues/1177
Use a better time representation in OS_stat call,"**Is your feature request related to a problem? Please describe.**
The `OS_stat` call currently returns the file time as an `int32` member within the `os_fstat_t` structure, as defined here:

https://github.com/nasa/osal/blob/a66eb2dc00136a77779414452835bb6364d5e1fb/src/os/inc/osapi-os-filesys.h#L154

This isn't really documented in the API but the field is a traditional UNIX-style timestamp, which is seconds elapsed since Jan 1 1970 UTC.

This type of timestamp suffers from the ""year 2038"" bug, where the int32 value rolls over and becomes negative.  Although this is 18 years from now, at the timescales of space software development cycles, it is entirely possible that coding being developed now will still be in service at the time this happens, so it should be fixed sooner rather than later.

**Describe the solution you'd like**
There are two fixes needed:

1. use the `OS_time_t` representation as used in `OS_GetLocalTime` and `OS_SetLocalTime`.  This is just for consistency - shouldn't use a different representation of time as the other API calls do.
2. Fix the `OS_time_t` to accommodate larger timestamp values and/or use a different epoch (latter would be risk but keep the structure the same size).

**Additional context**
Discussion regarding use of this field in nasa/cfe#519

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/429
API prototype changes to address compiler warnings,"These areas of the OSAL API need clean up.

Task API:
* OS_TaskCreate() stack pointer is declared const (read-only).  By definition, stack space should not be read-only.
* OS_TaskInstallDeleteHandler() takes a ""void *"" argument rather than a function pointer.  This should be a function pointer.

Module API: 
* To be consistent with the other API's, a separate property structure should be defined for use with OS_ModuleInfo().  Currently this returns the internal OSAL ""OS_module_record_t"", while all other API's return a dedicated property object.  This is necessary to allow the internal implementation of the OSAL to change in the future while preserving the public API types.
* The types should be changed to use the ""cpuaddr"" type rather than uint32 where a memory address is stored (OS_module_address_t, OS_SymbolLookup())

General:
* When passing character strings as input to functions these should preferably be declared as ""const char *"" whenever possible.  This allows one to pass string literals into the function.  Otherwise a warning may be generated if a literal is used for a parameter declared as ""char *"".




",bug,https://github.com/nasa/osal/issues/36
Document Changes Across Releases,"**Is your feature request related to a problem? Please describe.**
Create a changelog entry that documents noteworthy differences, often across multiple commits, and communicate them clearly to end users.

**Describe the solution you'd like**
A GitHub Actions workflow that is triggered manually to create a changelog.md file. 

**Additional context**
Examples:
https://github.com/standard/standard/blob/master/CHANGELOG.md

https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md

https://github.com/thanos-io/thanos/blob/master/CHANGELOG.md

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFS/issues/201
EVS Delete Event Filter Doxygen Incorrect,"In file cfe_evs_msg.h the Delete Application Event Filter doxygen is incorrect. It states the command structure is 
   CFE_EVS_AppNameEventIDMaskCmd_t 
when it should be
   CFE_EVS_AppNameEventIDCmd_t

This was caught because a tool used the doyxgen to auto generate cmd & tlm definitions for COSMOS so it is important to fix.  ",non-bug,https://github.com/nasa/cFE/issues/269
"ES missing branch coverage in CFE_ES_RegisterCDSEx, conditions not independent (already checked)","**Is your feature request related to a problem? Please describe.**
The following check for CFE_SUCCESS isn't independent from the NULL pointer test in CFE_ES_RegisterCDSEx:
     384         [ +  + ]:          6 :     if (RegRecPtr != NULL)
     385                 :            :     {
     386                 :            :         /* Account for the extra header which will be added */
     387                 :          5 :         NewBlockSize = UserBlockSize;
     388                 :          5 :         NewBlockSize += sizeof(CFE_ES_CDS_BlockHeader_t);
     389                 :            : 
     390                 :            :         /* If a reallocation is needed, the old block may need to be freed first */
     391 [ +  - ][ +  + ]:          5 :         if (Status == CFE_SUCCESS && RegRecPtr->BlockOffset != 0 && NewBlockSize != RegRecPtr->BlockSize)
                 [ +  + ]
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_cds.c#L384-L392

**Describe the solution you'd like**
Recommend just checking for CFE_SUCCESS instead of NULL pointer check since it's already tested.  We don't have a requirement to check for a NULL pointer within internal functions where it can't be NULL.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1927
Refactor UT_SetForceFail,"Describe the bug
UT_SetForceFail was refactored to UT_SetDefaultReturnValue for https://github.com/nasa/osal/issues/559. It needs to have its name changed here as well.

Expected behavior
Change UT_SetForceFail  to UT_SetDefaultReturnValue 

Additional context
Part of https://github.com/nasa/osal/issues/559

Reporter Info
Alex Campbell",non-bug,https://github.com/nasa/cFE/issues/1006
Fix unused variables in RTEMS,Compiling with `-Wall -Werror` noted two unused variables in OSAL for rtems-ng.  These are simple fixes to clean up.,bug,https://github.com/nasa/osal/issues/260
Create PSP unit test framework and example,"**Is your feature request related to a problem? Please describe.**
Need to provide example of PSP unit tests.  Coverage and functional testing are required but require a different approach.  This issue will focus on the coverage test portion.

**Describe the solution you'd like**
Provide a framework and example to perform PSP coverage test.

**Additional context**
Using MCP750 as a proof-of-concept.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/168
Reentrant version of decompress routine in CFE FS,"The FS application has a feature where it can decompress file content on the fly.  However the decompression routine keeps its internal state in global variables which makes it non-reentrant.  To protect against concurrent usage a mutex is used but this has a major performance impact.

The global variables should be replaced with a state structure so that it can be multithreaded like all other parts of CFS.

For the time being a global state object can be implemented in order to preserve API compatibility.",non-bug,https://github.com/nasa/cFE/issues/36
Alternate time references for OSAL timers,"OSAL currently has a timer API which references only to the real time clock in the CPU.  All timers created using the OS_TimerCreate() / OS_TimerSet() API are always based on the same clock reference.

However, in an embedded system, a local clock may not always be the real reference for events; many systems derive their timing from an external entity which is NOT necessarily synchronized to the local CPU clock.

This ticket will add a new type of OSAL object called a ""Time Base"".  By default a time base can be driven from the local CPU real time clock, which will mimic the current behavior of timers.  However the BSP/PSP may create additional time bases and synchronize them to e.g. an external timing interrupt.  The same existing ""TimerSet"" API can be used to set the timers against the alternate time base and it will be transparent to the app.


",non-bug,https://github.com/nasa/osal/issues/38
`CFE_EVS_AddEventFilterCmd` returns `CFE_EVS_EVT_NOT_REGISTERED` when filter already registered,"**Is your feature request related to a problem? Please describe.**
See:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1530

Really all non-`CFE_SUCCESS` returns from command handlers are handled the same (increment command error counter).

**Describe the solution you'd like**
Really they are all just generic command handler errors, no need to be unique.  Suggest just simplifying (there's already unique events created).

**Describe alternatives you've considered**
Could define a unique error code, but it's not returned via an API so doesn't really need to be unique.  Uniqueness does allow for specific return check when coverage testing, but is it really worth unique codes?

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1430
Add preferred style configuration,"**Is your feature request related to a problem? Please describe.**
Inconsistent style used throughout cFS

**Describe the solution you'd like**
Automated way to apply style that can be enforced by CI if desired

**Describe alternatives you've considered**
None

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/37
#define or configurable copy block size,"**Is your feature request related to a problem? Please describe.**
Hard coded copy block size:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-file.c#L423

**Describe the solution you'd like**
Make a `#define` with clear documentation that it could be adjusted for page size or whatever, performance, etc.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/875
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/cFE/issues/1068
OS_ConvertToArrayIndex and OS_TimeBaseGetFreeRun SEGFAULT When Passed in a NULL Pointer ,"**Describe the bug**
OS_ConvertToArrayIndex  and OS_TimeBaseGetFreeRun SEGFAULT when passed in a NULL pointer as the second input instead of handling the NULL pointer and returning an error.

**To Reproduce**
Steps to reproduce the behavior:
1.  Checkout branch fix374-2-Object-Utilities-Missing-Tests in osal
2.  Go to path: cFS/osal/src/tests/idmap-api-test
3.  Build and run with the following in the main function:  
    OS_ConvertToArrayIndex(bin_sem_id, NULL);
4.  Checkout branch fix380-Add-TimeBase-Api-Functional-Tests
5.  Go to path: cFS/osal/src/tests/time-base-api-test
6.  Build and run with the following in the main function:  
    OS_TimeBaseGetFreeRun(time_base_id2, NULL);


**Expected behavior**
OS_ConvertToArrayIndex and OS_TimeBaseGetFreeRun SEGFAULT when passed in a NULL pointer, should handle the NULL pointer and return an associated error code. 

**Code snips**
(path: cFS/osal/src/tests/idmap-api-test)

    uint32 bin_sem_id;
    OS_BinSemCreate( &bin_sem_id, ""BinSem"", 1, 0);
   actual   = OS_ConvertToArrayIndex(bin_sem_id, NULL);
   expected = OS_ERR_INCORRECT_OBJ_TYPE;
   UtAssert_True(actual == expected , ""OS_ConvertToArrayIndex() (%ld) == %ld "", (long)actual, (long)expected );

Output: 
The following tests FAILED:
	 37 - idmap-api-test (SEGFAULT)

**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0


**Reporter Info**
Yasir Khan
NASA GSFC
",bug,https://github.com/nasa/osal/issues/445
Use a changelog to keep track of changes instead of having them in the Readme ,"**Is your feature request related to a problem? Please describe.**
The version history in the Readme file clutters useful information

**Describe the solution you'd like**
Move the ""version history"" from `Readme.md` to `CHANGELOG.md` and start following this spec: https://keepachangelog.com/en/1.0.0/

**Describe alternatives you've considered**
Move changelog section in the readme to a section at the very bottom of the file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/PSP/issues/183
use cmocka for stubs,"**Is your feature request related to a problem? Please describe.**
The cmocka (https://cmocka.org) framework provides much the same functionality as our unit test stub framework, and is Apache licensed. I suggest we replace our stub framework with cmocka (and contribute any required capabilities to the cmocka project if it doesn't currently cover all our needs.)

**Describe the solution you'd like**
Use cmocka.

**Describe alternatives you've considered**
I'm sure there are lots of other unit test frameworks. cmocka seems simple, capable, and easy to incorporate into cFS.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/383
return value of CFE_SB_ReceiveBuffer stub does not match documentation,"For the stock stub function, it returns the default (CFE_SUCCESS) return code but sets the message pointer to NULL. The documentation states that it defaults to return the TIMEOUT error. The logic for the stub may want to reflect this.

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L450",non-bug,https://github.com/nasa/cFE/issues/1055
CFDP protocol timer configuration is not per channel (CF5002 and CF4000.1.1 failure),"Per requirement CF5002, protocol timer configuration should be per channel. Currently the values are applied to all channels.",bug,https://github.com/nasa/CF/issues/120
Add compile time assert that platform config sizes are < mission config sizes,"**Is your feature request related to a problem? Please describe.**
A stakeholder bumped up CFE_PLATFORM_SB_MAX_PIPES to 128 but left CFE_MISSION_SB_MAX_PIPES as 64, which is a broken config since tlm for PipeDepthStats is sized using CFE_MISSION_SB_MAX_PIPES.

**Describe the solution you'd like**
Add a compile time assert that CFE_PLATFORM_* is < CFE_MISSION_*

**Describe alternatives you've considered**
Charge more to fix user errors.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, ping @excaliburtb
",non-bug,https://github.com/nasa/cFE/issues/1618
Remove unsupported/untested BSPs,"**Is your feature request related to a problem? Please describe.**
Old BSPs are not within scope of the cFS framework and not tested

**Describe the solution you'd like**
Remove sis-rtems, mcf5235-rtems, and sparc-vxworks6.7

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/307
Suspicious implementation of SHORT_FORMAT mode in EVS_SendPacket(),"This code sequence occurs within the {{{EVS_SendPacket()}}} function:

{{{
/* (LSW) Is the intent to write the event text to the log but not the SB msg ??? */

   if (CFE_EVS_GlobalData.EVS_TlmPkt.Payload.MessageFormatMode == CFE_EVS_SHORT_FORMAT)
   {
      /* Send an empty message if short format is enabled */
      EVS_PktPtr->Payload.Message[0] = '\0';

/* (LSW) This is pointless -- why bother to send a buffer with an empty string ??? */

   }
}}}

It appears that someone (LSW?) already noticed the strangeness here some time prior to the 6.4.1 release.

The intent here may have been to send only the Event ID and omit the actual string, since most event ID's have fixed strings with them.

However, the length of the actual packet (in the CCSDS header) is never adjusted, so although the first character of the message payload is overwritten with a NUL, **the full message payload is still sent on the software bus** so there is absolutely no benefit to doing this in the current form.


",bug,https://github.com/nasa/cFE/issues/95
Refactor the CFE_ES_*AppCmd handlers to reduce duplicated code,"**Is your feature request related to a problem? Please describe.**
Similar pattern in `CFE_ES_StartAppCmd`, `CFE_ES_StopAppCmd`, `CFE_ES_RestartAppCmd`, `CFE_ES_ReloadAppCmd`

**Describe the solution you'd like**
Refactor to reduce duplicated logic.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1361
Improve consistency in application of CFE_SB_MsgIdToValue/ValueToMsgId conversions,"**Is your feature request related to a problem? Please describe.**
A `CFE_SB_MsgId_t` value, like other IDs, is supposed to be a unique type/opaque value that identifies a message within the SB application context.   Although it is currently implemented using an integer (`uint32` specifically) application should not assume this.  Instead, a set of macros and inline conversion functions (CFE_SB_MsgIdToValue and CFE_SB_ValueToMsgId) are provided for when the application needs to interpret the value as an integer for a valid purpose.

**Describe the solution you'd like**
Add conversions where they are currently missing

**Additional context**
See nasa/cfe#1945 for full info.  A separate issue+PR will be submitted for each framework app.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/91
Add cppcheck to bsp and os,"**Is your feature request related to a problem? Please describe.**
Add cppcheck to osal/src/bsp and osal/src/os

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/314
remove conditional TBL compilation logic,"**Is your feature request related to a problem? Please describe.**
With #660 TBL is no longer optional; conditional code/compilation configuration should be removed.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/680
FM configuration parameter limits need clarification,"A number of FM configuration parameters have limits for which the reason is obscure at best.  Limits need to be re-evaluated and comments should give clear reasoning for the limit.

Imported from GSFCCFS-1062",non-bug,https://github.com/nasa/FM/issues/10
LC - more deterministic behavior," Currently LC will process messages when they are received, which is fine, generally. Also, currently, LC uses a single pipe for commands and for watchpoint telemetry. LC doesn't process action points until it receives a command message.

But in deterministic environments it may be better to have LC be commanded to read telemetry as well as be commanded to process action points. This will necessitate having a separate message pipe for commanding (which the main loop would block on) and a telemetry pipe (which would accumulate telemetry until the command to read.)

The default LC behavior should remain the same (process messages as they arrive.) This should be a compile-time option, or perhaps run-time command-able.

Imported from GSFCCFS-769",non-bug,https://github.com/nasa/LC/issues/6
Update documentation for message map hash implementation,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFE/pull/947#issuecomment-713717828

```
Conversation about collisions. System can be sized appropriately to avoid collisions. Users can deterministically predict the bound by appropriately choosing the MsgIDs. There's a debug event upon subscription which alerts about collisions.

Open issue to add documentation about ideal usage and predetermining IDs to avoid collisions.

Because it's a module, users can replace the algorithm for efficient. QUESTION: How is this set up in the build system?
```

**Describe the solution you'd like**
Add this info and general design to documentation

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/961
Standardize Version Numbering (in CFE),"Bring version number management within CFE into line
with the cFS standards documented at

https://babelfish.arc.nasa.gov/trac/cfs_test/wiki/ReferenceVersion

",bug,https://github.com/nasa/cFE/issues/146
Provide separate type for each resource category,"**Is your feature request related to a problem? Please describe.**
Pull #896 provided a generic typedef for resource identifiers.  This commit stops using `uint32` and makes a dedicated type, but the type is the same for all resource categories (apps, tasks, counters, etc).

**Describe the solution you'd like**
Per @CDKnightNASA comment here:

https://github.com/nasa/cFE/pull/896#issuecomment-697478083

It would improve things further to provide a separate/unique typedef for each resource category.

**Additional context**
This will be implemented as a follow-on to the original change.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/913
"MemPoolHandle should be of type CFE_ES_MemHandle_t, not uint32","See https://github.com/nasa/HK/blob/cf59498983da2b82454e961844955a9a22a7a8a9/fsw/src/hk_app.h#L78

This causes HK to exit while running on a 64 bit platform, as an 8byte pointer is written to this and overwrites the adjacent RunStatus field.",bug,https://github.com/nasa/HK/issues/1
Fixed Path Mapping not always working,"**Describe the bug**
Using the fixed path mapping function OS_FileSysAddFixedMap() with paths like **/ram0/cf** and **/ffx0/cf** will only work once.

**To Reproduce**

OS_FileSysAddFixedMap( , ""/ram0/cf"", ""/cf1"");
OS_FileSysAddFixedMap( , ""/ffx0/cf"", ""/cf2"");

**Expected behavior**
Both paths should be included in the object table

**Code snips**
This is the part of code that generates a unique dev_name, but 
https://github.com/nasa/osal/blob/fa9671fa608ff5113f24990a78e6e7f8d47eb392/src/os/shared/src/osapi-filesys.c#L259-L267

**System observed on:**
 - Hardware: Aitech SP0
 - OS: VxWorks 6.9
 - Versions: Latest

**Additional context**


**Reporter Info**
Claudio Olmi, NASA JSC",bug,https://github.com/nasa/osal/issues/1315
Help: Could not load cFE application file,"Hi,

I'm working on an app that uses a library for an IMU. My app compiles without errors but when I run the core-cpu1, I get:
`Could not load cFE application file:/cf/imu.so. EC = 0xFFFFFFFF`

My app directory is called imu and it contains:
/imu
---fsw (which contains the usual mission_inc, platofrm_inc...etc)
---imu_lib
------build
---------obj
------------vn ( which includes a bunch of .o files)
---------libvnc.a (contains the .o files)
------include
---------vn (which includes a bunch of .h files)
---CMakeLists.txt

Here is the CMakeLists.txt

`
cmake_minimum_required(VERSION 2.6.4)
project(CFS_IMU C)

include_directories(fsw/mission_inc)
include_directories(fsw/platform_inc)
include_directories(fsw/src)

include_directories(imu_lib/include)
include_directories(imu_lib/include/vn)

aux_source_directory(fsw/src APP_SRC_FILES)
add_cfe_app(imu ${APP_SRC_FILES})
target_link_libraries(imu /home/eaglecam/CFS-101.initial/apps/imu/imu_lib/build/libvnc.a)
`

Any help is appreciated.

Thanks",non-bug,https://github.com/nasa/cFS/issues/155
Clean up shared EEPROM read/write implementation,"The code in ""cfe_psp_eeprom.c"" is far more complicated than it needs to be.

The objective of this code appears to be to accomplish basic read/writes of 8, 16, or 32 bit values to a memory device that only supports 32 bit access.  Therefore for words less than 32 bits it performs a read-modify-write sequence.  

It has a completely separate implementations for big endian vs little endian.  The code could be easily made endian-neutral and MUCH simpler by first reading the 32 bit value into a union and then performing simple byte/word access to update the value, then write it back.  All #ifdefs would become unnecessary and the code would be much more straightforward.





",non-bug,https://github.com/nasa/PSP/issues/7
Update pc-rtems to support released RTEMS 4.11,"The `pc-rtems` PSP was initially developed for CFE 6.5 using the development RTEMS branch (pre-4.11).  Since then, RTEMS 4.11 has been released and upstream RTEMS development has moved on to 4.12.

There are some changes between the pre-release and final versions of RTEMS 4.11.   Some functions being used were marked as deprecated.

As part of testing CFE 6.6 release the `pc-rtems` was re-validated against the latest RTEMS 4.11.2 official release.  This ticket contains the necessary updates to pc-rtems PSP to run with RTEMS 4.11.2.",bug,https://github.com/nasa/PSP/issues/85
Build instructions in top level README are incorrect,"**Describe the bug**
Followed the build steps as in the README file but the build is not successfull. 

Error: 
`waheeed@ubuntu:~/Lifi/osal/build$ make
make -C tests 
make[1]: Entering directory '/home/waheeed/Lifi/osal/build/tests'
make -C bin-sem-flush-test 
make[2]: Entering directory '/home/waheeed/Lifi/osal/build/tests/bin-sem-flush-test'
gcc  -I/home/waheeed/Lifi/osal/src/inc -I/home/waheeed/Lifi/osal/src/os/inc -I/home/waheeed/Lifi/osal/src/tests/bin-sem-flush-test -I/home/waheeed/Lifi/osal/src/../ut_assert/inc -I../../inc   -D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER  -D__ix86__ -D_ix86_ -D_LINUX_OS_ -Dposix -DX86PC -DBUILD= -D_REENTRANT -D _EMBED_  -D_XOPEN_SOURCE=600   -Wall -pedantic -std=c99 -Wstrict-prototypes -O1 -DOS_DEBUG_LEVEL=3 -c -o osapi.o /home/waheeed/Lifi/osal/src/os/posix/osapi.c
In file included from /home/waheeed/Lifi/osal/src/os/posix/osapi.c:27:0:
/home/waheeed/Lifi/osal/src/os/posix/os-posix.h:42:10: fatal error: os-impl.h: No such file or directory
 #include ""os-impl.h""
          ^~~~~~~~~~~
compilation terminated.`


**To Reproduce**
Steps to reproduce the behavior:
1. Clone the latest build 5.3 (15-Jan-2020 )or the commit 781992ce2c0df067ebd84779615bf1ebf6ef7de5
2. Follow the build steps as mentioned in the README file
3. source setvars.sh
4. cd build
5. make config
6. make


**Expected behavior**
Successful build

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware: PC-linux 
 - OS: [Ubuntu 18.04]
 - Versions [OSAL_5.3]

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Waheed Ejaz
",non-bug,https://github.com/nasa/osal/issues/351
Incorrect parameter type in Timebase sync callback,"**Is your feature request related to a problem? Please describe.**
Timebase sync callback prototype is currently defined as:

    typedef uint32 (*OS_TimerSync_t)(osal_index_t timer_id); /**< @brief Timer sync */

But indices (table position) is an internal OSAL value that shouldn't be used externally from OSAL.  More importantly, it is easy to alias, and cannot be differentiated if an object is deleted and then created again.

**Describe the solution you'd like**
Use the full ID value, not the index.  So the prototype would be:

    typedef uint32 (*OS_TimerSync_t)(osal_id_t timer_id); /**< @brief Timer sync */

**Describe alternatives you've considered**
Leave as is.

**Additional context**
I was going to roll this into a larger change, but figured this technically qualifies as an ""API change"" so writing it as a separate issue for specific awareness.  However, nothing outside of OSAL itself (and the included tests) actually implements a sync callback.  PSPs could, but none currently do, so this really shouldn't have any current impact to users.  But if users do start using this option, better to have the full ID value than just the index.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/664
Handle case of too many tokens in startup file,"**Is your feature request related to a problem? Please describe.**
Silently consumes `,` if NumTokens == CFE_ES_STARTSCRIPT_MAX_TOKENS_PER_LINE:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L200

Looks like it would just concatenate entries after that point, which could lead to strange errors

**Describe the solution you'd like**
Warn/error/report/abort

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1330
PSP Headers need a scrub/cleanup,"**Is your feature request related to a problem? Please describe.**
The `cfe_psp.h` header file puts its comments/description _after_ the function declaration and does not use doxygen style.  It also contains at least a few functions that are not used by CFE and also may not even be implemented

**Describe the solution you'd like**
Cleanup.   At least fixup comments to be more readable - put before declaration and ideally also add some doxygen markup. 

At least the `CFE_PSP_Decompress()` function appears to be not implemented at all - recommend removing this prototype.

**Additional context**
Other functions which are inconsistently implemented or too hardware specific to be useful, might be targets for deprecation/removal (These are not used by CFE, either):

- `CFE_PSP_InitSSR()` - why an init but no read/write/mount/etc?  Seems like a thought that was never completed.
- `CFE_PSP_Get_Timer_Tick()` - note this is different than `CFE_PSP_GetTimerTicksPerSecond()`
- `CFE_PSP_Get_Dec()` - not well defined what this value really is, so not really usable in portable apps.

These are referenced but have some issues:
- `CFE_PSP_GetTime()` - The definition is inconsistent, sometimes it maps to a real clock and sometimes its more of an interval timer with an arbitrary wrap point, needs more info/definition at least because it is generally hard to use __correctly__.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/274
Add Option for MEDIUM_FORMAT Mode in EVS,"Event Services currently support configurations for long vs. short format event messages.  A medium format that includes the dynamic data out of the event text string, along with the time stamp, event type, processor ID, application name, and EID would be a useful addition to the set of EVS configurations.",non-bug,https://github.com/nasa/cFE/issues/227
"Clean up ""-D"" compile time macros used in pc-linux build","This is the equivalent of trac 17 in the CFE PSP -- see [https://babelfish.arc.nasa.gov/trac/cfs_psp/ticket/17].  The same build flags are duplicated in the OSAL BSP.

The ""pc-linux"" OSAL BSP defines the following to be added to the compiler CFLAGS:

{{{-D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER -D__ix86__ -D_ix86_ -Dposix -DX86PC -D_REENTRANT -D_EMBED_ -DOS_DEBUG_LEVEL=3}}}

These were brought into the cmake build from the original build scripts in order to be consistent just in case any code required it.  However, they are unnecessary, many are not even used anywhere in CFE/OSAL, and potentially even wrong.

The reality is that with Linux, the ""pc-linux"" is a general purpose PSP that can most likely be used on __any__ general-purpose development machine that runs Linux.  It is not limited to only x86 PC's, and in fact works just fine on ARM, PowerPC, and Microblaze targets too.

I have successfully used the (unmodified) pc-linux BSP to execute unit tests on a BeagleBone Black (ARM) as well as an emulated PowerPC 440 based development machine.  In all these cases, the ""x86"" macros are wrong, and on the PowerPC, the EL/ENDIAN/SOFTWARE_LITTLE_BIT_ORDER are wrong too.

To summarize - I recommend removing **ALL** of these macros from the pc- linux build when using the cmake scripts (the old makefiles can stay as- is).",bug,https://github.com/nasa/osal/issues/50
No null pointer check in CFE_ES_TaskID_ToIndex,"**Describe the bug**
CFE_ES_TaskID_ToIndex does not check if the input index pointer is null and will cause a segmentation fault if it is null.

**To Reproduce**
Steps to reproduce the behavior:
1. [This](https://github.com/nmullane/cFE/blob/9041e0b8e119ab64a921c3d1be0e5337043a8984/modules/cfe_testcase/src/es_resource_id_test.c#L78) line in the functional unit tests on my fork will result in a segmentation fault if it is uncommented.
2. Build CFE and run functional unit tests to view the error.

**Expected behavior**
CFE_ES_TaskID_ToIndex should return a CFE_ES_BAD_ARGUMENT if the index pointer is null.

**System observed on:**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Reporter Info**
Niall Mullane - GSFC 582 Intern",non-bug,https://github.com/nasa/cFE/issues/1718
Comments incorrect on sockets,"**Describe the bug**
'src/os/portable/os-impl-bsd-sockets.c'
Shutdown comments refer to connecting.

```
/*----------------------------------------------------------------
   Function: OS_SocketShutdown_Impl
    Purpose: Connects the socket to a remote address.
             Socket must be of the STREAM variety.
    Returns: OS_SUCCESS on success, or relevant error code
 ------------------------------------------------------------------*/
int32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)
{
```


",non-bug,https://github.com/nasa/osal/issues/1262
Run-time error on the docker container built with s390x/ubuntu,"Hi,

I have built cFS v6.8 on my host computer with ubuntu18.04 and was able to run it communicating with Cosmos.

Also I was able to build a docker container for cFS v6.8 with s390x/ubuntu (IBM zSeries Based Linux, big endian CPU), but I have an error when I build cFS in the docker container and run it.

root@hkim:~/cfs/build/exe/cpu1# ./core-cpu1 
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 1
CFE_PSP: Default Spacecraft ID = 43
CFE_PSP: Default CPU Name: cpu1
OS_Posix_TableMutex_Init():220:Error: pthread_mutex_init failed: Operation not supported
OS_API_Init():116:OS_API_Impl_Init(0x1) failed to initialize: -1
OS_API_Init():195:Warning: Microsecs per sec value of 0 does not equal 1000000 (MicroSecPerTick: 0   TicksPerSecond: 0)
CFE_PSP: OS_API_Init() failure
Aborted (core dumped)

The error occurs in osal/src/os/posix/src/os-impl-common.c.
OSAL: Development Build: 5.0.0+dev247

But if I build the docker container by changing to i686/ubuntu or i386/ubuntu (little endian CPU) in the same Dockerfile, I have no run-time errors and can run cFS with problems.    I wonder if anyone had the same problem with s390x and found a way to fix this error.

If you know another big endian CPU that I can build a docker container with, please let me know.

Thank you!

Harry Kim",bug,https://github.com/nasa/cFS/issues/138
CFE_ES_POOL_BOUNDS_ERROR defined but not used,"**Is your feature request related to a problem? Please describe.**
This error code was added at one point as a return value from `CFE_ES_PoolCreateEx` when there was an issue that caused the pool to go beyond the allocated size.  However now the code validates the size before even starting to create the pool, and returns CFE_ES_BAD_ARGUMENT if it is too small.

So now the `CFE_ES_POOL_BOUNDS_ERROR` has become stale, nothing uses this error anymore.

**Describe the solution you'd like**
Remove value from cfe_error.h and remove any remaining references to it.

**Additional context**
Noted as part of scrub in #1724

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1850
Update mcp750-vxworks6.4 cfeSupport.c to Enforce CF Name,"The CF device is a rawFs device for the first part of the disk that contains the MBR and some unused space.  Mounting the device via VxWorks 6.4 resulted in the device name of CF:0.  This behavior has changed with newer versions of VxWorks where the device name may result in CF:0 or CF:1 depending on where the device partition is made.  A device name of CF:1 will require the default PSP volume table to be updated.  

To avoid changes to the PSP volume table the attached kernel code make an update to the CFE_PSP_InitFlashDisk function to look for a valid CF:X (where X is 1-4) and then if it finds one that isn't 0, it will create another device for 0. This wastes a small amount of ram but is otherwise harmless.  Also the disk is mounted in buffered mode instead of sync mode.",non-bug,https://github.com/nasa/PSP/issues/49
Update highest valid msgid documentation and verification,"**Is your feature request related to a problem? Please describe.**
`CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` description is out of date based on routing module (with option for hash):
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/cmake/sample_defs/cpu1_platform_cfg.h#L151-L177
Verification is also based on direct map:
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/sb/cfe_sb_verify.h#L61-L63

**Describe the solution you'd like**
Update documentation.  Consider checking that `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` < `CFE_SB_INVALID_MSG_ID` since the invalid MSG_ID is set to the maximum value.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, @excaliburtb
",non-bug,https://github.com/nasa/cFE/issues/1100
cFE cES1515.1 Requirement Failure,"Requirements cES1515 and cES1515.1 state:

""cES1515 Upon a Processor Reset, the cFE shall create all operating system objects required by the
cFE.""

""cES1515.1 If the creation of the operating system object fails, the cFE shall perform a power on
reset."" 

To satisify this requirement, the CFE_ES_CreateObjects function makes a call to the CFE_PSP_Panic function in the case where the return from OS_TaskCreate != OS_SUCCESS.  The CFE_PSP_Panic function however, does not perform a power on reset.  It performs an exit(-1).  To correctly satisfy this requirement, ES needs to make a call to CFE_PSP_Restart with an input argument of CFE_PSP_RST_TYPE_POWERON to specify a power on reset.  This may not be the best solution.  It is recommended to reconsider this requirement.  It may be the best/required course of action to perform a power on reset following a processor reset if the creation of one of the cFE core application objects fails.  This may not be the best/required course of action if the creation of one of the applications listed in the ES startup script fails.

It should be noted that this requirement has not been properly handled in past releases of the cFE.  The call to the CFE_PSP_Panic function to satisfy this requirement has been in place since the initial release of the cFE.  It was recently found that the test to verify this requirement was faulty producing a false positive.",bug,https://github.com/nasa/cFE/issues/199
Provide example of extended context arguments in unit test,"**Is your feature request related to a problem? Please describe.**
Unit test stubs are being updated to pass-through a more complete context information, currently for EVS events such that the full spec string and argument set can be checked/manipulated.

**Describe the solution you'd like**
Sample unit tests should include an example of how to obtain the context arguments in a hook function.

**Additional context**
See nasa/cfe#603

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/66
App should treat CFE_SB_MsgId_t values as opaque,"**Is your feature request related to a problem? Please describe.**
For compatibility going forward, code should not assume that `CFE_SB_MsgId_t` is an integer.

**Describe the solution you'd like**
When dealing with an integer, such as when printing in events/messages or for backward compatibility with MID `#define`'s, the code may use `CFE_SB_ValueToMsgId()` and `CFE_SB_MsgIdToValue()` conversion routines.  

**Additional context**
Architecturally, the `CFE_SB_MsgId_t` is supposed to be an opaque/abstract value that identifies an endpoint on the software bus routing domain.  The specific meaning of integer values is already different in an ""extended header"" (CCSDS v2) build vs. the standard header build.  Therefore apps should never make assumptions regarding the specific integer values, and all introspection of `CFE_SB_MsgId_t` values should be through the CFE SB API only.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/53
Use `CFE_MSG_PTR` instead of `&(x).Msg`,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`&(x).Msg` has been abstracted by `CFE_MSG_PTR` to avoid internal dependencies on CFE_MSG_Message_t 

```
src/cf_app.c:    CFE_MSG_SetMsgTime(&CF_AppData.hk.tlm_header.Msg, CFE_TIME_GetTime());
src/cf_app.c:    /* return value ignored */ CFE_SB_TransmitMsg(&CF_AppData.hk.tlm_header.Msg, true);
src/cf_app.c:    CFE_MSG_Init(&CF_AppData.hk.tlm_header.Msg, CFE_SB_ValueToMsgId(CF_HK_TLM_MID), sizeof(CF_AppData.hk));
src/cf_app.c:    CFE_MSG_Init(&CF_AppData.cfg.tlm_header.Msg, CFE_SB_ValueToMsgId(CF_CONFIG_TLM_MID), sizeof(CF_AppData.cfg));
src/cf_cmd.c:    CFE_MSG_SetMsgTime(&CF_AppData.cfg.tlm_header.Msg, CFE_TIME_GetTime());
src/cf_cmd.c:    /* return value ignored */ CFE_SB_TransmitMsg(&CF_AppData.cfg.tlm_header.Msg, true);
```

**Describe the solution you'd like**
Use `CFE_MSG_PTR`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/199
"Comment before CFE_SB_RcvMsg mentions CFE_SB_PEND, but it should be CFE_SB_PEND_FOREVER","In the description comment before CFE_SB_RcvMsg in cfe_sb_api.c the timeout value CFE_SB_PEND is mentioned; however, the actual value is CFE_SB_PEND_FOREVER.  This comment should be changed to reflect the correct value.

https://github.com/nasa/cFE/blob/f1be0482d7a9493cb35613a8e43020a66a4a64d3/fsw/cfe-core/src/sb/cfe_sb_api.c#L1730

",non-bug,https://github.com/nasa/cFE/issues/536
Set thread name on pc-linux,"**Is your feature request related to a problem? Please describe.**
OSAL currently does not inform the OS kernel of the actual thread names, because this is not a standard POSIX feature.   But Linux has this capability and it helps with debugging to see real thread names.

**Describe the solution you'd like**
Use the OSAL callback framework introduced in nasa/osal#541 to set the thread name at the kernel level when using the `pc-linux` PSP.

**Additional context**
Originally suggested in nasa/osal#532

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/PSP/issues/199
Remove use of HK parameter (LogEnabled) in EVS control logic,"**Is your feature request related to a problem? Please describe.**
`CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogEnabled` is used in logic, discouraged pattern (tlm data used for control)

**Describe the solution you'd like**
Simplify the logic

**Describe alternatives you've considered**
None

**Additional context**
#609, #1129

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1153
Remove references to CFE_ES_RegisterApp,"**Is your feature request related to a problem? Please describe.**
As part of nasa/osal#853 and nasa/cfe#1215 the registration APIs are getting fully deprecated and removed.  Applications no longer need to call OS_TaskRegister, CFE_ES_RegisterApp, or CFE_ES_RegisterChildTask.

**Describe the solution you'd like**
Remove references to these functions.

**Additional context**
Will be required with nasa/osal#853 and nasa/cfe#1215

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/ci_lab/issues/82
add timestamps to EVS logging to stdout,Often it's useful to know the time a message is generated in the stdout log. Adding a timestamp to EVS_SendViaPorts() as an option would be helpful.,non-bug,https://github.com/nasa/cFE/issues/219
Allow C99 code in OSAL.,"Update compiler flags to allow C99 code to be used
everywhere in OSAL.
",bug,https://github.com/nasa/osal/issues/179
Provide a Checklist for Pull Requests,"Is your feature request related to a problem? Please describe.
To ensure our standard of creating a pull request is enforced, checklists can be used.

Describe the solution you'd like
Implement a checklist feature for pull requests. For example, a checklist can ensure that users follow the naming conventions, tested the code, signed the contributor licenses, etc. 

Additional context
References: https://gist.github.com/sherakama/0ba17601381e3adbe0cad566ad4d80a5

Requester Info
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/cFS/issues/211
UT Assert library for CFE functional tests,"**Is your feature request related to a problem? Please describe.**
There is a need to do functional testing of CFE itself along with apps and libraries.  These would benefit from using the same assert macros and test framework as the coverage tests use.  

**Describe the solution you'd like**
This can be done by compiling the same UT assert framework as loadable CFE app.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/778
Improve CFE support for statically linked apps,"For some CFE deployments there are good reasons to _not_ use a dynamic loader for applications, and instead link CFE plus all applications into a single executable.  This would typically be a ""minimalist"" target using an RTOS that does not include dynamic loading, or a safety-critical subsystem where dynamic loading in general introduces operational variables.

This had been possible in previous versions of CFE but it was ugly -- an application needed to be modified for static loading and needed use some preprocessor macros to make the necessary connections.  It also used a special initialization path in CFE ES.

With the latest OSAL changes we can now support a much cleaner approach, where applications do //not// need any special treatment to support static linkage.  The OSAL symbol lookup can be configured such that it can return the correct entry point even without OS dynamic loader support.


",non-bug,https://github.com/nasa/cFE/issues/280
Remove CFE_PSP_MemSet use for addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MD/issues/20
cFE TIME unit tests break when different configuration options are used,"When using the unmodified sample version of the {{{cfe_platform_cfg.h}}} file, the test cases defined in {{{time_UT.c}}} all pass.

But if the user makes any time-related modifications to the platform config file, many of the unit test cases break.  In particular, configuring a time server vs. time client or setting SRC_MET == TRUE, etc.

The test cases in ""time_UT.c"" need to include/accommodate other valid configuration options.",bug,https://github.com/nasa/cFE/issues/109
"SAMPLE_ReportHousekeeping fails, likely due to nasa/cfe#674","**Describe the bug**
UT failure, likely related to nasa/cfe#674:
```
[BEGIN] 05 SAMPLE_ReportHousekeeping
[ FAIL] 05.001 coveragetest_sample_app.c:391 - HkTelemetryMsg.Payload.CommandCounter (0) == 22
[ FAIL] 05.002 coveragetest_sample_app.c:395 - HkTelemetryMsg.Payload.CommandErrorCounter (0) == 11
[ PASS] 05.003 coveragetest_sample_app.c:401 - CFE_TBL_Manage() called
[  END] 05 SAMPLE_ReportHousekeeping TOTAL::3     PASS::1     FAIL::2      MIR::0      TSF::0      N/A::0
```

**To Reproduce**
Build and run unit tests at bundle level with nasa/cfe#674 included

**Expected behavior**
Tests pass

**Code snips**
N/A

**System observed on:**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions Bundle with nasa/cfe#674 included

**Additional context**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/64
FM return statements not needed for void function,"Finding from code review

Imported from GSFCCFS-1032",non-bug,https://github.com/nasa/FM/issues/8
Mission version CFE_MISSION_REV description out of date,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/docs/src/cfs_versions.dox#L44

Mission version was removed from config file, it's intended for identifying mission custom changes to the ""delivered"" fsw, NOT to cover changes in the configuration file.

**Describe the solution you'd like**
Clarify use of mission version in documentation.

**Describe alternatives you've considered**
None

**Additional context**
#877, #1084

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1177
Remove old MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",bug,https://github.com/nasa/cFE/issues/347
Potentially uninitialized local variable (false alarm squash) - CodeQL,"**Is your feature request related to a problem? Please describe.**
Another round of potentially uninitialized local variable squashes.  All false alarms but easy to initialized.

https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_apps.c#L82
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/sb/fsw/src/cfe_sb_task.c#L1063
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/evs/fsw/src/cfe_evs_task.c#L1686
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/evs/fsw/src/cfe_evs_log.c#L142
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_task.c#L1221
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_task.c#L1376
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_task.c#L1887

**Describe the solution you'd like**
Initialize

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warnings

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1252
doxygen warning expected <TR> tag and illegal command,"**Describe the bug**
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/inc/cfe_es.h:562: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/inc/cfe_es.h:562: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:480: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:493: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:505: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:522: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:563: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:534: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:546: warning: expected <tr> tag but found TK_LNKWORD token instead!

/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/inc/cfe_sb_msg.h:560: warning: Illegal command \SB_PIPEOPTSEC as the argument of a \c command

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/403
Same expression on both sides of a binary operator,"cppcheck message:
{{{
src/unit-tests/osfile-test/ut_osfile_fileio_test.c:2537: style: Same expression on both sides of '||'.
}}}

This can helpfully point out copy-paste-edit errors where an expression
was copied and pasted but not actually edited.
",bug,https://github.com/nasa/osal/issues/159
"Consolidate cleanup code into a separate ""FinalizeDelete"" routine","**Is your feature request related to a problem? Please describe.**
All OSAL objects share a basically common pattern for finalization after creation and deletion.  For creation the finalization was consolidated into a `OS_ObjectIdFinalizeNew` routine, but the deletion finalization is basically repeated as it only involved clearing a single global.

**Describe the solution you'd like**
Even though deletion is currently trivial, it is beneficial to consolidate this code as it could become less trivial, as in issue #540 

**Additional context**
This was split from #540

This is a necessary prerequisite in order to implement any sort of common/generic handling without repeating the code everywhere.  It also makes deletion more of a mirror-image of creation, which is really the way it should be.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/564
provide grut699-vxworks6 PSP updates,"JSC developed grut699-vxworks6 PSP from JSC's subversion repo rev 1202 was provided to GSFC and released with cFE 6.41.

Since its release, changes have been made that need to be push to the main repo.

JSC Redmine issue #158 8
Fixes get time base issue in grut699 PSP 
As currently implemented, CFE_PSP_Get_Timebase() does not set tbu and tbl correctly, based on

From cfe_es_perf.c::CFE_ES_PerfLogAdd()
/* Time is stored as 2 32 bit integers, (TimerLower32, TimerUpper32): /
/ TimerLower32 is the curent value of the hardware timer register. /
/ TimerUpper32 is the number of times the timer has rolled over. /
/ /
/ Time is stored as a absolute time instead of a relative time between log /
/ entries. This will yield better accuracy since storing relative time between /
/ entries will accumulate (rounding/sampling) errors over time. It also is /
/ faster since the time does not need to be calculated.

For this board, since upper is seconds and the 32-bit timer register is reset to 
0 (basically rolled over) every second that exactly fits this definition.

upper = g_nSecondsCount; <-- upper is correct

lower needs to be changed 
FROM 
lower = sysTimestampLock();
lower /= sysTimestampFreq() / 1000000UL;

TO
lower = sysTimestampLock();

When using using the 64-bit TBR on PPC processors, this definition still fits, because 
the upper 32-bits increments each time the lower 32-bits rolls over at 2^32.

Also, in cfe_psp_timer.c, I am pretty sure that CFE_PSP_TIMER_LOW32_ROLLOVER should 
be 9375000 instead of 0. It rolls over each second at 9375000 ticks. 0 means it rolls 
over at its max (2^32) value, which in this case it does not.

NOTE: This only impacts the correctness of performance log data time tags. No other code in CFS uses this function.

JSC Redmine issue 18 55
PSP updates for cFE 6.4.x compatibility

In compiler-opts.mak, changed
FROM:
    $(CFE_TOOLS)/elf2cfetbl/elf2cfetbl
TO
    TABLE_BIN  = elf2cfetbl
    
Also, changed PSP rev to 1.2",bug,https://github.com/nasa/PSP/issues/15
Deprecate endian temporary compatibility macors,The BIT_ORDER defines in src/os/inc/common_types.h are marked as temporary and should be easily removed to check compatibility.  Check for use in cFS framework.,non-bug,https://github.com/nasa/osal/issues/256
readdir is not reentrant,"cppcheck messages:
{{{
src/os/posix/osfileapi.c:1143: portability: Non reentrant function 'readdir' called. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'.
}}}

Be sure to check vxworks and rtems implementations, they may also need fixing.
",bug,https://github.com/nasa/osal/issues/156
CFE_ES_QUERY_ONE_CC not performing as expected,"**Describe the bug**
Within the CFE_ES_APP_TLM_MID packet - the following items are not behaving as expected:
1. BSSSize, CodeSize, and DataSize always report 0 for a given App.  
2. StartAddress for a given App changes whenever the software reset.

**To Reproduce**
1. Start FSW
2. Send the CFE_ES_QUERY_ONE_CC  for a given App
3. Verify that the BSSSize, CodeSize, and DataSize always report 0 + StartAddress is not fixed (this may be by design...I am thinking that it should only change if the software is re-compiled).

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-20.10
Versions: cfe v6.8.0-rc1+dev218, osal v5.1.0-rc1+dev109, psp v1.5.0-rc142

**Reporter Info**
Dan Knutsen
NASA/Goddard
",non-bug,https://github.com/nasa/cFE/issues/1620
Update README and CI based on permissive update,"**Is your feature request related to a problem? Please describe.**
Will need to update process when https://github.com/nasa/cFE/pull/505 gets merged.  This issue is to track getting the related cFS repo work done.

**Describe the solution you'd like**
Update based on new process

**Describe alternatives you've considered**
None.

**Additional context**
Also update #39

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFS/issues/47
Compiler warning on RTEMS,"**Describe the bug**
When compiling on RTEMS this application now has multiple warnings:

```
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c: In function 'SAMPLE_AppInit':
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c:166:30: error: format '%X' expects argument of type 'unsigned int', but argument 2 has type 'int32' [-Werror=format=]
                              status);
                              ^
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c:187:30: error: format '%X' expects argument of type 'unsigned int', but argument 2 has type 'int32' [-Werror=format=]
                              status);
                              ^
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c:199:30: error: format '%X' expects argument of type 'unsigned int', but argument 2 has type 'int32' [-Werror=format=]
                              status);
                              ^
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c:211:30: error: format '%X' expects argument of type 'unsigned int', but argument 2 has type 'int32' [-Werror=format=]
                              status);
                              ^
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c:226:9: error: format '%X' expects argument of type 'unsigned int', but argument 2 has type 'int32' [-Werror=format=]
         CFE_ES_WriteToSysLog(""Sample App: Error Registering \
         ^
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c: In function 'SAMPLE_GetCrc':
/home/joe/code/cfecfs/github/apps/sample_app/fsw/src/sample_app.c:535:9: error: format '%X' expects argument of type 'unsigned int', but argument 2 has type 'uint32' [-Werror=format=]
         CFE_ES_WriteToSysLog(""Sample App: CRC: 0x%08X\n\n"", Crc);
         ^
```

**To Reproduce**
Build on RTEMS per the readme/howto and with `-Wall -Werror` switches

**Expected behavior**
Should build clean

**System observed on:**
Ubuntu 18.04 (build host) when cross compiling for RTEMS 4.11

**Additional context**
Appears the problem calls were introduced in #1 

As a rule of thumb, whenever ""printf"" style conversions are used in conjunction with the fixed-width types (int32, uint32, etc) these need an explicit cast because the actual type definitions vary by platform.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sample_app/issues/30
Return error on moduleInfoGet error in VxWorks,"**Is your feature request related to a problem? Please describe.**
`OS_ModuleGetInfo_Impl` always returning success in VxWorks:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-loader.c#L175-L179

**Describe the solution you'd like**
Return error.  It's not like the other cases where other info isn't available and success makes sense.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/886
"Create consistent SB transmit/receive API's, refactored to utilize the zero copy pattern","**Is your feature request related to a problem? Please describe.**
Duplicated logic in CFE_SB_SendMsg and CFE_SB_ZeroCopySend (and related APIs), refactor could simplify CFE_SB_SendMsgFull.  Sending/receiving software bus buffers vs the less restrictive alignment message type is not clear, names don't mirror.

**Describe the solution you'd like**
Implement the following:
- [x] CFE_SB_TransmitMsg - sends the less restrictive alignment message type by coping it into a SB buffer, then transmitting buffer
- [x] CFE_SB_TransmitBuffer - sends a message that is already in a software bus buffer (like CFE_SB_ZeroCopySend)
- [x] CFE_SB_ReceiveBuffer - the old CFE_SB_RcvMsg (it's not a message, it's a buffer)
- [ ] CFE_SB_AllocateBuffer - the old CFE_SB_ZeroCopyGetPtr
- [ ] CFE_SB_ReleaseBuffer - the old CFE_SB_ZeroCopyReleasePtr

Possibly add flag for incrementing sequence count (instead of more API's like CFE_SB_PassMsg).

**Describe alternatives you've considered**
None

**Additional context**
Came from #1009 discussions

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1019
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/ci_lab/issues/51
Overloaded internal return codes in TBL service,"**Is your feature request related to a problem? Please describe.**
Multiple return codes are defined as `-1`, this defeats the purpose of named codes and doesn't allow for unique handling, checking the error code is also not actually testing that the expected incorrect code was returned.
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.h#L50
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task.h#L59-L78

Note there's at least one cases where an index is initialized to one of these error codes, which is especially fragile (#1519)

**Describe the solution you'd like**
Defined unique error codes, if they every get passed out an API really they should be defined in cfe_error.h

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1525
Guide to Adding New Toolchains,"Hi,

Is there a guide anywhere for adding new toolchains? I want to add an
Aarch64 Linux toolchain, but I am confused by the example toolchains.

For example:
- What do these mean?
    - CMAKE_FIND_ROOT_PATH_MODE_PROGRAM
    - CMAKE_FIND_ROOT_PATH_MODE_LIBRARY
    - CMAKE_FIND_ROOT_PATH_MODE_INCLUDE
    - CMAKE_PREFIX_PATH
- What needs to be added, and what not? The arm-cortexa8_neon-linux-gnueabi example only specifies the compilers, whereas the i686-rtems example specifies `ld`, `as`, `strip`, `nm`, `ar`, `objdump` and `objcpy` too.

Does anyone already have a toolchain script for Linux on Aarch64?

Many thanks,

Jack",non-bug,https://github.com/nasa/cFS/issues/244
Strict cppcheck static analysis style warnings,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/SC/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/SC/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Fails cppcheck strict static analysis workflow as seen here (https://github.com/nasa/SC/runs/6327782270?check_suite_focus=true)
```
[fsw/src/sc_atsrq.h:66] -> [fsw/src/sc_atsrq.c:50]: (style, inconclusive) Function 'SC_StartAtsCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_atsrq.h:83] -> [fsw/src/sc_atsrq.c:131]: (style, inconclusive) Function 'SC_StopAtsCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_atsrq.h:47] -> [fsw/src/sc_atsrq.c:181]: (style, inconclusive) Function 'SC_BeginAts' argument 1 names different: declaration 'AtsId' definition 'AtsIndex'.
[fsw/src/sc_atsrq.h:117] -> [fsw/src/sc_atsrq.c:305]: (style, inconclusive) Function 'SC_GroundSwitchCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_atsrq.h:187] -> [fsw/src/sc_atsrq.c:508]: (style, inconclusive) Function 'SC_JumpAtsCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_atsrq.h:203] -> [fsw/src/sc_atsrq.c:637]: (style, inconclusive) Function 'SC_ContinueAtsOnFailureCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_atsrq.h:222] -> [fsw/src/sc_atsrq.c:669]: (style, inconclusive) Function 'SC_AppendAtsCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_cmds.h:161] -> [fsw/src/sc_cmds.c:492]: (style, inconclusive) Function 'SC_ResetCountersCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_cmds.h:146] -> [fsw/src/sc_cmds.c:514]: (style, inconclusive) Function 'SC_NoOpCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_cmds.h:117] -> [fsw/src/sc_cmds.c:529]: (style, inconclusive) Function 'SC_ProcessRequest' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_cmds.h:131] -> [fsw/src/sc_cmds.c:637]: (style, inconclusive) Function 'SC_ProcessCommand' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_cmds.h:47] -> [fsw/src/sc_cmds.c:733]: (style, inconclusive) Function 'SC_TableManageCmd' argument 1 names different: declaration 'CmdPacket' definition 'BufPtr'.
[fsw/src/sc_loads.h:47] -> [fsw/src/sc_loads.c:390]: (style, inconclusive) Function 'SC_ParseRts' argument 1 names different: declaration 'Buffer' definition 'Buffer32'.
[fsw/src/sc_loads.h:110] -> [fsw/src/sc_loads.c:697]: (style, inconclusive) Function 'SC_VerifyAtsTable' argument 1 names different: declaration 'Buffer' definition 'Buffer32'.
[fsw/src/sc_loads.h:126] -> [fsw/src/sc_loads.c:762]: (style, inconclusive) Function 'SC_VerifyAtsEntry' argument 1 names different: declaration 'Buffer' definition 'Buffer32'.
```

**Describe the solution you'd like**
Fix the name inconsistencies.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/SC/issues/24
Missing Requirement for Default File Name: ES Task Status Record to File (CFE-1056) and CDS Write to File (CFE-100),"Requirements needs update to verify Dumping Executive Services Task Status Record and Critical Data Store to a Default File Name. 

Justifcation: Want to provide a default in the event a user does not want to specify one",non-bug,https://github.com/nasa/cFE/issues/1205
Generally better to initialize return code to false,"

Imported from GSFCCFS-1561",non-bug,https://github.com/nasa/MM/issues/6
POSIX unnecessarily setting signal masks in global lock,"**Describe the bug**
As part of the global lock the POSIX implementation is setting the signal mask of the parent process.   However, the signal mask which is being set is the same mask that was already set in the parent process during the initialization.

**To Reproduce**
N/A

**Expected behavior**
The signal mask is already configured during initialization, so it should not be re-configured when locking/unlocking the global object tables.

**Code snips**
Locking: 
https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/os/posix/src/os-impl-idmap.c#L98

Unlocking:
https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/os/posix/src/os-impl-idmap.c#L149

**System observed on:**
Ubuntu 20.04

**Additional context**
I have investigated and I cannot find any justification for this anymore.  In older versions of OSAL the signal(s) were not blocked and therefore e.g. SIGINT, SIGALRM etc could be handled by any thread.  In this design it was likely important to make sure that a timer/interrupt doesn't get processed while internal OSAL ops are being performed.

But In the current OSAL design all of these signals are blocked initially in the main task - which all normal tasks then inherit.  So this is only resetting the same mask that was already configured.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/673
CFE_PSP_MemCpy doesn't handle overlapping ranges,"**CFE_PSP_MemCpy()** in cfe_psp_memutils.c does not contain any logic for handling the case where the source and destination memory regions overlap.  

The current grut699-vxworks6 implementation currently calls the C memcpy(), which is documented to have undefined behavior in this case.",bug,https://github.com/nasa/PSP/issues/36
"Replace use of `goto`, coding standard violation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`goto` violates power of ten and JPL coding standards, typically avoided in cFS code.

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning that showed up in #218 but wasn't resolved as part of that issue fix

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/225
"Doxygen `mainpage` if needed should not contain unique content, just references","**Is your feature request related to a problem? Please describe.**
Currently `mainpage` has content, and since only one `mainpage` can exist in a doxygen document other documents can not include this unique information.

**Describe the solution you'd like**
Doxygen will set up document in order, so could just replace `mainpage` with a front page and `INPUT` the front page first.

**Describe alternatives you've considered**
Make 'mainpage' just a reference to other pages.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC per project request.
",non-bug,https://github.com/nasa/cFE/issues/2055
"Update codename to Caelum and license header for release, version 6.0.0","**Is your feature request related to a problem? Please describe.**
Development version still labeled as 5.0.0 (whoops, should have been 5.0.99).

**Describe the solution you'd like**
Upon official release, update relevant version/license info.

**Describe alternatives you've considered**
None

**Additional context**
Wait until official release

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1170
TO_subsciption_t typo,"Originated by kseywald (130 on babelfish):

It looks like ""to_subsciption"" ought to be ""to_subscription"". The typo occurs in the following locations:
apps/to_lab/fsw/platform_inc/to_lab_sub_table.h:38:static TO_subsciption_t TO_SubTable[] =
apps/to_lab/fsw/platform_inc/to_lab_sub_table.h:57: /* cFE Core subsciptions */
apps/to_lab/fsw/src/to_lab_app.c:194: for (i=0; (i < (sizeof(TO_SubTable)/sizeof(TO_subsciption_t))); i++)
apps/to_lab/fsw/src/to_lab_app.c:472: for (i=0; (i < (sizeof(TO_SubTable)/sizeof(TO_subsciption_t))); i++)
apps/to_lab/fsw/src/to_lab_msg.h:84: } TO_subsciption_t;",bug,https://github.com/nasa/to_lab/issues/3
Apply CodeQL to Every Branch,"**Describe the bug**  
CodeQL only scans the main branch on push and pull-request.  

**Expected behavior**
Scan every branch on push and pull-request using CodeQL.

**Reporter Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/185
Add Discussions in Contributing Guide,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
cFS now uses Discussions as a way to ask questions or request information. This is not in the contributing guide. 

**Describe the solution you'd like**
Add that users may start discussions or ask questions in the Discussions tab of cFS under Ways to Contribute in the Contributing Guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFS/issues/322
"Implement ""CFE_ES_GetVersion()"" function","**Is your feature request related to a problem? Please describe.**
As in nasa/osal#821 it is preferable to obtain version strings via an API call rather than as a macro, because of how/where it is evaluated.

**Describe the solution you'd like**
Implement API calls that return the version strings currently defined as macros in `cfe_version.h`

**Additional context**
See nasa/osal#821.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1176
Remove travis-ci script,"**Is your feature request related to a problem? Please describe.**
The travis-ci script is currently broken and duplicates what's now covered by GitHub actions

**Describe the solution you'd like**
Delete

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1486
Add pc-rtems PSP,"""pc-rtems"" is a PSP implemented for running CFE on standard PC hardware using the RTEMS OS.

It is mainly targeted at debugging or proof-of-concept validation using QEMU as an emulator to provide a virtual PC hardware.

It can also potentially be used as a build target for bamboo builds to ensure that all code builds, links, and runs properly using RTEMS.

",non-bug,https://github.com/nasa/PSP/issues/12
Should not use OS_GetLocalTime() for PSP timebase,"**Is your feature request related to a problem? Please describe.**
The PSP timebase (returned via `CFE_PSP_Get_Timebase()`) is used by CFE performance monitoring and it is important that this time is stable and does not get reset.  

But depending on the implementation of OSAL, it may be possible to reset/change the OSAL ""local time"".  At least there is an `OS_SetLocalTime()` function defined - whether it works or not depends on what kernel resource was used to implement this.

**Describe the solution you'd like**
On pc-linux and other POSIX-like systems this should use `clock_gettime()` with CLOCK_MONOTONIC directly, instead of calling OSAL.  

Furthermore this function can be split into a separate module and therefore used on any system that provides `clock_gettime()` 

**Additional context**
See nasa/osal#844 - `OS_GetLocalTime()` may be redefined/clarified to indeed refer to ""real"" time, which would make it less suitable for this purpose used here.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/266
Add alternative source directory option for OSAL implementations,"**Is your feature request related to a problem? Please describe.**
The OSAL build script always looks for BSP implementations in:
    `${OSAL_SOURCE_DIR}/src/bsp/${OSAL_SYSTEM_BSPTYPE}`
Likewise it always looks for OS implementations in:
    `${OSAL_SOURCE_DIR}/src/os/${OSAL_SYSTEM_OSTYPE}`

This presents a challenge to for a user with a custom OS/BSP implementation not within the mainline OSAL source tree, but wishes to use the github repo directly.

**Describe the solution you'd like**
It should be possible to provide an external directory that the OSAL build can use.

**Describe alternatives you've considered**
Create an OSAL fork or ""git subtree"" to assemble a full CFE/CFS repo, which allows one to add custom packages or patches they need.

**Additional context**
The internal API between the BSP/OS implementation components is not stabilized like the public API is, and can change any time.  

If directly using a ""master"" branch from github in conjunction with a locally-controlled implementation module, users may experience frequent breakage, as the component interface can change any time rendering it incompatible with their local version.  

In contrast, although the fork/subtree approach does have a similar issue, it doesn't happen ""automatically"" - it requires a specific user action to pull and merge the new ""master"" so it creates a buffer that avoids unsolicited breakage.

This feature should come with a big disclaimer that says its for debug/development only, not to use it in production.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/450
Fix workflow documentation directory for OSAL dox updates,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
nasa/osal#1232 simplifies doxygen documentation build directory structure, documentation workflow impacted

**Describe the solution you'd like**
Fix reference

**Describe alternatives you've considered**
None

**Additional context**
nasa/osal#1232 and nasa/cfe#2065

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/441
JSC: change uint8 to char for strings in interface structures,"Use the `char` type when storing strings, rather than `uint8`",bug,https://github.com/nasa/cFE/issues/156
Copyright/License update for current master,"**Is your feature request related to a problem? Please describe.**
Copyright/license update for current master, relative to Apache 2.0 approval

**Describe the solution you'd like**
Update.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/520
ostimer.c functions not using semaphore,"The VxWorks ostimer.c has a static table and a semaphore to protect it, as in:
{{{
static OS_timer_record_t OS_timer_table[OS_MAX_TIMERS];
static uint32            os_clock_accuracy;

/*
** The Semaphore for protecting the above table
*/
static SEM_ID OS_timer_table_sem;
}}}

Unfortunately, only OS_TimerCreate(), and OS_TimerGetInfo() use that semaphore.  

'''OS_TimerCreate(), OS_TimerSet(), OS_TimerDelete() do not''' and they '''modify''' the table.  '''OS_TimerGetIdByName()''' and the internal '''OS_TimerSignalHandler()''' also access (read) the table without using the semaphore.

The OS_TimerAPIInit() creates the semaphore, the time conversion functions don't access the table.

Recommend fixing all the functions that access or modify the table to acquire the semaphore after passing input argument checks.",bug,https://github.com/nasa/osal/issues/92
Table Processing: strncmp incorrect size argument (CFE_TBL_MAX_FULL_NAME_LEN),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
While compiling the latest version of CS, my build environment gave me the following error:
```
error: 'strncmp' specified bound 40 exceeds source size 20 [-Werror=stringop-overread]
```

**Code snips**
The bug relates to this line:
https://github.com/nasa/CS/blob/1ce636e4f2f04a0c98f905a3cc2bda9d05a3995d/fsw/src/cs_table_processing.c#L245

Based on checking the types for both table entries (```CS_Def_App_Table_Entry_t```), it seems that it would make sense to instead do the strncmp like so:
```
if (strncmp(OuterEntry->Name, (&StartOfTable[InnerLoop])->Name, OS_MAX_API_NAME) == 0)
```
After changing to this locally, my build works fine.",bug,https://github.com/nasa/CS/issues/61
"Improve MSG API grouping in documentation - general, primary, secondary, extended","**Is your feature request related to a problem? Please describe.**
MSG APIs are all in one group, but affect different parts of the msg header and some aren't applicable based on configuration (extended headers enabled or not).

**Describe the solution you'd like**
Group in doxygen and add group description.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1821
FS - externalize cfe_fs_decompress,The decompression code should be removed and compile-time hooks to connect in an external decompression library should be provided.,non-bug,https://github.com/nasa/cFE/issues/291
Document branch/tag/release strategy,"**Is your feature request related to a problem? Please describe.**
Community not clear on how to get what they want (latest development version, latest official release, latest release candidate, etc).

**Describe the solution you'd like**
Document the current process.  Especially critical based on new bundle branches that may be showing up soon to track latest named release versions.

**Describe alternatives you've considered**
None.

**Additional context**
Frequent topic on community email list.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/122
Replace codec code-compatibility macros with direct calls to the new functions,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
These were used to help transition the code from old endian dependent macros, but they obscure the fact values are being modified by taking address of the input.  They also cause static analysis warnings on occasion as identified in #216.

Example:
https://github.com/nasa/CF/blob/d0b3e25566b7cb8221d8a3f90017fe52ee0f43d4/fsw/src/cf_codec.c#L134-L138

**Describe the solution you'd like**
Convert the code to use the functions directly, remove offending macros.

**Describe alternatives you've considered**
None

**Additional context**
- #216

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/227
Clarify/document elements in enums including zero dependence,"**Is your feature request related to a problem? Please describe.**
Set to zero of first element is redundant with standard, not documented:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_perf.h#L46-L60

Similar case in FS, where 0 is UNKNOWN, should document dependence:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_api_typedefs.h#L52

Note it is documented here, really should do similar elsewhere when it matters:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_api_typedefs.h#L72

**Describe the solution you'd like**
Document enums, clarify logic dependence on first entry being 0 (don't move).

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1352
CF Backwards Compatibility,it possible to simply update CF app (1.4xx) and have that new version of CF be backwards compatible with all the other apps CFE etc?,non-bug,https://github.com/nasa/CF/issues/359
Static analysis issues relative to flight code,"Handful of static analysis issues in the ""red"" identified (non-Style issues).  Need to resolve these.

Filter: -file:elf -file:ut -file:cfe -file:os -file:cf_ -file:_lab_app.c !(significance:style)

should resolve and/or disposition the higher ranked ones at minimum.

Note license restricts publishing issues.

Imported from GSFCCFS-1958",bug,https://github.com/nasa/CS/issues/8
Unsigned Compared Against 0 always true,"**Describe the bug**
This greater-than-or-equal-to-zero comparison of an unsigned value is always true. CmdPtr->TriggerMode >= CFE_ES_PERF_TRIGGER_START.

**Expected behavior**
Fix the if statement.

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/src/cfe_es_perf.c#L168

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFE/issues/1991
Buffer size warnings with GCC 7.2,"When compiling CFE with GCC version 7.2, some new warnings about possible buffer overflow appear in the CFE ES shell code.  For Example:

{{{
cfe/fsw/cfe-core/src/es/cfe_es_shell.c:293:83: error: ‘, Prnt App Name: ’ directive writing 17 bytes into a region of size between 6 and 55 [-Werror=format-overflow=]
                    sprintf(Line,""Task ID: %08d, Task Name: %20s, Prnt App ID: %08d, Prnt App Name: %20s\n""
}}}",bug,https://github.com/nasa/cFE/issues/270
Combine #if/#endif directives into #if/#else/#endif in `CFE_TIME_Tone1HzISR`,"**Is your feature request related to a problem? Please describe.**
Mutually exclusive logic:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L1051-L1064

**Describe the solution you'd like**
Use #if/#else/#endif

**Describe alternatives you've considered**
#302 would likely make this obsolete

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1541
Refactor LC_SampleAPs,"The function LC_SampleAPs can be refactored - the ""if(StartIndex == EndIndex)"" condition can be removed.

Imported from GSFCCFS-1358",non-bug,https://github.com/nasa/LC/issues/14
Document deprecated elements,"Looks like template broke... anyways:

Add \deprecated and \name the group where appropriate relative to the user's guide documentation such that it shows up as deprecated.

Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/556
Perf counter in MM_SegmentBreak may be unnecessary,"The performance marker only wraps a task delay.

Imported from GSFCCFS-1571",non-bug,https://github.com/nasa/MM/issues/12
Remove config tlm packet MID,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The CF_CONFIG_TLM_MID constant is still defined in cf_msgids.h. The corresponding packet was removed in #256 and is no longer used.

**Describe the solution you'd like**
Remove CF_CONFIG_TLM_MID from cf_msgids.h

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Sergio Maldonado, NASA GSFC, Arctic Slope Technical Services
",non-bug,https://github.com/nasa/CF/issues/313
Examples for application testing,"Since the release of cFE 6.6, there hasn't been apps that give an example of the way tests should be defined in the CMakeLists file. Previously, when UTAssert was part of the tools directory rather than being part of the OSAL, this definition would exist inside of the fsw/for_build/Makefile but this doesn't cleanly translate to cFE 6.6's cmake build system.

The arch_build.cmake file located in the cmake directory seems to have a function [add_unit_test_exe](https://github.com/nasa/cFE/blob/99038d5446aec902e8cdbe14d762a86ea4e19e1c/cmake/arch_build.cmake#L202) but I couldn't get this to work when calling it from the simple app's CMakeList.txt. An explanation of what needs to be done in either the target.cmake or CMakeLists file for an app or an example of an app using UT for it's testing would be appreciated.",non-bug,https://github.com/nasa/cFS/issues/4
Remove/replace `CFE_TIME_Copy` macro,"**Is your feature request related to a problem? Please describe.**
The stated purpose (copy across different structures with Second/Subsecond fields) really is better avoided by using a common time structure.

**Describe the solution you'd like**
Remove `CFE_TIME_Copy`, use CFE_TIME_SysTime_t which enables simple assignment (x = y),  or replace with more type-safe/inline function.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1499
Remove private files from user's guide documentation processing,"**Is your feature request related to a problem? Please describe.**
User's guide is intended to document external elements (API's, commands, error codes, etc), yet includes processing of internal directories.

**Describe the solution you'd like**
Remove internal directories from processing

**Describe alternatives you've considered**
None

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/537
Explicitly sized parameters or data length wrt `CFE_FS_ExtractFilenameFromPath`,"**Is your feature request related to a problem? Please describe.**
CFE_FS_ExtractFilenameFromPath requires data length assumptions
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs.h#L273-L284

**Describe the solution you'd like**
Explicitly define lengths for parameters or pass in a data length

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1392
systematic naming convention?,"Can all the The Core Flight System (cFS) repositories follow a systematic naming convention with cFs-<name>?

Just 'sample_app' seems to pollute the namespace. Thank you.",non-bug,https://github.com/nasa/sample_app/issues/2
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/MD/issues/5
Remove unused error codes,"**Is your feature request related to a problem? Please describe.**
Unused (shell capability moved to stand-alone app):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L350-L356

Last sender id logic removed, error code no longer used:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L828-L835

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1314
main - cyclomatic complexity of 21,"**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

elf2cfetbl.c::[main](https://github.com/nasa/elf2cfetbl/blob/46b29f82c76429be97687203f75f4b1b25227c60/elf2cfetbl.c#L603) unnecessarily violates the recommendation with a cyclomatic complexity of 21.  

**Describe the solution you'd like**
Clean up main such that it has a cyclomatic complexity of 15 or less.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Imported from JSC static analysis audit

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/elf2cfetbl/issues/132
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the cFE repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/cFE/issues/1226
"Msg module unit tests add tests within tests, which don't get executed with the current osal/ut_assert","**Describe the bug**
Msg unit tests utilized a pattern where subtests were added within other tests.

**To Reproduce**
Build and run msg unit test, observe the subtests do not execute.

**Expected behavior**
All tests should execute.

**Code snips**
See PR.

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Integration candidate

**Additional context**
N/A

**Reporter Info**
Jacob Hageman
",non-bug,https://github.com/nasa/cFE/issues/839
Release Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- added standard Apache 2.0
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sch_lab/issues/21
"Race condition in ""select"" test","**Describe the bug**
Running the OSAL select test, I ran into a deadlock situation where the ""multi"" test got stuck and never finished.

**To Reproduce**
Hit or miss... Run test repeatedly on a system with other loads (e.g. parallel builds)

**Expected behavior**
Test should complete

**Code snips**
Checking the test status/backtrace it looks like two tasks (main + ""Server_Fn"") are waiting on the binary sem.  In particular the Server_Fn is stuck here:

https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/src/tests/select-test/select-test.c#L162

While the main task is waiting in the teardown code (the `TestSelectMultipleRead` has completed, and it has invoked `Teardown_Multi` which in turn invokes `Teardown_Single` here):

https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/src/tests/select-test/select-test.c#L273

**System observed on:**
Ubuntu 20.04

**Additional context**
This is likely related to the use of `OS_BinSemFlush`.  We should probably deprecate this function, as I cannot see how this can ever be used safely without it being a race condition.  VxWorks offers it which (I think) is why OSAL also offers it, but its a fundamentally broken concept.

I can confirm that looking at the traceback in gdb, the flush_count is indeed already 1 - meaning the flush had already happened by the time the Server_Fn entered the bin sem take routine.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/707
Replace CFE_SB_ValueToMsgId(0) with CFE_SB_INVALID_MSG_ID,"**Is your feature request related to a problem? Please describe.**
Using zero explicitly isn't great, for the most part all cases should be replace with just using the invalid macro:
```
cfe/modules/cfe_testcase/src/msg_api_test.c:    UtAssert_INT32_EQ(CFE_MSG_Init(NULL, CFE_SB_ValueToMsgId(0), sizeof(cmd)), CFE_MSG_BAD_ARGUMENT);
cfe/modules/cfe_testcase/src/msg_api_test.c:    msgId = CFE_SB_ValueToMsgId(0);
cfe/modules/cfe_testcase/src/message_id_test.c:    CFE_SB_MsgId_t msgid = CFE_SB_ValueToMsgId(0);
cfe/modules/msg/ut-coverage/test_cfe_msg_ccsdsext.c:    CFE_UtAssert_SUCCESS(CFE_MSG_SetMsgId(&msg, CFE_SB_ValueToMsgId(0)));
cfe/modules/msg/ut-coverage/test_cfe_msg_msgid_shared.c:    CFE_SB_MsgId_t    msgid  = CFE_SB_ValueToMsgId(0);
cfe/modules/msg/ut-coverage/test_cfe_msg_init.c:    UtAssert_INT32_EQ(CFE_MSG_Init(NULL, CFE_SB_ValueToMsgId(0), sizeof(cmd)), CFE_MSG_BAD_ARGUMENT);
cfe/modules/msg/ut-coverage/test_cfe_msg_init.c:    UtAssert_INT32_EQ(CFE_MSG_Init(CFE_MSG_PTR(cmd), CFE_SB_ValueToMsgId(0), 0), CFE_MSG_BAD_ARGUMENT);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c:    UtAssert_INT32_EQ(CFE_SBR_SetRouteId(CFE_SB_ValueToMsgId(0), CFE_SBR_ValueToRouteId(0)), 0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_GetRouteId(CFE_SB_ValueToMsgId(0))));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c:    msgid[0]   = CFE_SB_ValueToMsgId(0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c:    UtAssert_INT32_EQ(CFE_SBR_SetRouteId(CFE_SB_ValueToMsgId(0), CFE_SBR_ValueToRouteId(0)), 0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_GetRouteId(CFE_SB_ValueToMsgId(0))));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c:    msgid   = CFE_SB_ValueToMsgId(0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_route_unsorted.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_AddRoute(CFE_SB_ValueToMsgId(0), NULL)));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_route_unsorted.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_AddRoute(CFE_SB_ValueToMsgId(0), &collisions)));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_route_unsorted.c:    msgid[0] = CFE_SB_ValueToMsgId(0);
cfe/modules/tbl/fsw/src/cfe_tbl_task.c:    CFE_MSG_Init(CFE_MSG_PTR(CFE_TBL_Global.NotifyMsg.CommandHeader), CFE_SB_ValueToMsgId(0),
```

**Describe the solution you'd like**
Replace with CFE_SB_INVALID_MSG_ID

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2039
"Add service ""health"" parameter to HK (and provide a suggested pattern for apps to follow)","**Is your feature request related to a problem? Please describe.**
Historically syslog or events are used to report issues, and telemetry status reporting is likely scattered and/or inconsistent.  Not easy to really be sure everything is ""healthy"" at a glance.  Example issue is with system startup synchronization, there isn't an easy way to tell (especially if there's spotty com) that startup synchronization was successful.  There's also other cases where operation continues ""best effort"" in failure conditions, since there isn't anything that can really be done from within the system.

**Describe the solution you'd like**
Add an app/service health summary parameter to HK, 0 is healthy and nonzero bits could indicate specific issues have been encountered.  Latch on condition, but clear with the a reset command.  Proper synchronization is an easy first condition to add, but scrub for others to include in the summary.  With this addition, reduces the dependency on syslog/events for a monitoring system (like HS or an ""external"" monitor) or the ground to take appropriate action.

Additionally many of the CDS ""errors"" are simply written to the system log (or not) and initialization continues.  When these things fail there is something wrong or something got corrupted, needs to be more obvious (examples):
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L155-L163
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L167-L173
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L177-L188

**Describe alternatives you've considered**
None

**Additional context**
#1466 would allow apps to add the sync status, note also #1467 would provide the syslog.  Spawned from issues discussed at code review.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1469
simplify unit tests with utassert.h macros,"**Is your feature request related to a problem? Please describe.**
Currently a lot of OSAL unit test code is like the following (basically, run code, check the result, ""force"" an assert that it worked or didn't work):
```
    /*-----------------------------------------------------*/
    testDesc = ""#2 Name-too-long-arg"";

    res = OS_xxx(aVeryLoooooongName);
    if (res == OS_ERR_NAME_TOO_LONG)
        UT_OS_TEST_RESULT( testDesc, UTASSERT_CASETYPE_PASS);
    else
        UT_OS_TEST_RESULT( testDesc, UTASSERT_CASETYPE_FAILURE);
```

**Describe the solution you'd like**
Instead, this can be simplified to:
```
  UtAssert_True(OS_xxx(aVeryLoooooongName) == OS_ERR_NAME_TOO_LONG, ""#2 Name-too-long-arg"");
```

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/397
Update RTEMS osal to use osal_id_t typedef,"**Is your feature request related to a problem? Please describe.**
While fixing #615 I noticed that the RTEMS OSAL is still using `uint32` for its IDs.  

**Describe the solution you'd like**
This should be changed to use the `osal_id_t` typedef instead.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/618
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/sample_lib is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/sample_lib while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/sample_lib/issues/48
"Use ""UtTest_Setup"" as name of entry point for unit tests","**Is your feature request related to a problem? Please describe.**
In nasa/osal#294,  The UT assert library is being modified to use a different entry point function name for unit test code, not `OS_Application_Startup()` as is used for a normal application. 

**Describe the solution you'd like**
The CFE unit tests need to use `UtTest_Setup` instead.

**Describe alternatives you've considered**
Any name could work for test setup, but the issue is that it has to be different than that of a normal application.  This is so the normal entry point can be provided by UT assert here, allowing better layering.

**Additional context**
Changing the name of the Test entry point makes more sense because these only use the OSAL BSP but run with the stub library for OSAL itself.  It is therefore not really accurate to name the entry point as `OS_Application_Startup` because this is not an OSAL application at all, it is a unit test.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/435
Boolean Type Not Defined ?,"I'm new to cFS and trying to slowly add the applications I will need for my mission. I'm trying to add the TO, SCH, and HK apps but keep running into the same problem. It appears that in many app codes such as sch_msg.h, sch_app.h, etc. there is use of 'boolean'. It doesn't appear that the boolean type has been defined anywhere in the cFS code. Am I missing something or does it have to be manually added in? 

****System observed on:**
 - VM running Ubuntu 18.04.4 64bit
 - Versions running all the current versions of cfs bundle, cfs apps, and cfe/osal/psp

Paula ",non-bug,https://github.com/nasa/cFS/issues/98
Add support for custom CCSDS commands through the ECI header,"It's been a commonly requested internal feature to add support for custom commands as part of the ECI. Currently, the only commands supported are housekeeping and noop but these are standard across apps.

This feature shouldn't impact the performance of any other parts of the ECI and can be included as part of the eci_interface header file. The structure exposed should look like:
```
{
  uint8 function code
  struct defining message
  int function pointer
}
```
where function code is a 7 byte value to identify the command and the function pointer is a C style function pointer to the function to execute once the command is received. To reduce the boiler plate code needed to be written, we also include an extra field containing the structure to fill with command information.

More information on the CCSDS packet protocol can be found [here](https://public.ccsds.org/Pubs/133x0b1c2.pdf) under section 4.1.3.2: ""Packet Secondary Header"". The CFS uses only the ancillary field of the secondary packet header and the relevant portion for this issue will be 0x7F00 >> 8 defined as the function code of the command message.",non-bug,https://github.com/nasa/ECI/issues/43
osal_core_UT hanging on MCP750/VxWorks,"**Describe the bug**
When I run `osal_core_UT` on the MCP750, it seems to run fine until it gets to the `OS_TaskCreate` test.  About 5 tasks into the process of creating OS_MAX_TASKS, output stops, and the test just hangs.  Here are the last few lines of output:

```
[ PASS] 36.004 ut_oscore_task_test.c:138 - OS_TaskCreate(&g_task_ids[3], g_task_names[3], generic_test_task, OSAL_STACKPTR_C(&g_task_stacks[3]), 0, OSAL_PRIORITY_C(UT_TASK_PRIORITY), 0) (-40) == OS_ERR_INVALID_SIZE (-40)
[ PASS] 36.005 ut_oscore_task_test.c:145 - OS_TaskCreate(&g_task_ids[4], g_long_task_name, generic_test_task, OSAL_STACKPTR_C(&g_task_stacks[4]), sizeof(g_task_stacks[4]), OSAL_PRIORITY_C(UT_TASK_PRIORITY), 0) (-13) == OS_ERR_NAME_TOO_LONG (-13)
[ PASS] 36.006 ut_oscore_task_test.c:158 - OS_TaskCreate(&g_task_ids[i], task_name, generic_test_task, OSAL_STACKPTR_C(&g_task_stacks[i]), sizeof(g_task_stacks[i]), OSAL_PRIORITY_C(UT_TASK_PRIORITY), 0) (-14) == OS_ERR_NO_FREE_IDS (-14)
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK0, id: 10001
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK1, id: 10002
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK2, id: 10003
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK3, id: 10004
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK4, id: 10005
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK5,
```

**To Reproduce**
Run `osal_core_UT` on the MCP750 test platform

**Expected behavior**
Test should pass

**System observed on:**
MCP750 VxWorks 6.9

**Additional context**
This test used to pass, so very confusing as to why it seems to be locking up now.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1088
Scrub all OSAL UT stub functions,"**Is your feature request related to a problem? Please describe.**
Need to scrub all OSAL unit test stub routines, similar to nasa/cfe#762 but for OSAL.

**Describe the solution you'd like**
- All functions prototyped in the OSAL public API headers (the `src/os/inc` dir) should also have a stub defined.
- All arguments should be registered in the context so the complete context is available within UT hook functions. 
- The argument names should always match the prototype.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/526
MCP750 needs to set context size on exception handling,"**Describe the bug**
MCP750 is not storing the context size, which results in the size being 0 and therefore no extended data is saved to the log file even though its in memory.

**To Reproduce**
Found in unit testing with new PSP coverage tests (not yet merged)

**Expected behavior**
The `CFE_PSP_ExceptionHook` function should set the `context_size` field to the amount of data it has actually stored in the buffer.  This is then used later if a file dump is requested to write the exception data to a file.

**System observed on:**
Ubuntu 20.04 running PSP coverage tests.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/PSP/issues/170
Add missing prototypes,"**Is your feature request related to a problem? Please describe.**
Enable -Wmissing-prototypes and observe warnings

Example identified in code review:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1589

**Describe the solution you'd like**
Add prototype

**Describe alternatives you've considered**
None

**Additional context**
Code reivew, specific case related to #1307 

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1334
Registration of events with 0x0000 filters isn't all that helpful,"**Is your feature request related to a problem? Please describe.**
Registration of all events with `0x0000` filters just loads the system without actually filtering anything.  Also fills the event filter buffer for the app and likely drops some since default limit is 8.

**Describe the solution you'd like**
Remove zero entries from initialization and add a filter when/if needed (or operationally via command).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/174
Uninitialized variable in unit tests,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HK/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Compiling the latest HK app with the latest GCC version (12.x) produces a warning about uninitialized variable in the unit test:

```
[ 93%] Building C object apps/hk/unit-test/CMakeFiles/coverage-hk-hk_app-testrunner.dir/hk_app_tests.c.o
/home/joe/code/cfecfs/github/apps/hk/unit-test/hk_app_tests.c: In function ‘Test_HK_HousekeepingCmd’:
/home/joe/code/cfecfs/github/apps/hk/unit-test/hk_app_tests.c:1235:5: error: ‘DummyMsg’ may be used uninitialized [-Werror=maybe-uninitialized]
 1235 |     HK_HousekeepingCmd(&DummyMsg);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/joe/code/cfecfs/github/apps/hk/unit-test/hk_app_tests.c:24:
/home/joe/code/cfecfs/github/apps/hk/unit-test/../fsw/src/hk_app.h:181:6: note: by argument 1 of type ‘const CFE_MSG_CommandHeader_t *’ {aka ‘const struct CFE_MSG_CommandHeader *’} to ‘HK_HousekeepingCmd’ declared here
  181 | void HK_HousekeepingCmd(const CFE_MSG_CommandHeader_t *Msg);
      |      ^~~~~~~~~~~~~~~~~~
```

**To Reproduce**
Add HK to latest CFS bundle, build using default config.  

**Expected behavior**
Should build cleanly

**System observed on:**
Debian (Latest version, with GCC 12.2)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/HK/issues/38
Remove MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",non-bug,https://github.com/nasa/sch_lab/issues/3
n2x PSP,"Development branch for the n2x Quad Leon4 development board

Need to branch off trac-54-ut699-improvements since it has all of the ut699 updates plus a good linux psp from trac-10",non-bug,https://github.com/nasa/PSP/issues/60
"""duplicate symbol '_main'"" on macOS when building tests","**Is your feature request related to a problem? Please describe.**

This is one of the issues addressed by #352. I am extracting it hereby to be considered separately from the rest of my work of macOS port.
 
I am getting linker errors on macOS because the test targets link in `libosal` library that has a `main()` function and they link `libut_bsp.a` which has a `main()` that launches tests. This causes a conflict with these test target' own main() function as follows:

```
duplicate symbol '_main' in:
    libosal.a(bsp_start.c.o)
    libut_bsp.a(bsp_ut.c.o)
```

**Describe the solution you'd like**

Usually the cases like this resolved by extracting the main function from one of the conflicting libraries. In this case it could make sense to extract the `main` function from `libosal` to a separate library such as `libosal-init` or `libosal-main` to avoid any conflicts with test targets. That separate library would then not be linked to the tests and the conflict would go away.

**Describe alternatives you've considered**

There seems to be no alternative to this behavior on macOS. You either have one `main()` function or there is a conflict.

**Additional context**

This is a more complete fragment of the output:

```
[9/17] Linking C executable timer-test
FAILED: timer-test
: && /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -D_XOPEN_SOURCE=600    -D_LINUX_OS_ -Wl,-search_paths_first -Wl,-headerpad_max_install_names -u _OS_VolumeTable -u _OS_Application_Startup tests/CMakeFiles/timer-test.dir/timer-test/timer-test.c.o  -o timer-test  libut_assert.a libosal.a libut_bsp.a -lpthread -ldl posix-mac-addons/src/mqueue/libmqueue.a posix-mac-addons/src/stubs/librt.a posix-mac-addons/src/pthread/libposix-mac-pthread.a posix-mac-addons/src/semaphore/libposix-mac-semaphore.a posix-mac-addons/src/stubs/libposix-mac-stubs.a posix-mac-addons/src/time/libposix-mac-time.a posix-mac-addons/src/timer/libposix-mac-timer.a && :
duplicate symbol '_main' in:
    libosal.a(bsp_start.c.o)
    libut_bsp.a(bsp_ut.c.o)
ld: 1 duplicate symbol for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
[10/17] Linking C executable bin-sem-test
FAILED: bin-sem-test
: && /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -D_XOPEN_SOURCE=600    -D_LINUX_OS_ -Wl,-search_paths_first -Wl,-headerpad_max_install_names -u _OS_VolumeTable -u _OS_Application_Startup tests/CMakeFiles/bin-sem-test.dir/bin-sem-test/bin-sem-test.c.o  -o bin-sem-test  libut_assert.a libosal.a libut_bsp.a -lpthread -ldl posix-mac-addons/src/mqueue/libmqueue.a posix-mac-addons/src/stubs/librt.a posix-mac-addons/src/pthread/libposix-mac-pthread.a posix-mac-addons/src/semaphore/libposix-mac-semaphore.a posix-mac-addons/src/stubs/libposix-mac-stubs.a posix-mac-addons/src/time/libposix-mac-time.a posix-mac-addons/src/timer/libposix-mac-timer.a && :
duplicate symbol '_main' in:
    libosal.a(bsp_start.c.o)
    libut_bsp.a(bsp_ut.c.o)
ld: 1 duplicate symbol for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
ninja: build stopped: subcommand failed.
```

**Requester Info**

Stanislav Pankevich
",bug,https://github.com/nasa/osal/issues/363
Improper Null termination,"**Is your feature request related to a problem? Please describe.**
A few cases of possible missing termination:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-module.c#L258
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-errors.c#L123

**Describe the solution you'd like**
Terminate.

**Describe alternatives you've considered**
None

**Additional context**
Secuity analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/osal/issues/805
Useless assignments/redundant checks - static analysis warning,"**Is your feature request related to a problem? Please describe.**
Useless assignments since FileOpened is initialized to false (or already checked for false):
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L109
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L134

Initialized to zero, then set to zero:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/time/cfe_time_tone.c#L1464

Already memset to 0:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/evs/cfe_evs_task.c#L91

Already checked for NumBlockSizes . CFE_PLATFORM_ES_POOL_MAX_BUCKETS
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_mempool.c#L203

Already CFE_SUCCESS:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_generic_pool.c#L458

**Describe the solution you'd like**
Remove.

**Describe alternatives you've considered**
None, useless assignments in the name of future-proofing is a slippery slope.  To some (like me) these useless assignments make me thing the implementer didn't fully understand the implemented logic, was sloppy/careless, or added useless logic ""just in case"".

**Additional context**
wait for #972

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1186
`CFE_TIME_QueryResetVars` misnomer,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_QueryResetVars` actually reads in and sets variables, so ""Query"" isn't a great verb to use.

**Describe the solution you'd like**
Rename (maybe `RestoreFrom` or similar)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1543
Update LGTM build to OMIT_DEPRECATED,"**Is your feature request related to a problem? Please describe.**
Deprecated elements included in analysis

**Describe the solution you'd like**
Remove deprecated elements from analysis

**Describe alternatives you've considered**
None.

**Additional context**
Will address some of the open LGTM issues.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/72
Identify cases where value is computed and only used in Assert call,"In PR #81, rather than completely removing assertions in the code, this including a no-op function such that the condition is still evaluated, but not acted upon.  This was done because there are a few instances where a value was computed and used only for the assert, and no other reason.  If the assert is removed, then the value becomes unused and is flagged as such (i.e. compiler warning).

The fix in #81 was only an interim in order to get the code to compile and run.  The preferred fix would be to identify cases where a value is computed and only used in an assert, and remove them.  This is likely just a matter of removing the no-op function and fixing the warnings that come up.
",non-bug,https://github.com/nasa/CF/issues/107
CS_ProcessNewTablesDefinitionTable - cyclomatic complexity of 19,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

cs_table_processing.c::[CS_ProcessNewTablesDefinitionTable](https://github.com/nasa/CS/blob/1ce636e4f2f04a0c98f905a3cc2bda9d05a3995d/fsw/src/cs_table_processing.c#L538) unnecessarily violates the recommendation with a cyclomatic complexity of 19.  

**Describe the solution you'd like**
Clean up CS_ProcessNewTablesDefinitionTable such that it has a cyclomatic complexity of 15 or less.

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/CS/issues/63
API for querying libraries (like CFE ES QueryApp),"**Is your feature request related to a problem? Please describe.**
Unable to verify library image integrity (CS cannot scrub library code space)

**Describe the solution you'd like**
Implement API for querying library information, such that an app could scrub

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC
External request from cfs-community email list on 9/3/2019",non-bug,https://github.com/nasa/cFE/issues/28
"Improve consistency in the result reporting in ""unit-tests""","**Is your feature request related to a problem? Please describe.**
In order to be able to cross check and confirm that the unit tests are actually checking for the status codes that they should be, the test cases need to be clear about the API being called and the return value/status code being tested for in that test case.  However, the functional tests are currently not consistent in how results are reported.

**Describe the solution you'd like**
Example from the binsem test, which is better because it at least uses a macro that includes both the function name/API being called (`OS_BinSemCreate`) as well as the status code being tested for (`OS_INVALID_POINTER`):

https://github.com/nasa/osal/blob/a061666924644a7d23b17d3d060dc9e704913447/src/unit-tests/oscore-test/ut_oscore_binsem_test.c#L84

Which translates to a line like this in the log file:
`[ PASS] 05.002 ut_oscore_binsem_test.c:84 - OS_BinSemCreate(&sem_ids[0], NULL, 1, 0) (-2) == OS_INVALID_POINTER (-2): null pointer arg 2`

However a similar test case from OS_ModuleLoad displays neither:
https://github.com/nasa/osal/blob/a061666924644a7d23b17d3d060dc9e704913447/src/unit-tests/osloader-test/ut_osloader_module_test.c#L99-L105

The latter translates only to a line like this in the log file, which doesn't say much at all:
`[ PASS] 01.002 ut_osloader_module_test.c:103 - #2 Null-pointer-arg-2`

A clear and concise description of what you want to happen.

**Additional context**
This is a prerequisite to completing #331 - The information in the log file needs to be made more like the BinSem case, so it can be cross referenced back to confirm the functional tests are checking for the items they are supposed to be checking for.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/981
EVS coverage test fails when CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG is set to 0xF,"**Describe the bug**
When CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG is set to 0xF there are two failures:
```
[ FAIL] 14.001 evs_UT.c:2675 - CFE_EVS_WriteLogDataFileCmd - Write log data - successful
[ FAIL] 14.002 evs_UT.c:2685 - CFE_EVS_SetLogModeCmd - Set logging mode - successful
```

**To Reproduce**
Steps to reproduce the behavior:
1. Set CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG to 0xF
2. Build unit tests, run cfe-core_evs_UT, observe failure

**Expected behavior**
Test should pass with debug events enabled (shouldn't care).

**Code snips**
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/unit-test/evs_UT.c#L2670-L2688

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: 6.8.0-rc1+dev129

**Additional context**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/954
Recursion and side effects in boolean expressions,"**Describe the bug**
Side effect in a Boolean expression and use of recursion in several cFE files. 
Avoiding recursion allows tools and people to better analyze the program.
This ticket is for side effects in boolean expressions that also fixes recursion issues.

**Expected behavior**
Same behavior

**Code snips**
One example:
https://github.com/nasa/cFE/blob/9f42688b2bf92e18c6faf9e7ce1f9a4f2ea08316/modules/evs/fsw/src/cfe_evs.c#L199-L199

**Additional context**
Caught by CodeQL. Can either dismiss as won't fix, false positive, or used in tests (some are test files) or fix these alerts. 

**Reporter Info**
Ariel Adams, MCSG Tech
",non-bug,https://github.com/nasa/cFE/issues/2160
Consistency in CFE coverage test helper macros,"**Is your feature request related to a problem? Please describe.**
The following helper macros are defined in `ut_support.h` and used in sb_UT.c, with the intent of applying to other modules:

- SETUP
- ASSERT
- ASSERT_EQ
- ASSERT_TRUE
- EVTCNT
- EVTSENT

These macros are all specific to/tuned toward CFE coverage testing (i.e. they are not generic) because they embed certain CFE patterns/assumptions, i.e. SETUP and TEARDOWN check for CFE_SUCCESS, the ""EVENT"" macros deal with the UT stub event capture logic, etc.  

**Describe the solution you'd like**
The genuinely CFE-specific macros should be updated with a `CFE_UtAssert_` prefix to indicate that they are assertion statements that are specific to CFE.

For macros which are actually generic, such as ""ASSERT_EQ"", consider replacing this with the existing generic `UtAssert_INT32_EQ` macro.

Also for wider coverage test applicability and consistency of logging output, should also add the following:

- `VOIDCALL` macro to consistently log functions that do not have a return value, but still want to include the full text of what was called
- `RESOURCEID_EQ` macro to check for equality between resource ID values (INT32_EQ is not sufficient here because one should not assume that IDs are integers)

**Additional context**
Discussed in CCB 2021-06-16, as part of issue #596 and improving the test log output

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1626
CFE_ES_ERR_SYS_LOG_TRUNCATED Value Isn't Unique,"**Describe the bug**
`CFE_ES_LIB_ALREADY_LOADED` and `CFE_ES_ERR_SYS_LOG_TRUNCATED` are both defined to be `((int32)0x44000028)` (in [`cfe_error.h`](https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_error.h#L634)).

**To Reproduce**
N/A

**Expected behavior**
I think `CFE_ES_ERR_SYS_LOG_TRUNCATED` should instead be set to `((int32)0xC4000029)` or some other unique value that follows the status code format.

**Code snips**
N/A

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
Keegan Moore, NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/846
Move writing of the event log to the FS background service,"**Is your feature request related to a problem? Please describe.**
Writing the event log could take a while and is done in the EVS context by command:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L126-L136

**Describe the solution you'd like**
Move to the FS background service like the rest of the logs

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1405
Remove redefine of NULL,"**Is your feature request related to a problem? Please describe.**
The following code will **always** redefine/define NULL which wasn't the intent
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L128-L130

**Describe the solution you'd like**
Remove, NULL is standard C

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/842
Add SPARC-VxWorks6.7 BSP,Need to add a SPARC VxWorks 6.7 OSAL BSP so that the OSAL unit tests for VxWorks can build and run right from the OSAL directory out of the box (assuming that you have an installation of the SPARC BSP and VxWorks 6.7 tool chain),non-bug,https://github.com/nasa/osal/issues/148
cFS fails to start if executed off of a large NFS home directory,"**Describe the bug**
If cFS is executed off of an NFS home directory, an output similar to the following is created:

```
OS_BSP_Initialize():Maximum user msg queue depth = 1024
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 8
CFE_PSP: Default Spacecraft ID = 42
CFE_PSP: Default CPU Name: ciu
OS_Posix_GetSchedulerParams():190:Policy 1: available, min-max: 1-99
OS_Posix_GetSchedulerParams():190:Policy 2: available, min-max: 1-99
OS_Posix_TaskAPI_Impl_Init():376:Selected policy 2 for RT tasks, root task = 99
OS_Posix_TaskAPI_Impl_Init():392:Could not setschedparam in main thread: Operation not permitted (1)
CFE_PSP: OS_FileSysAddFixedMap() failure: -106
CFE_PSP: Starting the cFE with a POWER ON reset.
CFE_PSP: Clearing out CFE CDS Shared memory segment.
CFE_PSP: Clearing out CFE Reset Shared memory segment.
CFE_PSP: Clearing out CFE User Reserved Shared memory segment.
1980-079-14:44:45.09866 POWER ON RESET due to Power Cycle (Power Cycle).
1980-079-14:44:45.09868 ES Startup: CFE_ES_Main in EARLY_INIT state
CFE_PSP: CFE_PSP_AttachExceptions Called
1980-079-14:44:45.09887 ES Startup: CFE_ES_Main entering CORE_STARTUP state
1980-079-14:44:45.09888 ES Startup: Starting Object Creation calls.
1980-079-14:44:45.09888 ES Startup: Calling CFE_ES_CDSEarlyInit
1980-079-14:44:45.09899 ES Startup: Calling CFE_EVS_EarlyInit
1980-079-14:44:45.09901 Event Log cleared following power-on reset
1980-079-14:44:45.09902 ES Startup: Calling CFE_SB_EarlyInit
1980-079-14:44:45.09903 ES Startup: Calling CFE_TIME_EarlyInit
1980-012-14:03:20.00000 ES Startup: Calling CFE_TBL_EarlyInit
1980-012-14:03:20.00005 ES Startup: Calling CFE_FS_EarlyInit
EVS Port1 42/8/CFE_EVS 1: cFE EVS Initialized. cFE DEVELOPMENT BUILD v6.8.0-rc1+dev236 (Codename: Bootes), Last Official Release: cfe v6.7.0
1980-012-14:03:20.15048 SB:Registered 4 events for filtering
EVS Port1 42/8/CFE_SB 1: cFE SB Initialized
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_SB
EVS Port1 42/8/CFE_ES 1: cFE ES Initialized
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_ES
EVS Port1 42/8/CFE_ES 2: cFS Versions: cfe v6.8.0-rc1+dev236, osal v5.1.0-rc1+dev184, psp v1.5.0-rc142. cFE chksm 6317
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_ES
EVS Port1 42/8/CFE_ES 91: Mission demo4-128-g78d3e72-dirty.HALO, CFE git version: demo3-210-g1ede295, OSAL git version: demo3-182-g957e598-dirty
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_ES
EVS Port1 42/8/CFE_ES 92: Build 202101150523 phamj@va31spax062h.atk.com
EVS Port1 42/8/CFE_TIME 1: cFE TIME Initialized
EVS Port1 42/8/CFE_TBL 1: cFE TBL Initialized. cFE DEVELOPMENT BUILD v6.8.0-rc1+dev236 (Codename: Bootes), Last Official Release: cfe v6.7.0
1980-012-14:03:20.50107 ES Startup: Finished ES CreateObject table entries.
1980-012-14:03:20.50108 ES Startup: CFE_ES_Main entering CORE_READY state
1980-012-14:03:20.50108 ES Startup: Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr EC = 0xFFFFFF94
1980-012-14:03:20.50108 ES Startup: CFE_ES_Main entering APPS_INIT state
1980-012-14:03:20.50109 ES Startup: CFE_ES_Main entering OPERATIONAL state
EVS Port1 42/8/CFE_TIME 21: Stop FLYWHEEL
^C1980-012-14:05:59.69445 ExceptionID 0x1110000 in TaskID 0: Caught SIGINT
1980-012-14:05:59.69446 Processor Reset count not reached (0/2)
CFE_PSP: Exiting cFE with PROCESSOR Reset status.

CFE_PSP: Shutdown initiated - Exiting cFE
OS_FileSysMountVolume_Impl():251:ERROR: Cannot create mount point ./cf: File exists
```

- cfe_es_startup.scr cannot be found. 

**To Reproduce**
Execute Linux cFS binary off of an NFS home directory

**Expected behavior**
cFS reads cfe_es_startup.scr successfully

**Code snips**
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/os/posix/src/os-impl-filesys.c#L247-L254

**System observed on:**
Linux (RHEL7),  OSAL 5.1.0-rc1+dev184

**Reporter Info**
John N Pham, Northrop Grumman
",non-bug,https://github.com/nasa/osal/issues/762
Add Symmetric multiprocessing (SMP) support,"Flight and ground computing platforms contain multiple processing cores. Symmetric multiprocessing (SMP) support must be added to the OSAL to fully utilize these platforms.
",non-bug,https://github.com/nasa/osal/issues/210
"Allow users to pass project args to the ""static-analysis"" cppcheck reusable workflow","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The issue observed in nasa/osal#1324 is due to the fact that cppcheck is being executed in each C source file in isolation.  In this case it does not see the definition of `UT_DEFAULT_STUB` and thus does not know how to examine this line.

**Describe the solution you'd like**
cppcheck allows command line options to specify various project-specific preprocessor settings, such as `-D` and `-U` options to specify if a macro is set or unset, respectively, as well as `-I` option(s) indicating where to find include files.

Furthermore, with CMake, the `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON` option causes cmake to export a json file containing the full include path being used, which can then be passed to cppcheck via the `--project` option.  With this, the code will be examined using the configuration that is actually being compiled.

**Describe alternatives you've considered**
1. Skip checking of UT stubs in general (but stubs could have bugs like uninitialized vars and things that cppcheck could flag)
2. Remove use of `UT_DEFAULT_STUB`, as this will not be checkable unless the definition of this macro is also supplied.

**Additional context**
Using `--project` causes cppcheck to be much more thorough in its results.  In particular, it now ""sees"" the `common_types.h` file and the ifdef macros that exist in there, and it will check each macro both ways.  The upside to this is it finds more potential issues, particularly with ifdef branches that aren't regularly used, but the downside is that it significantly increases the runtime of cppcheck as it tests all the permutations.  This may need to be limited if it becomes excessive.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFS/issues/607
Implement single endianness handling pattern,"**Is your feature request related to a problem? Please describe.**
Multiple ways to handle target endian in various contexts:
fsw/cfe-core/src/es/cfe_es_perf.c:CFE_ES_SetupPerfVariables - determines it at runtime
fsw/cfe-core/src/tbl/cfe_tbl_internal.c:CFE_TBL_ReadHeaders - determines it at runtime
fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c:CFE_TBL_DumpToFile - determines it at runtime
fsw/cfe-core/src/fs/cfe_fs_api.c:CFE_FS_ReadHeader (and many other functions in here) - determines it at runtime

fsw/cfe-core/src/inc/ccsds.h has macros for conversion (CFE_MAKE_BIG*) who’s implementation depends on SOFTWARE_BIG_BIT_ORDER
There’s an endian flag in the CCSDS header
osal/src/os/inc/common_types.h defines either SOFTWARE_LITTLE_BIT_ORDER or SOFTWARE_BIG_BIT_ORDER based on 8 possible defines

cfe/cmake/sample_defs/cpu1_platform_cfg.h defines CFE_PLATFORM_ENDIAN as either CCSDS_LITTLE_ENDIAN or CCSDS_BIG_ENDIAN, and also has a separately configurable CFE_PLATFORM_TIME_CFG_BIGENDIAN

CCSDS extended header has an endian bit

Then there’s all the different ways the various defines are used and custom swapping routines, examples:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L310-L326
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/tbl/fsw/src/cfe_tbl_internal.c#L1210-L1227
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_endian.h#L61-L69

Note some cfe_endian.h macros evaluate `n` multiple times.

**Describe the solution you'd like**
See https://github.com/nasa/cFE/issues/202#issuecomment-536680998 for a compile time suggestion:
#define IS_LITTLE_ENDIAN (((union {unsigned x; char c;}){1}).c)

**Describe alternatives you've considered**
None

**Additional context**
Triggered from email discussion on setting another endian flag in a toolchain file for an app to use

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping - @klystron78 @ejtimmon @wmoleski
",non-bug,https://github.com/nasa/cFE/issues/1209
Add build name and number,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/50
Comment copy/paste errors in os-shared-idmap.h,"**Is your feature request related to a problem? Please describe.**
Various comments aren't right:
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L162-L169
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L180-L187
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L226-L254
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L294-L304

Just examples, needs full scrub

**Describe the solution you'd like**
Prefer removal of the function name in the comment, and update the actual comment to match purpose.  Even better is switch to doxygen comments.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/825
OS_open: 644 is not 0644,"The 3rd parameter to OS_open is the set of permission
bits to be applied if a file is created. The typical
value of these is `0644` which is an OCTAL constant
representing read-write for owner, read-only for group
and read-only for everyone else.

In several places in the `file-api-test` the value `644`
without the leading zero -- thus decimal 644 -- is passed,
which would create a file using mode `01204` octal, which
is write-only to owner, no access to group and read-only
access to everyone else. Oh, and the sticky bit set.

In most cases, these erroneous 644 values are not used, but
it was used in one case. On the theory that bad code should
be repaired, I propose fixing all of them when fixing the
erroneous test.
",bug,https://github.com/nasa/osal/issues/90
Pointer precision loss casting pointer down to (int,"Pointer precision loss casting pointer down to (int), causing segfault on 64-bit. See:

https://github.com/nasa/SC/blob/43392d75418998a75f04b64416a3323be1d51918/fsw/src/sc_rtsrq.c#L641",bug,https://github.com/nasa/SC/issues/1
CFE_TIME fails to build with CFE_TIME_CFG_SRC_MET set to TRUE,"This issue was introduced by #35 - some structure accesses hiding behind this conditional compile needs to have "".Payload"" added to them.

As a separate enhancement, the Bamboo tests should be updated to build using this configuration, along with the many other TIME options available.",bug,https://github.com/nasa/cFE/issues/83
Apply standard code style,"**Is your feature request related to a problem? Please describe.**
Inconstant style

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/pull/30 and https://github.com/nasa/ci_lab/pull/28

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sch_lab/issues/30
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/tblCRCTool is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/tblCRCTool while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/tblCRCTool/issues/43
Remove cfeesugshellsrv section of users guide,"**Is your feature request related to a problem? Please describe.**
ES shell command removed, documentation outdated.

**Describe the solution you'd like**
Clean documentation:
https://github.com/nasa/cFE/blob/fcaa1d0c6b9e8244b071b8cafc765078680e24b4/docs/src/cfe_es.dox#L804-L813
and all references (fix Next/Prev)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1149
make fails under MacOS,"**This may be a cFS issue (initial step is to check out cFS and work from its directory, but then cfe/Makefile is copied and used).  The issue may be moved to the appropriate repo.**

When following the instructions in the README on a Mac (either Intel or Apple Silicon ARM) , the first make fails with 
```
CMake Error at cmake/arch_build.cmake:542 (message):
  Do not know how to set CFE_SYSTEM_PSPNAME on Darwin system
Call Stack (most recent call first):
  CMakeLists.txt:120 (prepare)
```

This looks like a regression or maybe an untested case of #629 .

Steps to reproduce the behavior:

On a Mac, follow the instructions in the README to clone the project and then start the first make:

```
git clone https://github.com/nasa/cFS.git
cd cFS
git submodule init
git submodule update
cp cfe/cmake/Makefile.sample Makefile
cp -r cfe/cmake/sample_defs sample_defs
```
so far so good
```
 make SIMULATION=native prep
```
fails with first error message to console:
```
CMake Error at cmake/arch_build.cmake:542 (message):
  Do not know how to set CFE_SYSTEM_PSPNAME on Darwin system
Call Stack (most recent call first):
  CMakeLists.txt:120 (prepare)
```

The CMakeError.log file says:

```
ld: library not found for -lSystem
```
but that may be a secondary cascade error.

I would expect it to compile without error.

This is observed on both a MacBook M1 and a Mac Pro (Intel), both with latest macOS (11.5.2) and toolchain (Xcode 11.5.1; cmake 3.20.5; AppleClang 12.0.5.12050022). zsh shell (but same result under bash).

Output of make attached:
[make_output.txt](https://github.com/nasa/cFE/files/7080111/make_output.txt)
[CMakeError.log](https://github.com/nasa/cFE/files/7080101/CMakeError.log)
[CMakeOutput.log](https://github.com/nasa/cFE/files/7080102/CMakeOutput.log)

",non-bug,https://github.com/nasa/cFE/issues/1917
CFE_SB_GetUserData needs functional test,"**Is your feature request related to a problem? Please describe.**
This function uses an overly simplistic method to determine the location of the payload structure:
1. It uses CFE_MSG calls to determine if its is CMD/TLM (assuming it has been initialized with a proper MsgId)
2. It adds the size of the corresponding header to the base pointer.

Problem is, this does not take into account compiler-added padding, which might be present depending on the size of the header and the alignment requirements of the payload member.

**Describe the solution you'd like**
Deprecate this function?  

Would need to come up with a solution for the places its used in CFS apps.

**Describe alternatives you've considered**
Move logic to CFE_MSG, where it knows details (alignment) of the header but that is unfortunately not really going to help, since its the alignment of the payload that is the issue here.  That is not known anywhere in a generic API.

**Additional context**
In EDS it could actually be made to work properly, because with this tool one knows the layout of the structures and whether or not padding exists - so it can get the real offset of the payload member.

Without EDS, there isn't much way to fix this, other than to ensure both TLM and CMD headers have explicit padding added to make them multiples of the worst-case payload alignment.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1981
Updating UT to work with CMake build system,"I am looking for a methodology or guide to build and run or convert unit tests which are based on gcov for apps which have not been updated such as:
* https://github.com/nasa/CFS_CI
* https://github.com/nasa/CFS_TO
etc.
 The only app updated is: 
 * https://github.com/nasa/CF 

I have viewed the diffs between 2a292d041a3644844517cc10344abbf0c4ecccc2 and 7a48a8b2e8f4f5b103748685f076d9dc8b3b66fb but it is still not clear why things were shifted around. Can anyone clarify 

",non-bug,https://github.com/nasa/CF/issues/247
Remove dependencies on deprecated cFE elements,"With:
`cfe/CMakeLists.txt:add_definitions(""-D_ENHANCED_BUILD_ -DCFE_OMIT_DEPRECATED_6_6"")`
build errors:
```
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_Lab_AppMain’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:115:24: error: ‘CFE_ES_APP_RUN’ undeclared (first use in this function)
     uint32 RunStatus = CFE_ES_APP_RUN;
                        ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:115:24: note: each undeclared identifier is reported only once for each function it appears in
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_TaskInit’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:171:22: error: ‘CFE_EVS_BINARY_FILTER’ undeclared (first use in this function)
                      CFE_EVS_BINARY_FILTER);
                      ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:179:51: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
         CFE_EVS_SendEvent(CI_SOCKETCREATE_ERR_EID,CFE_EVS_ERROR,""CI: create soc
                                                   ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:218:44: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
     CFE_EVS_SendEvent (CI_STARTUP_INF_EID, CFE_EVS_INFORMATION,
                                            ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_ProcessCommandPacket’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:258:50: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
             CFE_EVS_SendEvent(CI_COMMAND_ERR_EID,CFE_EVS_ERROR,
                                                  ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_ProcessGroundCommand’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:284:53: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
             CFE_EVS_SendEvent(CI_COMMANDNOP_INF_EID,CFE_EVS_INFORMATION,
                                                     ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_ResetCounters’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:367:46: error: ‘CFE_EVS_INFORMATION’ undeclared (first use in this function)
     CFE_EVS_SendEvent(CI_COMMANDRST_INF_EID, CFE_EVS_INFORMATION,
                                              ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_ModifyFileSizeCmd’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:400:52: error: ‘CFE_EVS_DEBUG’ undeclared (first use in this function)
     CFE_EVS_SendEvent(CI_MOD_PDU_FILESIZE_CMD_EID, CFE_EVS_DEBUG,
                                                    ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_CorruptChecksumCmd’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:426:52: error: ‘CFE_EVS_DEBUG’ undeclared (first use in this function)
     CFE_EVS_SendEvent(CI_CORRUPT_CHECKSUM_CMD_EID, CFE_EVS_DEBUG,
                                                    ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_DropPDUCmd’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:484:44: error: ‘CFE_EVS_DEBUG’ undeclared (first use in this function)
     CFE_EVS_SendEvent(CI_DROP_PDU_CMD_EID, CFE_EVS_DEBUG, ""CI: Drop PDU\n"");
                                            ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_CapturePDUsCmd’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:508:29: error: ‘CFE_SB_HIGHEST_VALID_MSGID’ undeclared (first use in this function)
     if (CmdPtr->PDUMsgID <= CFE_SB_HIGHEST_VALID_MSGID)
                             ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:514:48: error: ‘CFE_EVS_DEBUG’ undeclared (first use in this function)
       CFE_EVS_SendEvent(CI_CAPTUREPDU_CMD_EID, CFE_EVS_DEBUG,
                                                ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:520:51: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
       CFE_EVS_SendEvent(CI_INVALID_MSGID_ERR_EID, CFE_EVS_ERROR,
                                                   ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_StopPDUCaptureCmd’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:546:53: error: ‘CFE_EVS_DEBUG’ undeclared (first use in this function)
       CFE_EVS_SendEvent(CI_STOP_PDUCAPTURE_CMD_EID, CFE_EVS_DEBUG,
                                                     ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:570:47: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
       CFE_EVS_SendEvent(CI_NOCAPTURE_ERR_EID, CFE_EVS_ERROR,
                                               ^
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_VerifyCmdLength’:
/home/jhageman/cFS/cFS-dev/apps/ci_lab/fsw/src/ci_lab_app.c:835:43: error: ‘CFE_EVS_ERROR’ undeclared (first use in this function)
         CFE_EVS_SendEvent(CI_LEN_ERR_EID, CFE_EVS_ERROR,
                                           ^
```",non-bug,https://github.com/nasa/ci_lab/issues/7
Timstamp all cFE generated SB messages,"**Is your feature request related to a problem? Please describe.**
SB Subscription Report message is not timestampted:

https://github.com/nasa/cFE/blob/6aaf5a3244e02af43c8ebb893ef413916dff5ef2/fsw/cfe-core/src/sb/cfe_sb_api.c#L1094-L1100

**Describe the solution you'd like**
Timestamp should be added here and anywhere else it's missing for all cFS generated SB messages:
```
CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_SB.SubRprtMsg);
```

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC
Originated from PACE/OCI",non-bug,https://github.com/nasa/cFE/issues/26
Add Xenomai BBB PSP,Add Xenomai BBB (Beagle Bone Black) PSP V1.0 as delivered from Matt Benson/Odyssey Space Research on 04/17/15,non-bug,https://github.com/nasa/PSP/issues/22
Consolidate command payload base types,"**Is your feature request related to a problem? Please describe.**
Many services define a service specific no-arg payload.  There's also many filename only commands with repeated definitions, and numerous others.

**Describe the solution you'd like**
Consolidate, define a common set and standardize parameter names.  Still can utilize unique payload/message names, but just typedef the generic ones.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1503
Apply standard formatting,"**Is your feature request related to a problem? Please describe.**
Various formatting styles in codebase

**Describe the solution you'd like**
Apply standard formatting, if it's an improvement then submit for fasttrack (minimize impacts to open work).  If standard format requires hand mods, update such that application of standard format in the future doesn't require repeat modification.

**Describe alternatives you've considered**
Leave as-is if not an improvement.

**Additional context**
Preparation activity for certification code review.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/625
Avoid using RAM to hold pointers to static const data,"**Is your feature request related to a problem? Please describe.**
Using RAM to point to static const data:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L59

Comment also applies to RamdiskMountPoint. (and to all of target_config.c)

**Describe the solution you'd like**
TBD - Needs resolution defined.  Ping @klystron78 @jphickey to resolve.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1440
"`goto` refactor broke engine initialization, blank sem_name is not an error","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Semaphore name being blank is not an error condition, it should simply skip the semaphore get by name call.  The recent refactor changed this behavior which causes the engine to crash.

Error introduced here:
https://github.com/nasa/CF/blob/eba87dfc5e9e1769df72815cdca52508c0afad39/fsw/src/cf_cfdp.c#L1046-L1084

Old code:
https://github.com/nasa/CF/blob/bff67f871cc88fbd7f2399a029aacd088112978c/fsw/src/cf_cfdp.c#L1029-L1064

**To Reproduce**
Initialize engine without a semaphore name defined

**Expected behavior**
Still initialize the transactions if the semaphore name is blank

**System observed on:**
Observed from CTF testing (on Linux I assume)

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/CF/issues/285
Add a CI action to build and execute the cFE coverage tests,"**Is your feature request related to a problem? Please describe.**
CI doesn't build and execute the cFE coverage tests

**Describe the solution you'd like**
Add

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1483
"Clean up ""-D"" compile time macros used in pc-linux build","The ""pc-linux"" PSP defines the following to be added to the compiler CFLAGS for __all__ files in the mission:

{{{-D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER -D__ix86__ -D_ix86_ -Dposix -DX86PC -D_REENTRANT -D_EMBED_ -DOS_DEBUG_LEVEL=3}}}

These were brought into the cmake build from the original build scripts in order to be consistent just in case any code required it.  However, they are unnecessary, many are not even used anywhere in CFE/OSAL, and potentially even wrong.  

The reality is that with Linux, the ""pc-linux"" is a general purpose PSP that can most likely be used on __any__ general-purpose development machine that runs Linux.  It is not limited to only x86 PC's, and in fact works just fine on ARM, PowerPC, and Microblaze targets too.

I have successfully used the (unmodified) pc-linux PSP to execute CFE on a BeagleBone Black (ARM) as well as an emulated PowerPC 440 based development machine.  In all these cases, the ""x86"" macros are wrong, and on the PowerPC, the EL/ENDIAN/SOFTWARE_LITTLE_BIT_ORDER are wrong too.

To summarize - I recommend removing **ALL** of these macros from the pc-linux build when using the cmake scripts (the old makefiles can stay as-is).


",bug,https://github.com/nasa/PSP/issues/21
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/LC/issues/34
Update API/error code documentation relative to OSReturnCode cases,"**Is your feature request related to a problem? Please describe.**
There are multiple cFE API's that can return OSReturnCodes (CFE_FS_ReadHeader, CFE_FS_WriteHeader, etc).  This isn't explicitly documented in the API or as part of CFEReturnCodes.

**Describe the solution you'd like**
Add documentation.  They don't conflict due to the severity bits/service bits.

**Describe alternatives you've considered**
Convert all return codes to the CFE set, but probably not worth it and could obscure source of error.

**Additional context**
Spawned from requested change in #1598

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1599
Remove all mentions of ASIST or ITOS artifacts from documentation,"Some of our doxygen docs still reference ASIST or ITOS artifacts. 

See 
cfs_mm repo: fsw/src/mm_msgdefs.h:l28



Imported from GSFCCFS-1929",non-bug,https://github.com/nasa/LC/issues/21
Wider adoption of 64 bit interval (generic timekeeping) pattern,"**Is your feature request related to a problem? Please describe.**
Some API's and implementations still use msec:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-select.h#L89
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-select.h#L54
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-select.h#L79

Consider refactor of timebase init with same pattern:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-timebase.c#L295

**Describe the solution you'd like**
Consider wider adoption of the generic 64 bit interval pattern

**Describe alternatives you've considered**
Leave as-is (future work).

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/850
Update TO_LAB to use osal_id_t typedef,"**Is your feature request related to a problem? Please describe.**
TO_LAB is using `uint32` type to hold its OSAL socket ID.

**Describe the solution you'd like**
Should use the `osal_id_t` typedef instead.

**Additional context**
Part of ongoing effort to update all framework code to use the typedef for OSAL IDs.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.",non-bug,https://github.com/nasa/to_lab/issues/60
CFE_ES_SYSTEM_LOG_SIZE Default Value is Too Small,The default value for the CFE_ES_SYSTEM_LOG_SIZE is set to 2K (2048).  This is not large enough to hold all the cFE startup system log entries.  It is recommended to increase this 1K larger (default 3072) ,bug,https://github.com/nasa/cFE/issues/112
Remove gen_sch_tbl submodule from framework,"This tool is specifically for the GSFC scheduler (a GSFC app), and is maintained by GSFC not the cFS framework community.",non-bug,https://github.com/nasa/cFS/issues/6
Trick OSAL,There is growing interest in being able to use the Trick OSAL/PSP so that a CFS build can be executed within a Trick simulation - basically allowing developers to fly unmodified FSW within an all SW simulation environment on their desktop.  The approach was used extensively and successfully on the Morpheus project.  The Trick OSAL/PSP were developed a few years ago.  Some work will be necessary to get them up and running again with the latest CFS.,non-bug,https://github.com/nasa/osal/issues/183
Add range to OS_TaskDelay test,"**Describe the bug**
When running cFS in a VM (e.g. QEMU) the timings and the system clock is not as precise/predictable.  As a result, I have occasionally seen the newly-added functional test for OS_TaskDelay fail as follows:

```
[BEGIN] 40 OS_TaskDelay
[ PASS] 40.001 ut_oscore_task_test.c:404 - OS_TaskDelay(100) (0) == OS_SUCCESS (0)
[ FAIL] 40.002 ut_oscore_task_test.c:408 - Elapsed time 98 msec, expected 100
[ PASS] 40.003 ut_oscore_task_test.c:413 - OS_TaskDelay(250) (0) == OS_SUCCESS (0)
[ FAIL] 40.004 ut_oscore_task_test.c:417 - Elapsed time 249 msec, expected 250
[  END] 40 OS_TaskDelay         TOTAL::4     PASS::2     FAIL::2     MIR::0     TSF::0     TTF::0     N/A::0   
```

**To Reproduce**
Execute osal_core_UT on a cFS system running in a VM

**Expected behavior**
Tests should pass reliably.

**System observed on:**
RTEMS 4.11.3 running in QEMU

**Additional context**
Likely related to some sloppiness in how the emulated real time clock works under a hypervisor.  Suggestion is to just extend the acceptable range a big (i.e. >=95 instead of >=100)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1080
"CFE ES Mempool code uses ""uint32"" where it should be ""cpuaddr""","Fix a leftover case of using uint32 where the intent is to store a memory address.  This is the start address in the ""Pool_t"" structure.",bug,https://github.com/nasa/cFE/issues/104
CF parameter configuration file reference incorrect in doxygen documentation,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen references non-existent file cf_def_cfg.c
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/docs/dox_src/cfs_cf.dox#L174-L175

**Describe the solution you'd like**
Update, file name is cf_def_config.c, and probably should clarify that this is a table and that there are get/set commands.
https://github.com/nasa/CF/blob/main/fsw/tables/cf_def_config.c

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/276
EVS improperly uses the EventCount member for incorrect appID filtering,"**Describe the bug**
The `EventCount` member of the EVS internal app data is intended to track the number of events sent by a particular app.

BUT - it is also overloaded to track if the event came from the wrong app, here:
https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/fsw/cfe-core/src/evs/cfe_evs_utils.c#L187-L194

The problem is that this is, by definition, invoked when the calling AppID is _wrong_ (not registered), but it is changing a field that is also potentially used for _valid_ (registered) AppIDs.  

**To Reproduce**
This can theoretically occur if an app calls `CFE_EVS_SendEventWithAppId()` using an old AppID value, for instance if an app was restarted it gets unregistered, and then gets a different AppID but refs to the old value could still exist.  The new AppID doesn't necessarily have the same slot in the table - in fact it shouldn't.  The old table entry might refer to a totally different app.

So if this happens it will corrupt/change the `EventCount` member on an unrelated app data entry.

This can be seen in the EVS telemetry, where if the ""unregistered"" event occurs it inadvertently creates a nonzero `AppMessageSentCounter` in the TLM data on an unrelated app that happens to share that slot in the table.

Also, if the counter was already nonzero because the table entry is in use by another (registered) app then this prevents the notification about the unregistered app from appearing at all.

**Expected behavior**
Should not overload the EventCounter to track a basically unrelated item - which is whether or not an ""unregistered"" event occurred on a different app that happened to map to the same entry.

Simple fix would be to just introduce a separate field to track this.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/897
Resolve cppcheck issues (and confirm they are getting flagged correctly),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Style warnings when running strict cppcheck:
```
$ cppcheck --force --inline-suppr --std=c99 --language=c --enable=warning,performance,portability,style --suppress=variableScope –inconclusive fsw/
...
[fsw/src/cf_codec.c:362] -> [fsw/src/cf_codec.c:364]: (style) Variable 'Limit' is reassigned a value before the old one has been used.
[fsw/src/cf_codec.c:669]: (style) Redundant pointer operation on 'optional_fields' - it's already a pointer.
[fsw/src/cf_codec.c:793]: (style) Redundant pointer operation on 'pecrc' - it's already a pointer.
[fsw/src/cf_codec.c:1067]: (style) Redundant pointer operation on 'plcrc' - it's already a pointer.
[fsw/src/cf_codec.c:1067]: (style) Redundant pointer operation on 'pecrc' - it's already a pointer.
```

**Describe the solution you'd like**
Confirm these are getting flagged in CI.

**Describe alternatives you've considered**
None

**Additional context**
- #205

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/216
Many string truncation warnings with newer GCC,"**Describe the bug**
Ubuntu has released 20.04 LTS which includes GCC 9.3.0.  When using this compiler it implements a much stricter (and often over-zealous) checking of string ops.

For instance: 
```
In file included from /usr/include/string.h:495,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_cds.c:49:
In function ‘strncpy’,
    inlined from ‘CFE_ES_RegisterCDSEx’ at /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_cds.c:299:12:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 38 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

**To Reproduce**
Build code with default config using GCC 9.3.0, with optimization enabled and full warnings.

**Expected behavior**
Code should build cleanly.

**System observed on:**
Ubuntu 20.04 LTS 64 bit.

**Additional context**
Unfortunately GCC warns about ANY construct which MIGHT truncate, even if truncation is anticipated and handled properly in the code.  GCC now declares that one is never allowed to truncate anything in a C library string operation, even if you read the manual and coded it correctly per the C spec, it's still wrong to GCC9.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/641
ut_assert header files not included in 'make osalguide',"**Describe the bug**
When building the osal guide with 'make osalguide' the ut_assert header files are not included

**To Reproduce**
Steps to reproduce the behavior:
1. make osalguide
2. browse guide, no ut_assert files present

**Expected behavior**
ut_assert files included in osal guide

**Code snips**
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/cmake/mission_build.cmake#L204-L208

**System observed on:**
RHEL 7.6

**Additional context**
Adding:
```    ""${osal_MISSION_DIR}/ut_assert/inc/*.h"" ```
after osconfig-example in the  above code includes ut_assert headers in the guide.

**Reporter Info**
Alan Gibson NASA GSFC/587
",non-bug,https://github.com/nasa/osal/issues/1129
UtAssert should enforce newline on messages only if its missing,"**Is your feature request related to a problem? Please describe.**
Currently the `UT_BSP_DoText` used by UtAssert appends a newline after every message, see here:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/ut_assert/src/utbsp.c#L184

However, in many calls to `UtPrintf()` the test author already included a `\n` in the format string, such as here:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/unit-tests/oscore-test/ut_oscore_task_test.c#L85

As a result there is extra whitespace in the log, example here:
https://gist.github.com/jphickey/ccb739d1f1cf6b36caca73e5ee9205cf#file-osal_core_ut-log-L391


**Describe the solution you'd like**
The append of the newline in `UT_BSP_DoText()` should only happen if the message did _not_ have a trailing newline already.  This will still accomplish the intent of making sure output messages end in a newline and do not run together, but will clean up extra unintended blank lines in the log files.

**Additional context**
This is mainly just a nitpick/pet peeve about the extra blank lines that come with ""UtPrintf"", but it also does potentially impact parsing log files with scripts. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/1002
Switch default linux toolchains back to posix (was posix-ng),"Removing last gen and next gen in to it's place in cfs_osal [cfs_osal:213], requires going back to posix for default toolchain.",non-bug,https://github.com/nasa/cFE/issues/357
Remove dependencies on deprecated SB APIs,"**Is your feature request related to a problem? Please describe.**
SB APIs deprecated in nasa/cFE#777

**Describe the solution you'd like**
Update to use MSG module.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/103
update OSAL for Class A & Associated unit tests,"The currently released OSAL unit tests may not fully run with OSAL 4.1.1.

JSC has made updates so that they run with Linux and ARINC653 OSAL 4.1.1.  

JSC is currently updating to work with VxWorks 6.7.  

These updates are being tracked in the JSC subversion repo and need to be pushed into a proper git branch and further work continued from there.",bug,https://github.com/nasa/osal/issues/45
Document available BSPs in trac wiki,"It would be helpful to construct a small Wiki page corresponding
to each Board Support Package giving a quick overview of
the platform for which support is being provided.

I suggest including hotlinks on each such page back into the doc
subtree of the specific BSP for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.",non-bug,https://github.com/nasa/osal/issues/26
Argument Cannot Be Negative ,"**Describe the bug**
tempFd is passed to a parameter that cannot be negative.

Function open("".reservedkeyfile"", 64, 448) returns a negative number.

**Expected behavior**
Add an if statement to ensure that tempFd is not a negative number. 

**Code snips**
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/pc-linux/src/cfe_psp_memory.c#L664

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/PSP/issues/312
Simplify config by inferring OSAL_SYSTEM_OSTYPE from OSAL_SYSTEM_BSPTYPE,"**Is your feature request related to a problem? Please describe.**
Currently the build requires that the user specify both OSAL_SYSTEM_BSPTYPE and OSAL_SYSTEM_OSTYPE.  This is redundant because each BSP only works with a specific OS.  

**Describe the solution you'd like**
The user should be allowed to specify only OSAL_SYSTEM_BSPTYPE, and the correct OS layer can be inferred automatically.

**Describe alternatives you've considered**
Continue as is, which increases user config burden and risk of misconfiguration

**Additional context**
see also nasa/cfe#632

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/432
Unit test build fails when multiple CPUs are defined,"**Describe the bug**
After updating some projects to the latest baseline, getting a new build failure:

```
[ 73%] Building C object ut_cfe_core_stubs/CMakeFiles/ut_cfe-core_stubs.dir/ut_es_stubs.c.o
cfe/fsw/cfe-core/ut-stubs/ut_es_stubs.c:37:10: fatal error: cfe_platform_cfg.h: No such file or directory
 #include ""cfe_platform_cfg.h""
          ^~~~~~~~~~~~~~~~~~~~
compilation terminated.
```

**To Reproduce**
The configuration of this project uses multiple CPUs that all share the same architecture (PPC) but different platform configs (cfe_platform_cfg.h).

**Expected behavior**
Build should succeed

**System observed on:**
 - Ubuntu 18.04 LTS 64-bit (build host)
 - Cross Compiling for PPC (embedded Linux)
 - Latest ""master"" baseline (2020-02-26)

**Additional context**
This is related to a recent change that separated the UT stubs from the CFE.  It works fine with only a single CPU/config, but if multiple CPUs are defined then this fails.  Unfortunately only testing this now - the CI/CD build only uses a single CPU/config.

Need to remove UT dependencies on a specific ""cfe_platform_cfg.h"" to fix this.  (stubs should not need this file, it is not a real implementation, it is just stubs).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/539
Fix inclusion of PSP internal headers from within public headers,"The PSP public {{{cfe_psp.h}}} file includes configuration and version information from another file which is located in the PSP platform-specific (internal) subdirectory.

Specifically, these headers are platform-specific and therefore must only be used within PSP itself:
* cfe_psp_config.h
* psp_version.h

Access to the values within these platform-specific includes should go through the public API rather than direct inclusion.",bug,https://github.com/nasa/PSP/issues/23
Deprecate OStask_id field from OS_task_prop_t,"**Is your feature request related to a problem? Please describe.**
This field is not necessarily applicable to all OS types and it breaks the abstraction.  OSAL should not be reporting the raw/unabstracted values back to the application.

This field is fundamentally broken in any environment where the underlying OS task ID isn't convertible to a `uint32`.  This includes real systems, such as:

- Cygwin, where `pthread_t` is a compound data type, not an integer (POSIX specifically allows this)
- Systems where the task ID is actually pointer to the TCB (in which case it will be 64 bits on 64 bit systems)

Currently this field serves one purpose, which is to allow the CFE ES exception processing to find the OSAL task ID associated with the exception.   However, this design is being reworked in nasa/cfe#411 where more of the exception processing is done in the CFE PSP.  With this, there should be no need for applications to ever use the `OStask_id` member.

**Describe the solution you'd like**
The `OStask_id` member of `OS_task_prop_t` should be marked as deprecated.  As a replacement, an new API can be added which can be invoked by the PSP/BSP to aid in exception processing.  This new API should use an abstract pointer and size, not assume that the task identifier information fits within a 32-bit integer.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/437
CFE_ES mempool returns buffers that are not aligned,"Per email from Ryan Prentice to the cfs-community mailing list on 7/25:

Issues with Tables containing doubles

I tracked this down to be a MemPool issue.  I’ve posted part of the stack trace below that is responsible for assigning memory from the mempool for the Table data.

 
CFE_ES_GetPoolBuf() - cfe_esmempool.c:389      
CFE_TBL_Register() - cfe_tbl_api.c:295   

Line 389 of cfe_esmempool.c sets the address of the pointer where the table data will be loaded.

{{{
         *BufPtr          = (uint32 *)(BdPtr + 1);
}}}
 

Below are some values I pulled out of the debugger.

{{{
BdPtr                  BD_t *                 0x42A6D100      
sizeof(*BdPtr)         unsigned long int      0x0000000C       
(uint32 *)(BdPtr + 1)  uint32 *               0x42A6D10C      
*BufPtr                uint32 *               0x42A6D10C      
}}}

In my table, the first piece of data is a double and the above code would have that double start at an address that is not double word aligned.  To test that this is in fact that location that the problem originates, I added four bytes to *BufPtr and set it to 0x42A6D110 in the debugger, forcing it to be double word aligned.  I then hit play and crossed my fingers, and what do ya know, it worked.  Adding an int32 as the first member of the table allowed me to proceed past the issue, but I feel like that is a very fragile solution.

 

Issues with SB Messages containing doubles

I’m getting unaligned memory exceptions when receiving a message that contained doubles from the SB.  It appears the Payload isn’t guaranteed to begin at a double word boundary.  There is no way to pad for this since the Payload is aligned sometimes and unaligned others.  I’ve pasted the stack trace below.

 ",bug,https://github.com/nasa/cFE/issues/230
Use `void *` for `CFE_ES_PoolCreateNoSem` memory pointer,"**Is your feature request related to a problem? Please describe.**
Other routines use `void *`, `CFE_ES_PoolCreateNoSem` uses `uint8 *`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1193

**Describe the solution you'd like**
Make consistent

**Describe alternatives you've considered**
Maybe there was a reason, analyze and if so document

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1317
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/PSP is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/PSP while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/PSP/issues/258
"Fix OSAL build when using RTEMS ""pc686"" BSP","In the RTEMS distribution, the rtems_interrupt_catch() function is not always defined.  It depends on the BSP build-time options, specifically if the macro ""CPU_SIMPLE_VECTORED_INTERRUPTS"" is defined set to FALSE then the API call is not available.

This causes a link error when building with the ""pc686"" BSP since OS_IntAttachHandler() calls rtems_interrupt_catch().

This ticket will simply add a preprocessor check for the above condition, and if rtems_interrupt_catch() is not available then OS_IntAttachHandler() should return OS_ERR_NOT_IMPLEMENTED.

",bug,https://github.com/nasa/osal/issues/42
Exception and Reset Log possible race conditions,"**Describe the bug**
CFE_ES_ClearERLogCmd and CFE_ES_WriteToERLog both modify shared CFE_ES_ResetDataPtr values.  CFE_ES_ProcessCoreException and CFE_ES_ResetCFE both use CFE_ES_WriteToERLog (both are API's, so could be out of ES context).

**To Reproduce**
Looks to me like if CFE_ES_ClearERLogCmd gets interrupted by the processing of an app core exception, the log could get corrupted.

**Expected behavior**
No race.

**Code snips**
See functions above.

**Versions**
 - latest cFS bundle dev branch

**Additional context**
Not observed, via code review.

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/411
Remove CFE_PSP_MemSet use for addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/SC/issues/31
CFE_ES_GetAppID missing null pointer check,"**Describe the bug**
CFE_ES_GetAppID doesn't have a null pointer check and seg faults if passed one. 

**To Reproduce**
Call it with a null pointer 

**Expected behavior**
Should return CFE_ES_BAD_ARGUMENT

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC
",non-bug,https://github.com/nasa/cFE/issues/1267
CFE_ES_RegisterCDSEx stub mismatch,"**Describe the bug**
Mismatch in CFE_ES_RegisterCDSEx implementation and stub.

**To Reproduce**
Inspection

**Expected behavior**
Matching stub.

**Code snips**
https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/src/es/cfe_es_cds.c#L308
https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/ut-stubs/ut_es_stubs.c#L972-L975

**System observed on:**
NA

**Additional context**
Looks like it was introduced in daf6c04, part of fix #56

**Reporter Info**
Jacob Hageman - NASA/GSFC (from stakeholder email)",bug,https://github.com/nasa/cFE/issues/1010
Doxygen event documentation needs scrub,"**Is your feature request related to a problem? Please describe.**
Doxygen event output doesn't match code in at least 1 case, see CFE_ES_INITSTATS_INF_EID

**Describe the solution you'd like**
Scrub event doxygen and confirm it matches actual output (and type)

**Describe alternatives you've considered**
Maybe #define the string as a single definition and link in documentation

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/508
Default linux port got changed again... ,"**Describe the bug**
Processor ID was set to 10, ci uses it to deconflict ports.  Broke toolchain.

**To Reproduce**
Normal run, reports CI is listening on 1243 (should be 1234)

**Expected behavior**
Use historical port by default.

**Code snips**
https://github.com/nasa/cFE/blob/db829294eba01b88683e679d58435f65ca02f826/cmake/sample_defs/targets.cmake#L103

**System observed on:**
 - Hardware: cFS Dev server
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
Broke in #776.  Really should fix nasa/cfs#56 (positive check in CI of proper execution and exit), and this would have been caught.

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/882
Improper Null Termination of Table Names,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
It is not guaranteed that the source or destination arguments of `strncpy` for table entry names assure null-termination. Many standard functions such as strcpy, strlen, strcmp among others rely on arrays of characters to be Null terminated.

**Expected behavior**
[`CFE_SB_MessageStringGet`](https://github.com/nasa/cFE/blob/e35c3da83a7b3adf20ac2d909cf4c36f4370632c/modules/sb/fsw/src/cfe_sb_util.c#L169)

Alternatively considered:
[FM strncpy approach](https://github.com/nasa/FM/blob/2be3511211e756058236b30abe40b0de372bd2f1/fsw/src/fm_child.c#L1227-L1228)
However, this approach won't necessarily handle non-terminated sources properly.

**Code snips**
https://github.com/nasa/CS/blob/1ce636e4f2f04a0c98f905a3cc2bda9d05a3995d/fsw/src/cs_table_processing.c#L697
https://github.com/nasa/CS/blob/1ce636e4f2f04a0c98f905a3cc2bda9d05a3995d/fsw/src/cs_table_processing.c#L768

**System observed on:**
Imported from JSC static analysis audit

**Additional context**
The source table data was loaded via `CFE_TBL_Load` so yes it came from a file which should be considered ""untrusted input"".  Therefore, there is no guarantee that DefEntry->Name (the source here) is null-terminated.  However, the current implementation is relying on the assumption that the source and dest are the same length, and thus the function won't read more than it writes, so it's safe-ish.

**Reporter Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/CS/issues/62
Add a functional test example,"**Is your feature request related to a problem? Please describe.**
APIs should have functional tests that verify implementation within operational context (full stack, not stubs).  Coverage tests can not fully exercise intended functionality since they utilize stubs.

**Describe the solution you'd like**
Add example use of the cFE Functional test framework

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_lib/issues/57
Refactor UT_SetForceFail,"Describe the bug
UT_SetForceFail was refactored to UT_SetDefaultReturnValue for https://github.com/nasa/osal/issues/559. It needs to have its name changed here as well.

Expected behavior
Change UT_SetForceFail  to UT_SetDefaultReturnValue 

Additional context
Part of https://github.com/nasa/osal/issues/559

Reporter Info
Alex Campbell",non-bug,https://github.com/nasa/PSP/issues/214
remove Doxygen-generated HTML files,"Currently, we keep a snapshot of the HTML files produced by Doxygen
in the Git repository. This is a potential source of problems as it
might be out of date.

It is the sense of the CCB that we should remove these from the Git
repository; instead, when we make a release, we will run the command
to generate them, and include the HTML tree in the published image.
",non-bug,https://github.com/nasa/cFE/issues/255
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/CS/issues/13
Update cFS-GroundSystem instructions in README,"**Is your feature request related to a problem? Please describe.**
Send commands, receive telemetry section is out of date in README for python3

**Describe the solution you'd like**
Update instructions or link to submodule instructions?

**Describe alternatives you've considered**
N/A

**Additional context**
See also https://github.com/nasa/cFS-GroundSystem/issues/50

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/43
Table load refactor for CFE_TBL_Load()/CFE_TBL_LoadCmd() overlap and complexity reduction,"**Is your feature request related to a problem? Please describe.**
There's code commonalities between CFE_TBL_LoadCmd() and CFE_TBL_Load().

Also varying use of return vs status codes and many if layers within table load should be refactored to reduce complexity.  Goal (per SW Sys Eng Handbook guidance) is cyclomatic complexity of <= 10.

**Describe the solution you'd like**
Code should be consolidated between CFE_TBL_Load() and CFE_TBL_LoadCmd().  Refactor to simplify/separate into functions.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/600
CI updates - add static analysis and format in workflow,"**Is your feature request related to a problem? Please describe.**
Travis-CI not transitioned to github actions

**Describe the solution you'd like**
Transition CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/122
Add flag at prep stage to OMIT_DEPRECATED,"Need an easy way for users (and the CI system) to omit all deprecated elements.  Something like

make OMIT_DEPRECATED=true prep

which would then internally add all the -DCFE_OMIT_DEPRECATED -DOSAL_OMIT_DEPRECATED and so on flags when building everything.",non-bug,https://github.com/nasa/cFE/issues/355
" Typos in documentation, print statements, and comments","**Is your feature request related to a problem? Please describe.**
Found multiple typos throughout the codebase


**Describe the solution you'd like**
Correct grammar and spelling errors

**Describe alternatives you've considered**
None

**Additional context**
Retroactively created for #1137",non-bug,https://github.com/nasa/osal/issues/1147
Remove old MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",non-bug,https://github.com/nasa/ci_lab/issues/4
bin-sem-flush-test reporting work incorrectly,"**Describe the bug**
There is an issue in bin-sem-flush-test.c.  Within the BinSemFlushCheck function - lines 229, 230, 242, and 243 contain the wrong variable name (task_1_work as opposed to task_2_work & task_3_work).  

**To Reproduce**
Run Test.

**Expected behavior**
Expect ""Task 2/3 work = %u"" to correspond with task_2/3_work variables.

**Code snips**
void BinSemFlushCheck(void)
{
    int32 status;

    /* At first, No task should have done any work yet (all blocked) */
    UtAssert_True(task_1_work == 0, ""Task 1 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_2_work == 0, ""Task 2 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_3_work == 0, ""Task 3 work = %u"",(unsigned int)task_1_work);

    status = OS_BinSemFlush(bin_sem_id);
    UtAssert_True(status == OS_SUCCESS, ""BinSem1 flush Rc=%d"", (int)status);

    /* After more delay the work done should be nonzero on all tasks */
    /* NOTE - There is a slight race condition here as the task could be blocked
     * by something else other than the bin sem.
     */
    OS_TaskDelay(4000);

    UtAssert_True(task_1_work != 0, ""Task 1 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_2_work != 0, ""Task 2 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_3_work != 0, ""Task 3 work = %u"",(unsigned int)task_1_work);

    UtAssert_True(task_1_failures == 0, ""Task 1 failures = %u"",(unsigned int)task_1_failures);
    UtAssert_True(task_2_failures == 0, ""Task 2 failures = %u"",(unsigned int)task_2_failures);
    UtAssert_True(task_3_failures == 0, ""Task 3 failures = %u"",(unsigned int)task_3_failures);

}

**System observed on:**
NA

**Additional context**
NA

**Reporter Info**
Dan Knutsen
NASA Goddard Space Flight Center
",non-bug,https://github.com/nasa/osal/issues/347
version_info.cmake looks for wrong tags,"In the current repo we are tagging OSAL releases in the form ""osal-rel-XX"".

However, the version_info.cmake file, which instructs the cmake build system how to filter tags when building the version strings, is looking for ""OSAL-XX"" (caps).

Minor fix.
",bug,https://github.com/nasa/osal/issues/190
OS_ModuleUnload() for statically loaded module may segfault,"**Describe the bug**
Calling `OS_ModuleUnload()` on a statically loaded module will still attempt to call `dlclose()` but the handle is NULL because no module was loaded.  At least on Linux/Glibc this actually causes a segmentation fault.

**To Reproduce**
Using the CFE framework switch any app (e.g. sample_app) from a regular dynamic app to a static app.
Build and run CFE, then shutdown with CTRL+C.
The shutdown ends up calling `OS_DeleteAllObjects()` which in turn will trigger this bug - one gets a segfault instead of a clean exit.

**Expected behavior**
Should shutdown cleanly.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/637
osal lgtm warning ,"**Describe the bug**
Reference issue #320.

os-impl-bsd-sockets.c

```
line 217, 568:
if (addrlen == 0 \|\| addrlen > OS_SOCKADDR_MAX_LEN)
--
  | Comparison is always false because addrlen <= 28.

line 574:
Accessor->sockaddr.sa_family = sa_family;
--
  | The variable sa_family may not be initialized here.
```

shared/osapi-idmap.c
```

line 529:
return_code = OS_ObjectIdMap(idtype, idvalue, &obj->active_id);
--
  | The variable obj may not be initialized here.

line: 545
*array_index = local_id;
--
  | The variable local_id may not be initialized here.

line 549:
*record = obj;
--
  | The variable obj may not be initialized here.
```

shared/osapi-sockets.c

```
return_code = OS_SocketAccept_Impl(local_id, conn_id, Addr, timeout);
--
  | The variable conn_id may not be initialized here.
```

shared/osapi-time.c

```
line 466:
OS_ObjectIdRefcountDecr(timebase);
--
  | The variable timebase may not be initialized here.
```

os-posix.h

```
This header file should contain a header guard to prevent multiple inclusion.
```

**Reporter Info**
Anh Van, NASA Goddard. 
",non-bug,https://github.com/nasa/osal/issues/328
add locking during test runs,"The build support scripts presume they have unique ownership
of the test target. This assumption may be violated if the
script is run manually.

This can be resolved by using the flock(1) command to set up
an advisory lock within the shell script.
",non-bug,https://github.com/nasa/osal/issues/59
Potential acceptance of commands with invalid CFDP class,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The check for CFDP class could let a ""class 0"" or negative class message through

The code that checks if the class is valid looks like
```c
if(cfdp_class > CF_CFDP_CLASS_2 )
{
CF_CmdRej(); 
return;
}
```

if `cfdp_class` is zero or negative this check might pass and let through an invalid command.


**To Reproduce**
n/a, haven't tested yet.

**Expected behavior**

Only accept Class-1 or Class-2. All other values should be rejected. 

**Code snips**

https://github.com/nasa/CF/blob/b950c9d2fe46edd96adcd5e247689efe4d382d81/fsw/src/cf_cmd.c#L150
https://github.com/nasa/CF/blob/b950c9d2fe46edd96adcd5e247689efe4d382d81/fsw/src/cf_cmd.c#L184




**System observed on:**
code-only check

**Additional context**
n/a

**Reporter Info**
Gerardo E. Cruz-ortiz, NASA",bug,https://github.com/nasa/CF/issues/213
"Target name inconsistencies - ""cf"" vs. ""cf_app""","The name patterns used by other CFS applications do not have an ""app"" suffix.  The ""sample_app"" is the only exception here, it only has this suffix to differentiate from the ""sample_lib"".

The build scripts do rely on some naming conventions - in particular the name of the directory should match the name of the main application target.  Since this repository is called ""CF"" (not CF_APP) and is cloned into a directory called ""cf"", the target name should also be ""cf"".  On the other hand, if the target is named ""cf_app"" this may problems with things like table builds and app installation, because the names in scripts won't match.

Recommendation is to change the cmake files to build this as a target named only `cf` and drop any `app` suffix.
",bug,https://github.com/nasa/CF/issues/88
Simplify Function Pointer Manipulations,"There are a number of places within the CFS Projects where the usage of Function Pointers is somewhat obfuscated by the inclusion of redundant operators. Removing those operators can improve the clarity of the code.

The redundancies are based on code that, when written, did not properly base itself on the following aspects of Function Pointers in the C programming language.

1. Function names decay into Function Pointers in the same way
   that Array names decay into pointers to their first elements,
   which means that an `&` operator is redundant when setting a
   pointer to point at a function. For the classical example of
   this, see most `qsort` examples, where no `&` is applied to
   the comparison function when passing it as the last argument,
   which has type ''pointer to function...''

2. The function call operator `(`''args''`)` operates on a
   function pointer -- so every function call you see actually
   is invoking the above decay semantics. This means that
   the `*` operator is ''not'' needed when calling a function
   via a function pointer. Happily, this also often means that
   you also do not need an extra level (or two?!) of parentheses
   to asure that the `*` is applied to the function pointer and
   not to the return value.

3. Calling a function pointed to by a structure member is a
   very common operation, and with the above in mind, note that
   there is no parsing or evaluation order ambiguity; no extra
   parentheses are required to assure that `.` and `->` and the
   function call operator are evaluated in the proper order.

My task -- embodied in this ticket -- is to seek out cases in
the OSAL source code where redundant operations are applied
to function pointers (at assignment sites ''and'' at call sites),
and provide recommended changes to improve clarity.

Specific examples will accumulate in the Comments below.

Ticket to be closed when my scan of the project is complete,
and all call sites have been resolved (whether the resolution
is to improve them now, file a ticket for later improvement,
or where we will be leaving the code unchanged).

''(This also makes the code robust against the rare but troublesome
case where an external function changed from a function to
a function pointer ... we may never do this, but it is always
good to foster good code hygene.)''",non-bug,https://github.com/nasa/osal/issues/121
API's Null pointer check in void methods ,"**Is your feature request related to a problem? Please describe.**
Some pointers are used in methods that return void so the OS_CHECK_POINTER function doesn't work in those methods since it returns an error code. There needs to be a way to check that pointers are valid inside void methods. 

**Describe the solution you'd like**
Need to discuss the best solution 

**Additional context**
related to #742, That branch has this comment marking everywhere it comes up. 
    /* TODO: void pointer, https://github.com/nasa/osal/issues/765 */

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/osal/issues/765
Remove OS_Milli2Ticks reference from documentation (deprecated),"**Is your feature request related to a problem? Please describe.**
Deprecating per nasa/osal#104

**Describe the solution you'd like**
Removes references from the developers guide.

**Describe alternatives you've considered**
N/A

**Additional context**
nasa/osal#104

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/798
Move OS_mount and similar platform specific (or even pre-load of cFS actions) outside OSAL,"**Is your feature request related to a problem? Please describe.**
OS_mount is more in-line with PSP concept.  Occasionally done by OS before even loading cFS.

**Describe the solution you'd like**
Consider moving/removing from OSAL

**Describe alternatives you've considered**
Leave as-is, not critical (consider for future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/847
Add option for padding bytes / trailer at end of CF PDU,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Some deployment scenarios for CF may require some extra platform-specific trailing data to be appended to the end of the PDUs, for example a custom CRC or error check/correction code.

**Describe the solution you'd like**
To facilitate this, CF should offer an option to add extra padding bytes to the end of the PDU so that the platform may fill these bytes with the desired trailing data.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/CF/issues/361
Unique WARN_LOGFILE for documentation builds,"**Is your feature request related to a problem? Please describe.**
`WARN_LOGFILE` is set the same for both cfe documentation builds since it's set in cfe-common.doxyfile.in.  Potential conflict during a parallel build.

**Describe the solution you'd like**
Set unique warning file names for usersguide and doc build.

**Describe alternatives you've considered**
None

**Additional context**
#1378 would also deconflict, but would deconflict CI artifacts (no longer would need to rename in related Action).  This was mentioned in #389, but updated to make specific to the undocumented warnings.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1589
Remove old MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",non-bug,https://github.com/nasa/sample_lib/issues/1
Static analysis workflow fails due to strict cppcheck style warnings,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/MD/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/MD/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Workflow failure, see https://github.com/nasa/MM/runs/6357801210?check_suite_focus=true

```
[fsw/src/mm_load.h:177] -> [fsw/src/mm_load.c:803]: (style, inconclusive) Function 'MM_FillMem' argument 1 names different: declaration 'DestAddr' definition 'DestAddress'.
```

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MM/issues/19
Add Instructions on How to Use Workflows in Contributing.md,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Users may not know how to use our GitHub Actions Workflows. 

**Describe the solution you'd like**
Add instructions on how to use our Github Actions Workflows under Writing High Quality Code. Instructions includes where workflows can be found, how to analyze or interpret results, how to run and configure workflows. Provide links for additional information on each workflow. 

**Describe alternatives you've considered**
This can be added in a new section. 

**Additional context**
Reference: https://docs.github.com/en/actions/quickstart
Example: https://github.com/TommyLin/focus-stacking/wiki/Github-Actions

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/240
Deprecate OS_NetworkGetId and OS_NetworkGetHostName,"**Is your feature request related to a problem? Please describe.**
OS_NetworkGetId and OS_NetworkGetHostName are not really all that useful in an OS agnostic sense.

**Describe the solution you'd like**
Deprecate/remove

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/852
Missing migration path for CFE 6.5 ES enum values,"In CFE 6.5, ES introduced scoped names for several enumerated constants and deprecated their old names.
For example, `CFE_ES_RUNSTATUS_APP_RUN` was introduced to replace `CFE_ES_APP_RUN`. While developers were encouraged to migrate to the new names and an example `sed` command was given, the old names remained usable unless `CFE_ES_ENABLE_NEW_ENUM_NAMES` was defined.

CFE 6.6 introduced a different style of scoped names, e.g. `CFE_ES_RunStatus_APP_RUN`, and provided aliases to the pre-6.5 names, but did not provide compatibility aliases for the 6.5 versions.

The result is that developers who attempted to follow the new naming scheme in 6.5 found their apps failing to build in 6.6, whereas using the deprecated name would have continued to work.

CFE 6.6 should provide aliases for the names from 6.5 as well as the pre-6.5 names.

For example, in addition to 
{{{#!C
#define CFE_ES_APP_RUN CFE_ES_RunStatus_APP_RUN
}}}
there should be
{{{#!C
#define CFE_ES_RUNSTATUS_APP_RUN CFE_ES_RunStatus_APP_RUN
}}}",bug,https://github.com/nasa/cFE/issues/318
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/CS/issues/52
OS_ModuleLoad() 2nd and 3rd args need to be const,"The current integration candidate for CFS_CFE includes code
that passes (char const *) pointers as the 2nd and 3rd
parameters to the OS_ModuleLoad() function. In order for this
to compile without warnings, these parameters of this function
need to carry `const` qualifiers in the header defining the
function and in the function itself.

The function does not modify data pointed at by these
parameters, so the `const` qualifier is appropriate.

This change does not require changes to callers (but does
allow them to pass pointers to `const` data).

This change will need to be included in the 2015-03-10
integration candidate synchronized across all projects.

( I thought I had seen a ticket for this, but was unable
  to lay hands on it. )
",bug,https://github.com/nasa/osal/issues/46
Improve ES reset area memory allocation,"**Is your feature request related to a problem? Please describe.**
Currently the PSP provides a single API `CFE_PSP_GetResetArea` which is sized according to a user-specified `CFE_PLATFORM_ES_RESET_AREA_SIZE`. with a note that says:
>This area must be sized large enough to hold all of the data structures. It should be automatically sized based on the CFE_ES_ResetData_t type, but circular dependancies in the headers prevent it from being defined this way.

This is far from ideal, and in the default configuration 170KiB is allocated for this area where only 129KiB is actually used, wasting a fair bit of memory.

Furthermore, the circular dependency issue was only really a problem in the classic build.  In the CMake build the ""target_config"" mechanism can be utilized here to make this a non-issue.

**Describe the solution you'd like**
The PSP generally allocates these memory spaces dynamically at start up anyway.  
- In the MCP750 this is based on `sysMemTop()` and the addresses are calculated from this base.  
- In pc-linux these are SysV shared memory segments.  
- In pc-rtems these are just `malloc()`'ed to simplify usage in QEMU (data does not survive a reset).

CFE ES should publish the _actual_ size required for its persistent data structures, and this actual size should be used when computing the addresses of these memory areas, rather than a compile-time fixed size which is almost certainly either too big or too small.

**Additional context**
This issue is related to changes occurring in the Exception and Reset Log implementation (issues #411, #76).  As part of this more of the ER log (or in particular, storing of exception context) will be moved to the PSP rather than being fully managed by ES.  This in turn changes the size of the CFE_ES_ResetData_t structure substantially, and exposes the weakness/issues in how this is being currently allocated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/610
"Move ""count"" global to test global struct","**Describe the bug**
Should not have random global variables around, particularly variables with simple/common names, as it may silently overwrite an existing variable (i.e. if any other app/lib makes a global called ""count"" some OS's will just happily bind to the existing variable, not make a separate instance, when dynamic refs are resolved after loading).

https://github.com/nasa/cFE/blob/cc8c9a1d79dfdf6c098f18431d852a9e8e28592e/modules/cfe_testcase/src/es_task_test.c#L36

**Expected behavior**
Now that we have a proper global struct, `CFE_FT_Global_t` - This should be moved into it.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1733
Table Services Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
TBL requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cTBL6011 - HK requirement not consistent (update wording)
- cTBL6301 - Free app resources handled by ES_AppExit, delete
**- cTBL6700 - Maximum tables (delete, mission config)**
**- cTBL6701 - Maximum simultaneous loads and dumps (delete, mission config)**
- NEW API Requirements:
    - cTBL6313: CFE_TBL_Validate
    - cTBL6314: CFE_TBL_DumpToBuffer
    - cTBL6315: CFE_TBL_Modified cfe-999
    - cTBL6316: CFE_TBL_Manage cfe-995
- NEW Cmd Requirements:
    - cTBL6013: CFE_TBL_DeleteCDSCmd
    - cTBL6013.1: Delete CDS - Table In Use
    - cTBL6013.2: Delete CDS - Not Critical Table
    - cTBL6013.3: Delete CDS - Already Deleted

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT* - Bold items missed in first round",non-bug,https://github.com/nasa/cFE/issues/513
"Complexity of ARGCHECK macros trigger JPL rule 24, multiple statements per line","**Is your feature request related to a problem? Please describe.**
Consider reworking ARGCHECK.  Although it reduces repeated lines in code, it does ""hide"" a return within the macro and isn't really the simplest macro when combined with OS_CHECK_STRING or similar.  Note it works... it's just not a trivial macro so ends up triggering coding standard warnings.

**Describe the solution you'd like**
Although we did just disable the warning in https://github.com/nasa/cFS/pull/561, it's a warning that would be good to apply to non-macro code at least.  Really this issue trades macro complexity with function complexity where there is no real right answer in my mind.  The point if this issue is to at least document this for future consideration, not necessarily back out the changes.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1285
return for a timeout is negative 4,"https://github.com/nasa/osal/blob/afb5f7ba3ea48823e44490ce4258aa92a073087f/src/os/shared/src/osapi-file.c#L208

Not sure which layer of abstraction to report this but the comment states that a timeout should return 0.  However, on Linux/portable BSD... the eventual call to OS_DoSelect is returning OS_ERROR_TIMEOUT (-4) and flowing that all the to the OS_TimedRead API. I would prefer it to be ""caught"" and returned as 0 at some point but.. more than anything.. just need the comment to match.",non-bug,https://github.com/nasa/osal/issues/970
"CFE_ES_RunLoop RunStatus parameter is in/out, documented as in","**Is your feature request related to a problem? Please describe.**
Documented as in:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/core_api/fsw/inc/cfe_es.h#L362-L366

But set:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/es/fsw/src/cfe_es_api.c#L540-L545

**Describe the solution you'd like**
Update API documentation.  Description is also somewhat incomplete, since it's also a way for the app to self exit for the typical case where it's a condition in the while loop.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFE/issues/1762
Remove commented out code where it doesn't have a benefit,"**Is your feature request related to a problem? Please describe.**
Pages of commented out code warnings show up in static analysis.

**Describe the solution you'd like**
General scrub and removal where it's not necessary.

**Describe alternatives you've considered**
None, any valuable comments will be retained

**Additional context**
CodeQL warnings

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/785
OS_SockAddr_t alignment issue on some architectures,"**Describe the bug**
On some CPU architectures that have strict alignment requirements, the OS socket address storage buffer triggers a warning/error about casts that increase alignment.  For example:

```
os-impl-bsd-sockets.c:200:9: error: cast increases required alignment of target type [-Werror=cast-align]
    sa = (const struct sockaddr *)Addr->AddrData;
```

**To Reproduce**
Build on an architecture that has strict alignment requirements (e.g. SPARC, MIPS, etc)

**Expected behavior**
Should build cleanly, no warnings.

**System observed on:**
 - MIPS Linux (QEMU)

**Additional context**
Not likely to be a ""real"" alignment issue as this specific instance follows a uint32 value, so it will already have 32 bit alignment already.  Adding a union wrapper will squelch the warning though.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/295
Add API for obtaining system health statistics,"**Is your feature request related to a problem? Please describe.**
CFS apps (such as HS in particular) need to monitor and report the health of the system, in particular CPU usage.  Unfortunately this info can vary wildly and there is no standardized way of getting it via POSIX or other OS APIs - it is generally only obtainable via platform-specific access methods such as the `/proc` filesystem on Linux.

**Describe the solution you'd like**
Design an API that can obtain system health statistics.  Initially this must support per-core CPU usage, but should be extendable to support arbitrary variables such as temperature, network+disk I/O stats, RAM+swap use, etc.  Basically anything that is typically shown in a PC ""health monitor"" app.

**Additional context**
Initially the CPU usage stats would allow nasa/HS#3, nasa/HS#4, and nasa/HS#85 to be resolved.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/385
"resolve ""-m32"" CFE classic build issues","The classic CFE build historically built for 32-bit x86 linux,
on 32-bit x86 linux build machines.

Building on a 64-bit x86 Linux server requires the use of the ""-m32""
flag, but ONLY when the target is the classic 32-bit x86 linux. This
also requires that the server has 32-bit goodies, often ""multilib"" is
the thing you need to google if this is busted.

Currently, inserting this flag where it is missing or removing it where
it is present requires editing files, which is a speedbump for developers
and a blocker for automatic systems when building both 32-bit x86 and
any other target.

Need to set up the classic makefiles so that we default to -m32 not being
present, and allow it to be inserted on demand from the command line or
via an environment variable (at the developer's option, both need support).",bug,https://github.com/nasa/cFE/issues/151
CFE_ES_CleanupTaskResources attempts to delete child task twice,"**Describe the bug**
CFE_ES_CleanupTaskResources appears to attempt to delete a child task twice, first via CFE_ES_CleanupObjectCallback and subsequently via a direct call to OS_TaskDelete

**To Reproduce**
On Linux, call CFE_ES_RESTART_APP on an app that has a child task, such as CI, FM, or HS
In VxWorks, can induce also by inducing an exception causing an application restart

**Expected behavior**
App should exit and restart cleanly

**Code snips**
See CFE_ES_CleanupTaskResources 

**System observed on:**
 - PC, SP0-s
 - OS: Linux, VxWorks
 - Versions [e.g. cFE 6.7.12, OSAL 5.0.11, PSP 1.4.8, CI, FM, HS]

**Additional context**
My colleague Alan Wang attempted the following:
```
I purposely caused a program exception to each of the following tasks (built from n cFE Version 6.7.6.0)  to see whether CFE can restart them or not.
 
SCH,   CI,   TO,  HS,   HK,  SC,   DS,   LC,  FM,  MD,  MM,   and CS.
 
CFE successfully (at least on the surface) started all of them except CI, HS, and FM.
 
-> 
program
Exception current instruction address: 0x05266828
Machine Status Register: 0x02029230
Condition Register: 0x24000882
Exception Syndrome Register: 0x08000000
Task: 0x53a6888 ""CI""
0x53a6888 (CI): task 0x53a6888 has had a failure and has been stopped.
0x53a6888 (CI): The task has been terminated because it triggered an exception that raised the signal 4.
1980-012-14:16:59.59263 CFE_ES_RestartApp: Restart Application CI Initiated
1980-012-14:17:04.43385 CFE_ES_CleanUpApp: CleanUpTaskResources for Task ID:10 returned Error: 0xC4000026
EVS Port1 66/1/CFE_ES 41: Restart Application CI Failed: CleanUpApp Error 0xC4000023.
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
 
-> 
program
Exception current instruction address: 0x054f12cc
Machine Status Register: 0x02029230
Condition Register: 0x24000888
Exception Syndrome Register: 0x08000000
Task: 0x53a7110 ""HS""
0x53a7110 (HS): task 0x53a7110 has had a failure and has been stopped.
0x53a7110 (HS): The task has been terminated because it triggered an exception that raised the signal 4.
1980-012-14:11:48.58489 CFE_ES_RestartApp: Restart Application HS Initiated
1980-012-14:11:54.84338 CFE_ES_CleanUpApp: CleanUpTaskResources for Task ID:15 returned Error: 0xC4000026
EVS Port1 66/1/CFE_ES 41: Restart Application HS Failed: CleanUpApp Error 0xC4000023.
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
 
-> 
program
Exception current instruction address: 0x0553d814
Machine Status Register: 0x02029230
Condition Register: 0x24000888
Exception Syndrome Register: 0x08000000
Task: 0x53a8220 ""FM""
0x53a8220 (FM): task 0x53a8220 has had a failure and has been stopped.
0x53a8220 (FM): The task has been terminated because it triggered an exception that raised the signal 4.
1980-012-14:09:03.19939 CFE_ES_RestartApp: Restart Application FM Initiated
1980-012-14:09:08.63372 CFE_ES_CleanUpApp: CleanUpTaskResources for Task ID:22 returned Error: 0xC4000026
EVS Port1 66/1/CFE_ES 41: Restart Application FM Failed: CleanUpApp Error 0xC4000023
```
Another colleague John Hueber reported the following:

> CI doesn’t restart when commanded because it calls CFE_ES_ExitApp with the wrong status (running). 
> If I put a 5 second task delay in CI_AppMain before calling CFE_ES_ExitApp the tasks restarts fine.
> It looks like whenever CFE_ES_ExitApp gets called before the task is deleted then the restart is unsuccessful.
> If the task is deleted before it gets to CFE_ES_ExitApp then the restart is successful.
> If the task has child tasks then it takes longer to get to deleting the main task because the child task is in the list of resources that have to be deleted.
> There is a bug in this part because deleting the resources of the task also deletes child tasks, and when the resources are deleted CFE_ES_CleanUpApp tries to delete child tasks (again), which fails and the failure prevents a restart.
> 
> I put CI in apps/hs/fsw/tables/hs_xct.c (HS_XCT_TYPE_APP_MAIN) and apps/hs/fsw/tables/hs_amt.c (HS_AMT_ACT_APP_RESTART)
> then caused an exception in CI no-op processing by clearing an instruction. With the 5 second delay in CI_AppMain the restart was successful.
> Without the delay the restart is unsuccessful.
> 

**Reporter Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/cFE/issues/684
Microsecond round up code doesn't round up.,"**Describe the bug**
Spawned from #1 

The code comment claims it rounds up to never return zero.  The formula implemented doesn’t actually round up in all cases, since generally when casting a float/double to an int you lose the fractional part (truncation, not rounding).  So the code is not self-consistent.  It’s not a POSIX or OS issue, it’s that the code doesn’t do what it says it does.  The API document doesn’t specify a non-zero guarantee.

https://github.com/nasa/osal/blob/bfa7a33020e9a77221352a99bd2dbee4860ba852/src/os/posix/ostimer.c#L284-L290

Similar misleading comment at:

https://github.com/nasa/osal/blob/bfa7a33020e9a77221352a99bd2dbee4860ba852/src/os/posix/ostimer.c#L231-L232

For what it’s worth, on Linux (our Ubuntu dev system) this code reports 100 ticks per second, and 10000 usec per tick.  But if you pass in high values for ticks per second, it does return zero when it claims to round up (try 2000000 ticks per second).

**To Reproduce**
Steps to reproduce the behavior:
1. Compile
```
#include <stdio.h>
void main()
{
  float num = 0.7;
  printf(""float = %f, cast = %d\n"", num, (int)num);
}
```
2. Execute:
```
float = 0.700000, cast = 0
```

**Expected behavior**
Expected code to match comment, round up to not equal zero.  Algorithm doesn't work as claimed in comment.

**System observed on:**
 - cFS development server
 - OS: 4.4.0-146-generic #172-Ubuntu
 - Versions: n/a, sample code shows behavior (although I poked in cFE to cause the same thing)

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Jacob Hageman/NASA-GSFC",non-bug,https://github.com/nasa/osal/issues/12
Add CFE_PSP_GetProcessorName() API,"**Is your feature request related to a problem? Please describe.**
The build configuration specifies a spacecraft ID, CPU/Processor ID, and a CPU/Processor Name, but the PSP API only gives runtime access to two of the three:

```
uint32 CFE_PSP_GetSpacecraftId   (void)
uint32 CFE_PSP_GetProcessorId    (void)
```


**Describe the solution you'd like**
Should add:
```
const char *CFE_PSP_GetProcessorName    (void)
```

**Describe alternatives you've considered**
Continue to offer incomplete information from PSP API.

**Additional context**
related to nasa/cfe#710

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/165
Remove stray terminators,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/CS/blob/acfd017777098fe9383cec37d96699a9da6aac02/fsw/src/cs_cmds.c#L106

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CS/issues/38
Split header files into external and internal components,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Configuration and header files for this app currently have mixed scope - some items apply globally (mission) and some only affect the internal app behavior.  

**Describe the solution you'd like**
Split headers into single scope, so they contain only public/global items (i.e. those that affect CMD/TLM/Table definitions) or they contain private/internal items.  The latter would be things that are only used within the local application code and do not affect the interface.

**Additional context**
Similar to nasa/HS#84.   This helps stabilize the interface, so configuration items that do change the interface are clearly marked in a separate file and the user is more aware of the impact the changes will have.  It's also important for EDS, where some of these files are generated - keeping a single scope allows for simple source selection vs. `#ifdef`s.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/FM/issues/101
cFE 6.6 Documentation Updates,"This ticket will be used for all cFE 6.5 documentation updates including the VDD. A listing of the needed documentation updates will be added to this ticket as tickets, requiring code updates, are reviewed and determined there is an associated documentation change.",non-bug,https://github.com/nasa/cFE/issues/251
Fix type mismatches and remove unnecessary typecasting,"This ticket is to fix up areas of the code that have type mismatches or other unnecessary typecasting.

* In some areas, the standard ""int"" type is used when it should be the OSAL int32/uint32 type.  
* In other areas, values are cast to certain types when it is not necessary to do so because the compiler will automatically do the right thing.  

In the latter case, the type cast should be removed, because in certain situations it can actually interfere with the compiler doing the right thing and make it do the //wrong// thing instead.  An example of this is casting to ""int"" with operands that are actually unsigned types and/or different widths.  In the case that the forced ""int"" is a negative value, a sign extension might be performed and this might produce an unexpected result.  In general, a cast should only be used when there is a good reason why the compiler's default conversion rules are not sufficient.


",bug,https://github.com/nasa/cFE/issues/57
Add functional verification of HS8006 and HS8006.1,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/HS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/HS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
HS8006: Upon any initialization, HS shall wait until the cFE startup synch has been received indicating all Applications have started.
HS8006.1: If the startup-synch is not received in <PLATFORM_DEFINED> seconds, HS shall begin processing.

These are difficult to verify in CFT, so they need to be verified in unit test by ensuring CFE_ES_WaitForStartupSync is called with a platform defined timeout.

**Describe the solution you'd like**
Add verification in the unit tests.

**Describe alternatives you've considered**
None

**Additional context**
Test case: https://etdjira.gsfc.nasa.gov/browse/GSFCCFS-1927

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/HS/issues/23
Add Contributing Guide ,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the PSP repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/PSP/issues/270
Small typos in developers guide,"**Describe the bug**
""Definition"" and ""Negligible"" are misspelled in the developers guide. ",non-bug,https://github.com/nasa/cFE/issues/1550
Split shell code out to support optional inclusion,"**Is your feature request related to a problem? Please describe.**
Execute in shell functionality is undesirable for some security conscious applications.

**Describe the solution you'd like**
Allow for optional inclusion (like network option?), respond as not implemented when not included.

**Describe alternatives you've considered**
Discussed security at length, diverse use cases require flexibility for user to decide.

**Additional context**
POSIX issue found in LGTM

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/354
Unit tests fail to build when extended headers enabled,"**Describe the bug**
As a test of the most recent integration candidate, I attempted to verify operation with extended headers but the unit test code fails to build in this configuration.

The following errors exist in `ut_sb_stubs.c`:
```
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c: In function ‘CFE_SB_GetMsgId’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:293:31: error: ‘CFE_SB_CMD_MESSAGE_TYPE’ undeclared (first use in this function); did you mean ‘CFE_SB_NO_MESSAGE’?
               MsgId = MsgId | CFE_SB_CMD_MESSAGE_TYPE;
                               ^~~~~~~~~~~~~~~~~~~~~~~
                               CFE_SB_NO_MESSAGE
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:293:31: note: each undeclared identifier is reported only once for each function it appears in
In file included from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe_sb.h:43:0,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe_evs_msg.h:41,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe_evs.h:42,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe.h:51,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:36:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c: In function ‘CFE_SB_SetMsgId’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:500:42: error: implicit declaration of function ‘CFE_SB_RD_APID_FROM_MSGID’; did you mean ‘CFE_SB_INVALID_MSG_ID’? [-Werror=implicit-function-declaration]
   CCSDS_WR_APID(MsgPtr->SpacePacket.Hdr, CFE_SB_RD_APID_FROM_MSGID(MsgId) );
                                          ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:294:92: note: in definition of macro ‘CCSDS_WR_APID’
 #define CCSDS_WR_APID(phdr,value)  ((((phdr).StreamId[0] = ((phdr).StreamId[0] & 0xF8) | ((value >> 8) & 0x07))) ,\
                                                                                            ^~~~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:502:42: error: implicit declaration of function ‘CFE_SB_RD_TYPE_FROM_MSGID’; did you mean ‘CFE_SB_HK_TLM_MSG’? [-Werror=implicit-function-declaration]
   CCSDS_WR_TYPE(MsgPtr->SpacePacket.Hdr, CFE_SB_RD_TYPE_FROM_MSGID(MsgId) );
                                          ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:305:91: note: in definition of macro ‘CCSDS_WR_TYPE’
 #define CCSDS_WR_TYPE(phdr,value)   ((phdr).StreamId[0] = ((phdr).StreamId[0] & 0xEF) | ((value << 4) & 0x10))
                                                                                           ^~~~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:509:46: error: ‘CFE_PLATFORM_ENDIAN’ undeclared (first use in this function)
   CCSDS_WR_ENDIAN(MsgPtr->SpacePacket.ApidQ, CFE_PLATFORM_ENDIAN);
                                              ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:350:110: note: in definition of macro ‘CCSDS_WR_ENDIAN’
 #define CCSDS_WR_ENDIAN(shdr,val)        ( (shdr).APIDQSubsystem[0] = ((shdr).APIDQSubsystem[0] & 0xFB) | (((val) & 0x01) << 2) )
                                                                                                              ^~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:513:52: error: implicit declaration of function ‘CFE_SB_RD_SUBSYS_ID_FROM_MSGID’; did you mean ‘CFE_SB_ALLSUBS_TLM_MSG’? [-Werror=implicit-function-declaration]
   CCSDS_WR_SUBSYSTEM_ID(MsgPtr->SpacePacket.ApidQ, CFE_SB_RD_SUBSYS_ID_FROM_MSGID(MsgId));
                                                    ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:353:109: note: in definition of macro ‘CCSDS_WR_SUBSYSTEM_ID’
 #define CCSDS_WR_SUBSYSTEM_ID(shdr,val)  (((shdr).APIDQSubsystem[0] = ((shdr).APIDQSubsystem[0] & 0xFE) | ((val & 0x0100) >> 8)) ,\
                                                                                                             ^~~
```

**To Reproduce**
Build according to instructions, but set:
`#define MESSAGE_FORMAT_IS_CCSDS_VER_2` 
in mission config.

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 18.04 LTS 64-bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/636
Remove use of OS_PACK,"**Is your feature request related to a problem? Please describe.**
OS_PACK shouldn't be used.

**Describe the solution you'd like**
Remove it.

**Describe alternatives you've considered**
None

**Additional context**
nasa/osal#644

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/sample_app/issues/105
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_lib/issues/44
"Update Developer's Guide to use sample App, create markdown version","**Is your feature request related to a problem? Please describe.**
update developer's guide to use sample app instead of qq, create markdown version.

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/361
Move set of SO_REUSEADDR to bind/listen,"**Is your feature request related to a problem? Please describe.**
Opening every socket as SO_REUSEADDR isn't needed:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L151

**Describe the solution you'd like**
Move to more appropriate function

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/860
CFE_ES_GetTaskInfo: Task ID Not Valid: 0,"I get the following message when I try to publish a message on the software bus from within a call back function that is called by a timer. 

CFE_ES_GetTaskInfo: Task ID Not Valid: 0

Steps to reproduce the behavior:
[sample_app.txt](https://github.com/nasa/cFS/files/3848156/sample_app.txt)
- Download the attached sample_app.txt
- Rename .txt to .c
- Replace apps/sample_app/fsw/src/sample_app.c with the renamed sample_app.c file
- compile and run core-cpu1.

** code info **
Please note that the time call back function in the attached sample_app is at the very end of the file. The timer is initialized within the app's initialization function.

**System observed on:**
 - x86_64
 - OS: [e.g. Linux 4.15]
 - Versions [cFS repository at commit hash: 044476b (current master branch as on 11/14)]

**Reporter Info**
NASA Langley/NIA


Any thoughts on how to resolve this is greatly appreciated.

",non-bug,https://github.com/nasa/cFS/issues/25
Cryptic failure when running CFS as non-root,"When running the CFS without elevated privileges, the output that indicates an os failure doesn't express errors with scheduler policy. The current output under these conditions is:
```
CFE_PSP: Default Reset Type = PO
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 1
CFE_PSP: Default Spacecraft ID = 42
CFE_PSP: Default CPU Name: cpu1
CFE_PSP: Starting the cFE with a POWER ON reset.
CFE_PSP: OS_API_Init() failure
```
The origin of this issue comes from https://github.com/nasa/osal/blob/155e9ebcd6d1930890231a44237e6883d229d22c/src/os/posix/osapi.c#L692

A failure to set the schedule policy should probably have a special error message indicating both why it failed and the recommended course of action.",non-bug,https://github.com/nasa/osal/issues/300
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/SC/issues/19
CFE_EVS_GenerateEventTelemetry should check return code from CFE_SB_SendMsg(),"**Is your feature request related to a problem? Please describe.**
EVS, when called to send events, eventually calls down to CFE_EVS_GenerateEventTelemetry() which sends the event to the ports and to the SB via CFE_SB_SendMsg(). However, it currently does not check the return code from SendMsg().

**Describe the solution you'd like**
GenerateEventTelemetry() should report an error to SysLog (and the ports?) if it's unable to send the event to the SB (preferably including the original event inside the SysLog error report.)

**Describe alternatives you've considered**
Leaving it as it is, it's unlikely that CFE_SB_SendMsg() would generate an error.

**Additional context**
Note also that if SendMsg() [really SendMsgFull()] generated an error, it would send an event through EVS, causing a loop between SB code and EVS code (that will likely go on until the system crashes). Again, this condition is unlikely, but this logic should be fixed to prevent loops.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/599
report submodule SHA in travis job log,"**Is your feature request related to a problem? Please describe.**
It would be helpful to know exactly what versions of everything Travis is doing a CI against.

**Describe the solution you'd like**
Adding ""git submodule"" and ""git rev-parse HEAD"" to the Travis script.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFS/issues/84
Implement better wait for status change in VxWorks/RTEMS,"**Is your feature request related to a problem? Please describe.**
As a follow on to previous PR #678, this implements a new ""impl"" function which waits for a global table change to complete using an OS-specific primitive.  But only POSIX/pthreads was initially updated to use a proper wait primitive for this operation.  For VxWorks and RTEMS, these continue to use a simple unlock - task delay - re-lock and poll for the change.

This works but can potentially introduce noticable extra/unnecessary delay.  In particular, during task startup the parent task is using the accessing record at the same time the child starts up and also needs to access the same record.  Therefore the child task will hit this wait condition.  On POSIX the child resumes immediately once the parent task has completed its use of the record.  But currently for VxWorks and RTEMS they must wait for the Task Delay to expire.

**Describe the solution you'd like**
Need to investigate/consider the various sync primitives that the OS provides, and use something more appropriate that will not add extra unnecessary delay or polling.

**Describe alternatives you've considered**
Keep polling.  It isn't ""broken"" in a strict sense - the contention should be resolved and the right thing will happen after the delay expires.  It's just not what the user might expect (that is, there might be a millisecond or two delay between OS_TaskCreate returning and the user task actually running).

**Additional context**
RTEMS Barrier might be an option.  However I do not see any way to sync a barrier with a condition (like a POSIX condition variable) - so these leave open the possibility that the other task finishes its operation _just before_ the current task is about to wait - meaning it will end up waiting for an event that has already happened.

But so long as a timeout is _also_ used, that means it will just fall back to the timeout - so if this happens its not worse than what is implemented now.

Originally discussed in review of #678 at CCB 2020-12-09

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/684
CFE_ES_WaitForStartupSync() -- behavior if timeout reached?,"I'm a little confused by the CFE_ES_WaitForStartupSync() timeout, there's no way to determine if the timeout was reached (except looking at wall clock time elapsed) and what should the application do if the timeout is reached (if anything)? I'm guessing that the caller should just proceed assuming startup has completed even if the timeout was reached, but perhaps this can be made clear in the documentation for this function?

I plan to use this for SBN but perhaps I should be using CFE_ES_WaitForSystemState() instead? The comments imply CFE_ES_WaitForStartupSync() is a convenience and may be deprecated?

https://github.com/nasa/cFE/blob/1d3e4cdcb67be21032663f1227c8fbe81e9ff5a1/modules/core_api/fsw/inc/cfe_es.h#L460",non-bug,https://github.com/nasa/cFE/issues/2062
usleep is obsolete,"
The exact cppcheck message, apparing for these lines
{{{
src/unit-tests/oscore-test/ut_oscore_misc_test.c:507
src/unit-tests/oscore-test/ut_oscore_misc_test.c:601
src/unit-tests/oscore-test/ut_oscore_misc_test.c:626
}}}
in the current development tree, is
{{{
Obsolete function 'usleep' called. It is recommended to use the 'nanosleep' or 'setitimer' function instead.
}}}
",bug,https://github.com/nasa/osal/issues/151
Update to use OSAL socket API,"Is your feature request related to a problem? Please describe.
Currently uses cFE supplied network_includes.h and not the abstracted OSAL calls

Describe the solution you'd like
Update to use OSAL

Describe alternatives you've considered
None

Additional context
See osapi-os-net.h and/or OSAL API.

Requester Info
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/15
Add tests for object id inline functions,"**Is your feature request related to a problem? Please describe.**
`OS_ObjectIdToInteger`, `OS_ObjectIdFromInteger`, `OS_ObjectIdEqual`, `OS_ObjectIdDefined` are missing tests.

**Describe the solution you'd like**
Add tests.  

Since these are inline they can be completely exercised via explicit coverage tests (suggest adding to coveragetest-idmap.c).  

Note these can be trivial, just need to convert a to and from a range of ID's (note these are just to/from integers, NOT indexes...), check each for equal to itself but not equal to the others, check that OS_OBJECT_ID_UNDEFINED results in undefined and the rest are defined.  This also ensures an ID didn't ""wrap"" by exercising Array Index conversions from array index 0 and max for each type (as defined in configuration).

**Describe alternatives you've considered**
Could be added to a ""functional/full stack"" test but no point since they don't have any external dependencies.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/982
cfe/SCH deadlocks on exit on Linux,"using modules
95f34d25cb2843b8ba9db6338bb0b53cb3e38f92 cfe
c2bcebbc4d7e60a41b604e9acfc8af3c60b8536a osal
37ee8eb2d7ce006dc1570b920ae75a7ac5f89d27 psp

there seems to be a deadlock upon exit for timers being used by SCH.

See stacktrace

```
Thread 2 (Thread 0xef3ffb40 (LWP 19797)):
#0  0xf7766430 in __kernel_vsyscall ()
#1  0xf773e436 in __pause_nocancel () from /lib/libpthread.so.0
#2  0xf7734995 in __pthread_mutex_lock_full () from /lib/libpthread.so.0
#3  0x0807bbbe in OS_BinSemGive_Impl (sem_id=4) at /home/tbrain/cert_testbed/osal/src/os/posix/src/os-impl-binsem.c:250
#4  0x0807558c in OS_BinSemGive (sem_id=262148) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-binsem.c:187
#5  0xf7750628 in SCH_MinorFrameCallback (TimerId=589826) at /home/tbrain/cert_testbed/apps/sch_g/fsw/src/sch_custom.c:442
#6  0x0807b3a8 in OS_Timer_NoArgCallback (objid=589826, arg=0xf77503fe <SCH_MinorFrameCallback>) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-time.c:227
#7  0x0807b072 in OS_TimeBase_CallbackThread (timebase_id=524290) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-timebase.c:526
#8  0x0807df44 in OS_TimeBasePthreadEntry (arg=0x80002) at /home/tbrain/cert_testbed/osal/src/os/posix/src/os-impl-timebase.c:305
#9  0xf7736bbc in start_thread () from /lib/libpthread.so.0
#10 0xf76550de in clone () from /lib/libc.so.6

Thread 1 (Thread 0xf7555700 (LWP 19780)):
#0  0xf7766430 in __kernel_vsyscall ()
#1  0xf773497f in __pthread_mutex_lock_full () from /lib/libpthread.so.0
#2  0x0807dc46 in OS_TimeBaseLock_Impl (local_id=2) at /home/tbrain/cert_testbed/osal/src/os/posix/src/os-impl-timebase.c:108
#3  0x0807b63a in OS_TimerDelete (timer_id=589826) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-time.c:422
#4  0x08075ab8 in OS_CleanUpObject (object_id=589826, arg=0xffc049e8) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-common.c:263
#5  0x08078877 in OS_ForEachObject (creator_id=0, callback_ptr=0x8075a1c <OS_CleanUpObject>, callback_arg=0xffc049e8) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-idmap.c:1015
#6  0x08075b0a in OS_DeleteAllObjects () at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-common.c:299
#7  0x08074ebe in OS_Application_Run () at /home/tbrain/cert_testbed/psp/fsw/pc-linux/src/cfe_psp_start.c:458
#8  0x080801d1 in main (argc=1, argv=0xffc04b64) at /home/tbrain/cert_testbed/osal/src/bsp/pc-linux/src/bsp_start.c:198
```",bug,https://github.com/nasa/cFE/issues/701
Provide a unit test utility to create software bus messages,"**Describe the bug**
The sample_app example of how to create a software bus message for use by the test is to use the CFE_SB_InitMsg stub.  As described in https://github.com/nasa/sample_app/issues/89, tests should not be using stubs directly for utility operations. 

**To Reproduce**
N/A

**Expected behavior**
Add a ut_assert utility function that provides this functionality

**Code snips**
https://github.com/nasa/sample_app/blob/c1348d6fcb7f911396c9928a1779ddad6fe0c339/unit-test/coveragetest/coveragetest_sample_app.c#L414-L417

**System observed on:**
RHEL 7.6

**Additional context**
Relates to https://github.com/nasa/sample_app/issues/89 and https://github.com/nasa/cFE/issues/818

**Reporter Info**
Alan Gibson NASA GSFC/587",non-bug,https://github.com/nasa/cFE/issues/825
Time sync callbacks only called when the tone is marked as good,"**Is your feature request related to a problem? Please describe.**
Time sync callbacks may be desired even if `!IsToneGood`.

**Describe the solution you'd like**
Consider optional notification regardless of tone ""goodness""

**Describe alternatives you've considered**
Not really clear on the use case where `!IsToneGood` but the synch callback is desired.  It's really just a check if it's within the 1 Hz tolerance, which should be true even if it's virtual.  If configured as a server and virtual, the tone should always be good.  If not virtual and there's an external sync, should only call if the 1Hz is within tolerance.  If not virtual and no external sync, then the ISR wouldn't get called anyways, so it wouldn't call `CFE_TIME_NotifyTimeSynchApps`, so not clear why changing the internal check against `IsToneGood` would matter.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

NOTE - requested more information from commenter.
",non-bug,https://github.com/nasa/cFE/issues/1542
"Remove SB: Last Message Sender Info, cSB4309 requirement (removed API)","**Is your feature request related to a problem? Please describe.**
Support for getting the last message sender was removed in the Caelum development cycle, need to remove the requirement

**Describe the solution you'd like**
Remove cSB4309 - SB: Last Message Sender Info requirement

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1741
Refactor directory structure so it makes sense again (fsw contains non-fsw),"**Is your feature request related to a problem? Please describe.**
fsw is misleading in that it includes unit tests, etc but then there are also fsw implementations within modules...

**Describe the solution you'd like**
Implement a flattened/sensible directory structure.  Needs discussion.

**Describe alternatives you've considered**
- cfe/
  - CMakeLists.txt for the repo
  - fsw/
    - CMakeLists.txt for the fsw
    - sbr/
      - CMakeLists.txt for sbr (and so on for CMake files)
    - msg/
    - core/
      - es/
      - ...
    - public_inc/
  - unit-test/
    - stubs/
    - coverage/
    - functional/
  - eds/
  - docs/
  - ... and so on

**Additional context**
https://github.com/nasa/cFE/pull/947#pullrequestreview-517018628

**Requester Info**
Jacob Hageman - NASA/GSFC

ping @acudmore

EDIT - updated for Gerardo comment",non-bug,https://github.com/nasa/cFE/issues/972
CFE coverage tests not getting built after re-org,"**Describe the bug**
After directory re-organization, it is missing the new recipes for building the CFE core coverage tests.

**To Reproduce**
Build+install with unit tests enabled.  Everything runs and passes but the CFE core tests are not there.

**Expected behavior**
CFE core tests should be there

**Code snips**
Some empty placeholders in place of the real thing (mistake in original PR). 

https://github.com/nasa/cFE/blob/2b8844871d374219cef7c0026e6c43460e11b22b/modules/es/ut-coverage/CMakeLists.txt

**System observed on:**
Ubuntu 20.04

**Additional context**
Unfortunately everything in tests+CI runs just fine without this being there, so it wasn't immediately noticeable that something was missing.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1224
Exiting an Application Creates an Application with an Unknown State (GSFC DCR 23035),"ES will continually send out event message #79 - ""ES_ProcControlReq: Unknown State ( %d ) Application %s"", with the unknown state set to 1, when an application exits via the CFE_ES_ExitApp API function call. See attached email thread for more details.",bug,https://github.com/nasa/cFE/issues/89
Build system needs to better separate the UT stub function from the UT test cases,"**Describe the bug**
Currently the ""unit-test"" subdirectory generates libraries that provide stubs for all public API calls defined in the CFE core apps, as well as test cases and executables for unit testing the CFE itself.

Having these combined like this causes a few problems:
- the two products have different scopes. The UT stubs apply globally across the entire mission and can/should be used for all UT (platform-independent), but the test cases do need to be tuned to the platform, so a separate set of test cases needs to be built per-platform.
- As a result, the UT stubs themselves are also built per-platform.  This is wasteful but more importantly this makes linking to the CFE stubs from application UT code difficult.
- It is also undesirable just from a general code organization standpoint.  The directory structure would be cleaner if these were in separate subdirectories.

**To Reproduce**
Build code with ENABLE_UNIT_TESTS=TRUE and observe that the CFE ""stub"" library is named ""libut_cfe_core_default_cpu1_stubs.a"" (i.e. build specifically for the default/cpu1 platform config) and it resides in the same directory as the UT executables/test cases.

**Expected behavior**
The stub library should be named only ""libut_cfe_core_stubs.a"" and it should be in a separate subdirectory from the unit test cases themselves.

**System observed on:**
Ubuntu 18.04 LTS 64 bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/415
Configuration parameters could exist in configuration table,"Some parameters in cs_platform_cfg.h could be made part of a configuration table to provide more on-orbit flexibility.  For instance, number of bytes per wakeup or child task delay time. 

Finding from code review. 

Imported from GSFCCFS-1312",non-bug,https://github.com/nasa/CS/issues/18
SC_LoadAts_Test_AtsEntryOverflow Unit Test indexes past array bounds,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/SC/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**

The `SC_LoadAts_Test_AtsEntryOverflow` unit test indexes past array boundaries.

There are two arrays that get indexed improperly, both in `unit-test/sc_loads_tests.c`:

1. The first is a file-global variable, `uint32 SC_APP_TEST_GlobalAtsCmdStatusTbl[SC_NUMBER_OF_ATS * SC_MAX_ATS_CMDS];`
    - this array has 2000 indexes (2 * 1000) by default 
3. The second is local to `SC_LoadAts_Test_AtsEntryOverflow`, named: `uint32 AtsTable[SC_ATS_BUFF_SIZE32];`
    - this array has 4000 indexes (8000 / 2) by default 

In `SC_LoadAts_Test_AtsEntryOverflow`, local variable `j` gets increased to a value of `4005`. This variable is used to index into both of the above arrays. These accesses are indirect, through these pointers:

- `SC_OperData.AtsCmdStatusTblAddr`
- `SC_OperData.AtsTblAddr`

Also, I'm not sure if I'm understanding the test correctly, but it seems like `i` should be used instead of `j`, when initializing the `AtsCmdStatusTblAddr` array. Perhaps it would help to use more verbose variables than `i` and `j`.


**To Reproduce**

1. Add prints to print out the values of `j` before each 
2. Run the unit tests

**Expected behavior**

All of these out-of-bound accesses seem invalid, and should be able to be removed.

This unit test should probably be revised and cleaned up anyway. For example, after the initial `for` loop, the test describes that its intending to fill the (one) last entry with an invalid value. However, what the actual test attempts to do is initialize two entries (not one).

Additionally, this unit test doesn't do much verification of `SC_LoadAts` to confirm that the function worked as expected. I'd expect more than just a single `UtAssert_True(call_count_CFE_EVS_SendEvent == 0,` call.

**Code snips**

```
void SC_LoadAts_Test_AtsEntryOverflow(void)
{
    SC_AtsEntryHeader_t *Entry;
    SC_AtsInfoTable_t    AtsInfoTbl;
    uint32               AtsTable[SC_ATS_BUFF_SIZE32];
    uint8                AtsIndex = 0;
    size_t               MsgSize1;
    size_t               MsgSize2;
    int                  BufEntrySize;
    int                  MaxBufEntries;
    int                  i, j;

    memset(&AtsInfoTbl, 0, sizeof(AtsInfoTbl));
    memset(&AtsTable, 0, sizeof(AtsTable));

    SC_InitTables();

    SC_OperData.AtsCmdStatusTblAddr[AtsIndex] = &SC_APP_TEST_GlobalAtsCmdStatusTbl[0];
    SC_OperData.AtsTblAddr[AtsIndex]          = &AtsTable[0];
    SC_OperData.AtsInfoTblAddr                = &AtsInfoTbl;

    MsgSize1      = SC_PACKET_MAX_SIZE;
    BufEntrySize  = ((MsgSize1 + SC_ROUND_UP_BYTES) / SC_BYTES_IN_WORD) + SC_ATS_HDR_NOPKT_WORDS;
    MaxBufEntries = SC_ATS_BUFF_SIZE32 / BufEntrySize;

    for (i = 0, j = 0; i < MaxBufEntries; i++, j += BufEntrySize)
    {
        Entry                                        = (SC_AtsEntryHeader_t *)&SC_OperData.AtsTblAddr[AtsIndex][j];
        Entry->CmdNumber                             = i + 1;
        SC_OperData.AtsCmdStatusTblAddr[AtsIndex][j] = SC_EMPTY;
        UT_SetDataBuffer(UT_KEY(CFE_MSG_GetSize), &MsgSize1, sizeof(MsgSize1), false);
    }

    /* Next entry should not leave enough buffer space for an ATS command header */
    Entry                                        = (SC_AtsEntryHeader_t *)&SC_OperData.AtsTblAddr[AtsIndex][j];
    Entry->CmdNumber                             = i++ + 1;
    SC_OperData.AtsCmdStatusTblAddr[AtsIndex][j] = SC_EMPTY;

    /* Use the remaining buffer space to calculate the final message size */
    MsgSize2 = (SC_ATS_BUFF_SIZE32 - SC_ATS_HDR_WORDS + 4 - j) * SC_BYTES_IN_WORD;
    UT_SetDataBuffer(UT_KEY(CFE_MSG_GetSize), &MsgSize2, sizeof(MsgSize2), false);

    /* Set up final entry that will create condition */
    j += ((MsgSize2 + SC_ROUND_UP_BYTES) / SC_BYTES_IN_WORD) + SC_ATS_HDR_WORDS;
    Entry            = (SC_AtsEntryHeader_t *)&SC_OperData.AtsTblAddr[AtsIndex][j];
    Entry->CmdNumber = i + 1;
    UT_SetDataBuffer(UT_KEY(CFE_MSG_GetSize), &MsgSize1, sizeof(MsgSize1), false);

    SC_OperData.AtsCmdStatusTblAddr[AtsIndex][j] = SC_EMPTY;

    /* Execute the function being tested */
    SC_LoadAts(AtsIndex);

    /* Verify results */
    call_count_CFE_EVS_SendEvent = UT_GetStubCount(UT_KEY(CFE_EVS_SendEvent));

    UtAssert_True(call_count_CFE_EVS_SendEvent == 0, ""CFE_EVS_SendEvent was called %u time(s), expected 0"",
                  call_count_CFE_EVS_SendEvent);
}

```

**System observed on:**
 - x86_64 
 - OS: GNU/Linux 5.4
 - Versions: Draco rc4

**Additional context**

This issue only seemed to pop up when we built the linux target for a 32-bit linux executable, with `-m32`.

**Reporter Info**

Keegan Moore
NASA/GSFC
",bug,https://github.com/nasa/SC/issues/80
Error compiling unit test: osprintf-test,"**Describe the bug**
Error compiling osprintf-test

**To Reproduce**
Steps to reproduce the behavior:
1. add osprintf-test in cfs/osal/src/unit-tests to cmakelists. Example: add_subdirectory(osprintf-test)
2. In cfs directory:
3.make distclean
4.make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
5. make
6. See error

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - cfs 6.6

**Reporter Info**
Anh Van, NASA Goddard
",bug,https://github.com/nasa/osal/issues/290
Separate network logic in pc-rtems to support generic targets,"**Is your feature request related to a problem? Please describe.**
The only non-generic implementation in pc-rtems is the network setup, which prevents use on a generic target.

**Describe the solution you'd like**
Isolate/separate network setup to support source selection or similar configuration option.  Consider configuring from target defs or similar to avoid changes required within psp.

**Describe alternatives you've considered**
Could make an additional psp, but doesn't seem worth duplicating all the pc-rtems code that isn't specific to pc's.

**Additional context**
Specific parts:
https://github.com/nasa/PSP/blob/a260e9cc0a8fa5c96e55b1df4d39a6799a812ea4/fsw/pc-rtems/src/cfe_psp_start.c#L36-L40
https://github.com/nasa/PSP/blob/a260e9cc0a8fa5c96e55b1df4d39a6799a812ea4/fsw/pc-rtems/src/cfe_psp_start.c#L67-L84

Might also benefit from making /mnt/eeprom a config param... depends on how/where this is actually set up by the PSP.  Would be nice to shift away from ""eeprom"" and use generic ""nonvol"".

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/375
Cannot find recommended method (UtMemSet) suggested in comments,"**Describe the bug**
UtMemSet is not found in ut-assert, but it suggested to be used in comments from utassert.h and uttools.h

**To Reproduce**
https://github.com/nasa/osal/blob/b37da18bd5efed6d86344e4cafaa42c833b015fb/ut_assert/inc/utassert.h#L125-L128
https://github.com/nasa/osal/blob/b37da18bd5efed6d86344e4cafaa42c833b015fb/ut_assert/inc/uttools.h#L61-L63

**Additional context**
Other comments in the same files suggest to use methods that do exist, UtMemFill and UtMem2BinFile.

**Reporter Info**
Alan Gibson
NASA/GSFC 587
",non-bug,https://github.com/nasa/osal/issues/963
Add debug messages from CFE_EVS_SendEvent stubs,"**Is your feature request related to a problem? Please describe.**
Requires code changes to debug event messages

**Describe the solution you'd like**
Print a debug message to make event message debugging easier (just pass in `-D` and review messages sent)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/863
Continuation of EDS integration for CFE,"Integrate the remaining EDS features which are not yet included as part of the CFE 6.6 release.

This is a continuation of #207 for the next CFE release.

Defects to resolve: #92, TBD
Enhancements to resolve: TBD",non-bug,https://github.com/nasa/cFE/issues/243
Use  fixed size types for addresses and address offsets in tables/tlm/cmd,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**

Changing telemetry and table sizes depending on platform (32 vs 64 bit) when using the cpuaddr type in structures. 

**Describe the solution you'd like**

Use cfe_es_memaddress and cfe_es_offset types for tables and telemetry and define those types as 64 bits. If space is an issue, users can redefine these types as 32-bit. 

From [CCB:2022-04-27](https://github.com/nasa/cFS/wiki/CCB:-2022.04.27) 
>
> - cpuaddress type will ""change size"". Use cfe_es_memaddress and cfe_es_offset types for tables and telemetry 
>  - open new issue to address and discuss with customers
> _Originally posted by @astrogeco in https://github.com/nasa/CS/issues/24#issuecomment-1111211271_

EDIT: `CFE_ES_MemAddress_t` and `CFE_ES_MemOffset_t` are the actual types that should be used

**Describe alternatives you've considered**

Leave as is, redefine telemetry sizes based on platform in the ""ground system"" 

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA",non-bug,https://github.com/nasa/CS/issues/26
Inconsistent parameter passing (chan_num vs. channel pointer),"There does not seem to be any consistency in CF as to whether identifiers passed to functions are done in the form of a number (such as a channel number) where the function then gets the channel pointer internally by doing a table lookup, or by passing a pointer to the structure.  The CF contains both forms, and sometimes passes a pointer when the implementation really needed the number.

Example:
https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L1357-L1362

In this case the CF_ReceiveMessage was (for some reason) declared as accepting a pointer to the channel structure, but it really needs the channel number, so it does a bit of pointer arithmetic `(c - CF_AppData.engine.channels)` to get the number.

This type of pointer manipulation can be error prone, particularly if the code evolves in such a way where the `c` pointer might not be pointing to an entry in the table, this might produce an out-of-range channel number.  This can also happen during unit test where its common to pass in test values -- even if FSW never expects a value not within the table, its still possible to happen.  

Recommendation:  If channel numbers are generally always needed, pass only the channel number around.  It is safer because it can be more easily range-checked if necessary.

Alternative: Store the channel number inside the channel structure, so the FSW can more simply look it up and does not need to recompute it (avoids assumption that the pointer is pointing to a chan table entry).  This can avoid repetitiously looking up a chan_num to get the pointer, allowing direct pointers to be passed around.  But does cost a little memory and introduces the risk that something (e.g. a bug somewhere else) can overwrite or change the chan_num and make it wrong.
",non-bug,https://github.com/nasa/CF/issues/90
SC `int32` return codes and variables should be converted to `CFE_Status_t`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
SC has a few return codes (as well as local `status`/`return` variables which hold CFE return codes) that can be easily converted over to the `CFE_Status_t` typedef.

**Expected behavior**
Use the more expressive `CFE_Status_t` and improve consistency with cFS.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/SC/issues/89
Refactor handling of `EVS_GetApplicationInfo` return to eliminate duplication,"**Is your feature request related to a problem? Please describe.**
Logic for handling `EVS_GetApplicationInfo` repeated all over, example:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1216-L1242

**Describe the solution you'd like**
Factor out common logic.  Consider using a switch.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1428
SB Pipes are not protected.,"It is possible for a task to fetch messages from an SB Pipe
that was created by some other task, and this can happen
easily if someone fetches using ZERO as the pipe ID.

This prevents the consumed message from arriving at its
intended destination.

Note that applications fetching from the wrong Message ID
might notice this issue if they are reporting the receipt
of messages with unexpected Message ID numbers.

Solving this may require some attention to use cases where
a pipe is created by one task, to be used by another.

We may also want to think about the use case where multiple
tasks fetch messages from a single pipe, with the *intention*
that messages go to one of the several tasks. Is this use
case sufficiently interesting to offset the complexity of the
code required to support it?
",non-bug,https://github.com/nasa/cFE/issues/100
Standardize Version Numbering (in OSAL),"Bring version number management within OSAL into line
with the cFS standards documented at

https://babelfish.arc.nasa.gov/trac/cfs_test/wiki/ReferenceVersion

",non-bug,https://github.com/nasa/osal/issues/123
Consider using an enum for MD error codes,"In file md_dwell_pkt.c function MD_GetDwellData, all the ""-1"" status values could be replaced with an enum.

Finding from code review.

Imported from GSFCCFS-1048",non-bug,https://github.com/nasa/MD/issues/3
Link error when building with MISSION_MSGID_V2 = TRUE,"**Describe the bug**
cFE compiles (with warnings about implicit function declarations), but linking the cfe_core executable errors out with undefined references to symbols `CFE_SB_ValueToMsgId` and `CFE_SB_MsgIdToValue`.

**To Reproduce**
Steps to reproduce the behavior:

1. Create a mission configuration. Modify global_build_options.cmake by adding the following two lines:
    set(MISSION_INCLUDE_CCSDSEXT_HEADER TRUE)
    set(MISSION_MSGID_V2 TRUE)

2. Build cFS. The following warnings will be issued when compiling cfe_msg_msgid_v2.c:
    [ 77%] Building C object msg/CMakeFiles/msg.dir/fsw/src/cfe_msg_msgid_v2.c.o
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c: In function ‘CFE_MSG_GetMsgId’:
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c:80:14: warning: implicit declaration of function ‘CFE_SB_ValueToMsgId’ [-Wimplicit-function-declaration]
       80 |     *MsgId = CFE_SB_ValueToMsgId(msgidval);
          |              ^~~~~~~~~~~~~~~~~~~
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c: In function ‘CFE_MSG_SetMsgId’:
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c:96:36: warning: implicit declaration of function ‘CFE_SB_MsgIdToValue’ [-Wimplicit-function-declaration]
       96 |     CFE_SB_MsgId_Atom_t msgidval = CFE_SB_MsgIdToValue(MsgId);
          |                                    ^~~~~~~~~~~~~~~~~~~
The following error will be reported at the link phase:
    [100%] Linking C executable core-cpu1
    /usr/bin/ld: ../msg/libmsg.a(cfe_msg_msgid_v2.c.o): in function `CFE_MSG_GetMsgId':
    cfe_msg_msgid_v2.c:(.text+0x8b): undefined reference to `CFE_SB_ValueToMsgId'
    /usr/bin/ld: ../msg/libmsg.a(cfe_msg_msgid_v2.c.o): in function `CFE_MSG_SetMsgId':
    cfe_msg_msgid_v2.c:(.text+0xd1): undefined reference to `CFE_SB_MsgIdToValue'
    collect2: error: ld returned 1 exit status
    make[11]: *** [cpu1/CMakeFiles/core-cpu1.dir/build.make:199: cpu1/core-cpu1] Error 1

3. The bug occurs because the two functions are defined as 'static inline' in cfe_sb.h, which is not referenced in cfe_msg_msgid_v2.c, and because the C language prior to the C99 standard implicitly defines functions as `int fn_name(int)`. Simply adding `#include ""cfe_sb.h""` fixes the problem.

**Expected behavior**
core-cpu1 should compile and link cleanly.

**Code snips**
See attached patch file.

[msg_v2_link_error_patch.txt](https://github.com/nasa/cFE/files/8119734/msg_v2_link_error_patch.txt)

**System observed on:**
 - Hardware: VirtualBox 6.1.30 emulation of a generic x86-64 system on macOS 11.6.3
 - OS: Ubuntu 20.04
 - Compiler: GCC 9.3.0
 - Versions: cFE tag v7.0.0-rc4, OSAL tag v6.0.0-rc4, PSP tag v1.6.0-rc4

**Additional context**

**Reporter Info**
Chuck Fry, QTS Inc., subcontractor to KBR Wyle on the ISRDS3 contract, at NASA ARC Code TI
chuck.fry@nasa.gov
",bug,https://github.com/nasa/cFE/issues/2054
Generate diagnostics/info packet on transaction closure,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Difficult to automate follow-on actions based on transaction completion (history queue isn't automation friendly) or maintain a record of all transactions without dumping queues.

**Describe the solution you'd like**
Send a diagnostics/info packet whenever a transaction is closed for any reason including all the relevant info (RX/TX, channel, file source/target, status, class, etc)

**Describe alternatives you've considered**
Event could be an alternative, but harder to base automation on

**Additional context**
Stakeholder request

**Requester Info**
Jacob Hageman - NASA/GSFC

@TheSwarty",non-bug,https://github.com/nasa/CF/issues/274
Update PSP Version Number for 1.3.0 Release,"All PSP version.h header files need to be updated from version 1.2.0.0 to 1.3.0.0 for the release.

Note: This will be the last release that uses the old versioning scheme where all PSP implementation version header files are updated with the same version number and no version exists for the shared code or API's.",non-bug,https://github.com/nasa/PSP/issues/51
Add fixed size CCSDS packet option,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Some systems can't handle variable sized telemetry packets.

**Describe the solution you'd like**
Add an option to zero-fill the related CCSDS packets.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman
",non-bug,https://github.com/nasa/CF/issues/193
SMP: Thread safety issues in CFE_TIME around the Sync Callbacks,"The `CFE_TIME_RegisterSynchCallback()` and `CFE_TIME_UnregisterSynchCallback()` functions are not thread safe, as they do not utilize any sort of global mutex when searching the table.

These are called by applications during startup, which is exactly the situation where multiple threads __might__ be calling these functions at the same time.

Furthermore, `CFE_TIME_NotifyTimeSynchApps()` does not protect against a callback being unregistered at the same time a tone message comes in.



",bug,https://github.com/nasa/cFE/issues/175
fails to build in Raspbian,"**Describe the bug**
Building ci_lab under Raspbian (a Debian variant for Raspberry Pi SBC's) fails due to alignment issues.

```
/home/pi/cFS/apps/ci_lab/fsw/src/ci_lab_app.c:53:39: error: cast increases required alignment of target type [-Werror=cast-align]
 CFE_SB_Msg_t *     CI_IngestPointer = (CFE_SB_Msg_t *)&CI_IngestBuffer[0];
                                       ^
/home/pi/cFS/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_ReportHousekeeping’:
/home/pi/cFS/apps/ci_lab/fsw/src/ci_lab_app.c:297:25: error: cast increases required alignment of target type [-Werror=cast-align]
     CFE_SB_TimeStampMsg((CFE_SB_Msg_t *)&CI_HkTelemetryPkt);
                         ^
/home/pi/cFS/apps/ci_lab/fsw/src/ci_lab_app.c:298:20: error: cast increases required alignment of target type [-Werror=cast-align]
     CFE_SB_SendMsg((CFE_SB_Msg_t *)&CI_HkTelemetryPkt);
                    ^
/home/pi/cFS/apps/ci_lab/fsw/src/ci_lab_app.c: In function ‘CI_ProcessPDU’:
/home/pi/cFS/apps/ci_lab/fsw/src/ci_lab_app.c:618:35: error: cast increases required alignment of target type [-Werror=cast-align]
                     checkSumPtr = (uint32 *)PduDataPtr;
```

**To Reproduce**
Build ci_lab on Raspbian.

**Expected behavior**
Should build without error.

**System observed on:**
Raspberry Pi Zero W

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/ci_lab/issues/32
Fix the spelling error in to_lab for testing,"A recent commit to the master branch of TO_Lab fixed a spelling mistake
https://github.com/nasa/to_lab/blame/master/fsw/src/to_lab_msg.h#L98
which needs to be reflected in the to_lab sub table header in the testing files.",bug,https://github.com/nasa/ECI/issues/38
Update lgtm to include python,"**Is your feature request related to a problem? Please describe.**
Update lgtm.yml file to include python

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFS/issues/54
Add positive check to cFS execution in CI,"**Is your feature request related to a problem? Please describe.**
CI in #39 only checks for warn/err/fail in cFS output

**Describe the solution you'd like**
Enforce the existence of the following message:
""CFE_ES_Main entering OPERATIONAL state""

**Describe alternatives you've considered**
Any other positive check would work, above was the simplest I could think of.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/56
"CFE_SB_GetLastSenderID returns pointer to internal data, possible race","**Describe the bug**
CFE_SB_GetLastSenderID returns pointer to data that could be overwritten at any time

See https://github.com/nasa/cFE/pull/605#discussion_r407649126 for related comments

**To Reproduce**
Conceptually - app calls CFE_SB_GetLastSenderID, gets pointer, data gets overwritten, app takes action based on overwritten data vs original context

**Expected behavior**
No race.

**Code snips**
https://github.com/nasa/cFE/blob/60a5f6580d1e737f46efce0418aba5b8dac6df6a/fsw/cfe-core/src/sb/cfe_sb_api.c#L1651-L1657

**System observed on:**
N/A

**Additional context**
#605

**Reporter Info**
Jacob Hageman",bug,https://github.com/nasa/cFE/issues/608
FS - ExtractFilenameFromPath Function Needs Revision,"The ""StringLength"" variable defined in the FS ExtractFilenameFromPath function does not meet MISRA standards (6.3 Typedefs that indicate size and signedness should be used in place of the basic numerical types).  The simple solution (shown in ticket #159), ""Replaced casting from int to size_t as must store return of strlen."", resulted in an additional ""Correction"" variable which in turn may result in an infinite loop.  It is recommended to rewrite this function.   ",non-bug,https://github.com/nasa/cFE/issues/169
Document length limit of OS_MAX_PATH_LEN and OS_MAX_API_NAME includes null terminator,"**Is your feature request related to a problem? Please describe.**
Documentation not clear

**Describe the solution you'd like**
Document length limit of OS_MAX_PATH_LEN and OS_MAX_API_NAME includes null terminator

**Describe alternatives you've considered**
None

**Additional context**
nasa/osal#88

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/617
document configs to indicate that MAX string sizes do not include null-terminator,"**Is your feature request related to a problem? Please describe.**
There is a laundry list of string size definitions in sample_mission_cfg.h, cpu1_platform_cfg.h, and default_osconfig.cmake that should be documented as to whether the setting includes a byte for a null-terminator (so say `CFE_MISSION_TBL_MAX_NAME_LENGTH` is defined as 16, does that mean I must limit my table name to 15 characters plus the null-terminator?)

This is related to #730 .

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/735
Run Documentation and Guides on Push for Main,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
PDFs are not generating for the Documentation and Guides workflow.

**To Reproduce**
https://github.com/nasa/cFS/tree/gh-pages

**Expected behavior**
PDFs will generate if the event is pushed to main.

**Code snips**
`if: ${{ github.event_name == 'push' && contains(github.ref, 'main')}}`

**Additional context**
> The problem with skipping pull requests is that it won't test the merge commit. Need to skip push if it is not to the main branch.

**Reporter Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/298
Trade EVS generalize filter requirement update,"CCB 4/3/19 discussed #128 and #286 which would complicate the filter design.

Consider if this functionality is worth a requirements change and trade additional complexity at the architecture level.

Kicked up to steering committee.",non-bug,https://github.com/nasa/cFE/issues/305
Calling CFE_TIME_GetReference in interrupt context can lock up system,"Ocean Color Instrument FSW has been debugging watchdog resets since early February. We're running cFE 6.6 and SCH 2.2. Last weekend, we disabled the watchdog, let the FSW freeze, and attached a debug monitor that let us see processor registers and memory. The backtrace indicates that FSW is calling CFE_TIME_GetReference in interrupt context:

grmon2> bt
%pc          %sp
#31 0x402d3260 (=CFE_PSP_GetTime=0x402d323c+36) 0x401468f0 (=tIdleTask0_stack_base=0x401442d0+9760)
#410x402ef1c0 (='''CFE_TIME_GetReference'''=0x402ef1a8+24) 0x40146958 (=tIdleTask0_stack_base=0x401442d0+9864)
#510x402ee5ec (=CFE_TIME_GetMETsubsecs=0x402ee5a8+68) 0x401469e0 (=tIdleTask0_stack_base=0x401442d0+10000)
#610x404d5f14 (=SCH_GetMETSlotNumber=0x404d5f10+4) 0x40146a80 (=tIdleTask0_stack_base=0x401442d0+10160)
#710x404d60ec (='''SCH_MajorFrameCallback'''=0x404d5fb4+312) 0x40146ae0 (=tIdleTask0_stack_base=0x401442d0+10256)
#810x402ef9d8 (=CFE_TIME_NotifyTimeSynchApps$part$1=0x402ef9ac+44) 0x40146b40 (=tIdleTask0_stack_base=0x401442d0+10352)
#910x402f00e4 (=CFE_TIME_Tone1HzISR=0x402effcc+280) 0x40146ba0 (=tIdleTask0_stack_base=0x401442d0+10448)
#1010x402d49c0 (=CFE_PSP_InterruptCallback_DleonInt11=0x402d4658+872) 0x40146c28 (=tIdleTask0_stack_base=0x401442d0+10584)
#1110x40012570 (=handler_irq=0x40012528+72) 0x40146c88 (=tIdleTask0_stack_base=0x401442d0+10680)
#1210x40011dcc (=intEnt=0x40011ca8+292) 0x40146cf0 

CFE_TIME_GetReference appears to be stuck in this DO WHILE loop:

void CFE_TIME_GetReference(CFE_TIME_Reference_t *Reference)
{
    <other irrelevant code>
    do
    {
        VersionCounter = CFE_TIME_TaskData.CompleteVersionCounter;
        <other irrelevant code> 
    } while (VersionCounter != CFE_TIME_TaskData.PendingVersionCounter);

These two counters are changed in task context, so I believe that anytime SCH_MajorFrameCallback is called when these counters are different, FSW will get stuck in this do while loop.
",bug,https://github.com/nasa/cFE/issues/310
Remove CFE_PSP_MemSet and CFE_PSP_MemCpy use on addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MM/issues/27
CF_CFDP_DisableEngine no longer disables the engine,"**Describe the bug**
The line which actually disables the engine got mistakenly deleted in a recent PR.  (Got swept up because it was grouped with the variable declarations with no whitespace between).

**To Reproduce**
Issue disable engine command, it does not actually disable

**Expected behavior**
Should disable the engine

**Code snips**
https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp.c#L2287-L2288

**System observed on:**
N/A

**Reporter Info**
Sergio Maldonado (@semaldona)
",bug,https://github.com/nasa/CF/issues/161
Test  #7: osal-core-test Failure,"**Describe the bug**
Test  #7: osal-core-test fails.  

**To Reproduce**
Steps to reproduce the behavior:
Note: this test was not readily repeatable, but it failed 2/10 times on this branch: 
fix413-Add-Reference-To-Osal-Users-Guide-From-ReadMe
1. Go to branch stated above
2. Run build/exe/cpu1/osal-core-test

**Expected behavior**
The test failed 2/10 times.  Specifically, failure is due to the code snippet noted below in  osal-core-test.c, line 138 where a small time delay is supposed to occur and the child task is perhaps not exiting before the OS_TaskDelete call happens, so it's returning success. 

**Code snips**
[ FAIL] 01.261 osal-core-test.c:138 - OS_TaskDelete, self exiting task

**System observed on:**
GNOME VM
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Additional context**
This may be due to the VM delay.  

**Reporter Info**
Yasir Khan
NASA GSFC",bug,https://github.com/nasa/osal/issues/424
cFE Tlm Packet 64-bit alignment issue,"**Describe the bug**
Compiler add padding is applied to cFE Telemetry packets if the data region does not start on a 64 bit boundary and the packet contains a 64 bit variable.

**To Reproduce**
Steps to reproduce the behavior:
1. Nominal Build Process.
2. Enable Tlm.
3. Bit bust a telemetry packet containing a 64 bit variable.

**Expected behavior**
No compiler added padding should be applied.

**System observed on:**
Ubuntu 64-bit - 19.10

**Reporter Info**
Dan Knutsen
NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/488
Add branch coverage reporting and remove no longer necessary removal of unit test files,"**Is your feature request related to a problem? Please describe.**
Historically didn't report branch coverage and needed to remove the unit test code from coverage reporting.

**Describe the solution you'd like**
Add branch coverage, remove unnecessary processing step

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/561
OSAL wrapper around QT,"**Is your feature request related to a problem? Please describe.**
QT is an operating system abstraction layer that supports several different operating systems.
Would like to wrap an osal wrapper around QT

**Describe the solution you'd like**
Get a wrapper around QT.

**Describe alternatives you've considered**
- boost

**Additional context**
https://github.com/thesamprice/osal/tree/qt4/src/os/qt

Current status is it builds / links against qt, unit tests start to run.
Following needs done
- [ ] Work through getting the unit tests to run/ pass on mac
- [ ] Cleanup code / fix comments
- [ ] Work through getting unit tests to run/pass on windows


**Requester Info**

",non-bug,https://github.com/nasa/osal/issues/1266
OSAL: Consider Allowing Root Task (caller of OS_API_Init) to Register and Use OSAL Services (GSFC DCR 21564),Consider a model for the system root task where the caller to OS_API_Init() is also a registration of the task with the OSAL. This can ensure that the root task can use OSAL functions. This also allows to OSAL to initialize CPU affinity for the root task and use that stored CPU affinity for inforcing CPU affinity policies when the root task spawns tasks.,non-bug,https://github.com/nasa/osal/issues/65
Separate execute in shell functionality from core cFE service,"**Is your feature request related to a problem? Please describe.**
Command to execute in shell a concern in some security scenarios.

**Describe the solution you'd like**
Remove from the core, better suited to an app (optional, can be included or loaded based on mission requirements/needs)

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/484
repeated assignments without using the value (real code edition),"cppcheck messages:
{{{
src/os/vxworks6/osnetwork.c:73: performance: Variable 'retval' is reassigned a value before the old one has been used.
src/os/vxworks6/ostimer.c:331: style: Variable 'status' is assigned a value that is never used.
}}}

Recommended fix methods, PICK ONE:
1. Actually check the status variables to see if an error was returned
2. put a `(void)` cast on the function call instead of storing the data that is not actually ever going to be looked at. This advertises to maintainers and to the compiler and to static analysis that we are purposefully ignoring the return value of the function.

It would be a good idea to check the posix and rtems implementations to see if they have the same construct in this place.

See ticket #157 for the same problem occurring very frequently in unit test code.
",bug,https://github.com/nasa/osal/issues/158
Release Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- added standard Apache 2.0
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/433
OS_MutSemGive - add unique error code for attempted release by non-owning thread,"**Is your feature request related to a problem? Please describe.**
Attempt to release by non-owning thread is a useful error to identify uniquely (and it's already checked):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-mutex.h#L73-L78
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-mutex.c#L173-L177

**Describe the solution you'd like**
Add unique error code

**Describe alternatives you've considered**
Currently allowing the OS to decide if it's an error or not, could leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/848
Copies to/from message payloads should use the sizeof() operator where possible,"When reading/writing software bus message payloads, strings must be always char[] arrays (not pointers) by definition.  Many times these these are defined as something like:
 `char MyString[SIZE_MACRO];`

and later they are filled using something like:
 `strncpy(Message->MyString, Source, SIZE_MACRO);`

However, instead of using the `SIZE_MACRO` in the runtime code, it is more future-proof to use the `sizeof()` operator to get the array size.  This is particularly true when the payload structures are generated from an EDS (electronic data sheet) since there may not even be a simple macro to use in that case.  

The `sizeof()` operator will always work even if the size is a hardcoded value or the macro name changes in a future version.


",non-bug,https://github.com/nasa/cFE/issues/144
Use `CFE_TIME_SysTime_t` instead of individual Seconds/subseconds,"**Is your feature request related to a problem? Please describe.**
Inconsistent use/definition of time structure vs individual sec/subsecs, benefits from common structure:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl_api_typedefs.h#L114-L117

**Describe the solution you'd like**
Use `CFE_TIME_SysTime_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1497
Refactor UT_SetForceFail,"Describe the bug
UT_SetForceFail was refactored to UT_SetDefaultReturnValue for https://github.com/nasa/osal/issues/559. It needs to have its name changed here as well.

Expected behavior
Change UT_SetForceFail  to UT_SetDefaultReturnValue 

Additional context
Part of https://github.com/nasa/osal/issues/559

Reporter Info
Alex Campbell",non-bug,https://github.com/nasa/sample_lib/issues/36
TOCTOU Bug for mkdir,"**Describe the bug**
Calling function mkdir that uses local->system_mountpt after a check function. This can cause a time-of-check, time-of-use race condition.

**Expected behavior**
Alternative is to call mkdir, without a stat, and just ignore the EEXIST errno if it happens.

**Code snips**
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/posix/src/os-impl-filesys.c#L247-L253

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/osal/issues/1176
PowerPC specific include in vxworks timebase,"**Is your feature request related to a problem? Please describe.**
There's a PowerPC specific include in the timbase_vxworks here:
https://github.com/nasa/PSP/blob/4bf1eefc81738de9ed03d6ea0eb018ce03b0d92b/fsw/modules/timebase_vxworks/cfe_psp_timebase_vxworks.c#L47

It would be good to make this module vxworks generic if possible.

**Describe the solution you'd like**
I'm not sure what's needed from that include, but if it is necessary it would be nice to abstract it out or ifdef it in only for PPC.

**Describe alternatives you've considered**
Nothing particular in mind, but any method to make that module generic vxworks would work.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @superolmo",non-bug,https://github.com/nasa/PSP/issues/349
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [ ] Update the instructions in each app's Contributing.md
- [ ] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/HS/issues/29
Add option to force RTEMS_FLOATING_POINT on all tasks,"**Is your feature request related to a problem? Please describe.**
Even if a task itself doesn't use floating point, if the RTEMS kernel is compiled with floating point enabled underlying functions may use it.  Under the current scheme, there isn't a way to force inclusion of the RTEMS_FLOATING_POINT flag for all tasks.

**Describe the solution you'd like**
Add override option to always add flag regardless of the flags passed in to the function call.

**Describe alternatives you've considered**
I'm not sure if this is a problem w/ other systems... could make the flag generic to OS's?

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1345
File chmod test failing on RTEMS,"**Describe the bug**
When running unit tests against the latest baseline, there is a new failure on RTEMS:

```
[BEGIN] 04 TestChmod
OS_FileOpen_Impl():111:open(/RAM/Filename1): Invalid argument
[ FAIL] 04.001 file-api-test.c:257 - status after creat = -1
[ FAIL] 04.002 file-api-test.c:259 - status after close = -16
```

**To Reproduce**
Build with unit tests and execute on RTEMS 4.11 + pc686 + QEMU as documented in README.  The chmod test fails.

**Expected behavior**
Test should pass.

**System observed on:**
RTEMS 4.11.3, pc686 BSP, running in QEMU

**Additional context**
Appears to be introduced in PR #665  

Reinforces need (again) for CI script that runs the RTEMS build.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/685
CFE_TBL_ERR_BAD_APP_ID error defined but not used,"**Is your feature request related to a problem? Please describe.**
This error code was added at one point as a return value from various TBL API calls when they were called from a context which was not a CFE APP.  However, in the current code, the status code from the call to `CFE_ES_GetAppID()` is just passed through:

https://github.com/nasa/cFE/blob/a0c2de62934e61a93bb4282c0fc784cf4be50da9/modules/tbl/fsw/src/cfe_tbl_internal.c#L256-L261

As a result, nothing actually returns `CFE_TBL_ERR_BAD_APP_ID` in the current code.

**Describe the solution you'd like**
Remove value from cfe_error.h and remove any remaining references to it.

As the value is passed through from `CFE_ES_GetAppID()`, the actual return code when called from a bad context is `CFE_ES_ERR_RESOURCEID_NOT_VALID`.

**Additional context**
Noted as part of scrub in #1724

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1851
Compiler warnings in OSAL,"**Describe the bug**
Some warnings still get triggered when building the coverage tests with high strictness flags, as they exercise some API calls that are not even used by the FSW code.  So even though the FSW itself builds clean, when the coverage test is added it is no longer clean due to these issues.

**To Reproduce**
Build OSAL coverage tests with warnings/strictness flags, at least:
   `-Wall -Werror -std=c99 -pedantic -Wstrict-prototypes -Wcast-align -Wwrite-strings`

**Expected behavior**
Should build warning free.

**System observed on:**
Ubuntu 18.04 LTS, 64 bit.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/298
Fix common_types.h include,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Not following standard:
https://github.com/nasa/CF/blob/e391163e01c9a4da83043e4729bb677e27f95430/fsw/src/cf_logical_pdu.h#L41

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/200
PSP build fails for MCP750,"Greg Limes reports the following errors he got with ""make -k"" and notes because some files do not compile, the build does not attempt to build some others, so this may not be a complete list of all the actual errors:

(None of this is *hard* to fix ... just frustating when I only get  short snips of time to push on this issue ...)

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_start.c:73: error: conflicting types for 'CFE_PSP_Main'
psp/fsw/inc/cfe_psp.h:180: error: previous declaration of 'CFE_PSP_Main' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_start.c:73: error: conflicting types for 'CFE_PSP_Main'
psp/fsw/inc/cfe_psp.h:180: error: previous declaration of 'CFE_PSP_Main' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:209: error: conflicting types for 'CFE_PSP_GetResetArea'
psp/fsw/inc/cfe_psp.h:287: error: previous declaration of 'CFE_PSP_GetResetArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:209: error: conflicting types for 'CFE_PSP_GetResetArea'
psp/fsw/inc/cfe_psp.h:287: error: previous declaration of 'CFE_PSP_GetResetArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:248: error: conflicting types for 'CFE_PSP_GetUserReservedArea'
psp/fsw/inc/cfe_psp.h:294: error: previous declaration of 'CFE_PSP_GetUserReservedArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:248: error: conflicting types for 'CFE_PSP_GetUserReservedArea'
psp/fsw/inc/cfe_psp.h:294: error: previous declaration of 'CFE_PSP_GetUserReservedArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:287: error: conflicting types for 'CFE_PSP_GetVolatileDiskMem'
psp/fsw/inc/cfe_psp.h:300: error: previous declaration of 'CFE_PSP_GetVolatileDiskMem' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:287: error: conflicting types for 'CFE_PSP_GetVolatileDiskMem'
psp/fsw/inc/cfe_psp.h:300: error: previous declaration of 'CFE_PSP_GetVolatileDiskMem' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:367: error: conflicting types for 'CFE_PSP_GetKernelTextSegmentInfo'
psp/fsw/inc/cfe_psp.h:306: error: previous declaration of 'CFE_PSP_GetKernelTextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:367: error: conflicting types for 'CFE_PSP_GetKernelTextSegmentInfo'
psp/fsw/inc/cfe_psp.h:306: error: previous declaration of 'CFE_PSP_GetKernelTextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:409: error: conflicting types for 'CFE_PSP_GetCFETextSegmentInfo'
psp/fsw/inc/cfe_psp.h:311: error: previous declaration of 'CFE_PSP_GetCFETextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:409: error: conflicting types for 'CFE_PSP_GetCFETextSegmentInfo'
psp/fsw/inc/cfe_psp.h:311: error: previous declaration of 'CFE_PSP_GetCFETextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_exception.c:74: error: conflicting types for 'CFE_ES_ProcessCoreException'
cfe/fsw/cfe-core/src/inc/cfe_es.h:1600: error: previous declaration of 'CFE_ES_ProcessCoreException' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_exception.c:74: error: conflicting types for 'CFE_ES_ProcessCoreException'
cfe/fsw/cfe-core/src/inc/cfe_es.h:1600: error: previous declaration of 'CFE_ES_ProcessCoreException' was here

Also Matt Grubb reports the following problems/fixes that were made in his environment to get the mcp750 build to compile:

1. Psp_version.h needed updated with the _IMPL definitions as I found in pc-linux 
2. Cfe_psp_exception.c, cfe_psp_memory.c, and cfe_psp_start.c all needed updates for new function definitions in cfe_psp.h 
3. The version.cmake file creates a ""version.h"" file when building. This is a filename required by VxWorks, so I renamed the file in the script to cmakeversion.h and changed the target_config to include cmakeversion.h 
4. Added a build_options.cmake file to the mcp750 PSP 
5. Created a toolchain file for the mcp750 on vxworks 6.4 in proj_defs


",bug,https://github.com/nasa/PSP/issues/61
OS_ShellOutputToFile_Impl in VxWorks is not thread safe,"**Is your feature request related to a problem? Please describe.**
Filename is common:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-shell.c#L96

**Describe the solution you'd like**
At minimum document.  Consider refactor for shell safe implementation.  Although current cFS concept is to use a single app and even this should be avoided when possible (direct shell use is discouraged in production ops).

**Describe alternatives you've considered**
Deprecate/remove.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/887
RTEMS osal queue mixed sizes,"**Describe the bug**
Im using queues to send variable length messages.
RTEMS queue get returns an error if the message queue returned size is not the max buffer size.
https://github.com/nasa/osal/blob/main/src/os/rtems/src/os-impl-queues.c#L235

This doesn't match the posix implementation.
https://github.com/nasa/osal/blob/main/src/os/posix/src/os-impl-queues.c#L194

The above logic in `shared/src/osapi-queue.c` uses `OS_QUEUE_INVALID_SIZE` If the queue size is greater than the buffer provided.
```c
        if (size < queue->max_size)
        {
            /*
            ** The buffer that the user is passing in is potentially too small
            */
            *size_copied = 0;
            return_code  = OS_QUEUE_INVALID_SIZE;
        }
```

**To Reproduce**
Steps to reproduce the behavior:
Visual inspection.

**Expected behavior**
Follow the posix logic.

**Code snips**
See above

**System observed on:**
MIcroblaze

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Sam Price 
",non-bug,https://github.com/nasa/osal/issues/1279
Use memchr() for string length checks,"**Is your feature request related to a problem? Please describe.**
String length verification checks are generally done via the `strlen()` C library API.  The potential issue here is that `strlen` requires/assumes a termination byte to be present.  If the user mistakenly passes an unterminated string, the implementation will search sequentially in memory beyond the string (i.e. forever) until it either encounters a NUL char somewhere in memory, or segfaults, whatever comes first.

**Describe the solution you'd like**
Use `memchr()` for string length check instead, which can specifically check for a NUL char within a certain length.  For instance, instead of:

```
if (strlen(string) >=  MAX_LENGTH)
{
   /* string too long.... */
}
```

use:

```
if (memchr(string, 0, MAX_LENGTH) == NULL)
{
   /* string too long.... */
}
```

This has the advantage that it will _not_ search beyond the specified `MAX_LENGTH`, so its a bit safer.  It's also a more direct check - the code generally doesn't care what the actual string length is, it just needs to know if its within MAX_LENGTH or not.

**Describe alternatives you've considered**
Leave as is.

**Additional context**
This is a minor thing, but would improve robustness a bit.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/949
"Stack pointer parameter to CFE_ES_CreateChildTask should not be marked ""const""","By definition, a task's stack memory must be writeable.  The stack pointer parameter to CFE_ES_CreateChildTask() is qualified as ""const"".  Although this matches OSAL's Task API, OSAL is wrong too and should be fixed.

See: [https://babelfish.arc.nasa.gov/trac/cfs_osal/ticket/13]

This ticket should be merged into CFE **before** the OSAL ticket is fixed.

This change will not affect compatibility with prior versions of OSAL because it is OK to pass a non-const pointer for a const parameter (but vice-versa is an error).

",bug,https://github.com/nasa/cFE/issues/51
fcntl(G_GETFL) fails on VxWorks 6.9,"**Is your feature request related to a problem? Please describe.**
Now that we check the return for fcntl, turns out it fails on VxWorks 6.9 (not implemented).  Used in OS_SocketOpen_Impl and OS_SocketAccept_Impl:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/portable/os-impl-bsd-sockets.c#L163
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/portable/os-impl-bsd-sockets.c#L444

**Describe the solution you'd like**
Consider trying ioctl if fcntl fails?  Rumor has it ioctl is supported.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/osal/issues/1153
create a configuration file loader API,OSAL should provide an API for loading text configuration files (akin to tables).,non-bug,https://github.com/nasa/osal/issues/187
ut_sb_stubs.c decription comment for CFE_SB_RcvMsg does not match code,"**Describe the bug**
In ut_sb_stubs.c description comment for CFE_SB_RcvMsg incorrectly states that first call returns CFE_SUCCESS, while additional calls return -1.  It appears that it will always return CFE_SUCCESS.

**To Reproduce**
Steps to reproduce the behavior:
1. Write a test where CFE_SB_RcvMsg is called at least twice.
2. Check result on first call == CFE_SUCCESS, will pass
3. Check result on second call == -1, will fail (result is CFE_SUCCESS instead)
4. additional calls have same result as 3 above.

**Expected behavior**
Rewrite comment to show that result returned is always CFE_SUCCESS, unless the commented behavior is what is desired, then fix code to accomplish that.

**Code snips**
```
/*****************************************************************************/
/**
** \brief CFE_SB_RcvMsg stub function
**
** \par Description
**        This function is used to mimic the response of the cFE SB function
**        CFE_SB_RcvMsg.  By default it will return the TIMEOUT error response,
**        unless the test setup sequence has indicated otherwise.
**
** \par Assumptions, External Events, and Notes:
**        None
**
** \returns
**        Returns CFE_SUCCESS on the first call, then -1 on the second.
**
******************************************************************************/
int32 CFE_SB_RcvMsg(CFE_SB_MsgPtr_t *BufPtr,
                    CFE_SB_PipeId_t PipeId,
                    int32 TimeOut)
{
    int32 status;
    static union
    {
        CFE_SB_Msg_t Msg;
        uint8 Ext[CFE_MISSION_SB_MAX_SB_MSG_SIZE];
    } Buffer;

    status = UT_DEFAULT_IMPL(CFE_SB_RcvMsg);

    if (status >= 0)
    {
        if (UT_Stub_CopyToLocal(UT_KEY(CFE_SB_RcvMsg), (uint8*)BufPtr, sizeof(*BufPtr)) < sizeof(*BufPtr))
        {
            memset(&Buffer, 0, sizeof(Buffer));
            *BufPtr = &Buffer.Msg;
        }
    }

    return status;
}
```

**System observed on:**
 - Hardware: PC
 - OS: RHEL Workstation 7.6 (Maipo), Linux 3.10.0-1062.1.2.el7.x86_64
 - Versions cFE 6.7 

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Alan Gibson, NASA, GSFC-0587",bug,https://github.com/nasa/cFE/issues/715
Static analysis workflow fails due to style warnings,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/MD/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/MD/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Strict cppcheck warnings cause static analysis workflow failure, see: https://github.com/nasa/MD/runs/6357277924?check_suite_focus=true

```
[fsw/src/md_cmds.c:50] -> [fsw/src/md_cmds.c:56]: (style) Variable 'Start' is reassigned a value before the old one has been used.
[fsw/src/md_cmds.c:141] -> [fsw/src/md_cmds.c:149]: (style) Variable 'Stop' is reassigned a value before the old one has been used.
[fsw/src/md_cmds.c:421] -> [fsw/src/md_cmds.c:428]: (style) Variable 'SignatureCmd' is reassigned a value before the old one has been used.
[fsw/src/md_dwell_pkt.c:153] -> [fsw/src/md_dwell_pkt.c:158]: (style) Variable 'TblPtr' is reassigned a value before the old one has been used.
[fsw/src/md_dwell_tbl.c:306] -> [fsw/src/md_dwell_tbl.c:311]: (style) Variable 'LocalControlStruct' is reassigned a value before the old one has been used.
[fsw/src/md_dwell_tbl.c:355] -> [fsw/src/md_dwell_tbl.c:358]: (style) Variable 'GetAddressResult' is reassigned a value before the old one has been used.
[fsw/src/md_dwell_tbl.c:435] -> [fsw/src/md_dwell_tbl.c:439]: (style) Variable 'GetAddressResult' is reassigned a value before the old one has been used.
```

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MD/issues/12
CF Purge command does not appear to be hooked in,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1701] CF Purge command does not appear to be hooked in
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Tue Aug 10 17:30:05 2021

_Original Description_:
CF comments make reference to a purge command, and functions exist for that command. However, the command code referenced in the comments (CF\_PURGE\_QUEUE\_CC) does not appear to exist and there does not appear to be an equivalent one.  
  
_(link removed)_  
  
_(link removed)_",non-bug,https://github.com/nasa/CF/issues/25
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/PSP/issues/236
Clarify CFE_ES_SYSLOG_APPEND use vs CFE_ES_WriteToSysLog,"**Is your feature request related to a problem? Please describe.**
CFE_ES_SYSLOG_APPEND is used is just a few places (cds, esmempool), everywhere else is CFE_ES_WriteToSysLog.  

**Describe the solution you'd like**
Consistency is preferred for maintenance and usability,  If there isn't sufficient justification for a separate macro, remove it and use CFE_ES_WriteToSysLog. 

**Describe alternatives you've considered**
If there is clear justification, consider adding to the macro documentation/comments

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

*edit* - typo",non-bug,https://github.com/nasa/cFE/issues/409
Unit tests need to link with UT_COVERAGE_COMPILE_FLAGS/UT_COVERAGE_LINK_FLAGS,"**Is your feature request related to a problem? Please describe.**
nasa/osal#404 cleans up the compiler flag management, and as part of this it exports two variables, UT_COVERAGE_COMPILE_FLAGS and UT_COVERAGE_LINK_FLAGS, rather than a single UT_C_FLAGS value.

**Describe the solution you'd like**
The unit tests need to use these variables, not UT_C_FLAGS.

**Additional context**
Needs to be included with the nasa/osal#404 merge.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sample_lib/issues/19
CFE SB and TIME components missing length verification on incoming messages,"As discussed during the 2017-09-22 CCB meeting, the Software Bus and Time subsystems within CFE are not checking the length of incoming messages.  

Executive Services and Event Services are both verifying that the length of the supplied message is sufficient before calling the handler.  Table Services also verifies the length using a different approach.  However SB and TIME have no validation, thereby theoretically allow a message that is too short to be passed to the handler, which could result in a crash.

This has always been the case, this is not a new issue.

Note that full EDS integration (a potential target for CFE 6.7+) provides length checking on all packets automatically.  So this already fixes the issue.  But there needs to be a decision made whether to implement an interim change here for CFE 6.6.",non-bug,https://github.com/nasa/cFE/issues/235
PSP needs unit tests,"This project has no unit tests that can be run as part of an automatic build-and-test cycle to assure that a change has not broken fundamental behaviors.

We need central portable unit tests that can be run against any PSP that check the basic behaviors required of every PSP, and a way for individual PSPs to provide additional unit tests that verify any PSP-specific required behaviors.
",non-bug,https://github.com/nasa/PSP/issues/11
"Add ""ramdisk startup script"" module","This module adds a simple way for a PSP to create the startup script file in a RAMDISK, using embedded data linked at build time with CFE.

Intended for use on systems that have no persistent storage to hold this file.",non-bug,https://github.com/nasa/PSP/issues/95
Remove obsolete `_USING_RTEMS_INCLUDES_`,"**Is your feature request related to a problem? Please describe.**
`_USING_RTEMS_INCLUDES_` is no longer used for anything.

https://github.com/nasa/PSP/blob/a260e9cc0a8fa5c96e55b1df4d39a6799a812ea4/fsw/pc-rtems/src/cfe_psp_start.c#L27

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/371
"Add functional test for ""one-shot"" timer","**Is your feature request related to a problem? Please describe.**
Spawned from the conversation on #514.  API documentation specifies behavior that isn't covered by the current functional tests (one-shot).

**Describe the solution you'd like**
Add a one-shot timer test

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/586
CS `int32` return codes and variables should be converted to `CFE_Status_t`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CS has quite a few return codes (and `status`/`return` variables holding return codes) that can be easily converted over to the `CFE_Status_t` typedef.

**Expected behavior**
Use the more expressive `CFE_Status_t` and improve consistency with cFS.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/CS/issues/78
Add feature to support binary data blobs linked with CFE executable,"In a recent GRC project, CFE was deployed on a virtualized host that had no runtime-accessible persistent storage at all.  Although there was a place to store the CFE executable image itself, the executing runtime image could not read or write to this area as a filesystem.

The apps were statically linked with the executable, but there is no place to put the startup script (cfe_es_startup.scr).

A generic solution to this problem was to add a method for the CMake build to include arbitrary ""binary blobs"" and link these directly into the executable image, so the PSP/CFE can access them at runtime.  The content of these blobs can be entirely implementation-specific.  The CFE framework just needs an ""out of the box"" way to link these images into the executable to make deployment on this type of platform easier.

For the GRC use-case, we used this approach to store an ""initial ramdisk"" tar file which the PSP then untar'ed into the ramdisk before starting CFE.  However the approach could be used for storing any arbitrary data file, such as an FPGA bitfile or DSP/microcontroller firmware.",non-bug,https://github.com/nasa/cFE/issues/326
Incorrect assumption about file name patterns in table build,"**Describe the bug**
On most CMake platforms the generated object file names are simply the file name (including the .c) concatenated with CMAKE_C_OUTPUT_EXTENSION.  So, for example, on table build for sample_app, the file `sample_app_tbl.c` gets compiled into `sample_app_tbl.c.o` which can then be used to call `elf2cfetbl`.

Apparently this relationship is not guaranteed, there is at least one example of a platform where this gets compiled to `sample_app_tbl.o` instead of `sample_app_tbl.c.o`.

**To Reproduce**
Attempt to build on a platform that does not follow the expected pattern.  Tables will fail to build with a failure to open the object file due to the name mismatch.

**Expected behavior**
Table should build successfully.

**Code snips**
I traced this back to a workaround that was put in for older CMake, which assumes the name of the object file:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/cmake/arch_build.cmake#L200-L201

The preferred/correct way to do this is to use the `$<TARGET_OBJECTS:...>` generator expression, but this only works in newer CMake versions.  The workaround was to assume a file name based on the expected pattern, which works most of the time, but there are exceptions.

**System observed on:**
Originally reported by @klystron78  when building for VxWorks 7.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1436
Incrementing ComponentPtr when pointing at ComponentTerm goes out of bounds (but isn't accessed),"**Describe the bug**
 Using ComponentPtr as an array. This might corrupt or misinterpret adjacent memory locations.

**Expected behavior**
Fix out-of-bounds access bug

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/fs/fsw/src/cfe_fs_api.c#L565

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFE/issues/1993
Scrub parameter documentation section of command codes,"**Is your feature request related to a problem? Please describe.**
Parameter documentation for command codes not complete or always up to date

**Describe the solution you'd like**
Really the structure is the preferred place to document the parameters, the command code documentation is probably better off just referencing the structure.  Need to confirm all the information in the command code documentation is in the structure documentation and then clean.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1395
printf format specs need to be cleaned up,"There are many cases like this, where the variable to print is a different type than the format.   Many of these have simply been casts to get rid of the compiler warning, but the format spec is what probably really should be fixed to match the type.

For example, CFE_SB_GetCmdCode() returns a uint16, the format spec would more appropriately be %u, rather than %d. In this case, a large, valid, command code will get printed out as a negative value, which will be confusing, because command codes are not negative values.

CFE_EVS_SendEvent(CFE_SB_BAD_CMD_CODE_EID,CFE_EVS_ERROR,
                     ""Invalid Cmd, Unexpected Command Code %d"",
                     (int)CFE_SB_GetCmdCode(CFE_SB.CmdPipePktPtr));

There are many cases like this through out cfe that need to be reviewed and cleaned up.",non-bug,https://github.com/nasa/cFE/issues/147
Report version when responding to NoOp Comand to match Sample App template,"**Is your feature request related to a problem? Please describe.**
The NoOp command response in CI_Lab is currently 

```
    CFE_EVS_SendEvent(CI_LAB_COMMANDNOP_INF_EID, CFE_EVS_EventType_INFORMATION, ""CI: NOOP command"");
```

While sample app and others usually include the app version as a response.

**Describe the solution you'd like**
Use the NoOp response template provided in ci_lab

**Describe alternatives you've considered**
Change the template so NoOps do not respond with the version. 

OR

Create and Enforce a NoOp API at the cFE level.

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/ci_lab/issues/52
CF should not use bitfields,"Use of bitfields is discouraged by many coding standards (including GSFC) because the C standard does not specifically dictate how they are packed into the underlying integer type.  CF uses them in several internal structures, for example:

https://github.com/nasa/CF/blob/2ca7f978aea855ba4d6adc6e5370cbb2178129a5/fsw/src/cf_cfdp.h#L159-L165

If these truly need to be bit fields, then they should be implemented explicitly using shifts and masks.  However, initial inspection of the code would suggest they do not need to be bit fields, they can be made into separate fields.  While this may increase the memory footprint somewhat (struct is likely to be 5 bytes in the example instead of 4) this is probably a reasonable trade, because separate fields can be simply read/written directly rather than requiring a read-modify-write etc.  

Note that when using bit fields, the assembly instructions to do shifts and masks will still be generated by compiler, even though the C syntax ""looks"" simple - it is hiding it all.  So it may be considerably less efficient than accessing separate memory locations.  This of course depends on hardware architecture, caching, optimization by the compiler, etc but in general bitfields will always be less efficient, due to the extra shifting and masking.",bug,https://github.com/nasa/CF/issues/67
Update startup script names to match SAMPLE_APP and SAMPLE_LIB,"**Is your feature request related to a problem? Please describe.**
PR's nasa/sample_app#100 and nasa/sample_lib#34 update the function names to use a consistent prefix - `SAMPLE_APP` and `SAMPLE_LIB`, respectively.

The example startup script needs to change accordingly.

**Describe the solution you'd like**
Update entry point names.

**Additional context**
This is needed at the same time if/when the other two PRs are merged.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/967
Remove CFE_SB_SendPrevSubs  in favor of CFE_SBR_ForEachRouteId API,"**Is your feature request related to a problem? Please describe.**
CFE_SB_SendPrevSubs holds locks that aren't that useful, sufficient logic required, creates bus traffic, etc.

**Describe the solution you'd like**
SBN could just use CFE_SBR_ForEachRouteId, not really a true ""public"" API... but seems like fair use in this case.  Would be outside of SB lock, but likely OK based on design (enables subscription reporting first, then check all previous subs).

**Describe alternatives you've considered**
At least remove all the locking/unlocking.  It doesn't help.

**Additional context**
Related to #947 work.

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @CDKnightNASA ",non-bug,https://github.com/nasa/cFE/issues/963
Reconcile diffs between unit test makefiles and JSC UT makefiles,"Here is a summary(from Joe Hickey) of what I see as differences between the JSC oscore-test
Linux makefile (attached above) and what we currently have in the ""build""
subdirectory in OSAL (this changeset).  This is what would have to be
reconciled before the JSC makefile and the OSAL makefile could be called
""compatible"" again:

Variable/macro value settings:

 * `APPTARGET`: JSC uses `UT_oscore` vs. `oscore-test` in OSAL
 * `LOCAL_COPTS`: JSC uses externally defined $(OSAL_UT_FLGS) and $(UT_COV_FLGS)    make variables, the OSAL makefile actually sets this blank
 * `OSAL_OBJS`: JSC makefile only specifies the one object specifically under test, OSAL makefiles specify all OSAL objects here.
 * `INCLUDE_PATH` and `VPATH`: JSC references externally-defined $(MISSION_HOME), $(CFS_MISSION_INC), $(OSAL_TST_SRC) variables.  OSAL makefiles are all based on $(OSAL_SRC)

Included sub-makefile component pathname differences:

 * '''osal-config.mak''': JSC has `include ../osal-config.mak` and OSAL makefiles have `include ../../osal-config.mak`
 * '''debug-opts.mak''': JSC has `include ../osal-debug-opts.mak` and OSAL has `include ../../debug-opts.mak` (note the lack of ""osal-"" prefix in addition to the relative path difference)
 * '''compiler-opts.mak''': JSC has relative path `include ../osal- compiler-opts.mak` and OSAL has an absolute path `$(OSAL_SRC)/bsp/$(BSP)/make/compiler-opts.mak`
 * '''app-rules.mak''': JSC has relative path `include ../osal-app- rules.mak` and OSAL has absolute path `$(OSAL_SRC)/make/app-rules.mak`

Target differences:

 * JSC overrides the default rule for `$(APPTARGET)`
 * JSC defines a `run` target that actually executes the test - OSAL makefile does not define this
 * JSC defines a `coverage` target that calls `$(UT_COV_TOOL)` and scrubs the output.  OSAL makefile does not define this.",non-bug,https://github.com/nasa/osal/issues/149
Checksum errors after restarting app,"Summary scenario

1.	Application gets an exception
2.	ES restarts the application 
3.	There is a high probability that the application checksum has changed due to the restart.
4.	Checksum is not notified to recompute the application checksum. When it finds the checksum has changed, it puts out an event message to that effect.
5.	HS is monitoring for application checksum messages, and does a processor reset as a consequence.


Imported from GSFCCFS-952",bug,https://github.com/nasa/CS/issues/20
Consistent results from CFE_ES_SYSLOG_APPEND and CFE_ES_WriteToSysLog,"**Is your feature request related to a problem? Please describe.**
From #409, CFE_ES_WriteToSysLog:

>Upon additional review - the only ""extra"" thing that CFE_ES_WriteToSyslog does is a final call to OS_printf to duplicate the syslog message onto the console, which wouldn't be done when calling the functions individually.

>In particular, this means that any syslog messages generated in the CDS use case wouldn't appear on the console. This could be a valid concern/issue that might warrant a fix.

**Describe the solution you'd like**
Consistent behavior

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/449
Remove CFE_PSP_MemSet and CFE_PSP_MemCpy use on addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CS/issues/32
TO_LAB App only receiving NOOP commands,"**Describe the bug**
After updating to the most recent cFS packages (git pull) and recursively updating the submodules, all commands from GroundSystem.py to TO_LAB are being interpreted as NOOPS. First saw this with requesting output enabled but then verified that all commands are being seen as NOOPS. Outputs of git pull are below capturing 

GroundSystem.py Output:
Host: 127.0.0.1
Port: 1234
Pkt ID: 0x1880
sending data to '127.0.0.1' (IP : 127.0.0.1); port 1234
Data to send:
0x18 0x80 0xC0 0x00 0x00 0x01 0x00 0x06 

CFE Output
EVS Port1 42/1/CFE_TIME 21: Stop FLYWHEEL
EVS Port1 42/1/TO_LAB_APP 18: No-op command

Same command with previous build yields the below and telemetry beings to flow.
EVS Port1 42/1/CFE_TIME 21: Stop FLYWHEEL
EVS Port1 42/1/TO_LAB_APP 3: TO telemetry output enabled for IP 



**To Reproduce**
git pull to latest and run both cFE and GroundSystem.py

**Expected behavior**
Expected a TO_OUTPUT_ENABLE 

**Code snips**
allen@akum-home-lt:~/repos/cFS/missionxyz$ git pull
remote: Enumerating objects: 22, done.
remote: Counting objects: 100% (22/22), done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 65 (delta 12), reused 20 (delta 11), pack-reused 43
Unpacking objects: 100% (65/65), done.
From https://github.com/nasa/cFS
   69e18e5..788b8d6  master                -> origin/master
 * [new branch]      gh-pages              -> origin/gh-pages
 * [new branch]      integration-candidate -> origin/integration-candidate
Fetching submodule apps/ci_lab
From https://github.com/nasa/ci_lab
 * [new branch]      integration-candidate -> origin/integration-candidate
   3ad9a10..fe9e3ef  master                -> origin/master
Fetching submodule apps/sample_app
From https://github.com/nasa/sample_app
 * [new branch]      integration-candidate -> origin/integration-candidate
   1f84f20..b956292  master                -> origin/master
Fetching submodule apps/sample_lib
From https://github.com/nasa/sample_lib
 * [new branch]      integration-candidate -> origin/integration-candidate
   f499730..33efec3  master                -> origin/master
Fetching submodule cfe
From https://github.com/nasa/cFE
 * [new branch]      integration-candidate -> origin/integration-candidate
   d6d944c..60a5f65  master                -> origin/master
Fetching submodule osal
From https://github.com/nasa/osal
 * [new branch]      integration-candidate -> origin/integration-candidate
   2284a6f..7d9c4c8  master                -> origin/master
Fetching submodule psp
From https://github.com/nasa/PSP
 * [new branch]      integration-candidate -> origin/integration-candidate
   621abba..12e2607  master                -> origin/master
Fetching submodule tools/cFS-GroundSystem
From https://github.com/nasa/cFS-GroundSystem
 * [new branch]      integration-candidate -> origin/integration-candidate
   c982339..9d4b155  master                -> origin/master
Updating 69e18e5..788b8d6
Fast-forward
 .lgtm.yml              |  31 ++++++++++++++++---------------
 .travis.yml            | 100 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-------
 README.md              |  10 ++++------
 apps/ci_lab            |   2 +-
 apps/sample_app        |   2 +-
 apps/sample_lib        |   2 +-
 cfe                    |   2 +-
 osal                   |   2 +-
 psp                    |   2 +-
 tools/cFS-GroundSystem |   2 +-
 10 files changed, 120 insertions(+), 35 deletions(-)


**System observed on:**
 - Docker build
 - OS: Ubuntu


**Additional context**
N/A

**Reporter Info**
Allen Kummer - Self
",non-bug,https://github.com/nasa/to_lab/issues/33
SCH_Lab table definition uses CFE_SB_MsgId_t type without including header for it,"**Describe the bug**
All Code compilation units should explicitly `#include` the headers for all types/macros/functions which are directly used by that unit.

The ""sch_lab_sched_tab.h"" defines a structure that depends on `CFE_SB_MsgId_t`, but it does not include the header that provides this type.

**To Reproduce**
Compilation fails when building with the `ic-ccb-20191009` branch, which includes a change that causes the definition of `CFE_SB_MsgId_t` to no longer be implicitly included.
```
apps/sch_lab/fsw/platform_inc/sch_lab_sched_tab.h:63:5: error: unknown type name ‘CFE_SB_MsgId_t’
     CFE_SB_MsgId_t  MessageID[SCH_LAB_MAX_SCHEDULE_ENTRIES];  /* Message ID for the table entry */
     ^~~~~~~~~~~~~~
```

**Expected behavior**
The build should complete successfully.

**System observed on:**
Ubuntu 18.04.2 LTS 64 bit (build host)

**Reporter Info**
Joseph Hickey, Vantage Systems Inc.
",bug,https://github.com/nasa/sch_lab/issues/18
Reduce scope of lock to within `if` statement in `CFE_SB_ReleaseMessageBuffer`,"**Is your feature request related to a problem? Please describe.**
Locks outside if:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L2129-L2138

**Describe the solution you'd like**
Move inside

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1461
Static analysis issues relative to flight code,"Handful of static analysis issues in the ""red"" identified (non-Style issues).  Need to resolve these.

Filter: -file:elf -file:ut -file:cfe -file:os -file:cf_ -file:_lab_app.c !(significance:style)

should resolve and/or disposition the higher ranked ones at minimum.

Note license restricts publishing issues.

Imported from GSFCCFS-1958",bug,https://github.com/nasa/DS/issues/16
Solved Question: How do I ensure that the ground system sends a command with the correct secondary header?,"I have copied my first test app from the sample app in the bundle. I have now been able to add my commands, but `CFE_MSG_GetFcnCode()` always returns `CFE_MSG_WRONG_MSG_TYPE` because `hassechdr == false`.

For the sample app commands, `hassechdr == true`, but of course those commands were already pickled, so I don't know where the problem lies.

Does the ground station or the `CHeaderParser.py` script add the headers automatically? How is this worked out? I have been just adding three `uint64`s to my command.",non-bug,https://github.com/nasa/cFS/issues/188
Style warnings in strict cppcheck analysis,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently fails cppcheck strict checking in static analysis workflow:
https://github.com/nasa/FM/actions/runs/2282818788

```
[fsw/src/fm_cmd_utils.h:214] -> [fsw/src/fm_cmd_utils.c:372]: (style, inconclusive) Function 'FM_VerifyFileNoExist' argument 1 names different: declaration 'Name' definition 'Filename'.
[fsw/src/fm_cmd_utils.h:236] -> [fsw/src/fm_cmd_utils.c:418]: (style, inconclusive) Function 'FM_VerifyFileNotOpen' argument 1 names different: declaration 'Name' definition 'Filename'.
[fsw/src/fm_tbl.c:43] -> [fsw/src/fm_tbl.c:49]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/src/fm_tbl.c:191] -> [fsw/src/fm_tbl.c:197]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/src/fm_tbl.h:73] -> [fsw/src/fm_tbl.c:72]: (style, inconclusive) Function 'FM_ValidateTable' argument 1 names different: declaration 'TableData' definition 'TablePtr'.
Error: Process completed with exit code 255.
```

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/FM/issues/22
Inconsisent search paths used for mission-provided files,"**Is your feature request related to a problem? Please describe.**
The CMake build system allows the user to provide customized versions of particular files by creating a file of the same name in the `defs` configuration directory.  Specifically this feature is important for configuration header files and table files that are intended to be customized by the user.

The problem is that the search paths/patterns used for the cmake `add_cfe_tables()` function (for table files) and the `generate_config_includefile()` function (for headers) are not related at all, which is confusing.

**Describe the solution you'd like**
The search patterns and search order/priority levels between two functions should be more consistent, ideally use a common file finding function under the hood to implement the search, so the patterns and order will be the same.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/2289
cppcheck -  Strncpy-fills May Not Be Null Terminated,"This ticket will is addressing the following cppcheck warnings:

E-JA/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:502: warning: The buffer 'RamDiskPath' may not be null-terminated after the call to strncpy().
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:807: warning: The buffer 'RamDiskPath' may not be null-terminated after the call to strncpy().
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:122: warning: The buffer 'Cmd' may not be null-terminated after the call to strncpy().
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:96: warning: The buffer 'OutputFilename' may not be null-terminated after the call to strncpy().

4-8-16 - CCB meeting discussed solution to replace strncpy call with CFE_SB_MessageStringGet",bug,https://github.com/nasa/cFE/issues/182
Incorrect time to first callback when using OS_TimerCreate API,"**Describe the bug**
There discrepancies between the expected first callback and the time the first callback actually occurs, for timers created via `OS_TimerCreate()`.  This is with regards to the ""start_time"" parameter.

**To Reproduce**
The `timer-test` example program exposes this bug.  It was never seen because on POSIX the difference is not substantial enough to cause failure, but on VxWorks it does fail.

General sequence is:
Create a timer via `OS_TimerCreate()`
Set the timer using `OS_TimerSet()` with start_time=2000000 (2 sec) and interval_time=400000 (400ms).

The time between the OS_TimerSet call and the first timer callback should be 2 seconds (within system timer tick tolerances) but it is approximately 2.4 seconds on POSIX.  On VxWorks the difference is even more substantial, causing failure of the timer-test example program.

**Expected behavior**
The time between the OS_TimerSet call and the first timer callback should be equivalent to the `start_time` parameter from the OS_TimerSet call.

**System observed on:**
Ubuntu 18.04.2 LTS, 64 bit, using `posix` OSAL build
VxWorks 6.9 on MCP750, using `vxworks` OSAL build
Both running the ""timer-test"" example program.

**Additional context**
This appears to be limited to cases where the backward-compatible OS_TimerCreate API is used.  In this case an implicit timebase object is created just to service the single timer.  In this mode, there is an initial condition issue in the wait routine, and the first interval therefore is not correct. 

If the timer callback is registered via `OS_TimeBaseCreate()` followed by `OS_TimerAdd()`, then it is OK.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/271
Fix make doc warnings,"**Is your feature request related to a problem? Please describe.**
make doc creates multiple warnings (in build/doc/warnings.log)
Some caused by #555

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
Intended as project/distribution documentation of entire code base and never really well implemented (internal elements not well documented).  Major rework required to make this document useful outside just the fix of warnings.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/559
Improve performance of OS_DebugPrintf,"**Is your feature request related to a problem? Please describe.**
OS_DebugPrintf checks the level and doesn't do the work, but the caller still sets up the variable arguments. It's better to have a table of function pointers that change when the level changes to either the debug printf or a no-op.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-globaldefs.h#L83-L87

**Describe the solution you'd like**
Table of function pointers

**Describe alternatives you've considered**
Leave as-is (future work), this is debug code which wouldn't typically be included in production

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/870
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [x] Update the instructions in each app's Contributing.md
- [x] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/CF/issues/254
Confirm no recursive locking and transition to fast mutex use,"**Is your feature request related to a problem? Please describe.**
Currently using recursive mutexes due to historical double locks (see #948).  Could use more efficient fast mutexes after confirming all recursive locks have been removed.

**Describe the solution you'd like**
Survey for recursive locks, remove any remaining, and transition to fast mutexes.

**Describe alternatives you've considered**
None

**Additional context**
#948 was solved by #1092

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1105
CFE_PLATFORM_ES_APP_KILL_TIMEOUT defined in multiple places,"The CFE_PLATFORM_ES_APP_KILL_TIMEOUT macro is defined in multiple places, which can cause confusion and errors.

It is defined in both of these files:
fsw/platform_inc/cpu1/cfe_platform_cfg.h
fsw/cfe-core/src/inc/cfe_es.h",bug,https://github.com/nasa/cFE/issues/330
Make OS_strnlen public,"**Is your feature request related to a problem? Please describe.**
The OS_strnlen() wrapper could be useful for apps, because `strnlen` is not a standardized function, but many times this behavior is needed/desired when reading fixed size string buffers.

An inline function exists in OSAL to provide a substitute but it is currently in an internal header.

**Describe the solution you'd like**
Move the function to the public header so apps can also use it.

**Describe alternatives you've considered**
Leave as is

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/928
Loop counters should not be modified in the body of the loop.,"**Describe the bug**
Counter variable, i, is modified inside the for loop, which may lead to an infinite loop. Should use while loop instead. 

**Location**
root/cfe/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c
lines 1373 - 1380

**Expected behavior**
Use while loop or add comments explaining the reasoning of using for loop for future developers (must ensure loop issues will not occur such as the code looping infinitely). If using while loop, please provide maximum limit for counter. 

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c#L1373-L1380


**Observed on:**
https://lgtm.com/projects/g/nasa/cFS/snapshot/20ff9b0c5aa6653815b9cd2feb4a02180b239737/files/cfe/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c?sort=name&dir=ASC&mode=heatmap

**Additional context**
References: https://help.semmle.com/wiki/display/CCPPOBJ/For+loop+variable+changed+in+body

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFE/issues/822
File operations in CFE_ES_ShellOutputCommand() need cleanup,"This function can be simplified and also made more robust.

* Does unnecessary copying of the input parameters.  

* Does NOT always ensure proper null termination of the inputs.  (Copying strings could be justified if it was to ensure null termination of the inputs).  The ""CFE_ES_ShellCmd"" function that is calling this should ensure null termination but it does not.

* Matching of the ""ES"" special commands needs improvement - It will not run any OS command that happens to start with ""ES_"", and it will also not handle it correctly if one happens to be a substring of another but not a complete match.

* It does not check the return codes from either ""OS_read"" or ""OS_write"" calls and assumes they all work perfectly - the correct operation of this function, in fact, does depend on them all working perfectly.  In the worst-case scenario, a benign failure of an OS_write() call could have a cascade effect causing a later OS_read() call to block indefinitely.

* The return value of OS_lseek() is not properly checked.  It also relies on having an OS implementation of lseek that can accurately ""measure"" the size of the file.  Not all filesystems/file types are seekable in this nature.

* It will not work with any ""special"" file or file system that doesn't support seeking or read/write file handles (such as a pipe).

* It unnecessarily extends the file on disk to add up to 3 extra spaces, which is only to coax the message generator loop into producing an extra message.

* Overall, the loop that is generating the telemetry messages can be simplified quite a bit.

* The fixed 200ms delay between messages should at least be configurable, but there is still no way to tell if buffer overflow is occurring

* There is no sequence number, and way to tell at the receiving side of one intermediate component message was lost.  (Possibly outside the scope of this, and no way to really fix this without changing the binary format of the messages).




",bug,https://github.com/nasa/cFE/issues/84
Document method on Linux to modify user priority limits,"The posix osal can set priorities in Linux. Out of the box, this only works if you run CFS as root. In a lab environment, with many developers using shared lab workstations, root access for everyone is not an option. This method allows CFS apps, running as standard privileged users, to use the priority settings in the startup script(.scr file).

1) As root, set the following config: Update ""rtprio"" in /etc/security/limits.conf for a user or group.

```
#<domain>      <type>  <item>         <value>
#

# for specific users
@tngo            -      rtprio          100
# for specific groups
@aa2            -       rtprio          100
@gfe            -       rtprio          100

#*               soft    core            0
#*               hard    rss             10000
#@student        hard    nproc           20
#@faculty        soft    nproc           20
#@faculty        hard    nproc           50
#ftp             hard    nproc           0
#@student        -       maxlogins       4
```

2) The following changes to the currently released OSAL 4.2.1a will need to be applied to 
osal/src/os/posix/osapi.c.  
Add this include to osal/src/os/posix/osapi.c.

#include <sys/resource.h>   /* Danny Strauss/AA2 - for getrlimit() */

In osal/src/os/posix/osapi.c::OS_TaskCreate(), replace the following code:

    /*
    ** Test to see if the user is running as root.
    ** root is required to set the scheduling policy, stack, and priority
    */
    if (geteuid() == 0 )


with this code:

    /* Danny Strauss/AA2: remove geteuid check to allow all users to set task
     * attributes (priority, etc.) and replace it with a check of user's 
     * allowed system rt priority limit */

    struct rlimit rl;
    getrlimit(RLIMIT_RTPRIO, &rl);
    printf(""OS_TaskCreate: Setting %s priority %d. "", task_name, os_priority);
    if (os_priority > (int)rl.rlim_cur)
    {
        printf(""OS_TaskCreate: WARNING priority not set because you are limited to priority %d\n"", (int)rl.rlim_cur);
    } 
    else
    {
       printf(""\n"");

",non-bug,https://github.com/nasa/osal/issues/208
ds should (optionally) add a timestamp for each packet stored," CCSDS telemetry packets include a timestamp in the CCSDS headers. Command packets, on the other hand, do not. Also, if CCSDS timestamps are generated by something other than the local CPU, the timestamp may reflect when the packet was generated but not when the packet was received/stored by DS. Thirdly, if the CCSDS timestamp is generated using a different clock that is not in sync, the timestamps may not coincide. This is particularly important in multi-CPU environments, such as when cFS busses are connected via SBN.

This will particularly help with replay using the ds_replay application as the timestamps will accurately reflect when DS received the packets and will be in the correct order.

I suggest adding, for each packet stored in DS, a DS packet header containing a timestamp. This header could also include sequence count, message length (although easy to compute using the CCSDS header, a DS-generated length would make for easier access), byte position in file, or other fields.

Of course, all of this adds to the amount of data stored in DS files, so all should be optional. The DS file header should include the necessary metadata to determine what the DS packet header will contain.

Imported from GSFCCFS-766",non-bug,https://github.com/nasa/DS/issues/7
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen `warnings for documented empty return type`

**Describe the solution you'd like**
Remove unnecessary documentation

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/SC/issues/50
Improve resource management and internal consistency in ES,"**Is your feature request related to a problem? Please describe.**
Executive Services (ES) maintains many internal tables of resources/objects, which track applications, libraries, tasks, counters, and memory pools, etc.

There is a lot of inconsistency in how these internal objects are managed/tracked.  Some have a `RecordUsed` boolean that is set true/false depending on whether the record is used.  App table uses the `AppState` member.  The memory pool passes around direct pointers which are dereferenced (potentially dangerous). 

Furthermore, all ""ID"" values issued to external apps are zero based, and therefore can easily alias other object types or even other objects of the same type.  For instance, if one app had ID ""5"" and it was deleted, and after this a new/different app was started, the new app might also be assigned ID ""5"" ... this means any old/stale reference to AppID 5 will now be referring to the wrong app.

**Describe the solution you'd like**
Define a properly abstract ""resource ID"" type and use it consistently across all these various internal tables.  The abstraction should be based on/compatible with what OSAL does for its internal records.

- The ""id"" value also serves as a marker to indicate whether the respective table entry is in use or not.
- Zero is reserved as an invalid value, and marks entries which are NOT in use.  (e.g. so a `memset()` to all zero can consistently clear an entry).  Valid entries/ids are never zero.
- Valid values are split into a ""type"" and sequential ""index"" value
- Type is unique for apps. libs, counters, etc so these cannot get crossed/misinterpreted (i.e. can't pass an appID in place of a libID or vice versa).
- Index is sequential and does not immediately repeat (i.e. don't wrap until 0xFFFF, do not recycle/reassign IDs after deletion).
- Provide a consistent mechanism to convert ID to a zero based index where an array/table is needed.

**Additional context**
This internal cleanup is a prerequisite to several related tickets:

- #28 - This blurs the difference between Libraries and Applications and makes the App API also apply to libraries, so they need a consistent means of identification and (possibly) make a single unified table.
- #651 - Need a better way to identify mem pools in CMD/TLM messages, not a direct address/pointer.
- #173 - More examples of ugliness/duplication of logic between apps and libs

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/797
Suggested upper limit value creates infinite loop,"When the user sets `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID`, the documentation specifies a range of 1 to 0xFFFF.  This value is later used in a `#define` in cfe_sb_priv.h as follows:

     #define CFE_SB_MAX_NUMBER_OF_MSG_KEYS   (1+CFE_PLATFORM_SB_HIGHEST_VALID_MSGID)

This value is then used as the upper limit of a for loop [here](https://github.com/nasa/cFE/blob/5d7d766941369b6e92a0328217e43d5fd02a8cf1/fsw/cfe-core/src/sb/cfe_sb_init.c#L224).
   
The problem is that if the user sets the upper limit of 0xFFFF as specified, the `CFE_SB_MAX_NUMBER_OF_MSG_KEYS` becomes `65536`.  This value is used as the upper range of the for loop linked above.  Since the iterator used in that loop is a unsigned 16 bit integer, it can never reach `65536` and creates an infinite loop.

Suggested fix would be to:   
1.  Stop using `#define`s which add to other `#define`s
2.  Never use `#define`s as iterator range variables
3.  Check types of all iterators
4.  Change the documentation of `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` to say max value of `0xFFFE`
",non-bug,https://github.com/nasa/cFE/issues/414
Cleanup relative to additional compiler warning flags,"**Is your feature request related to a problem? Please describe.**
Some projects prefer additional flags that trigger warnings in cFE.

Current set:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/sample_defs/arch_build_custom.cmake#L29-L36

Possible additions for consideration:
-Wextra -Wmissing-prototypes -Wimplicit-function-declaration -Wnested-externs

**Describe the solution you'd like**
Analyze, fix what makes sense.

**Describe alternatives you've considered**
Not required to add to default list, but should compile cleanly if enabled (for those that make sense)

**Additional context**
From CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1307
"Sample ""real-life"" implementation of a cFS mission build.","**Is your feature request related to a problem? Please describe.**
From the cFS Mailing list:

>it would be nice to see a fully completed project to decipher why certain features are used. The how is easy to digest from the documentation but a real-world example would help clarify each feature’s intended purpose.
>
>I know a lot of this code may be internal to NASA / other organizations but it would be really helpful to have a completed demo to reference from time to time. 

**Describe the solution you'd like**
A how-to guide or a complete docker image with a mission-like cFS implementation.

**Describe alternatives you've considered**
The current bundle, partnering with open-sat kit

**Additional context**
Also from the mailing list 

> I have also been pulling apart the training VM provided by the cFS-101 repo. It would be incredibly helpful if anyone had any open source projects that I could see, it just always seems that looking through an already completed project is the best way to learn new things and their intricacies. 

**Requester Info**
@astrogeco ",non-bug,https://github.com/nasa/cFS/issues/150
"ut_assert - typo in readme, some clarifications of stub functions","**Describe the bug**
There's a typo in the ut_assert readme, plus some of the stub function comments are not very clear and could use a bit of cleanup.

**Reporter Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/547
Failure to test should be FAIL,"The bamboo test plan does not currently complain if it is
unable to stage and run unit tests on a target, for the
simple reason that our test list is currently entirely
driven by parsing results returned by the target.

If the target VM is offline (as it was last weekend),
there are no indications that the test programs did not
run, and the presence of a few test results (the ones from
static analysis) keeps Bamboo happy.

The plan itself, or its top level scripts (same thing), needs
to keep track of the list of test programs, and generate
test failure reports for any such program for which it
does not obtain results.
",bug,https://github.com/nasa/cFE/issues/102
Overall Tests Pass Even With a TSF,"**Describe the bug**
The software is set up such that overall tests pass even if there is a test case that TSF.  I have had individual TSFs, and yet the overall tests showed everything passed.  

See code here: https://github.com/nasa/osal/blob/80fdd67a6c28a962164697ece12570142331ea44/ut_assert/src/utbsp.c#L213

**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Reporter Info**
Y. M. K.
Emergent ",bug,https://github.com/nasa/osal/issues/537
Add cFE ES Information API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Information API functional tests
– CFE_ES_GetResetType - Return the most recent Reset Type.
– CFE_ES_GetAppID - Get an Application ID for the calling Application.
– CFE_ES_GetAppIDByName - Get an Application ID associated with a specified Application name.
– CFE_ES_GetAppName - Get an Application name for a specified Application ID.
– CFE_ES_GetAppInfo - Get Application Information given a specified App ID.
– CFE_ES_GetTaskInfo - Get Task Information given a specified Task ID.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/808
"Remove references to ""CCSDS"" structures outside of CFE SB. ","**Is your feature request related to a problem? Please describe.**
As a prerequisite to #554, all modules other than SB should __NOT__ refer to the ""CCSDS"" data types and macros.

**Describe the solution you'd like**
Remove references to the `ccsds.h` header file along with any direct references to types defined in this file.  Use the types or abstractions defined in `cfe_sb.h` instead.

**Additional context**
Mostly an issue for the ""Send HK"" commands that accept a `CCSDS_CommandPacket_t` structure.  

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/719
Reduce memory use with MISSION defines to size tlm vs PLATFORM defines for internal table use,"**Is your feature request related to a problem? Please describe.**
Spawned from #945 discussions where the point was brought up that PLATFORM defines could be used to size internal arrays for tracking (for example `CFE_PLATFORM_ES_PERF_MAX_IDS` and `CFE_PLATFORM_ES_MAX_APPLICATIONS`) and MISSION defines could be used for sizing tlm (so all platforms have the same packet definitions).

**Describe the solution you'd like**
Trade the additional requirements/complexity vs memory savings.  Consider requirements/design/implementation updates.  If required, identify prime stakeholder and resources to implement.

**Describe alternatives you've considered**
Leave as is where the mission maximums are used for both tlm and internal sizing (current state meets current requirements).

**Additional context**
#945 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1103
Some source code files have mistakes in the copyright headers.,"**Describe the bug**
The source files have their file names in their headers, but some have just copied the text from another file, so the file names in their headers do not match that of the file.

**Code snips**
[Example where this is a mistake.](https://github.com/nasa/cFE/blob/33a4f19ce6dc2c132823b3c8c487a59d5b4b81a8/modules/cfe_testcase/src/es_cds_test.c)

**Additional context**
It's just a quick fix, not necessary for the program's features.
",non-bug,https://github.com/nasa/cFE/issues/1727
Document recommended file naming conventions and expected content,"**Is your feature request related to a problem? Please describe.**
The CFS apps still vary quite a bit in terms of the content and structure of the source files, even though many do share similar file names in their source trees, the content is not always aligned.

For example, `HS` and `HK` apps both have `tbldefs.h` files (draco-rc4 tag linked here):

https://github.com/nasa/HS/blob/a99b89052d81395df88294d5549bc5cd1a6b703d/fsw/inc/hs_tbldefs.h
https://github.com/nasa/HS/blob/a99b89052d81395df88294d5549bc5cd1a6b703d/fsw/inc/hs_extern_typedefs.h
https://github.com/nasa/HK/blob/b8821d6a65e1d400f0aa99605590a9660de7da4d/fsw/inc/hk_tbldefs.h
https://github.com/nasa/HK/blob/b8821d6a65e1d400f0aa99605590a9660de7da4d/fsw/inc/hk_extern_typedefs.h

But the content of the file between these two apps is quite different; In ""HS"" the `tbldefs.h` file contains only some `#define` statements associated with table definitions, whereas in ""HK"" this has the complete table definition structures.  In contrast, the ""HS"" app puts the complete table structure definitions in `hs_extern_typedefs.h`, but this same file has only a `#define` in HK.

**Describe the solution you'd like**
Improve consistency not only in file naming but also the content and scope/usage of those files, which starts by documenting the recommended patterns so developers have a guide to follow, as opposed to assumptions.

**Additional context**
This is extra misleading in CFS because files _do_ have similar-looking names, which suggests similar usage and content, but the latter is not actually the case.  Having the appearance/veil  of consistency without actual consistency within the file is worse than having no appearance of consistency at all.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/2305
Clarify code by making array index 0 reserved or unused,"The command interface to SC identifies RTSs and ATSs starting with 1, but the code identifies them starting with 0.  Thus in each command, there is code to adjust the Table Number to the Table Index.  Code could be simplified by making array index 0 reserved or unused so that the conversion could be avoided.

Imported from GSFCCFS-1453",non-bug,https://github.com/nasa/SC/issues/6
pc-linux osloader unit test builds wrong test files (x86_64),"On x86_64 Linux platforms, the pc-linux osloader unit test builds the eeprom1 module test files for the x86_64 platform - even when you are building with the -m32 flag in the osal-config.mak file.  

All other tests and binaries are properly built as 32-bit with that osal-config.mak change so the osloader unit tests fail to load 64-bit modules.

The current workaround is to:
{{{
cd osal/build/unit-tests/osloader-test
make -f Modules.mak clean
make -f Modules.mak
# and continue testing
./osloader-test.bin
}}}

",bug,https://github.com/nasa/osal/issues/200
Provide a Checklist for Bug Report Template,"**Is your feature request related to a problem? Please describe.**
To ensure our standard of creating a new issue is enforced, checklists can be used. 

**Describe the solution you'd like**
Implement a checklist feature for the Bug Report template. For example, a checklist can ensure that users checked for similar existing issues before submitting a new issue and ensure users are submitting the issue in the correct repo. 

**Additional context**
References: https://github.com/wireapp/wire-ios/issues/4921

**Requester Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/cFS/issues/209
Add realistic timeouts to workflows,"**Is your feature request related to a problem? Please describe.**
Workflows could run up to the default 360 minutes

**Describe the solution you'd like**
Add realistic timeouts, avoids delayed reports when there really is an issue (test hang, etc)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFS/issues/186
"Applications should use all-inclusive ""cfe.h"" header","**Is your feature request related to a problem? Please describe.**
The CFE documentation recommends that applications use the supplied `cfe.h` header which in turn provides all CFE core, PSP, and OSAL APIs as well as mission config.

Because some header names are getting changed in nasa/cfe#1203, including the headers individually becomes a problem.  

**Describe the solution you'd like**
Change to using the `cfe.h` all-inclusive header, which makes ci_lab work with the new directory structure, and should avoid future issues, and it matches what the documentation recommends.

**Describe alternatives you've considered**
Change `cfe_msg_api.h` -> `cfe_msg.h`

**Additional context**
Needed for nasa/cfe#1203

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/to_lab/issues/90
Inconsistent use of TBL vs TABLE,"**Describe the bug**
It seems we use TBL and TABLE interchangeably. For example 

```
  status = CFE_TBL_Register(&SAMPLE_AppData.TblHandles[0],
                              ""SampleAppTable"",
                              sizeof(SAMPLE_APP_Table_t),
                              CFE_TBL_OPT_DEFAULT,
                              SAMPLE_TblValidationFunc);
```

has both uses. 

**To Reproduce**
Search the sample_app directory for uses of *TBL* and *TABLE* both upper and lower case combinations exist.

**Expected behavior**
A single mnemonic for tables. TBL seems to be the default used in cFS.

**Reporter Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/sample_app/issues/78
Remove the SB APIs deprecated in #777 and #998,"**Is your feature request related to a problem? Please describe.**
Deprecated code should be removed before major release.

**Describe the solution you'd like**
Remove.  Note the only remaining dependence on SB MetaData is get/set user data size, and preference would be to remove this (and get/set user data size would then act like all the other default stubs).

**Describe alternatives you've considered**
None.

**Additional context**
#777 #998

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1002
Replace msg module use of CFE_MISSION_SPACECRAFT_ID with CFE_PSP_GetSpacecraftId(),"**Is your feature request related to a problem? Please describe.**
CFE_MISSION_SPACECRAFT_ID is pending deprecation, see #827

**Describe the solution you'd like**
Replace with CFE_PSP_GetSpacecraftId()

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/836
Update CFE_MSG_Message_t conversions to use CFE_MSG_PTR macro,"**Is your feature request related to a problem? Please describe.**
In nasa/cfe#1966 introduces a `CFE_MSG_PTR` macro which converts a cmd/tlm header object to a `CFE_MSG_Message_t*` pointer, which is intended to be used rather than assuming a specific member name (e.g. `.Msg`).

**Describe the solution you'd like**
Use the macro instead of assuming `.Msg` member name.

**Additional context**
Required when using generated headers, as the member name may not be ""Msg"" or may be further encapsulated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/156
Long switch cases - static analysis warning,"**Is your feature request related to a problem? Please describe.**
The following cases trigger a long switch case static analysis warning.

1. Consider moving to a command processing function, or possibly use the command table pattern (and break up command processing routines into files) like tbl.
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/time/cfe_time_task.c#L514
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_task.c#L409
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_task.c#L442

2. Extensive logic in a case, may benefit from being in a function:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_start.c#L754

**Describe the solution you'd like**
Analyze, possibly refactor.

**Describe alternatives you've considered**
There's more logic required to implement the table pattern, so definitely debatable as to the preferred fix.

**Additional context**
I thought we had an issue to make command processing consistent (tbl vs everything else) but can't find it.  Falls more into the nice to have/refactor bucket so not targeting Caelum (unless someone wants to volunteer).

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1188
Possible race condition in documentation deploy workflow,"**Describe the bug**
Since the github actions jobs run in parallel there might be a case of two git commits trying to be pushed ""at the same time"" 

I suggest moving the multiple deploy stages from the separate doc build jobs into a separate deploy job that depends on the successful builds of all docs. Could potentially do something fancy by deploying to separate ""local"" git branches and then merging them on the deploy branch. 

**To Reproduce**
See https://github.com/nasa/cFS/pull/248/checks?check_run_id=2406018793

**Expected behavior**
All documentation can be deployed 

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Full name and company/organization if applicable
",bug,https://github.com/nasa/cFS/issues/249
HS Telemetry reporting per-core CPU utilization on SMP,"Idle task needs to be updated for SMP so that utilization can be determined for each core.

Imported from GSFCCFS-726",non-bug,https://github.com/nasa/HS/issues/3
OS_QueueCreate failures,"The OS_QueueCreate test (in test_msgq) is failing on specific
versions of specific branches where it previously passed.

I observed that after a string of GREEN builds, the nightly
builds were in RED status, with this test being the trigger
for the failure, but only on one of the two test targets.

Rebooting the test target involved cleared the failure. This
is not an acceptable long term solution; testing should not
induce resource leaks.

This was observed on the 64-bit X86 Linux test target, but I
suspect it will be common to all targets sharing that OSAL
Message Queue implementation.

",bug,https://github.com/nasa/osal/issues/77
Improve cmake function naming/documentation for cfe 6.6 branch,"Some new users are reporting that its hard to figure out how to build a CFS app with ECI (example #9 ). I think this can be partially addressed by pointing them at the CI pipeline as a ""recipe"", but I think it would be helpful to add some better breadcrumbs for them to follow. 

As a couple examples, I'd suggest perhaps: 
* renaming `setup_cfe.cmake` to `eci_utils.cmake` or something similar, to reflect that there are functions in there for doing more than just setting up cfe (sets up CFS system, also some helper functions for integrating ECI apps, etc).
* add docstrings for each function in that file explaining the result of each and perhaps at what point in the integration process its useful.
* ensure that the function names reflect their purpose. For example, I think `create_cfe()` might be more aptly called `clone_cfs` or `clone_cfs_if_not_exist` (though that's a little verbose). `install_eci` I think performs multiple operations (integrates to/sch/ci files, install eci source, etc) but from the name I'd think it only puts the ECI source files into the CFS tree.
* Ensure that functions output messages to track their progress, which can also help document the functions. 

Let me know if this makes sense and we can discuss any specific changes here as well.",non-bug,https://github.com/nasa/ECI/issues/16
Remove ES_APP_DEBUG ifdef and related code,"**Is your feature request related to a problem? Please describe.**
Debug code exists in flight code, uses printf, ifdefed out with ES_APP_DEBUG.  Undocumented option.

**Describe the solution you'd like**
Remove.

**Describe alternatives you've considered**
N/A

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/639
Remove old MKS flags in comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",bug,https://github.com/nasa/PSP/issues/101
CFE enumeration names,"In order to reduce the chance of name space conflicts, enumerated names should follow the general form, with the value prefixed by the group name and the app name:

<APPNAME>_<GROUPNAME>_<VALUEID_1>
<APPNAME>_<GROUPNAME>_<VALUEID_2>
....
<APPNAME>_<GROUPNAME>_<VALUEID_N>

This ensures that even if two enums use the same value name(s) they will not conflict with each other.

Most #define'd values already follow this general form, but there are some exceptions.  These should be fixed to be consistent.

",bug,https://github.com/nasa/cFE/issues/42
Incomplete coverage test for cfe_es_start.c and cfe_es_syslog.c,"**Is your feature request related to a problem? Please describe.**
coverage test: 99.2%

missing coverage for the following:

cfe_es_start.c : CFE_ES_CreateObjects
```
     945           0 :             default:
     946           0 :                break;
```

cfe_es_syslog.c : CFE_ES_SysLogReadData

`     333           0 :             break; `

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/467
CFE needs to compile with the interface properties provided by OSAL,"**Is your feature request related to a problem? Please describe.**
After the changes introduced by nasa/osal#312, the OSAL CMake script will no longer force setting of `CMAKE_C_FLAGS` directly in the CFE build by overwriting this value (which is good).  

Instead, any required compile definitions and related information will be conveyed in the more appropriate manner, through the `INTERFACE_COMPILE_DEFINITIONS` and `INTERFACE_INCLUDE_DIRECTORIES` on the ""osal"" library target.

**Describe the solution you'd like**
To work with this change, the CFE needs to explicitly check these properties on the osal target and use the values.  By setting a directory-scope property at the top level, it will apply to all code.

**Describe alternatives you've considered**
CMake does this automatically so long as the executable directly links with OSAL.  However, this doesn't apply to the apps which are built as a `MODULE`.   This is why it is easier to set the directory property so its all-inclusive.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/581
Missing cppcheck in github actions workflow,"**Describe the bug**

cppcheck test is no longer checked in continuous integration after migrating from TravisCI

**Expected behavior**
A step that runs cpp check before compiling

**Additional context**
None


",bug,https://github.com/nasa/cFS/issues/166
JSC: add static initializers to all local variables,Originally done as part of trac #45 and split off for CCB review purposes.  Only affects vxworks6 OSAL.,bug,https://github.com/nasa/osal/issues/137
Break up osapi-os-core.h into more focused includes,"**Is your feature request related to a problem? Please describe.**
Spawned from #404 discussion - osapi-os-core.h is a monolithic include covering a vast array of APIs, which makes changes harder conceptually separate and manage.

**Describe the solution you'd like**
Break up osapi-os-core.h - could use the deprecation process to avoid breakage where osapi-os-core.h just includes all the more focused headers.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/410
cFE 6.6 Verification Testing Required for Release,This ticket will be used to document the cFE 6.6.0 verification testing that will be performed at each center and capture the results of each test.,bug,https://github.com/nasa/cFE/issues/238
Fix size check in CFE_ES_InitializeCDS(),"In the `CFE_ES_InitializeCDS()` function, the pool size is computed by the following code:
{{{
CFE_ES_Global.CDSVars.MemPoolSize = CDSSize - CDS_POOL_OFFSET - sizeof(CFE_ES_Global.CDSVars.ValidityField);
}}}

However, if the passed-in ""CDSSize"" is actually smaller than the sum of these two constants, then the size will wrap and become very large.

This code must first check that the passed-in size is not smaller than this constant, if it is, the subtraction shouldn't be done.
",bug,https://github.com/nasa/cFE/issues/158
Double semicolon in #define macro?,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Code snips**
Does this macro expand out and result in a double-semicolon (i.e. an empty statement)?
https://github.com/nasa/CF/blob/e1daebed33b02929945caa44404e491ef7a56d02/unit-test/utilities/cf_test_utils.h#L222

For example, here:
https://github.com/nasa/CF/blob/e1daebed33b02929945caa44404e491ef7a56d02/unit-test/cf_chunk_tests.c#L355-L358

**Reporter Info**
Avi Weiss @thnkslprpt",bug,https://github.com/nasa/CF/issues/351
Automatically update leap seconds in sample cmake,"**Is your feature request related to a problem? Please describe.**
Based on #983, it would be useful to set up a github bot to check and update this every six months or so. 

**Describe the solution you'd like**
Automate updating this file.

**Describe alternatives you've considered**
Periodically open an issue when the leap seconds fall out of date.

**Additional context**
Official source of Leap Seconds
https://datacenter.iers.org/data/latestVersion/16_BULLETIN_C16.txt

**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/cFE/issues/992
Implement coverage test for RTEMS,"**Is your feature request related to a problem? Please describe.**
Coverage tests not implemented for RTEMS

**Describe the solution you'd like**
Add coverage tests

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1207
Incorrect test of taskSpawn result in VxWorks implementation,"**Describe the bug**
The VxWorks implementation is testing for an error result from the `taskSpawn` API call by comparing with `(TASK_ID)0`.  This is incorrect, the VxWorks API documentation says that when taskSpawn fails, it returns the value `ERROR`, not 0.

**To Reproduce**
This can only be reproduced in unit test.

**Expected behavior**
The error handing path should be taken when `taskSpawn` returns `ERROR`.

**System observed on:**
Ubuntu 18.04.2 LTS 64 bit (running OSAL coverage unit tests)

**Additional context**
Discovered when implementing the coverage error path unit tests in #230 

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/269
Clean up strncpy use,"**Is your feature request related to a problem? Please describe.**
Still occasionally using hardcoded defines for the character array length.  Better to use sizeof to simplify maintenance.  Also not always setting last character null.

Example:
https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/src/es/cfe_es_api.c#L1710
...
https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/src/es/cfe_es_api.c#L1740-L1741

**Describe the solution you'd like**
Use sizeof.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/1089
Fix unit test coverage build,"During some recent unit testing, it was observed that the coverage flags (-pg, --coverage) were not being correctly applied to code under test, and therefore the coverage report could not be generated.

I tracked this down to a previous build change that reset all C flags to allow the unit testing to be performed with a different BSP than the main test.  Unfortunately as a side effect the UT coverage flags were also lost.",bug,https://github.com/nasa/osal/issues/239
Automate Generation of Integration Candidate Branch,"**Is your feature request related to a problem? Please describe.**
Generating the integration candidate branch is a very straightforward process, although it can be highly time consuming. Automating this process can result in significant time savings.

**Describe the solution you'd like**
Use a GitHub workflow to automatically merge a set of pull requests into the integration candidate branch and push it to GitHub.

**Describe alternatives you've considered**
Scripts can be used to simplify this process as well, but it requires setup by the person maintaining the repository and isn't as portable.

**Requester Info**
Dylan Baker/NASA GSFC 582",non-bug,https://github.com/nasa/PSP/issues/390
Pre-CMake fallback build script needs updating.,"Provision was made in the build system for building with
either the classical build tree (tools/gsfc_build) or
the modern CMake based system. Mainly this was put in place
back when CMake was coming on line, and has not been used
or maintained since the CMake support became part of the
baseline ""development"" tree.

This facility was recently activated by the HOTFIX 6.4.2
integration candidate, and could use some attention.

We should also consider activating the Bamboo job that applies
the pre-CMake build script to post-CMake branches, if we want
to make sure that the classical build keeps working in
parallel with the CMake build. Or not, if we want to be more
aggressive about pushing people forward into the brave new
world of better build systems ... yeah, a CCB decision.
",bug,https://github.com/nasa/cFE/issues/85
CCSDS header file macro CCSDS_INC_SEQ generates a compiler warning when referenced (GSFC DCR 22932),"The macro CCSDS_INC_SEQ defined in ccsds.h generates a compile time warning because it calls the macro CCSDS_WR_SEQ with 2 arguments.  The first argument is ""phdr"" which is ok, but the second argument is ""CCSDS_RD_SEQ(phdr) + 1"" which is not ok.  The problem is that the second argument results in code that looks like (x + 1 >> 8), which is unclear.
Putting ""CCSDS_RD_SEQ(phdr) + 1"" inside parens results in code that looks like ((x + 1) >> 8) which is ok.

Change macro CCSDS_INC_SEQ
 
from:
{{{
#define CCSDS_INC_SEQ(phdr) CCSDS_WR_SEQ(phdr, CCSDS_RD_SEQ(phdr)+1) 
}}}
to:
{{{
#define CCSDS_INC_SEQ(phdr) CCSDS_WR_SEQ(phdr, (CCSDS_RD_SEQ(phdr)+1))
}}}
",bug,https://github.com/nasa/cFE/issues/137
Avoid OSAL IDs in messages/data files,"**Is your feature request related to a problem? Please describe.**
OSAL runtime types aren't really defined as part of the external (i.e. mission-scope) interface.  The `osal_id_t` is one such example - it is a local runtime type, not really intended to be saved in data files or command/telemetry messages.

This might seem pedantic because it is simply a `uint32`, but when using CFE with a command/data dictionary tool this becomes apparent that the OSAL types used in telemetry and data files aren't part of the data dictionary.  (OSAL itself doesn't have a cmd/tlm interface so it naturally wouldn't provide any such entity).

**Describe the solution you'd like**
Use the `CFE_ES_ResourceID_t` instead.  Call `CFE_ES_ResourceID_FromOSAL()` when writing and `CFE_ES_ResourceID_ToOSAL()` when reading, to do the type conversion.  The underlying value is compatible (i.e. both 32 bit `uint32`, same numbers) so it should be transparent to external tools.

**Describe alternatives you've considered**
Have OSAL provide a stablized CMD/TLM definition of IDs?  (but CMD/TLM interface is not really part of OSAL's role - it is a runtime library)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/965
Reduce redundant code in fm_cmd_utils.c,"Most verify functions in fm_cmd_utils contain several instances of checking the FilenameState.  Could that code be refactored into its own function that receives the set of valid return codes, and is able to validate the return code or report the errors (maybe a bitmap). This would eliminate a big portion of redundant code.  Or could it use switch statements?

Imported from GSFCCFS-1026",non-bug,https://github.com/nasa/FM/issues/7
Fix all PSP Memory functions that use a uint32 for memory addresses,"Many functions within the PSP code use a uint32 to store a memory address.  This practice reduces code portability, most importantly it completely breaks on 64-bit processors.

Reference [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/7]

At a minimum the uint32 should be replaced with an integer type guaranteed to be wide enough for memory addresses on the local CPU.

Note that this change depends on having an OSAL that offers the ""cpuaddr"" type for this purpose.
",bug,https://github.com/nasa/PSP/issues/8
Incorrect Osal API guide format in Users guide reference ,"The API is no longer a *.doc, it's generated and deployed from doxygen as a pdf, and it goes in a separate branch.  Right now it's in the cFS repo at https://github.com/nasa/cFS/blob/gh-pages/OSAL_Users_Guide.pdf.

_Originally posted by @skliper in https://github.com/nasa/cFE/pull/1615#discussion_r648596129_",non-bug,https://github.com/nasa/cFE/issues/1616
osnetwork.c API discrepancies,"The VxWorks osnetwork.c code differs from the OSAL Library API documentation under some conditions.  Even more interesting, the posix and rtems OSAL implementations behave differently from the VxWorks as well.

In osal/src/os/vxworks6/osnetwork.c, the documentation and code for

{{{
int32 OS_NetworkGetID (void) 
}}}
don't match when there is no network (e.g. OS_INCLUDE_NETWORK is undefined in osconfig.h).

The c source file function comments are:
{{{
  Returns: OS_ERROR if the  host id could not be found
    a 32 bit host id if success
}}}
The OSAL Library API.pdf has:
{{{
Returns:
OS_ERROR if the operating system calls fail
OS_SUCCESS if success  
}}}
''(That OS_SUCCESS looks like a copyNpaste error, all implementations return the host id for successful behavior.)''

But the VxWorks code returns a (valid) host id of zero, instead of OS_ERROR (a -1) or OS_ERR_NOT_IMPLEMENTED (osapi.h).

When looking at the osal/src/os/rtems/osnetwork.c, I see that it returns OS_ERR_NOT_IMPLEMENTED when the OS_INCLUDE_NETWORK is undefined in osconfig.h.  That return value isn't documented in the OSAL Library API.pdf or in any code comments.  The posix osnetwork.c pays no attention to OS_INCLUDE_NETWORK and always makes the OS-layer network calls (unlike the rtems and vxworks osal's).

Other API surprises: 
{{{
int32 OS_NetworkGetHostName (char *host_name, uint32 name_len)
}}}
can return OS_INVALID_POINTER with a NULL pointer arg.  Good implementation, but needs documentation.

Note: I didn't find a tie-breaker in the osapi-os-net.h because that common header had no comments.  Also, I was unable to find documentation (pdf or code comments) on the meaning of these osapi.h return codes.

'''Initial Recommendations for this ticket:'''
* All OSAL (osnetwork.c) implementations for OS_NetworkGetID() and OS_NetworkGetHostName() should return OS_ERR_NOT_IMPLEMENTED when the OS_INCLUDE_NETWORK is undefined and not even attempt to make OS calls.
* The OSAL Library API.pdf function documentation should be updated to cover all possible return values.
* The separate osnetwork.c documentation should be removed in favor of a common function description in the osapi-os-net.h, which all OSAL implementations use.  Its too easy to focus in on one .c source and not realize there is an API discrepancy.
* Document (in the osapi.h and in the OSAL Library API.pdf) the meanings of these common OSAL return codes.",bug,https://github.com/nasa/osal/issues/84
Requirement cES1008 Failure,"**Describe the bug**
Requirement cES1008 specifies:  Upon receipt of a Command the cFE shall Reload the Command specified cFE Application from the Command specified cFE Application file.

This is not consistent with how the FSW works.  If a reload command is received, the FSW will restart the Application with the previously loaded version as long as the command specified cFE Application file exists.  The same result is seen if an App is started/stopped - then loaded/started with a new version.  The system/event log entries will indicate that the loading/starting of the new version of the App is successful...however the original version of the App will be the one that will actually be executed.   

**To Reproduce**
Steps to reproduce the behavior:
1. Start an App
2. Send the reload command with a filename that contains a different version of the App (App name must remain constant)
3. Verify that the original version of the App was actually the one started.

Alternatively:
1. Start an App
2. Stop the App
3. Start a different version of the same App (App name must remain constant)
4. Verify that the original version of the App was actually the one started.

**Expected behavior**
Able to restart a task of the the same name.

**Code snips**
If applicable, add references to the software.

**System observed on:**
OS: ubuntu-19.10
Versions:  cfe:  v6.7.0+dev295; osal: v5.0.0+dev247; psp:  v1.4.14.0

**Reporter Info**
Dan Knutsen
",bug,https://github.com/nasa/cFE/issues/952
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns. 

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/osal/issues/743
Changelog Workflow Failing,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The changelog workflow does not work due to a syntax error. 

**Expected behavior**
Remove total issues as this is not a valid option in the workflow. 

**Reporter Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/295
VxWorks build failure in OS_FileChmod_Impl,"**Describe the bug**
Failure occurs on a VxWorks 6.9 build:

```
/home/jphickey/cfecfs/github/osal/src/os/portable/os-impl-posix-files.c: In function 'OS_FileChmod_Impl':
/home/jphickey/cfecfs/github/osal/src/os/portable/os-impl-posix-files.c:202: error: too few arguments to function 'open'
make[7]: *** [osal/vxworks_impl/CMakeFiles/osal_vxworks_impl.dir/__/portable/os-impl-posix-files.c.obj] Error 1
```

Looks like this was recently introduced in the 2020-11-03 IC in via #639 ... 

**To Reproduce**
Build for MCP750 / vxworks 6.9 platform using standard method and default config.

**Expected behavior**
Build succeeds.

**Code snips**
Looks like VxWorks 6.9 doesn't implement `open()` per POSIX specs - it only has the 3 argument form (with mode) and not the 2 argument form.

**System observed on:**
VxWorks 6.9

**Additional context**
Hopefully we can get a CI that includes VxWorks....

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/655
Add automated revision increment on merge to master,"**Is your feature request related to a problem? Please describe.**
From CCB discussions, should increment master revision on merges (except on *_version.h file)

**Describe the solution you'd like**
Automate via GitHub Actions, template started on branch in ci_lab that triggers
 - still need to do update (via script, something like attached)
 - still need to figure out how to commit (some key?)
 - may need to be done remotely, triggered by GitHub and use a key to check back in

**Describe alternatives you've considered**
Update by hand (error prone)

**Additional context**
NA

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/18
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1235
"Split ""ResourceId"" type into a separate module","**Is your feature request related to a problem? Please describe.**
The `CFE_ES_ResourceId_t` type is currently defined by ES, but in issue #985 and PR #1092 this was extended to be used by SB.  There is also a potential to use it for TBL handles as well.

There is also some choice here - in that the `CFE_ES_ResourceID_t` type can be a simple typedef to `uint32` for compatibility, or a type-safe wrapper to make sure it doesn't get mixed.

**Describe the solution you'd like**
Put the type definition and associated access functions/macros/constants into a separate CFE module, like `msg` and `sbr` are currently done.  This gets it out from being an ""ES"" type, extending it apply to all of CFE core and possibly also apps.

**Additional context**
This also can incorporate a solution for #913 - each app may specialize the generic type with its own typedef.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1108
CCSDS secondary header consistency update,"Update data structure definition of CCSDS command secondary header to be consistent with the rest of the message header definition.

       from
/*----- CCSDS command secondary header. -----*/
typedef struct 
{   
      uint16  Command;      /* command secondary header */
      /*  bits  shift   ------------ description ---------------- */
      /* 0x00FF    0  : checksum, calculated by ground system     */
      /* 0x7F00    8  : command function code                     */
      /* 0x8000   15  : reserved, set to 0                        */
} CCSDS_CmdSecHdr_t;

       to
/*----- CCSDS command secondary header. -----*/
typedef struct 
{   
      uint8  Command[2];      /* command secondary header */
      /*  bits  shift   ------------ description ---------------- */
      /* 0x00FF    0  : checksum, calculated by ground system     */
      /* 0x7F00    8  : command function code                     */
      /* 0x8000   15  : reserved, set to 0                        */
} CCSDS_CmdSecHdr_t;

Requested by Tam via email.",bug,https://github.com/nasa/cFE/issues/297
Add UT assert stubs to CFE,"=== History ===

As part of OSAL tracs [cfs_osal:57] and [cfs_osal:17], the basic UT assert framework was integrated into OSAL so that it will be available for all unit testing.  The OSAPI stub functions were also added as a side library distributed wit",non-bug,https://github.com/nasa/cFE/issues/116
VxWorks stack address calculation should use unsigned type,"**Is your feature request related to a problem? Please describe.**
The VxWorks task create implementation calculates a stack base address which involves adjustment such as rounding and accounting for whether the stack grows up or down (per VxWorks requirements of `taskInit()`.

This does the calculation as integers, and currently uses the `long` type.

The risk is that if the address happens to lie in the negative range of this type, then the rounding/adjustments may need to go in the opposite direction.

**Describe the solution you'd like**
The address calculations should use `unsigned long` instead of `long` just to ensure that all rounding and base address adjustments behave the same way in the event that the addresses lie in the upper half of memory (i.e. start with a 1 bit) which would put it in the negative range of a `long` type.

**Additional context**
This is really just a suspicion of a possible issue - can't really confirm/test because we don't have direct control of where these stack buffers get allocated in memory.

But either way using `unsigned` would be more correct anyway - and would simply avoid the possibility that the operation works differently depending on its value.

It probably used `long` in the first place only because that is what the arguments to `taskInit()` are declared as.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/651
Use `CFE_TBL_BufferSelect_Enum_t` for `ActiveTableFlag` in TBL,"**Is your feature request related to a problem? Please describe.**
`ActiveTableFlag` not using expected type:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/inc/cfe_tbl_msg.h#L533
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/inc/cfe_tbl_msg.h#L563

**Describe the solution you'd like**
Use `CFE_TBL_BufferSelect_Enum_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1502
Move table header definitions to table header,"SC_RtsEntryHeader_t and SC_AtsEntryHeader_t are currently defined in sc_app.h:
https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_sc/-/blob/develop/fsw/src/sc_app.h#L306
https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_sc/-/blob/develop/fsw/src/sc_app.h#L330

Really should be owned by sc_tbldefs.h so that tables that use them don't need to include the entire sc_app.h.

Imported from GSFCCFS-1840",non-bug,https://github.com/nasa/SC/issues/16
Use sized char array for `CFE_SB_GetAppTskName` parameter and limit print,"**Is your feature request related to a problem? Please describe.**
`CFE_SB_GetAppTskName` takes a char pointer `FullName` without an associated size.  Relies on user to size the buffer correctly for the sprintf:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_priv.c#L304
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_priv.c#L335

**Describe the solution you'd like**
Related to #1457, explicitly size as an array and use snprintf to print to limit appropriately.  Note #994 suggests moving this to a generic utility (out of SB scope), maybe ES API.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1465
Remove all mentions of ASIST or ITOS artifacts from documentation,"Some of our doxygen docs still reference ASIST or ITOS artifacts. 

See 
cfs_mm repo: fsw/src/mm_msgdefs.h:l28

Imported from GSFCCFS-1929",non-bug,https://github.com/nasa/MM/issues/16
Resolve static analysis warnings in unit tests,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Various static analysis warnings observed in unit tests (license restricts publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/242
Const correct parameter inputs in EVS,"**Is your feature request related to a problem? Please describe.**
`EVS_PktPtr` should be const:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.h#L55

**Describe the solution you'd like**
Const.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1411
Better error code for ESPIPE lseek failure (not OS_ERR_NOT_IMPLEMENTED),"**Is your feature request related to a problem? Please describe.**
OS_ERR_NOT_IMPLEMENTED error code used for ESPIPE lseek error:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-posix-io.c#L132-L141

**Describe the solution you'd like**
Replace error code with something more appropriate

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/867
Create Contributing.md,"**Is your feature request related to a problem? Please describe.**
Create a Contributing.md file so users know how to engage with cFS. 

**Describe the solution you'd like**
Include instructions on how to report bugs, request a feature, participate in discussions, create pull requests, and view security vulnerabilities. 

**Additional context**
I would like to create a code of conduct for this file. I would also like to explore how cFS could allow more discussions from the community such as using gitter.im, discourse, or a discussions template to use in issues.

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFS/issues/194
Apps should use CFE_MSG_PTR macro instead of cast or local unwrapping,"Apps typically cast to a CFE_MSG_Message_t or use *.Msg.  Better to use abstracted CFE_MSG_PTR. NOTE - Not backwards compatible with Caelum so recommend not addressing in Draco.

Imported from GSFCCFS-1900",non-bug,https://github.com/nasa/HK/issues/6
Deprecate / remove network_includes.h?,"`network_includes.h` seems to be a strange file to have in the executive. Nothing else in cFE uses it, and it is the only file in the core (non stub) code to test the various `_OS_` macros (`_LINUX_OS_`, `_MAC_OS_`, etc.).

Should this file continue to exist as part of cFE? Or can it be deprecated and eventually removed? Apps that use it could keep their own copy as needed.",non-bug,https://github.com/nasa/cFE/issues/260
RTEMS build broken,"**Describe the bug**
Needs updates to fix issues related to `OS_Milli2Ticks`
- Missing prototype
- References to old function prototype still exist in some RTEMS source files.

**To Reproduce**
Build default configuration for RTEMS 4.11.  Fails to compile with errors such as:
```
/home/joe/code/cfecfs/github/osal/src/os/rtems/src/os-impl-countsem.c: In function 'OS_CountSemTimedWait_Impl':
/home/joe/code/cfecfs/github/osal/src/os/rtems/src/os-impl-countsem.c:212:5: error: implicit declaration of function 'OS_Milli2Ticks' [-Werror=implicit-function-declaration]
     TimeInTicks = OS_Milli2Ticks(msecs);
     ^
```

**Expected behavior**
Should compile cleanly.

**System observed on:**
Ubuntu 20.04 (host) cross buiding for RTEMS 4.11.3 / pc-686 BSP

**Additional context**
Typo noted in #614 but there are more problems than just that....

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/615
Deprecate CFE_ES_ChildTaskMainFuncPtr_t,"**Is your feature request related to a problem? Please describe.**
All ES task functions can use CFE_ES_TaskEntryFuncPtr_t, don't need separate child typedef
See: https://github.com/nasa/cFE/pull/1283#discussion_r611505148

**Describe the solution you'd like**
Deprecate

**Describe alternatives you've considered**
Could add `void *` to be able to spawn with context, trade a single definition vs different for main task/child.

**Additional context**
Code review #1283

**Requester Info**
Jacob Hageman - NASA/GSFC, submitted by @ezpollack
",non-bug,https://github.com/nasa/cFE/issues/1304
Include PSP API unit testing stubs in PSP,"In the distributed UT assert framework, unit testing stubs for PSP functions should be included with the PSP.",non-bug,https://github.com/nasa/PSP/issues/81
Size is insufficient in call to CFE_SB_AllocateMessageBuffer(),"The invocation of CFE_SB_AllocateMessageBuffer() here only allocates for CF PDU maximum size:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L401

The returned buffer is only guaranteed to be large enough for a CFDP PDU itself, not the extra SB headers/encapsulation.  This needs to be a little larger to account the CFE SB headers.  Preferred call should be something more like:

    CF_AppData.engine.out.msg = CFE_SB_AllocateMessageBuffer(offsetof(pdu_s_msg_t, ph) + CF_MAX_PDU_SIZE);


",bug,https://github.com/nasa/CF/issues/72
Inconsistent error messages in verify header,"**Is your feature request related to a problem? Please describe.**
Some of the `cfe_es_verify.h` messages don't match the test:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_verify.h#L50-L52
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_verify.h#L162-L166
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_verify.h#L171-L312

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1364
Support for statically linked CFS applications,"Some platforms (RTEMS, for example) do not natively support the concept of dynamic module loading.  Even on platforms that do offer this feature, it is sometimes beneficial to statically link anyway, at least in certain circumstances, since there is some extra runtime overhead when using a dynamically linked library vs. a statically linked library.

This will add the build infrastructure to do this, along with the necessary hooks to include statically linked modules into the PSP as well as CFS applications and libraries.

See also [cfs_psp:3] for the PSP enhancement to work with this.




",non-bug,https://github.com/nasa/cFE/issues/115
Multiple return statements in LC_CreateTaskCDS and LC_TableInit,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/LC/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/LC/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Multiple returns are a coding style violation, and the implementation is challenging to follow (see #12 and others).
https://github.com/nasa/LC/blob/bb910369436b80b48bd098e8a987e2b0ad4cd1cf/fsw/src/lc_app.c#L332-L493
https://github.com/nasa/LC/blob/bb910369436b80b48bd098e8a987e2b0ad4cd1cf/fsw/src/lc_app.c#L735-L855

**Describe the solution you'd like**
Single entry/exit point from functions.  Refactor to simplify flow.

**Describe alternatives you've considered**
None

**Additional context**
Could group w/ multiple issues or tackle by file. 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/LC/issues/36
Consolidate implicit entries in MISSION_DEPS to defaults file,"**Is your feature request related to a problem? Please describe.**
The build currently sets `MISSION_DEPS` as a list of dependencies which is basically the CFE core and OSAL by default.  There is a desire to consolidate all ""fixed"" entries into a separate defaults file for increased visibility and manageability.

**Describe the solution you'd like**
These two dependencies can be consolidated into the `MISSION_CORE_MODULES` default list being proposed in PR #740, but this also depends on #728 so it needs to be implemented separately.

**Additional context**
This is a dependency of both PR #728 and #740.  Original discussion here:
https://github.com/nasa/cfe/pull/740#discussion_r441589460

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/746
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/to_lab/issues/116
network-api-test fails if OSAL_CONFIG_INCLUDE_NETWORK is false,"**Is your feature request related to a problem? Please describe.**
Set all INCLUDEs to false and network-api-test failed

**Describe the solution you'd like**
Should cleanly handle OS_ERR_NOT_IMPLEMENTED

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/osal/issues/799
Add ut_assert to doxygen detailed design and fix warnings,"**Is your feature request related to a problem? Please describe.**
ut_assert not included, and when it is doxygen warnings are produced

**Describe the solution you'd like**
Include in osa-detaildesign.doxyfile.in and resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/1218
In utassert.h allow all UtAssert macros to use UtAssertEx and __VA_ARGS__ for dynamic output strings,"**Is your feature request related to a problem? Please describe.**
I have to add UtAssert_True as an outer shell to any of the asserts that do not use dynamic arguments.

**Describe the solution you'd like**
Update all the macros (except for UtAssert_Simple) to use UtAssertEx as the base function, removing description and adding __VA_ARGS__.  

**Describe alternatives you've considered**
UtAssert_True wrapper around calls, but this results in two asserts per check which is unnecessary.

**Additional context**
Wrote up the change and did not see any issues while building or running tests.

**Requester Info**
Alan Gibson  NASA GSFC/587
",non-bug,https://github.com/nasa/osal/issues/628
sem-speed-test program creates tasks with zero stack size,"**Describe the bug**
For RTEMS and POSIX this is not an issue because these implementations will just use a minimum stack size, but VxWorks actually creates the task with a very small stack.  The worker tasks are then likely to overrun the stack, causing undefined behavior.

**To Reproduce**
Execute sem-speed-test on the MPC750 test platform
Observe inconsistent behavior during/after test (sometimes it completes OK, sometimes errors, occasionally even a reboot).

**Expected behavior**
The test should complete successfully.

**System observed on:**
MCP750, VxWorks 6.9

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/272
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS is tested. By providing this information, transparency is provided to the community which promotes trust. 

Also, when adding a new issue, there are three templates to chose from. One of the templates is Report a Security Vulnerability. When clicking this template, it redirects the user to the Security Policy which states to use the Bug Report template. I think this is redundant and making the user do extra unnecessary steps. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

For the template issue, an easy solution is to have the bug report state that this includes security vulnerabilities and get rid of the Report a Security Vulnerability template. 

**Describe alternatives you've considered**
Another option is to allow the Report a Security Vulnerability template to redirect the user to the Security Policy, but change the policy to say something along the lines of emailing us for security vulnerabilities. Then we would have to define what is considered a security vulnerability, which I believe to be a vulnerability dealing with authorization, authentication, and encryption issues.

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/196
macros for simpler unit test code,"**Is your feature request related to a problem? Please describe.**
Existing cFE unit test code is voluminous and contains a lot of redundant conditional code.

**Describe the solution you'd like**
The checking of conditions in cFE unit tests can be simplified with macros and/or functions.

**Describe alternatives you've considered**
Would still like to consider a test generator of some sort...

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/491
Suggest adding a child task to sample_app,"**Is your feature request related to a problem? Please describe.**
Not related to a problem.  

**Describe the solution you'd like**
A simple child task could be added to sample_app to demonstrate how a child task is created.  If sample_app is intended to be a fully featured example/template, child tasks are a key thing that is not represented in the sample. 

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Elizabeth Timmons - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/46
Move internal API's and stubs to core_private,"**Is your feature request related to a problem? Please describe.**
Currently the *core_internal.h files that define cFE internal APIs are in core_api along with stubs.

**Describe the solution you'd like**
Move these to core_private since they don't need to be exposed outside of cFE

**Describe alternatives you've considered**
None

**Additional context**
Observations related to code review CFS-41, but not directly related to a comment so not marking w/ label.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1387
Remove Changelog from cFS Documentation Action,"**Is your feature request related to a problem? Please describe.**
Related to https://github.com/nasa/cFS/pull/589
The cFS Documentation and Guides workflow is failing due to an error in PSP's changelog.

**Describe the solution you'd like**
Remove the changelog

**Describe alternatives you've considered**
Keep as is. 

**Requester Info**
Ariel Adams, MCSG Tech
",non-bug,https://github.com/nasa/cFE/issues/2164
CFE ES unnecessarily keeping multiple copies of task/app names,"**Is your feature request related to a problem? Please describe.**
When reviewing the changes for other tickets, noted that the CFE ES is storing the app name in the `AppTable` twice.  It is stored in the `StartParams.Name` subfield, as well as the `TaskInfo.MainTaskName` sub field.  These appear to be always set together, to the same value, such as in CFE_ES_AppCreate for example:

https://github.com/nasa/cFE/blob/3356da650f04b60190642be3efece47afa66b61a/fsw/cfe-core/src/es/cfe_es_apps.c#L554
https://github.com/nasa/cFE/blob/3356da650f04b60190642be3efece47afa66b61a/fsw/cfe-core/src/es/cfe_es_apps.c#L573

It then goes on to store the same string a third time in the TaskTable[x].TaskName field for the task itself:

https://github.com/nasa/cFE/blob/3356da650f04b60190642be3efece47afa66b61a/fsw/cfe-core/src/es/cfe_es_apps.c#L623-L624

The name is a string value and therefore takes a fair bit of memory to store.  In the ""stock"" example config this bloats the size of the ES data structures by about 2500 bytes, but could easily be much more in a real deployment if OS_MAX_API_NAME is set longer and/or the max number of apps/tasks is larger.

**Describe the solution you'd like**
Should store _at most_ one copy of the name in the `AppTable`, but even that might not be needed if it is always the same as the main task name (which it appears to be).

For tasks, OSAL already stores the task name.  For the ES API calls that need to get the name, it should just lookup the name from OSAL, just like we are doing for SB in #404 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/502
"Unify/standardize method for writing files, multiple patterns currently implemented","**Is your feature request related to a problem? Please describe.**
Some files are still written directly from the command handler (main task), see `CFE_ES_WriteSysLogCmd` for example.  Some request the write from a background task using `CFE_FS_RunBackgroundFileDump` and CFE_FS_Background* routines, see `CFE_ES_WriteERLogCmd`.  Then there's also the unique `CFE_ES_RunPerfLogDump` with it's own run function that doesn't utilize `CFE_FS_RunBackgroundFileDump`.

Side note - `CFE_ES_SysLogDump` does not check for CFE_FS_WriteHeader valid size (just >= 0)

**Describe the solution you'd like**
Scrub all file writes and implement a single pattern.  This should standardize events, error handling, scheduling work, dump deconfliction, etc.  Note there's multiple issues with overloaded EIDs in reporting errors, etc.  Avoid additional complexity from ""backwards compatible"" event messages, etc.

**Describe alternatives you've considered**
If these really require different handling, summarize file write handling and document.  Current design is challenging to analyze for file write timing impacts without in-depth knowledge of implementation.

**Additional context**
#1588 documents some of the EventID issues

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1597
split unit-test files,"**Is your feature request related to a problem? Please describe.**
Using the Eclipse IDE, the large size of the unit test source files triggers the ""Scalability mode"".

**Describe the solution you'd like**
There's little reason the source files need to be monolithic, splitting the unit test code (further) into separate files organized by API function or groups of related functions will improve organization, readability and performance.

**Describe alternatives you've considered**
Leaving the files as-is.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/631
cFE req. cES1007.2: Restart Application - Reject On Missing File,"**Describe the bug**
cFE requirement cES1007.2 specifies that a user can not restart an Application if the original file has been removed.  If the user attempts to restart an application following removal of file, the cFE shall reject the Command, increment the invalid Command counter, and generate an event message. 

This is not what happens when the restart application command is received.  If a user has deleted the cFE Application file and then sends the restart application command.  The application successfully restarts.

**To Reproduce**
Steps to reproduce the behavior:
Delete an applications shared library file from the /cf/ location.
Send the associated restart application command.

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cfe v6.8.0-rc1+dev28, osal v5.1.0-rc1+dev12, psp v1.4.0+dev76

**Reporter Info**
Dan Knutsen
NASA/Goddard
",bug,https://github.com/nasa/cFE/issues/915
"Use ""BSP"" lock to protect UtAssert globals","**Is your feature request related to a problem? Please describe.**
As originally noted in #955, the UtAssert global data structures are not protected against concurrent modification by multiple test threads.

UtAssert* functions should not be invoked from child threads, but many tests do this anyway. Although no observed failures can be traced directly to this, it is not correct.

**Describe the solution you'd like**
The BSP lock that was originally implemented to clean up console output can also serve to protect these data structures.  This lock can make it so UtAssert calls can be safely done from any test thread.

**Describe alternatives you've considered**
The tests which use child tasks could be redesigned to only assert from the main thread, but this can be difficult to do in some cases.

**Additional context**
This is the second half of the request in #955, split into a separate work item.  Adding a mutex around the modifications is lower risk than changing the internal data structure initialization, and they can be implemented separately.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1061
'printf': Mismatch between the type expected by the conversion specifier %x and the type of the argument.,"CFE_EVS_DisablePortsCmd calls EVS_SendEvent with a format string for printf that contains the %x specifier (cfe_evs_task.c:1002:9).  EVS_SendEvent is also a varargs function and is called in this case with a variadic argument of type unsigned char. This gets promoted via the default argument promotions to a value of type int (which is a signed type). However, EVS_SendEvent calls vsnprintf with the variadic argument list and the format specifier, which triggers undefined behavior because the %x specifier is expecting a value of type unsigned int. 

The fix is to add a cast to ""unsigned int"" in the call to EVS_SendEvent",bug,https://github.com/nasa/cFE/issues/211
Misspelled AppName string in tbl CFE_TBL_Validate function,"**Describe the bug**
The CFE_TBL_Validate( CFE_TBL_Handle_t TblHandle ) has a misspelling in the AppName string ""UNKNWON""

**To Reproduce**
Directly visible in cfe\fsw\cfe-core\src\tbl\cfe_tbl_api.c -- int32 CFE_TBL_Validate( CFE_TBL_Handle_t TblHandle )

**Expected behavior**
The AppName array should be initialized to the same, consistent string 'UNKNOWN' as elsewhere in the code. However in the usual case, the AppName would almost immediately be replaced with the valid CFE_ES_GetAppName() value upon passing CFE_TBL_ValidateAccess() and would not have much impact other than test logging.

**Code snips**
cfe/fsw/cfe-core/src/tbl/cfe_tbl_api.c
```
int32 CFE_TBL_Validate( CFE_TBL_Handle_t TblHandle )
{
    int32                       Status;
    uint32                      ThisAppId;
    CFE_TBL_RegistryRec_t      *RegRecPtr;
    CFE_TBL_AccessDescriptor_t *AccessDescPtr;
    char                        AppName[OS_MAX_API_NAME]={""UNKNWON""};
```

**System observed on:**
noticed on code inspection

**Additional context**


**Reporter Info**
Mark O. Schlegel, Hammers Inc
",non-bug,https://github.com/nasa/cFE/issues/1246
"CF table updates - default to CF app name to match GSFC apps, disable polling by default","**Checklist (Please check before submitting)**

* [ x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [ x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [ x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Current table name follows lab app pattern w/ *_APP, but GSFC apps don't have the _APP.  Polling directory enabled by default means the warnings/errors about no polling directory existing will show up unless created by the user.  Prefer default behavior to not see these.

**Describe the solution you'd like**
Change CF_APP to CF in table, set polling to disabled

**Describe alternatives you've considered**
Users can override, so not a big deal but nice to stay consistent with apps.  If we want to add *_APP everywhere probably makes more sense as a bulk update.  Note may run into name length issues on other apps by using up the extra 4 chars.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/186
"Global lock for ""timecb"" objects missing","**Describe the bug**
The internal table mutex for the timer callback (timecb) object type is missing/not implemented.   This leave a potential race condition as timer callbacks are registered.

**To Reproduce**
Not observed in real execution at this time - but theoretically possible if two timers are registered by two tasks at the exact same time.

**Expected behavior**
Should be protected.

**System observed on:**
Ubuntu 20.04

**Additional context**
The global lock table is simply missing an entry for this object type.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/474
"Portable select() implementation needs to check filehandle ""selectable"" flag","**Describe the bug**
Not all file handles support the `select()` API -- in particular on RTEMS it only works on sockets.  The File implementation layer contains a boolean flag `selectable` for every file handle to indicate whether the file descriptor can be select'ed upon.

The implementation of this layer needs to confirm/check that the `selectable` flag is true before calling this API.

**To Reproduce**
Run the new `select()` API unit tests on an RTEMS platform, which call this API on regular files.  When it does so, this actually causes an exception and results in kernel panic/abort.    

**Expected behavior**
OSAL should return OS_ERR_NOT_IMPLEMENTED or otherwise avoid calling `select()` on filehandles which the kernel does not handle properly.

**System observed on:**
RTEMS 4.11.3 via QEMU/pc686 BSP.

**Additional context**
Kernel panic result here is rather extreme -- one would have expected that the select() call would simply return error and set an errno as usual.  This probably also signifies an underlying bug in RTEMS.


**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/453
Both enums (index) and defines (mask) exist for event type,"**Is your feature request related to a problem? Please describe.**
Having both the mask and the index requires keeping them in sync.

Event type bitmasks:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/inc/cfe_evs_msg.h#L898-L902

Event type enum:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_evs_extern_typedefs.h#L90-L122

**Describe the solution you'd like**
Collapse to one solution, either use the mask or the enums.  Related to #1438 and #1398.

**Describe alternatives you've considered**
Or use one to create the other so they don't get out of sync.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1447
Missing PSP API Document,"An API reference document is needed and should be provided.  See OSAL API document for reference however, it is highly recommended to create this document via doxygen.",non-bug,https://github.com/nasa/PSP/issues/78
"ES missing branch coverage in CFE_ES_RunPerfLogDump, condition not possible","**Is your feature request related to a problem? Please describe.**
There's no way for the current state to not be < CFE_ES_PerfDumpState_CLEANUP:
```
     481         [ +  - ]:          1 :                     if (State->CurrentState < CFE_ES_PerfDumpState_CLEANUP)
     482                 :            :                     {
     483                 :          1 :                         State->PendingState = CFE_ES_PerfDumpState_CLEANUP;
     484                 :            :                     }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_perf.c#L480-L484

**Describe the solution you'd like**
Maybe this is an artifact of a previous implementation?  Really could just set the pending state to cleanup.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1933
Apply standard code style,"**Is your feature request related to a problem? Please describe.**
Inconstant style

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/pull/30 and https://github.com/nasa/ci_lab/pull/28

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/20
Document available PSPs in trac wiki,"It would be helpful to construct a small Wiki page corresponding
to each Platform Support Package giving a quick overview of
the platform for which support is being provided.

I suggest including hotlinks on each such page back into the `doc`
subtree of the specific PSP for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.
",bug,https://github.com/nasa/PSP/issues/5
Resolve static analysis issues relative to unit tests,"Many actual code issues (uninitialized variables, buffer overruns, etc) identified via static analysis in the unit tests.  All actual ""bugs"" should be resolved.

Imported from GSFCCFS-1936",non-bug,https://github.com/nasa/CS/issues/9
Documentation tag to indicate return vals that are not tested in functional test,"**Is your feature request related to a problem? Please describe.**
The pattern employed in OSAL (and CFE) is that functions should list all directly-generated return values from an implementation as `@retval` tags in doxygen markup.  These are then cross referenced between the test logs to ensure that all documented return value are tested, and all tested return values are documented.

Coverage test should be able to exercise all values all the time, but functional test may not be able to exercise all of them.  In particular the ones which depend on a failure of the underlying system call are not likely to be trigger-able from a functional test environment.

**Describe the solution you'd like**
These return codes should be marked in the doxygen as being ""coverage test only"".  This will capture the fact that this has been checked/examined and the functional test is not expected to reproduce this value.

**Describe alternatives you've considered**
The retval statements could be entirely removed if they are not trigger-able in a functional test environment.  (Many are pass-through values from the low level impl, but probably not all of them)

**Additional context**
This info is valuable not only for this test/documentation round but also any future audits of these test cases by projects and/or future releases.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1554
Add user-specified extra modules to build system,"**Is your feature request related to a problem? Please describe.**
As a prerequisite to #554, the user needs to have the ability to specify their own set of extra modules to provide for the features they are customizing.  

**Describe the solution you'd like**
A new setting in `targets.cmake` that allows users to add their own customization layers.

This is similar to but slightly different than loadable apps in that:

- The same set/config should be applied to all CPUs  (i.e. if using for a message abstraction layer, all CPUs should share the same one).  So it belongs as a global setting, rather than a setting associated with a single target.
- These would be linked with cfe core, rather than as dynamically-loaded libraries because something like a message abstraction layer is needed by SB itself, so it can't be loaded later.

**Additional context**
Initial function would be very simple - just include the libraries in the build, nothing more.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/718
Resource Leak,"**Describe the bug**
Handle variable FileDescriptor going out of scope leaks the handle.

**Expected behavior**
Free FileDescriptor or point to mmap

**Code snips**
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/modules/eeprom_mmap_file/cfe_psp_eeprom_mmap_file.c#L102

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/PSP/issues/311
"Deprecated multiple ""success"" code responses","**Is your feature request related to a problem? Please describe.**
API's with multiple ""success"" codes are frequently mishandled

**Describe the solution you'd like**
Single success response, unique information should be passed back in parameters

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/131
Fix duplicate mempool structure definitions in unit test code,"The unit test code uses its own (re-)definitions of the memory pool management structures.  Specifically, these structure definitions are duplicated:

* CFE_ES_CDSBlockDesc_t
* CFE_ES_CDSBlockSizeDesc_t
* CFE_ES_CDSPool_t
* BD_t
* BlockSizeDesc_t
* Pool_t

These should not be redefined here.  If these ever diverge from the definitions that CFE ES uses, the tests will break.  

The definitions should be moved to a header file and #include'ed in both places to ensure that the same definitions are always used.

",bug,https://github.com/nasa/cFE/issues/55
TOCTOU Bug for open,"**Describe the bug**
Calling function open that uses ""EEPROM.DAT"" after a check function. This can cause a time-of-check, time-of-use race condition.

**Expected behavior**
The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. Could also use the O_CREAT and O_EXCL flags of POSIX's open() function.
https://cwe.mitre.org/data/definitions/367.html
https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files

**Code snips**
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/modules/eeprom_mmap_file/cfe_psp_eeprom_mmap_file.c#L102-L108

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/PSP/issues/310
Update time format to support negative time or unify with OSAL time,"**Is your feature request related to a problem? Please describe.**
Unsigned 32 bit used for seconds in cFE.  Requires unique handing for rollover and avoiding negative time.

**Describe the solution you'd like**
Signed 64 bit seconds, or unify with OSAL time format and provide the necessary conversions.  
Consider typedef of Seconds and Subseconds to support strict checking (if there's still any functions left that take individual elements)

**Describe alternatives you've considered**
None

**Additional context**
Code review, note backwards compatibility issues

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1501
Add VxWorks RTP/Memory Protected Port (GSFC DCR 18626),"This VxWorks 6.x port is available from a 2011 IRAD effort.  It will support running code in a memory protected process under VxWorks.

This port will not affect other OSAL ports.",non-bug,https://github.com/nasa/osal/issues/72
Improve `CheckBits` logic for `CFE_ES_GenPoolBD_t` structure,"**Is your feature request related to a problem? Please describe.**
Magic number (fixed bit pattern) used for `CheckBits` in `CFE_ES_GenPoolBD_t` is weak:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L60
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.c#L208

And related checks against the magic number

**Describe the solution you'd like**
Could use ActualSize and 2s complement (or even 1s complement) of ActualSize for memory check. Higher odds of catching an issue

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1347
Adding cppcheck for cfe-core/src,"**Is your feature request related to a problem? Please describe.**
adding travis.yml for cppcheck on cfe-core/src 

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/427
OSAL Configuration Guide - OSAL_INCLUDEDIR Not Found,"**Describe the bug**
The OSAL Configuration Guide mentions OSAL_INCLUDEDIR in section 2.4.2, Variables that must be specified. This CMAKE variable is not found in any files nor reported issue. 

**Expected behavior**
Update the OSAL Configuration Guide if OSAL_INCLUDEDIR is no longer in use. 

**Reporter Info**
Ariel Adams, ASRC Federal ",non-bug,https://github.com/nasa/osal/issues/640
"Mismatch between MSG API and test case in ""TestMsgId"" functional test","**Describe the bug**
There is a test case in the ""TestMsgId"" set which passes in `CFE_SB_INVALID_MSG_ID` to `CFE_MSG_SetMsgId()`, and expects `CFE_MSG_BAD_ARGUMENT` return value:

https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/message_id_test.c#L48

However:
- The API does not document that it returns CFE_MSG_BAD_ARGUMENT in response to an invalid MsgId value (in fact it does not say anything about validating the input MsgId at all)
- The implementation is not actually checking if its a valid MsgId anyway.  It is checking if it is `> CFE_PLATFORM_SB_HIGHEST_VALID_MSGID`, which is a different concept.

Although this is currently ""passing"" - it is only by chance, because CFE_SB_INVALID_MSG_ID has the value of -1, which when converted to an unsigned int, will be greater than `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` (unless the latter is set to 0xFFFFFFFF). 

**To Reproduce**
Run this test against an alternate MSG module implementation (i.e. one that has different criteria) and/or change the SB definition of ""CFE_SB_INVALID_MSG_ID"".   The test will now fail.

**Expected behavior**
Test case should still pass, even when run against an alternate MSG implementation.  Should not depend on ""chance"" values that it does not control.

**Code snips**
Actual implementation is here (same basic check in v1/v2):
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/msg/fsw/src/cfe_msg_msgid_v1.c#L67

**System observed on:**
Ubuntu

**Additional context**
The important concept is nowhere does the documentation say that the `CFE_SB_INVALID_MSG_ID` constant must be greater than the `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID`.  In fact, the latter may not even exist in all implementations.

- If the intent was to reject an invalid MsgId value, the proper function to use is `CFE_SB_IsValidMsgId`, and the API documentation should state that CFE_MSG_BAD_ARGUMENT will be returned in response to an invalid MsgId (it does not currently say this).
- However, in general the MSG module is just supposed to be a getter/setter, not a validator, in its role.  So in that sense, validating the MsgId is superfluous here, and the check against ""highest"" MsgId should be removed.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1949
UtAssert_Zero in utassert.h doxygen brief incorrectly states nonzero,"**Describe the bug**
What appears to be a copy paste error, the assert zero states it is checking for nonzero.  This mimics the assert nonzero brief above it.

**To Reproduce**
https://github.com/nasa/osal/blob/c3b139863d7edfc904983bea050b2147c8b784ab/ut_assert/inc/utassert.h#L193-L210

**Expected behavior**
State ""Confirm an integer value is zero"" instead.

**Code snips**
see above.

**System observed on:**
N/A

**Additional context**
N/A.

**Reporter Info**
Alan Gibson NASA GSFC/587
",non-bug,https://github.com/nasa/osal/issues/598
Move OS_FS_ERR_* defines to common os error definitions,"OS_DirectoryOpen returns OS_INVALID_POINTER if dir_id or path pointers are NULL.

OS_DirectoryRead returns OS_FS_ERR_INVALID_POINTER if dirent pointer is NULL.

Likely other cases of mixed use.  Suggest deprecation of the OS_FS_ERR_* defines and switch to common definitions.",non-bug,https://github.com/nasa/osal/issues/262
Refactor CFE_ES_StartApplications startup script processing to reduce duplicated logic,"**Is your feature request related to a problem? Please describe.**
Could loop for volatile/non-volatile startup script processing instead of two if blocks:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L92-L144

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1329
Add workflow to locally build osal documentation ,"**Is your feature request related to a problem? Please describe.**
Once https://github.com/nasa/osal/pull/1033 is merged we can now build the osalguide locally and check that PRs don't break the osal docs. 

**Describe the solution you'd like**
Create a ""docs"" workflow github actions workflow

**Describe alternatives you've considered**
Figure out how to trigger the cFS bundle workflows from OSAL PRs

**Additional context**
None
",non-bug,https://github.com/nasa/osal/issues/1054
"""standard"" table organization","**Is your feature request related to a problem? Please describe.**
sch_lab should use cFS standard table organization, to better facilitate per-target tables, etc. Right now, the table source is in fsw/src and the table header definition includes CI and TO header files which are only needed by the table.

**Describe the solution you'd like**
1. Move the table source to fsw/tables
2. Remove the #includes in sch_lab_sch_tab.h
3. Rename sch_lab_sch_tab.h to sch_lab_table.h

**Describe alternatives you've considered**
none

**Additional context**
See https://github.com/nasa/sample_app for another example of how this would be structured.

**Requester Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/sch_lab/issues/49
Set parameter on OS_SelectFdIsSet should be const,"**Is your feature request related to a problem? Please describe.**
This function only checks bits (read only), it does not modify the ""Set"" argument

**Describe the solution you'd like**
The pointer should be qualified `const`

**Additional context**
#854 (part of CFS-38 review) corrected the internal function, but it looks like this one was missed.
It is part of the public API but adding const here shouldn't break anything.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1062
missing PUS lib repo,can anyone let me know where is the repository for cFS PUS application - it used to be in the following location: https://github.com/nasa/cFS/tree/main/apps/pus.,non-bug,https://github.com/nasa/cFS/issues/651
Remove deprecated elements (again),"**Is your feature request related to a problem? Please describe.**
Somehow #1240 got reverted in a few locations (possible merge strangeness):
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_error.h#L1358-L1366
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_sb_api_typedefs.h#L133-L158

**Describe the solution you'd like**
Remove.  Again.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1423
Consolidate CFE_PSP_Get_Timebase and CFE_PSP_GetTime,"**Describe the bug**
This PSP function is not particularly well-documented.  On some systems (pc-linux) it ultimately returns the value of the POSIX ""CLOCK_MONOTONIC"" clock from the kernel.  But on MCP750 it is calculated from a hardware tick counter that wraps every 27 seconds.  There is a bunch of logic in CFE TIME to handle handle this wrap.

**To Reproduce**
The bug is that the background task also samples CFE_PSP_GetTime but does not check for wrap, which works fine on Linux but on VxWorks this probably introduces a timing anomaly every 27 seconds when it wraps.  This probably isn't all that noticeable/serious because the background job will just runs an extra cycle and then resume normal operation, but incorrect nonetheless.

**Expected behavior**
Background job should sample a clock that is known/defined to be monotonic and has consistent/simpler rollover logic.

Alternatives could be the OSAL timebase that drives the 1Hz.  However this is not guaranteed to exist on platforms that do not use the RTOS for the 1Hz.  So it might be necessary to define a new PSP function, similar to CFE_PSP_GetTime, but is defined to be monotonic and has a more well-defined rollover characteristic.  Then this PSP function can just read whatever facility is providing 1Hz signal - RTOS/OSAL, hardware register, or whatever.

**Code snips**
In particular the code here:
https://github.com/nasa/cFE/blob/fa10af72f95a3a36b65352f0688498449487265f/modules/es/fsw/src/cfe_es_backgroundtask.c#L130-L131

This works fine on Linux but likely causes an anomaly every 27 seconds on MCP750 when the clock rolls over.

**System observed on:**
Found during Inspection when looking at other issues.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1244
Mismatched foreach in cmake function,"The endforeach args do not match the foreach args

  foreach(APP ${MISSION_DEPS})
    list(APPEND VARLIST ""${APP}_MISSION_DIR"")
  endforeach(APP ${**MISSION_APPS**})


https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/cmake/mission_build.cmake#L362",non-bug,https://github.com/nasa/cFE/issues/1997
Provide a Checklist for Feature Request Template,"**Is your feature request related to a problem? Please describe.**
To ensure our standard of creating a new issue is enforced, checklists can be used. 

**Describe the solution you'd like**
Implement a checklist feature for the Feature Request template. For example, a checklist can ensure that users checked for similar existing requests before submitting a new issue, ensure users checked that the request is not in our README.MD under  major future work, and ensure users are submitting the issue in the correct repo. 

**Additional context**
References: https://github.com/wireapp/wire-ios/issues/4921

**Requester Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/cFS/issues/210
OSAL fs defines scrub - deprecate OS_VolumeTable and related symbols,"**Is your feature request related to a problem? Please describe.**
FS_BASED, RAM_DISK, EEPROM_DISK, ATA_DISK, NUM_TABLE_ENTRIES all missing OS_ prefix
OS_CHK_ONLY and OS_REPAIR defined, but the input to the expected API is a boolean (bool repair)

**Describe the solution you'd like**
Add prefix, remove unused defines

**Describe alternatives you've considered**
None

**Additional context**
Do after #364 

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/367
"More test failures related to ""chmod"" implementation","**Describe the bug**
The current `OS_FileChmod_Impl` on POSIX has some issues/limitations:

1. A while back this was changed from using the filename based calls to using a file descriptor, which ""protects"" against a theoretical issue where the file may get renamed while the operation is in progress.  However this introduced a potential for a file descriptor leak --  If the `fstat()` call fails, the `OS_ERROR` is returned, but the file descriptor is left open.
2. Any failure is reported as the generic `OS_ERROR` ... This should do a better job of translating the `errno` to a more specific error code.  In particular, not all file systems support unix-style file permissions - such as the very common FAT32/DOSFS - and in this case the `fchmod()` call is likely to return -1 with `errno` set to something like `ENOTSUP` or `ENOSYS`.
3. Also a file system can be mounted read only, which also prevents chmod() from working.

The main issue of 2+3 above is that the generic `OS_ERROR` code causes the chmod unit test to fail. 

**To Reproduce**
Run the chmod test on VxWorks using a DOSFS mounted filesystem (e.g. CF:0 on the MCP750 test platform).

**Expected behavior**
The chmod test cases should be skipped without failing the overall test in cases where the mounted file system does not support/allow permission to be changed.  

**System observed on:**
VxWorks 6.9 on MCP750

**Additional context**
So this is just a matter of translating the `errno` values for these conditions into `OS_ERR_NOT_IMPLEMENTED` instead of `OS_ERROR`, because the test is already implemented to check for and skip the rest of the test when it gets this return code.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/708
"Move PSP timer init earlier, prior to module initialization","PSP modules may require timers.  To support this, the PSP timer initialization should be prior to initialization of the module list.",non-bug,https://github.com/nasa/PSP/issues/69
Abandon and Cancel commands with invalid transaction IDs are silently dropped (not rejected),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF requirements CF5006.1 and CF5007.1 state that, if the command-specified transaction is not in progress, CF shall reject the command. Requirements CF5015.1 and CF5017.1 cover ""all"" transactions and state that, if there are no transactions in progress, CF shall reject the command. CF does not reject such a command by either issuing an event message or incrementing the command failure counter. CF does not take any action other than incrementing the command counter.

**To Reproduce**
Steps to reproduce the behavior:
Issue the Abandon or Cancel command with a transaction ID that is invalid and/or not currently in progress.
Issue the Abandon or Cancel command with the ""all"" specifier when no transactions are currently in progress.

**Expected behavior**
To be consistent with other transaction based commands, CF should provide operator feedback if it fails to find the active transaction ID. At the minimum, it should issue an event message and increment the command failure counter.

**System observed on:**
Ubuntu 20.04 Linux 5.13

**Reporter Info**
Sergio Maldonado, NASA GSFC, Arctic Slope Technical Services
",bug,https://github.com/nasa/CF/issues/273
Implement OS_mkdir access settings,"**Is your feature request related to a problem? Please describe.**
See conversations in <https://github.com/nasa/osal/pull/998>",non-bug,https://github.com/nasa/osal/issues/1005
Disable directory polling in default configuration table,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The default configuration table cf_def_config.c enables channel 0 directory polling on /cf/poll_dir at app startup. Unless that directory already exists on the target filesystem, CF will periodically emit the error event 65 message ""CF: failed to open playback directory /cf/poll_dir, error=-1"". When testing and validating the CF app running defaults, it is not ideal to have unnecessary error events being periodically reported.

**Describe the solution you'd like**
Disable all directory polling in the default configuration table. Because this feature requires foreknowledge of specific directories resident on the target filesystem, it should only be configured and enabled by end users. All channels should have polling disabled and no polling settings in the CF_PollDir_t structure.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Sergio Maldonado, NASA GSFC, Arctic Slope Technical Services",non-bug,https://github.com/nasa/CF/issues/319
Consider Adding the VxWorks RTP/Memory Protected PSP (GSFC DCR 18574),"Add the PSP and startup manager code for the VxWorks RTP implementation.

This was used in an APL/GSFC IRAD to run the cFE within a memory protected process.  Using the startup manager, more than one instance of the cFE can be run on the same processor.

At a minimum this should be added to the ""PSP Technology"" Branch.",non-bug,https://github.com/nasa/PSP/issues/72
Running core-linux.bin Startup Errors,"The startup says the queue depth may be too large for the OS to handle.  The msg_max defaults to 10 but when trying to change it the OS does not allow msg_max file be saved in the editor.

There is another problem with CreatePipeErr.

![image](https://user-images.githubusercontent.com/52501916/65993863-0a298f80-e460-11e9-9c29-a42d1f8f58a8.png)
",non-bug,https://github.com/nasa/cFE/issues/363
Type safety and improved handling of CFE_SB_MsgId_t values,"In 6.6, as we move to supporting MsgId's, MsgKey's, RouteIdx, and other types, we should move away from using native C types and wrapping the types in a struct to prevent accidentally using the wrong type in assignments and function calls.

This will, of course, require re-tooling any existing code that expects the type to be a simple type...

For example, instead of:

```
typedef uint16 CFE_SB_MsgId_t;

uint32 SomeFunction(CFE_SB_MsgId_t MsgId) {
    /* ... */
    return MsgId; /* this will work fine, even though it's bad behavior! */
}
```

Use:

```
typedef uint16 CFE_SB_MsgId_Atom_t;
typedef struct
{
    CFE_SB_MsgId_Atom_t __MsgId; /* private, do not touch */
} CFE_SB_MsgId_t;

uint32 SomeFunction(CFE_SB_MsgId_t MsgId) {
    /* ... */
    return MsgId; /* will now give a compiler error */
}
```
",non-bug,https://github.com/nasa/cFE/issues/245
CFE_TIME_Print possible improvements,"**Is your feature request related to a problem? Please describe.**
CFE_TIME_Print doesn't take a buffer size such that the write to the buffer can be limited, also ""clunky"" implementation to write to the buffer.

**Describe the solution you'd like**
Use snprintf?  Consider new API that includes buffer size?

**Describe alternatives you've considered**
None.

**Additional context**
Could be part of more significant TIME refactor - #302
There is a strange static analysis warning on the null character addition that would go away, but somewhat unrelated.

**Requester Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFE/issues/1202
Idmap API test needs to use real task stack size and priority,"**Describe the bug**
Although Linux allows the stack size to be zero (it uses a nonzero default) other OS's do not have this fallback.  The `idmap-api-test` attempts to create a task with zero stack and this fails on RTEMS.

**To Reproduce**
Run 'idmap-api-test` on RTEMS.  `OS_TaskCreate()` fails (reports as TSF) but then other failures occur related to this.

**Expected behavior**
Should pass.

**System observed on:**
RTEMS 4.11.3 running in QEMU.

**Additional context**
Should consider forcibly making every OS fail (i.e. enforce in shared layer) if passed a zero stack.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/506
TSF: osloader OS_ModuleLoad #4,"The OS_ModuleLoad test case in the osloader unit test fails
during the ""test setup"" loop. Once the test was augmented to
report the failing module name, it was discovered that this
was due to not staging the ""MODULE%d.so"" files to the target
running the unit tests.

Repairs actually applied to the build script over in
the cfs_test project (cfs_test/osal/build.sh).
",bug,https://github.com/nasa/osal/issues/43
Fix Spelling Error in pull_request_template.md,"**Describe the bug**
Code contibutions is misspelled. 

**Expected behavior**
Change Code contibutions to Code contributions. 

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFS/issues/198
CFE_EVS_Register should log or send an event when NumEventFilters > CFE_PLATFORM_EVS_MAX_EVENT_FILTERS,"**Is your feature request related to a problem? Please describe.**
When NumEventFilters is > CFE_PLATFORM_EVS_MAX_EVENT_FILTERS when calling CFE_EVS_Register , the specified filter table can get silently truncated. 

In addition, the Filters parameter should be marked const as it is copied into the filter table. and not modified. 

**Describe the solution you'd like**
Send a message to syslog warning of the truncated filter table 

**Describe alternatives you've considered**
Send an event message using the EVT appID

**Additional context**
 This truncation happens for the CI open source app which has 12 events, but the default cfe_platform_cfg only supports 8 event filters.

**Requester Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/cFE/issues/723
ES Functional Test: Test Write To Sys Log failing intermittently,"**Describe the bug**
cFE Functional test 23 (Test Write To Sys Log) is failing intermittently.

**To Reproduce**
Execute functional tests multiple times.

**Expected behavior**
Test should consistently pass if there is no anomalous config/behavior. 

**Reporter Info**
Dan Knutsen
NASA Goddard
",bug,https://github.com/nasa/cFE/issues/2368
Unlock globals during create/delete ops,"**Is your feature request related to a problem? Please describe.**
For a number of resource create/delete operations, they may take some non-deterministic amount of time to execute in the system, and may require obtaining some type of mutex in the underlying C library too (e.g. if something invokes malloc).  This is especially true of creating and deleting tasks, which may need to malloc() memory for the stack, and need to create a new task resource in the kernel.

Because of this, OSAL should not hold its own global table mutex while the whole operation takes place, as this will also prevent _other_ unrelated ops from completing.

**Describe the solution you'd like**
These operations should reserve an entry in the table but mark it as reserved, not with a normal ID (so distinct from a normal entry).  It can then unlock the global table and complete the non-deterministic parts of the operation, then re-lock when complete.

**Additional context**
This is required for #642, already have it implemented but felt it was worth splitting into a separate issue/commit for tracking purposes.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/osal/issues/703
Streamline change history in ReadMe,"**Is your feature request related to a problem? Please describe.**
The changelog history clutters the ReadMe.

**Describe the solution you'd like**
Move all change history to a new CHANGELOG.md. Replace ""History"" section on ReadMe with a ""Changes in Latest Build"" section that contains the latest entry in the changelog. 

**Describe alternatives you've considered**
Automatically generating the changelog. Stop including the change summary in the ReadMe. 

**Additional context**
None

",non-bug,https://github.com/nasa/cFE/issues/1581
"Update function header comments on ""ng"" implementation functions","Action item from vxworks-ng review held on 2019-08-27:

Across posix-ng, rtems-ng, and vxworks-ng, the implementation functions have header comments that were cut and paste from the original implementation and may not reflect the actual code anymore.

This should be scrubbed prior to the OSAL release.",bug,https://github.com/nasa/osal/issues/263
Remove All Packet command causes to_lab to break,"**Describe the bug**
Sending the TO_REMOVE_ALL_PKT command to to_lab causes to_lab to unsubscribe from its own Message ID. 
This means that to_lab will no longer respond to any commands and has to be restarted for it to function properly again. We ran into this problem at NASA Ames and figured that it was not intended behavior.

When testing for this bug be aware that it can be semi obscured by the fact that any commands for TO_LAB already on the Software Bus will still be processed by TO_Lab. This means that whether or not commands to TO_LAB sent after a TO_REMOVE_ALL_PKT command succeed is highly timing dependent. 

**To Reproduce**
Steps to reproduce the behavior:
1. Send TO_REMOVE_PKT command to TO_LAB
2. Send any other command to TO_LAB
3. Observe that the command has no effect

**Expected behavior**
You should not be able to send TO_LAB a command that puts it into a non functional state

**Code snips**
//This line in to_lab_app.c line 543 is the source of the problem
status = CFE_SB_Unsubscribe(TO_LAB_CMD_MID, TO_LAB_Global.Cmd_pipe);

**System observed on:**
This bug is independent of the environment cfs is run in

**Reporter Info**
James Roach - NASA Research Scientist 
james.h.roach@nasa.gov
",bug,https://github.com/nasa/to_lab/issues/71
cfe_sb.h -- #if instead of #ifdef CFE_OMIT_DEPRECATED_6_8,"Probable typo?

https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/src/inc/cfe_sb.h#L649",bug,https://github.com/nasa/cFE/issues/1081
OSAL needs a concept of event,"One useful primitive missing from OSAL is an event concept. In POSIX, this could be implemented via pipe() where an event is signaled by writing to the write pipe, and cleared by reading from the read pipe. This is useful because multiple events can be blocked upon using select(). (OSAL supports select(), so this makes sense.)",non-bug,https://github.com/nasa/osal/issues/221
CFE_EVS_Send{Crit|Critical|Err|Error|Info|Information|Debug} wrapper for CFE_EVS_SendEvent,"**Is your feature request related to a problem? Please describe.**
With the expansion of the `CFE_EVS_EventType_*` constants as part of `CFE_EVS_SendEvent()`, it got me thinking that we have a lot of extraneous typing when there's only four types of events. What about adding wrapper macros/functions that have the ""EventType"" as part of the function name? I also recommend both long and short versions, such as `CFE_EVS_SendCrit()` and `CFE_EVS_SendCritical()`.

So, for example:

```
CFE_EVS_SendEvent(MYAPP_EVENT_EID, CFE_EVS_EventType_ERROR, ""error message (%d)"", status);
```
becomes
```
CFE_EVS_SendErr(MYAPP_EVENT_EID, ""error message (%d)"", status);
```

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/788
"cppcheck 2.7 style warnings, constParameter","**Is your feature request related to a problem? Please describe.**
From unrelated run: https://github.com/skliper/PSP/actions/runs/3830123523

<html>
<body>
<!--StartFragment-->

severity | location | error id | issue
-- | -- | -- | --
style | fsw/pc-linux/src/cfe_psp_memory.c:758 | constParameter | Parameter 'PtrToKernelSegment' can be declared with const
style | fsw/pc-linux/src/cfe_psp_memory.c:758 | constParameter | Parameter 'SizeOfKernelSegment' can be declared with const

<!--EndFragment-->
</body>
</html>

**Describe the solution you'd like**
Squash warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/373
Compiling in external libraries,"Hi,
I am currently trying to run the core flight executive on a FreeRTOS environment.  I am currently using a community port based on an older version and am running into some difficulties during the linking stage.  My main issue I believe is due to the fact that I am trying to link an externally compiled library that contains FreeRTOS and all of the device drivers generated by my IDE.  

However, when I insert the following lines into the CMakeLists.txt file in the osal folder:

add_library(libfreertros STATIC IMPORTED)

set_target_properties(libfreertos PROPERTIES IMPORTED_LOCATION ""/home/user1/projects/cfs/bsp/libfreertos.a"")

I get an error:
set_target_properties Can not find target to add properties to: libfreertos



Please let me know if this is the appropriate place to post this:
  ",non-bug,https://github.com/nasa/cFE/issues/2014
CI improvements - better support of local and cross-platform testing,"**Is your feature request related to a problem? Please describe.**
Command implemented in .travis.yml doesn't support local or cross-platform testing

**Describe the solution you'd like**
Implement as Makefile, Ansible playbooks, or Invoke in a way that supports future build verification plan (cross-platform/docker/QEMU based).

See https://github.com/nasa/osal/pull/403#issuecomment-614587376

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/419
Unused values and uninitialized variable static analysis warnings,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/DS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/DS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Unused values set in ds_table.c, uninitialized variable warning in ds_file_tests.c

**Describe the solution you'd like**
Squash

**Describe alternatives you've considered**
None

**Additional context**
Static analysis license restricts sharing actual warnings

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/DS/issues/49
CFE_SB_MsgHdrSize returns size_t but still attempts to return CFE status code,"**Describe the bug**
The `CFE_SB_MsgHdrSize()` function returns a `size_t` value.  Therefore, there is no provision/possibility for an error to be returned.

However, if passed a NULL argument, this still attempts to return `CFE_SB_BAD_ARGUMENT` which will be implicitly converted to a `size_t` value - which is platform-defined.  Notably, since `size_t` is unsigned, the result is always positive (success range) and will not be correctly interpreted by the caller.

**To Reproduce**
Call `CFE_SB_MsgHdrSize()` with a NULL `MsgPtr` argument.

**Expected behavior**
This function should probably return 0 instead of `CFE_SB_BAD_ARGUMENT` in this case.
Cannot return CFE status codes from a function that does not return `CFE_Status_t` (or `int32`).

**Code snips**
https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/sb/fsw/src/cfe_sb_util.c#L54-L57

**System observed on:**
Ubuntu

**Additional context**
This line was also not being covered by the coverage test (#471) and the return type mismatch prevents this from being covered properly.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1667
CFE_TBL_Load doesn't reset LoadInProgress when called on a locked table,"**Describe the bug**
When calling CFE_TBL_Load on a table that is locked it correctly returns the status CFE_TBL_INFO_TABLE_LOCKED.

https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/tbl/fsw/src/cfe_tbl_internal.c#L971-L976

However, this branch skips over the function CFE_TBL_NotifyTblUsersOfUpdate which resets the variable `RegRecPtr->LoadInProgress`. Without this variable being reset to `CFE_TBL_NO_LOAD_IN_PROGRESS`, all future calls to CFE_TBL_Load will fail.
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/tbl/fsw/src/cfe_tbl_internal.c#L1029-L1047

Once the table address is correctly released, all subsequent calls to CFE_TBL_Load will still fail and return CFE_TBL_ERR_LOAD_IN_PROGRESS even though the last load failed when the table was locked.
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/tbl/fsw/src/cfe_tbl_api.c#L745-L753

This can be fixed by calling CFE_TBL_Manage before trying to load data.

**To Reproduce**
On my fork for #1734 the test `TestReleaseAddress` in the file `modules/cfe_testcase/src/tbl_content_access_test.c` requires a call to CFE_TBL_Manage before we can load data to the table after releasing the address for it. The following code snippet is from this file.
```c
    /* Attempt to load while address is locked */
    LoadTable(&TestTable, CFE_SUCCESS);
    UtAssert_INT32_EQ(CFE_TBL_GetAddress(&TblPtr, CFE_FT_Global.TblHandle), CFE_TBL_INFO_UPDATED);
    LoadTable(&TestTable, CFE_TBL_INFO_TABLE_LOCKED);

    /* Release and try again */
    UtAssert_INT32_EQ(CFE_TBL_ReleaseAddress(CFE_FT_Global.TblHandle), CFE_SUCCESS);
    CFE_TBL_Manage(CFE_FT_Global.TblHandle);
    LoadTable(&TestTable, CFE_SUCCESS);
```

**Expected behavior**
After a failed table load because the table was locked, I should be able to release the address of a table and then call CFE_TBL_Load without needing to call CFE_TBL_Manage in between.

**System observed on:**
 - Hardware: PC
 - OS: Ubuntu 20.04
 
**Reporter Info**
Niall Mullane - GSFC 582 Intern",bug,https://github.com/nasa/cFE/issues/1750
"Version 2 MsgId construction doesn't match description, overloads bits","**Describe the bug**
Version 2 code takes the full APID (0x7FF mask), or's in a bit for cmd/tlm (0x80 mask) then or's in the Subsystem ID shifted by 8

That means if a user defines an APID of 0x80 for a telemetry message (which is valid per CCSDS), the system will report it as type cmd if it gets the type from the msgid.  It's also a collision between 0x7 bits from the Subsystem ID and the 0x700 bits of APID.

Basically logic doesn't mirror:
CFE_SB_SetMsgId of 0x7FF -> APID = 0x7F, Type = Cmd, SubsystemID = 7
CFE_SB_GetMsgId from APID=0x7FF, Type = Tlm, SubsytemID = 0 -> MsgId = 0x7FF

**To Reproduce**
N/A - code inspection

**Expected behavior**
Get/Set should mirror (SetMsgId should not overload bits)

**Code snips**
https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.c#L118-L152
https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.c#L155-L187
https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.h#L64-L75

**System observed on:**
N/A

**Additional context**
Uncovered as part of #711 work

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/736
CFE_ES_FindCDSInRegistry() infinte loop if registry size is zero,"**Describe the bug**
The loop inside this function has a poorly-constructed condition for ending the loop.  It is comparing a `uint32` type to an `int32` type, and in the event that the `MaxNumRegEntries` is zero, it becomes impossible for this condition to be true and the loop runs forever.

**To Reproduce**
Easy to see in unit test if one clears the `CFE_ES_Global` data structure between tests.

**Expected behavior**
Loops should never have ending conditions that are impossible to reach unless they are supposed to be infinite.  In the event that `CFE_ES_Global.CDSVars.MaxNumRegEntries` is 0, it should exit immediately.

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_cds.c#L657

It is generally a bad idea to do any sort of relational comparison (greater than/less than) between signed and unsigned types, C++ actually errors about this but C does not.

**System observed on:**
Ubuntu 20.04

**Additional context**
This variable is initialized in FSW from the config `CFE_PLATFORM_ES_CDS_MAX_NUM_ENTRIES` which does say that the value needs to be at least 8.  But during unit test the value can be zero.

Interestingly, `CFE_ES_FindFreeCDSRegistryEntry` swaps the weirdly-structured do-while for a normal while loop, so it is OK however it still does a signed/unsigned compare which should be fixed.

**Reporter Info**
Joseph Hickey, Vantage Systems. Inc.
",bug,https://github.com/nasa/cFE/issues/823
file api unit test uses osal_id_t as integer,"**Describe the bug**
The type `osal_id_t` should not be used as an integer, and normal integer operations or comparisons should not be used with this type.  However it looks like a couple cases in file API test were recently added which are comparing this to a `uint32` type directly.

**To Reproduce**
Build OSAL with a type-safe osal_id_t, fails to build in `file_api_test.c`

**Expected behavior**
Build should succeed.

**Code snips**
Comparisons to uint32:
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/tests/file-api-test/file-api-test.c#L179
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/tests/file-api-test/file-api-test.c#L241

**System observed on:**
Ubuntu 20.04

**Additional context**
Should use `!OS_ObjectIdDefined()` inline function to test.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/929
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen warnings for `multiple @param documentation settings`

**Describe the solution you'd like**
Resove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MD/issues/30
ut_sb_stubs.c needs a stub for CFE_SB_ZeroCopySend ,"**Is your feature request related to a problem? Please describe.**
CFE_SB_ZeroCopySend does not have a stub in ut_sb_stubs.c causing undefined reference error when building unit tests for an app that uses this call.

**Describe the solution you'd like**
Add the stub for CFE_SB_ZeroCopySend with full context tracking.

**Describe alternatives you've considered**
Create my own locally in the app's unit test, but this does not help everyone.

**Requester Info**
Alan Gibson, NASA
",non-bug,https://github.com/nasa/cFE/issues/703
"Add ""workflow_dispatch"" for any workflow that depends on an external action","**Is your feature request related to a problem? Please describe.**
Currently, the existing github workflows are only triggered by pull request and push events.  However, many of them use external workflows, mainly those defined in `nasa/cFS` bundle repo, and some 3rd party ones.

Problem is, when merging new code to the cFS bundle repo main branch, there is no way to re-run the cFE workflows against the updated main branch of cFS.  Clicking the ""Re-Run"" button on the previous run doesn't work; it runs with the same bundle commitID as the original did.  We need a way to run against the updated `main` branch of the cFS repo, even when the cFE repo may not have changed at all.  

Currently the only way to trigger this is to make a bogus push to a fork, which will trigger the actions to run and will use the latest version.

**Describe the solution you'd like**
Add ""workflow_dispatch"" as an option to workflows - especially for anything that references an external workflow or action in the `main` branch that can in turn be updated outside the merge cycle of the local repo.

**Additional context**
This provides a simpler, cleaner method to re-validate the cFE workflows are still functioning after a change to the cFS repo.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/2225
add lgtm badge to readme,"**Is your feature request related to a problem? Please describe.**

add lgtm badge to readme

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFS/issues/34
Unreasonable Size Argument - OS_CreateSocketName static analysis warning,"**Is your feature request related to a problem? Please describe.**
Static analysis warns when using sizeof(sock->stream_name) in OS_strnlen check and later math `OS_MAX_API_NAME - len` passed to snprintf which out of context could then be a negative number (but isn't because OS_SocketAddrToString_Impl limits to OS_MAX_API_NAME, so this is a false positive):

https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/src/osapi-sockets.c#L101-L110

**Describe the solution you'd like**
Truncating the port while fully adding the parent name or possibly even truncating both seems like it could be confusing.  Just truncate at the end.

**Describe alternatives you've considered**
Could use OS_MAX_API_NAME to limit len in first check, but seems like overkill since the size is OS_MAX_PATH_LEN.

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/817
pthread_cond_wait() spurious wakeup in OS_BinSemTake,"In OS_BinSemTake() in the posix osal, a call to pthread_cond_wait() is used for signaling from the task giving the semaphore.  However, it is possible for pthread_cond_wait() to return in the event of a spurious wakeup, without the condition it was actually waiting on becoming true.

To fix this, the call to pthread_cond_wait() should be wrapped in a while loop that checks the condition after the calling task is woken up. e.g.


{{{
       while ( OS_bin_sem_table[sem_id].current_value < 
               OS_bin_sem_table[sem_id].max_value )
       {
          ret = pthread_cond_wait(&(OS_bin_sem_table[sem_id].cv),&(OS_bin_sem_table[sem_id].id));
       }
}}}
",bug,https://github.com/nasa/osal/issues/207
Separate cmake coverage logic and resolve clang support issue,"**Is your feature request related to a problem? Please describe.**
-pg option is not supported by clang in OS X 10.9 and later

**Describe the solution you'd like**
Consider a coverage.cmake implementation similar to the example: https://github.com/StableCoder/cmake-scripts.

See comments on #403... (really relating to #404).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/420
Remove dependencies on deprecated cFE elements,"With:
`cfe/CMakeLists.txt:add_definitions(""-D_ENHANCED_BUILD_ -DCFE_OMIT_DEPRECATED_6_6"")`
build errors:

```
/home/jhageman/cFS/cFS-dev/apps/sch_lab/fsw/src/sch_lab_app.c: In function ‘SCH_Lab_AppMain’:
/home/jhageman/cFS/cFS-dev/apps/sch_lab/fsw/src/sch_lab_app.c:75:34: error: ‘CFE_ES_APP_RUN’ undeclared (first use in this function)
     uint32           RunStatus = CFE_ES_APP_RUN;
```",non-bug,https://github.com/nasa/sch_lab/issues/6
Scrub OSAL for direct array references,"**Is your feature request related to a problem? Please describe.**
In OSAL  there are quite a few places with direct array references to an index, such as:

https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-sockets.c#L239

In many functions this is repeated many times over (i.e. makes several accesses into the table entry for the given item).

**Describe the solution you'd like**
This should be separated to use local pointer(s) to the entry/entries in use.

First do a lookup, e.g.:

    stream = OSAL_TABLE_ENTRY(OS_stream_table, local_id);

Then use `stream->` to refer to that entry from there on, e.g.:

    if (stream->socket_type != OS_SocketType_STREAM)


**Additional context**
This makes the code a lot more readable and more maintainable.  The CFE was already scrubbed for this, so it makes sense for OSAL to also do the same.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/648
Add OS_StatusToString API to support consistent status format representation in strings,"**Is your feature request related to a problem? Please describe.**
Related to https://github.com/nasa/cFE/issues/2010, providing an API (and using it) would resolve inconsistency in string representation of osal_status_t.

**Describe the solution you'd like**
Add `OS_StatusToString`

**Describe alternatives you've considered**
None

**Additional context**
- #1112

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1258
"CMake build not correctly using the ""${CPUNAME}_SYSTEM"" directive","**Describe the bug**
With the current main branch even if the `${CPUNAME}_SYSTEM` variable is correctly set, it is being ignored.  `SIMULATION` works fine though.

**To Reproduce**
Run `make prep` without `SIMULATION` and a targets.cmake file with  `cpu1_SYSTEM` set to something non-empty.
Unexpected error is generated:

    CMake Error at cmake/mission_build.cmake:332 (message):
      Unable to find toolchain file for default


**Expected behavior**
Should generate build tree and build successfully.

**System observed on:**
GSFC MCP750 test build

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/906
doxygen misc warning,"**Describe the bug**

cfe/fsw/cfe-core/src/inc/cfe_es.h:560: warning: expected <tr> tag but found TK_LNKWORD token instead!

cfe/fsw/cfe-core/src/inc/cfe_es.h:569: warning: The following parameters of CFE_ES_WaitForSystemState(uint32 MinSystemState, uint32 TimeOutMilliseconds) are not documented:
  parameter 'MinSystemState'

cfe/fsw/cfe-core/src/inc/cfe_es_msg.h:750: warning: Found unknown command `\B'

cfe/fsw/cfe-core/src/inc/cfe_es_msg.h:750: warning: Found unknown command `\C'

cfe/fsw/cfe-core/src/inc/cfe_fs.h:122: warning: The following parameters of CFE_FS_InitHeader(CFE_FS_Header_t *Hdr, const char *Description, uint32 SubType) are not documented:
  parameter 'Description'
  parameter 'SubType'

cfe/fsw/cfe-core/src/inc/cfe_sb.h:256: warning: argument 'OptsPtr' of command @param is not found in the argument list of CFE_SB_GetPipeOpts(CFE_SB_PipeId_t PipeId, uint8 *OptPtr)

cfe/fsw/cfe-core/src/inc/cfe_sb.h:272: warning: The following parameters of CFE_SB_GetPipeOpts(CFE_SB_PipeId_t PipeId, uint8 *OptPtr) are not documented:
  parameter 'OptPtr'

cfe/fsw/cfe-core/src/inc/cfe_sb_msg.h:560: warning: Illegal command \SB_PIPEOPTSEC as the argument of a \c command

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/385
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/LC/issues/45
cFE/ES has hard coded values for command pipe depth and buffer limits,"The ES init function has:
    CFE_ES_TaskData.PipeDepth = 12;

    CFE_ES_TaskData.LimitHK   = 2;
    CFE_ES_TaskData.LimitCmd  = 4;

These values should be user configurable.

In addition the 5 cFE apps do not initialize their command pipe depths and buffer limits consistently (but all are NOT user configurable). 

 ",non-bug,https://github.com/nasa/cFE/issues/336
OSAL 4.2.1 Version Description Document Review Cycle,Please see the attached OSAL 4.2.1 VDD open for CCB review (OSAL 4.2.1.0 Version Description Document-Initial.docx) and provide review comments/approval.,bug,https://github.com/nasa/osal/issues/198
OS_cp cleanup,"Looking at OS_cp, which does a system call to the ""cp"" command, this is really ugly, not realtime-friendly, and probably a security risk (if you could somehow inject a ';' into the system call, which shouldn't be difficult...Doesn't look like OS_TranslatePath catches this.)
I suggest re-writing OS_cp to do an open, a loop of read/write, and close (with the appropriate checks to ensure errors are handled.)
Also looks like OS_TranslatePath does the check for NULL and length, so the OS_{cp|mv|remove|...} should not do the same.",bug,https://github.com/nasa/osal/issues/238
Add Object Utility API functional tests,"**Is your feature request related to a problem? Please describe.**
OS_IdentifyObject, OS_ConvertToArrayIndex and OS_ForEachObject missing explicit functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None.

**Additional context**
Certification violation

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/374
Potential for missed log messages between dump + clear commands,"**Describe the bug**
This issue was initially described in #956 but isolated to a separate ticket for discussion/triage.

The ES syslog ""dump"" and ""clear"" are separate commands, so there is a window of opportunity between these actions where messages can be lost - as it is not possible to guarantee that no additional messages were written during this time.

**To Reproduce**
1. Log messages are written
2. Dump command issued
3. More log messages are written
4. Clear command issued.

Logs written in (3) above are lost, as they are not in the dump file but they will be cleared by the clear command.

**Expected behavior**
Should have command structure which can ensure that no messages get lost.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc., generalized from comment at https://github.com/nasa/cFE/issues/956#issuecomment-712995842


",bug,https://github.com/nasa/cFE/issues/958
Remove tools directory,Directory clean-up,non-bug,https://github.com/nasa/PSP/issues/92
SAMPLE_ProcessCC needs to check return code of CFE_TBL_GetAddress call,"**Describe the bug**
The `SAMPLE_ProcessCC` example calls `CFE_TBL_GetAddress()` and then immediately proceeds to dereference the pointer, without checking its return code.

**To Reproduce**
This is primarily evident in unit test, where the `CFE_TBL_GetAddress()` call can be forced to fail.  It outputs a NULL pointer in this case and subsequently segfaults.

**Expected behavior**
The `SAMPLE_ProcessCC()` should not attempt to dereference the pointer output of `CFE_TBL_GetAddress()` unless that function actually returns CFE_SUCCESS

**System observed on:**
Ubuntu 18.04 LTS 64-bit (when running UT)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/28
Make global test table setup in functional tests reusable,"I actually prefer the idea of making a ""Setup"" function here that does this init, then it can be passed as the setup function as part of the UtTest_Add for any test that uses this table struct.  That being said, its OK as is, I wouldn't hold this up.

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/1781#discussion_r686200856_",non-bug,https://github.com/nasa/cFE/issues/1797
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/PSP/issues/177
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_lib/issues/75
Add format check to workflow,"**Is your feature request related to a problem? Please describe.**
No indication of software format non-compliance on pull requests

**Describe the solution you'd like**
Add format check to workflow

**Describe alternatives you've considered**
None

**Additional context**
See #1130 for applying the standard formatting

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1161
RTEMS OS_GetTaskId_Impl returns invalid value from root task,"**Describe the bug**
The ""root"" or initial task is technically not an OSAL task and does not have an OSAL ID.  If OSAL OS_GetTaskId() is called, it should return OS_OBJECT_ID_UNDEFINED.  However on RTEMS it returns a nonzero value which is not a valid task ID.

**To Reproduce**
Run unit tests on RTEMS

**Expected behavior**
OS_GetTaskId() should return OS_OBJECT_ID_INVALID if the ""rtems classic name"" is not actually an OSAL task ID.

**System observed on:**
RTEMS 4.11.3

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1084
Refactor `CFE_TBL_SearchCmdHndlrTbl` to unmix error codes with indexes and simplify loop,"**Is your feature request related to a problem? Please describe.**
Mixes error codes (at least by name) with an index:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task.c#L340

also the do/while loop is unnecessarily complex in how it exits (has to check for last entry twice).

**Describe the solution you'd like**
Consider a simpler while or for loop with a break, don't mix index w/ a command code.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1519
Correct Build errors in UT Assert bamboo build,"For legacy configurations where the old type mapping is used in `common_types.h`, the UT assert library fails to build with the following errors.  This is from the bamboo logs when building in the classic mode.

/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/osal/ut_assert/src/utassert.c:154:5: error: unknown type name 'uint32_t'
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/osal/ut_assert/src/utstubs.c:78:5: error: unknown type name 'bool'

This issue is causing bamboo to fail on the ""Job A"" of both CFE and OSAL.  Other jobs that use the stdint.h based mapping are OK.",bug,https://github.com/nasa/osal/issues/234
OS_API_Init() does not correct cleanup resources on error,"OS_API_Init initializes several OS primitives but is made with a pattern of exiting as soon as any initialization fails without cleaning up previous successful initializations. For example:

OS_task_table_sem = semMCreate(SEM_Q_PRIORITY | SEM_INVERSION_SAFE );
if ( OS_task_table_sem == NULL )
{
    return(OS_ERROR);
}

OS_queue_table_sem = semMCreate(SEM_Q_PRIORITY | SEM_INVERSION_SAFE );
if ( OS_queue_table_sem == NULL )
{
    return(OS_ERROR);
}

If OS_task_table_sem successfully initializes, but OS_queue_table_sem does not, then OS_task_table_sem will become a leaked resource.",bug,https://github.com/nasa/osal/issues/171
Remove OS_PACK define,"**Is your feature request related to a problem? Please describe.**
Shouldn't use non-standard packing options.  Really should scrub the list.

https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/inc/common_types.h#L52-L75

**Describe the solution you'd like**
Remove/scrub

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/644
Update RTEMS implementation to dynamically create RAM disk block devices,"**Is your feature request related to a problem? Please describe.**
The current RTEMS BSP predefines the RAM disks by way of the `rtems_ramdisk_configuration` which is set at compile time.  However the OSAL model is to create these block devices at runtime based on memory segments that are allocated externally.

The workaround up to this point was to preallocate the ram disks, and then attempt to correlate the address in the OS_mkfs/initfs request to one of the preallocated blocks.  However this is not possible when the compile-time config and ramdisk allocation are done by separate libraries (BSP and CFE PSP, respectively).

**Describe the solution you'd like**
RTEMS can support dynamically-created RAM disks using `ramdisk_allocate()` which better aligns with the way things are supposed to work.

**Additional context**
This is necessary as part of decoupling the volume/filesystem table from the OSAL BSP.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/459
Typecast memcchr in os-shared-common.h,"**Describe the bug**
memchr is called and then assigned to a const char * without a cast.
This causes failures on certain compilers (llvm).

https://www.cplusplus.com/reference/cstring/memchr/
```
const void * memchr ( const void * ptr, int value, size_t num );
      void * memchr (       void * ptr, int value, size_t num );
```

In file `os-shared-common.h`
change 
```
    const char *end = memchr(s, 0, maxlen);
```
to 
```
    const char *end = (const char *)memchr(s, 0, maxlen);
```

**System observed on:**
 - Hardware
 - OS: [MAC]
 - Versions [OSAL Hash 7ebb463]
```
clang --version
Apple clang version 12.0.0 (clang-1200.0.32.29)
Target: x86_64-apple-darwin19.6.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
```


**Reporter Info**
Sam Price - GSFC

![image](https://user-images.githubusercontent.com/817712/132370131-1a74b03d-1873-48fd-bc17-c9a86f975c8f.png)
",bug,https://github.com/nasa/osal/issues/1141
Readme and makefile updates for OSAL 4.2.1,"The various readme's skipped steps and were confusing when trying to stand up and run a clean set of tests on 64-bit pc-linux.  (If it bit some experienced folks multiple times then others will be bit as well.)

Included a quick unintrusive fix for #200 in tended for pc-linux builds.",bug,https://github.com/nasa/osal/issues/202
Write XML files for Bamboo,"We use the Atlassian ''Bamboo'' system to automatically build
the project, run the test, and present the results, but the
system is not an oracle: it requires test results to be in
one of the several forms for which it has parsers.

I was able to construct XML files that Bamboo's ""JUnit Results""
parser was able to handle. This commit introduces a simple
implementation of a file writer for those files.

This is a ''bare-bones'' implementation, onto which we can
hang future enhancements. Note that there are rules for
quoting data in strings, and text not within `<..>` tags;
the simple approach taken here is merely to completely avoid
the use of any character that needs quoting.

My intention is to continue work on this when I get back
from vacation on the 23rd.
",non-bug,https://github.com/nasa/osal/issues/49
Improve Travis CI testing,"**Is your feature request related to a problem? Please describe.**
Travis CI currently just does cppcheck and default build on the bundle

**Describe the solution you'd like**
Parallel test the following:
- BUILDTYPE=release OMIT_DEPRECATED=true STRICT_NO_WARNINGS=true
- BUILDTYPE=release OMIT_DEPRECATED=false(default) STRICT_NO_WARNINGS=true
- BUILDTYPE=debug(default) OMIT_DEPRECATED=true STRICT_NO_WARNINGS=true
- BUILDTYPE=debug(default) OMIT_DEPRECATED=false(default) STRICT_NO_WARNINGS=true

And do the following tests:
- Add document generation (eventually enforce no warnings)
  - make doc
  - make usersguide
  - make osalguide (dependent on https://github.com/nasa/cFE/pull/446)
- Build with ENABLE_UNIT_TESTS=TRUE SIMULATION=native
- Run unit tests (eventually enforce coverage)
- Execute cFE and pipe output to file
- Send reset cmd from cmdutil
- Confirm execution output lacks error/warning/fail messages

**Describe alternatives you've considered**
None

**Additional context**
Eventually add nightly or triggered local builds for other environments (pc-RTEMS, vxworks on a modern platform)
Eventually add automated build verification (trade CI vs local)

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFS/issues/39
Add cFE ITOS Record Files,"Provide an initial release of cFE record files that define the cFE command and telemetry database for the ITOS ground system.

It is believed these record files are substantially correct and complete however, they have been tested only lightly.  It is important to get these files delivered with the next cFE so that they may be readily available for use and aid in fining errors or needed updates, documentation, etc.",non-bug,https://github.com/nasa/cFE/issues/194
CF_ES_StartApplications() uses O_RDONLY instead of OS_READ_ONLY,"**Describe the bug**
Latest OS_open() does not support O_RDONLY flag

**To Reproduce**
Just observation trying to find other bug - no solution for that one yet...

**Expected behavior**
Correct #define use

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Docker
 - OS: Linux fb2def16b3c1 4.19.104-microsoft-standard #1 SMP Wed Feb 19 06:37:35 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 - Versions [Versions:cFE 6.7.20.0, OSAL 5.0.20.0, PSP 1.4.14.0]

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Maurice Smulders / Geneva Technologies inc
",bug,https://github.com/nasa/cFE/issues/752
SB Housekeeping InternalErrorCounter increments for nominal conditions,"**Describe the bug**
SB Housekeeping InternalErrorCounter increments for nominal conditions such as `CFE_SB_NO_MESSAGE` or `CFE_SB_TIME_OUT`

**To Reproduce**
Have apps running that poll a pipe or block w/ timeout


**Expected behavior**
InternalErrorCounter only increments on actual errors

**Code snips**
https://github.com/nasa/cFE/blob/a39b0a65fb2724692469ff492484b523fb4fa7e6/modules/sb/fsw/src/cfe_sb_api.c#L2003

**System observed on:**
 - SP0
 - OS: VxWorks 6.9
 - Versions: CFE 9c86dd4020327e52d894f1266d7b98d32dc6d34a

**Additional context**
Add any other context about the problem here.

**Reporter Info**
John N Pham, Northrop Grumman",bug,https://github.com/nasa/cFE/issues/2067
Add SBN-Client to README references,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/SBN-Client may be a useful reference

**Describe the solution you'd like**
Add it to top level README

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA GSFC
",non-bug,https://github.com/nasa/cFS/issues/476
Add bsp_ut functionality for genppc vxworks to be able to run unit tests,Need to be able to run unit tests on vxworks-ng for end-of-summer release.,bug,https://github.com/nasa/osal/issues/254
Unit Test Stub Function UT_GetActualCmdCodeField Not Restored with CCSDS Secondary Header (GSFC DCR 23036),"A change was made to the format of the cFE CCSDS command secondary header to enforce the header to be in big endian in cFE 6.4.1. The cFE unit test stub function UT_GetActualCmdCodeField was updated accordingly. 

The change to the cFE CCSDS command secondary header was restored to the original definition of the header in cFE 6.4.1. The cFE unit test stub function UT_GetActualCmdCodeField however, was not restored. The original code for this function is attached.",bug,https://github.com/nasa/cFE/issues/90
cppcheck unit test warning,"**Describe the bug**
references issue #283 

[osal/src/unit-tests/oscore-test/ut_oscore_binsem_test.c:165]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_countsem_test.c:166]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_exception_test.c:173]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_interrupt_test.c:193]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_misc_test.c:173]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_mutex_test.c:166]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_queue_test.c:169]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_task_test.c:208]: (error) syntax error
[osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:208]: (error) syntax error
[osal/src/unit-tests/osfile-test/ut_osfile_fileio_test.c:304]: (error) syntax error
[osal/src/unit-tests/osfilesys-test/ut_osfilesys_diskio_test.c:220]: (error) syntax error
[osal/src/unit-tests/osloader-test/ut_osloader_module_test.c:167]: (error) syntax error
[osal/src/unit-tests/osloader-test/ut_osloader_symtable_test.c:158]: (error) syntax error
[osal/src/unit-tests/osnetwork-test/ut_osnetwork_misc_test.c:181]: (error) syntax error
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:74]: (error) sprintf format string requires 1 parameter but only 0 are given.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:81]: (error) snprintf format string requires 1 parameter but only 0 are given.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:394]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:417]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:443]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:469]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:494]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:508]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:522]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:537]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:552]: (error) va_list 'ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:565]: (error) va_list 'ap' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:584]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:607]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/ostimer-test/ut_ostimer_timerio_test.c:206]: (error) syntax error

**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/286
Use OS_stat to verify file existence,"In SC_LoadDefaultTables, the OS_OpenCreate function is used to verify that a file can be opened before any attempt is made to load a table from it.  Since the code as-is appears to only be checking for file existence (and not performing any validation on the files), code could be streamlined by using OS_stat.

Imported from GSFCCFS-1447",non-bug,https://github.com/nasa/SC/issues/5
ut_sb_stubs broken by packet layout change,"The structure defining the message layout changed, placing
the message content in a separate structure, requiring
current code that was ""pointer->field"" to be adjustd
to read ""pointer->Packet.field""

This change must be applied to code in `ut_sb_stubs.c`
that is only compiled when `UT_VERBOSE` is defined.

The automatic test system used to check out CFE builds
defines `UT_VERBOSE` in order to collect supporting
evidence useful for debugging any failures or errors
encountered during testing.

",bug,https://github.com/nasa/cFE/issues/68
Redundant check in CFE_EVS_EarlyInit,"**Is your feature request related to a problem? Please describe.**
Redundant check:
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/evs/fsw/src/cfe_evs_task.c#L117

Only way to get here is if it's already CFE_SUCCESS

**Describe the solution you'd like**
Remove redundant check, false condition can never execute (would require returning from the `CFE_PSP_Panic`)

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1261
OSAL guide generation warning,"**Is your feature request related to a problem? Please describe.**
Generated by user's guide action
```
/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-bsp.h:95: warning: end of file while inside a group

/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-idmap.h:274: warning: end of file while inside a group

/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:20: warning: unable to resolve reference to `OSAPISem' for \ref command
/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:21: warning: unable to resolve reference to `OSAPITime' for \ref command
/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:20: warning: unable to resolve reference to `OSAPISem' for \ref command
/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:21: warning: unable to resolve reference to `OSAPITime' for \ref command
Error: Process completed with exit code 255.
```

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1054
Remove classic build artifacts,"**Is your feature request related to a problem? Please describe.**
Classic build no longer supported.

**Describe the solution you'd like**
Remove all associated artifacts: build directory, all *.mak directories, setvars.sh

**Describe alternatives you've considered**
None

**Additional context**
Makes #164 obsolete

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/339
vxworks osfilesys.c functions not thread-safe,"During Trac #45 unit testing it was found that many functions in the vxworks osfilesys.c are not using the semaphore to access the shared table.  

Demonstrated on the trac-22 branch, [changeset:0f36fb6]
",bug,https://github.com/nasa/osal/issues/108
Scrub all CFE UT stub functions,"**Is your feature request related to a problem? Please describe.**
The CFE stub functions remain incomplete and inconsistent.  They need a scrub to bring everything up to the level it should be.

**Describe the solution you'd like**
- All functions prototyped in the CFE public API headers (the `fsw/cfe-core/src/inc` dir) should also have a stub defined.
- All arguments should be registered in the context so the complete context is available within UT hook functions. 
- The argument names should always match the prototype.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/762
"Remove system log elements from cFE1521, ES: Processor Reset Preservation List requirement","**Description**
Remove System log elements from cES1521 (CFE-183) requirement.  Over-specified, out-of-family, and somewhat redundant with cES1511 requirement to preserve the system log.

cES1521:
Upon a Processor Reset, the cFE shall preserve the following:

- Boot Source
- Reset Type
- Reset Subtype
- Reset Reason
- Number of Processor Resets
- Maximum Processor Resets
- Number of entries in System Log
- Size of System Log
- Number of bytes used in the System Log
",non-bug,https://github.com/nasa/cFE/issues/1029
Allow C99 code in CFE.,"Update compiler flags to allow C99 code to be used
everywhere in CFE",bug,https://github.com/nasa/cFE/issues/165
"Add event, command code, command structure, and telemetry structure documentation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Missing user's guide documentation.

Also some inlines in cf_utils.h missing documentation.

**Describe the solution you'd like**
Add descriptions.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/206
Add documentation for TBL event messages in cfe_tbl_events.h,"**Describe the bug**
The following events are missing documentation:

1. CFE_TBL_LOAD_VAL_ERR_EID
2. CFE_TBL_LOAD_SRC_TYPE_ERR_EID
3. CFE_TBL_LOAD_FILENAME_LONG_ERR_EID
4. CFE_TBL_LOAD_SHORT_FILE_ERR_EID
5. CFE_TBL_LOAD_TBLNAME_MISMATCH_ERR_EID
6. CFE_TBL_HANDLE_ACCESS_ERR_EID

**To Reproduce**
Search `cfe_tbl_events.h` for `TODO`

**Expected behavior**
Add Doxygen documentation like the other EIDs in the file. Delete TODO comment

**Reporter Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/cFE/issues/661
Move content from README.txt to Readme.md,"**Is your feature request related to a problem? Please describe.**
Having two files named Readme is confusing. Making users click over to a second file when they might expect Readme.md to have a thorough description of the tool is inefficient.

**Describe the solution you'd like**
Absorb Readme.txt into Readme.md

**Describe alternatives you've considered**
Have full blown documentation folder using doxygen or similar

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/elf2cfetbl/issues/53
have an option to set the timestamp in CFE_SB_SendMsg,"Whether it be a compile-time option, a different function, or a parameter, it would be useful for specific timing testing to have telemetry messages timestamped by the SB code at the time the message is sent, rather than when the app calls SetMsgTime or TimestampMsg().",non-bug,https://github.com/nasa/cFE/issues/218
SMP: CFE_TIME_GetReference() has insufficient protection against update while reading,"In the current implementation, CFE_TIME_GetReference() uses a lockless version counter that is checked before and after reading the reference time to determine if the time got updated while it is being read.

However, this protection is insufficient for some systems:
* The global needs to be marked ""volatile"" for this to have any effect.  If compiled with optimizations, the optimizer is likely to remove the ""redundant"" read of the global value therefore defeating the purpose of the loop altogether.
* It does not protect against the reader interrupting the writer and receiving a ""half-updated"" value.  Running the updater at higher priority does not work on multi-core CPUs since the two threads can be concurrently running.

",bug,https://github.com/nasa/cFE/issues/46
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/sample_app/issues/80
cppcheck warns us that strncpy behavior is obscure.,"As reported by cppcheck warning:

If the source string's size fits or exceeds the given size, strncpy() does not add a zero at the end of the buffer. This causes bugs later in the code if the code assumes buffer is null-terminated.

This message is present in 4 files:

{{{
osal/src/os/posix/osfileapi.c
osal/src/os/posix/osfilesys.c
osal/src/os/vxworks6/osfileapi.c
osal/src/os/vxworks6/osfilesys.c
}}}

Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.

When checking this, our official stand on telemetry records
is that arrays in telemetry records containing text have
fixed size and that consumers of the data must not assume
that they contain a terminating `\0` character.

This is the classical case where this strncpy behavior on
data overflow is desired as defined.
",bug,https://github.com/nasa/osal/issues/131
Refactor enable and disable command handlers to use common code w/ boolean,"**Is your feature request related to a problem? Please describe.**
Duplicated logic in many enable/disable command handlers, example:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L924-L961
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L974-L1012

**Describe the solution you'd like**
Factor out common code.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1449
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/cFS/issues/173
Use pselect in OS_DoSelect to avoid needed conversions,"**Is your feature request related to a problem? Please describe.**
Could avoid timespec to timeval conversion:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L204-L206
if pselect was used here:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L221

**Describe the solution you'd like**
Use pselect, need to check VxWorks/RTEMS support

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/856
Re-add static code analysis for pull requests,"**Describe the bug**
The Travis CI runner ran cppcheck which we don't have anymore

**To Reproduce**
Submit pull request, notice that Travis CI doesn't run anymore.

**Expected behavior**
A success or failure report of a cppcheck run.

**Code snips**
Check from travis.yml

```
  # Check versions
  - cppcheck --version

  #cppcheck flight software psp/fsw
  - cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style --suppress=variableScope --inconclusive fsw 2>cppcheck_flight_psp.txt
  - |
    if [[ -s cppcheck_flight_psp.txt ]]; then
      echo ""You must fix cppcheck errors before submitting a pull request""
      echo """"
      cat cppcheck_flight_psp.txt
      exit -1
    fi
 
```

**System observed on:**
n/a

**Additional context**
Part of ongoing TravisCI to GitHub Actions migration
",bug,https://github.com/nasa/PSP/issues/232
Limit send HK MID's to 1 in pipe,"**Is your feature request related to a problem? Please describe.**
Default limit of 4 is excessive, getting behind is an error (shouldn't spam them either way).

ES example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.c#L405

**Describe the solution you'd like**
Set to 1

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1360
"Replace ""--whole-archive"" link switch","**Is your feature request related to a problem? Please describe.**
The CFE core executable link process uses  `--whole-archive` to ensure that all functions provided in libraries are actually linked into the executable.  

Normally during a link procedure, if a compilation unit within a static library does not resolve any unresolved symbol (i.e. doesn't implement anything that is actually called by the application) it is dropped.  However because CFE dynamically loads applications/libraries at runtime, this can be a problem if a particular API is only invoked by apps and not by CFE itself.

The `--whole-archive` linker flag does accomplish the goal of making sure all the APIs are linked in and available for application use, but it has problems:

- The switch isn't really supported by CMake, it requires a backdoor approach to add it via `target_link_libraries()`.
- Adding using this method requires the full string of the exact option, which is specific to the GCC/LD toolchain paradigms  Other toolchains might have a similar option, but would require patching the link line to support them.
- Even when using GCC, the exact option string also differs depending on whether `gcc` or `ld` tool is used for the final link step.  (In the former case, a `-Wl,` prefix is required to pass the option through to the linker stage).  This has been a frequent issue for FSW target builds in that there is no reliable way to determine if this extra prefix is needed.

**Describe the solution you'd like**
A possible alternative would be to use the OSAL ""static symbol"" feature to pull in every API that should be available for application use. 

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
Downside of this approach is that it requires maintaining a separate list of every public API that CFE core + OSAL is supposed to contain.  However, this is already (somewhat) done for unit test stubs.

The upside is that it can help catch errors of missing functions.  This may become relevant if/when users are allowed to override parts of CFE with their own implementation (e.g. issue #554).  If a required API is missing, this can detect it early and generate a linker error, whereas the current approach will get a runtime error only if/when an application is loaded that tries to use the missing API.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/722
OSAL should use UT framework similar to that of CFE,"With trac ticket #29 (and related #30) now implemented, the OSAL tests can be used as one piece of a build verification tool suite.

However, the implementation is currently very basic - it does not use any real testing framework, it simply counts errors using a global integer added to each test.

CFE has a more sophisticated UT framework consisting of the following functions:
* UT_Text() - informational / log file text printing function;
* UT_Report() - provides a common method to check for a condition, along with code to log PASSED/FAILED in a consistent manner;
* UT_SetRtnCode() - ability to tailor the response code of stub functions in order to exercise error paths;
* UT_ReportFailures() - test summary generator

OSAL could benefit from using the same framework to run its tests.  Most importantly, using the common ""UT_Report()"" API ensures that any errors that occur will be counted and logged in a consistent way.  This is particularly important for automated tests, as a simple ""grep"" command can reliably find failures within log files containing thousands of test cases.











",non-bug,https://github.com/nasa/osal/issues/40
"Likely issues in processing of deferred/reordered ""md"" packets","There appears to be logic within CF to support a case where the MetaData PDU arrives late - that is, after file data has already started.  Basically, the logic is as follows:
- if the receiver gets PDU type is file data (not metadata) in the idle state (which is for a new/unknown transaction), it assumes the initial metadata PDU may have been lost, and it jumps directly to the file data state.  
- The PDU is then re-dispatched in the context of a class 2 file data state
- The CF_CFDP_R_Init() function, will see that this is initializing a transaction for which no metadata is known, and it will:
    - generate a NAK for the MD (looks like this is an attempt to get the sender to regenerate it)
    - populates the transaction with a generated temporary file name for the destination
- If the MD PDU subsequently arrives, it then kicks off the following sequence:
    - temporary file is closed
    - `OS_rename()`  from temporary file to file name in metadata PDU
    - re-open the file under its new name

The problem that is immediately visible here is that this close+reopen will reset the file position, but does not reset the cached position within the state object (`t->state_data.r.cached_pos`) that is used during writes to determine if an ""lseek"" is necessary.  So now the file pointer is back to the beginning, but the `cached_pos` likely reflects the end of the file, and as a result new data will clobber existing content.

But the bigger issue is that this code is essentially duplicate/specialized logic that only handles a corner case/exception so it is unlikely to be adequately tested.  ",bug,https://github.com/nasa/CF/issues/131
Factor out duplicate code in `CFE_TIME_CalculateUTC` by using `CFE_TIME_CalculateTAI`,"**Is your feature request related to a problem? Please describe.**
Duplicated code:
CFE_TIME_CalculateUTC

**Describe the solution you'd like**
UTC = TAI - LeapSeconds.  Use the utility function instead of duplicating logic to get TAI.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1545
Restrict pipes to the app they were created in,"Discussed in CCB 4/3/19 that SB could be updated to restrict pipes to use within an app, as part of ticket #100 discussion.  This would restrict the current capabilities of the system and valid points were raised on both sides.

See attached email thread for further details.

Submitted as a requirements enhancement to trigger discussion at the architecture/steering committee level.",non-bug,https://github.com/nasa/cFE/issues/304
"CF Draco RC4: Many Fiile Uploads caus CF to Hang or have ""Gap Errors""","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
On RST WFI FSW, when uploading many files (40-60 files), the CF application either stops responding ang hangs or it responds with 'Gap errors'. This is most easily seen when uploading a large number of table files. 

On RST WFI FSW, this bug can be tracked under https://etdjira.gsfc.nasa.gov/browse/WFI-2531


**To Reproduce**
This bug was originally seen by the WFI Simulator team when trying to upload large numbers of ALD files to the WFI FSW. This bug was reproduced in the WFI FSW Lab COTS GR740 string by uploading 2 to 3 sets of 40 table files. 

From WFI-2531: ""The script wfif_fgs_table_dump_and_load_test.prc dumps and reloads all FGS tables (43) total in sequence. Once in a while the script will hang because a table was not able to upload. CFDP page will sometimes show a ""gap"" error.""

**Expected behavior**
The CF application should be able to handle ""large"" numbers of file uploads without hanging or producing errors. 

**System observed on:**
 - Roman RST WPC, and LEON4 GR740 COTS 
 - RTEMS 5.0
 - CF Draco RC4 (and Draco RC2), WFI FSW 3.2

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Nicholas Yanchik, NASA Goddard Space Flight Center, WFI FSW PDL
nicholas.j.yanchik@nasa.gov
",bug,https://github.com/nasa/CF/issues/386
Decoding Segments using Incorrect Macro (CF_PDU_MAX_TLV),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Code snips**
While checking out the most recent version of the CF repository to test with a custom file sending application, I ran into this line while trying to figure out why NAK's were acting strangely:
https://github.com/nasa/CF/blob/19c18b9dbdb0093e9bea78322de777e8f282acfb/fsw/src/cf_codec.c#L1127

Shouldn't it look moreso like this? There are other lines referencing the ```CF_PDU_MAX_TLV``` macro, but those compare against the ```plseg->num_tlv``` struct member. When I modified it to this in my instance of cFS, all CFDP functions worked as expected:
```
if (plseg->num_segments >= CF_PDU_MAX_SEGMENTS)
```",bug,https://github.com/nasa/CF/issues/363
Add Xenomai OSAL,Add Xenomai OSAL V1.0 as delivered from Matt Benson/Odyssey Space Research on 04/17/15,non-bug,https://github.com/nasa/osal/issues/61
Refactor `CFE_EVS_SendEvent` to use `CFE_EVS_SendEventWithAppID`,"**Is your feature request related to a problem? Please describe.**
Duplicated logic, `CFE_EVS_SendEvent` could get AppID and use `CFE_EVS_SendEventWithAppID`
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs.c#L141
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs.c#L182

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1425
Add top level readme for open source release,Applies to both psp-1.3.0a and development branch.,non-bug,https://github.com/nasa/PSP/issues/94
Pass Module ID as parameter to PSP module init function,Some modules can benefit from having a unique identifier they can use to allocate resources.  This is a simple change to add.,non-bug,https://github.com/nasa/PSP/issues/68
May need -rdynamic,"The SymbolApiTest reports that, if we do not use -rdynamic when linking, modules may not include all of the symbols that they expect to export.

Ticket #147 reduces the invasive patching of the build rules being done by the Bamboo support scripts; that patching was forcing -rdynamic into one of the headers. With that invasive patching gone, SymbolApiTest now fails.

Alternatives to pick from:
1. Always use -rdynamic (for the platform where it is meaningful)
2. Change SymbolApiTest to not need it to be specified
3. Reinstantiate Bamboo code that forces the flag to be used.

Need to look at the exact effects of -rdynamic and decide when
these are needed versus when they are undesirable.
",bug,https://github.com/nasa/osal/issues/150
Improve consistency and reduce duplication in various BSP/PSP implementations,"Currently in the CFE/OSAL world we have at least four different platform-specific abstraction methods, all of which basically do the same thing of getting common code to run on a different platforms.  All of these provide three very basic bits of functionality, in different flavors:

- provide a well-known entry point symbol for the platform (main, Init, etc)
- get the system into a proper state for running the app
- Invoke `OS_Application_Startup()` -- or whatever the real app entry point is
- Do something for idle time while the app runs (a shell, or just an idle loop).
- Shut it down when complete 

**Provider 1**:

On the OSAL side this is provided by the ""BSP"".  It has genppc-vxworks6.4, pc-linux, pc-rtems, sparc-vxworks6.7, sis-rtems, and mcf5235-rtems (the latter 3 are somewhat unmaintained/untested). 

**Provider 2**:

When running Unit tests, an alternative OSAL BSP is used which has extra functionality for running the tests.  The idea is that any platform capable of running applications should also be capable of running Unit tests.

Unfortunately, to avoid changing existing BSP functions, this was ""cloned"" and therefore this has basically morphed into a second duplicate provider of the entry point/startup/shutdown logic, because UT needs a slightly different setup from a regular app.  There still is, however, a considerable amount of overlap between the ""UT"" BSP and the regular application BSP.

//Proposal//: These should be made into an extension of the basic OSAL BSP.

**Provider 3**:

The CFE PSP also provides many of the same services.  On the CFE PSP repo, there are ""pc-linux"", ""pc-rtems"", and ""mcp750-vxworks6.4"".

These are basically extended versions of the OSAL BSP, and also provide entry point/shutdown logic, but they also do ADDITIONAL configuration that is specific to CFE before calling the CFE entry point.

//Proposal//: like the unit tests, the CFE PSP should be an extension of the OSAL BSP, not a replacement for it.  The PSP already defines a `CFE_PSP_Main()` entry point for itself, and this can be invoked as a second-stage after OS_Application_Startup to do the additional startup tasks required for CFE.

**Provider 4**:

The JSC-provided unit tests residing in the `osal/src/unit-tests` directory contain their own platform abstractions by way of preprocessor macros and alternate header/source files.  The source/header file choice is based off the `_LINUX_OS_`, `_VXWORKS_OS_`, and `OSP_ARINC653` compile-time macros.  In turn, this defines additional macros for platform-specific routines like sleep / logging / taskDelay, etc.

These tests are already using an entry point provided by the UT-BSP described in (2) above, the macros supplement this.  The problem is that not all platforms are provided.  Most notably, there is no implementation for _RTEMS_OS_, so these tests are currently unbuildable on PC-RTEMS.

//Proposal//: Functions like sleep/delay and other platform-specific bits should be changed from a macro to an API call provided by the UT-BSP.  Logging functions are already provided by the UT-BSP.  Furthermore, all the test cases should use UtAssert calls to make the output consistent with everything else.


",non-bug,https://github.com/nasa/osal/issues/261
Make PSP more modular,"**Is your feature request related to a problem? Please describe.**
It is currently not easy to override items in the ""shared"" directory even for platforms which it does not apply.

For example, in the ""cfe_psp_ram.c"" and ""cfe_psp_port.c"" files this contains code that directly writes to physical memory addresses, which may work on mcp750, but will likely segfault on an pc-linux system.

The code should be better structured as modules so the ""correct"" implementation can be used for each system without breaking the other system.

**Describe the solution you'd like**
Most of the code in `shared` should be modularized so it can be selectable per-platform.
Each platform (mcp750, pc-linux, pc-rtems, plus whatever others users might have) then becomes just a collection of modules.

**Additional context**
There really shouldn't be much in the `shared` directory (the existence of such a directory implies its not platform-specific, but yet its in the PSP).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/263
"Replace ""osalbool"" and ""boolean"" types with C99 bool","CCB intends to deprecate the OSAL-provided ""boolean"" and ""osalbool"" types in version 5.0.0, in favor of the C99-specified ""bool"" type.

CFE needs to be updated to stop using these types along with the related macro definitions:

    `osalbool` and `boolean` should be `bool`
    `TRUE` should be `true`
    `FALSE` should be `false`",bug,https://github.com/nasa/cFE/issues/350
ES CDS defines two nearly identically-named constants with different values,"**Describe the bug**
The CDS code uses two mission-scope configuration values:
`CFE_MISSION_ES_CDS_MAX_NAME_LENGTH`
`CFE_MISSION_ES_CDS_MAX_NAME_LEN`

The values are actually different; the ""LENGTH"" version is just the CDS base name, where as the ""LEN"" is the size of the qualified name (APP.CDSName form).

**To Reproduce**
No runtime issue, this is a style/maintenance issue.

**Expected behavior**
The names should be more different and distinctive.  

Suggest that `CFE_MISSION_ES_CDS_MAX_NAME_LENGTH` should be renamed to indicate that it reflects the size of the base name only.  This value appears to primarily be used internally to CDS, and does not get directly used in telemetry packets, so it would be easier to rename, with less impact on existing code.


**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/370
New RX PDU dropped due to max RX transactions reached on channel not counted,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
There's a strange comment about ""no known channel"" as justification for dropping a new RX PDU without incrementing the channel dropped receive counter, yet the channel number is known since it's received on the channel pipe and the local EID matches.
https://github.com/nasa/CF/blob/1ba450b3d7edd2cd63d9db104ce5201ccca16e28/fsw/src/cf_cfdp_sbintf.c#L260-L261

**Describe the solution you'd like**
I'd expect the dropped counter to increment as a way to track this condition per channel.  There isn't a transaction set up or a CF_CFDP_DispatchRecv called, but all the CF_CFDP_RecvDrop call does is increment the dropped counter anyways.

**Describe alternatives you've considered**
Maybe the received ""dropped"" counter is only intended for RX transactions that have been started... seems like useful information though.  Probably also useful to track with a counter if the event gets filtered.

**Additional context**
I couldn't find a requirement so likely derived.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/268
Simplify loop in `CFE_ES_LocateAppRecordByName`,"**Is your feature request related to a problem? Please describe.**
While loop with dual break could be simplified:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.c#L90-L106

**Describe the solution you'd like**
Refactor to simplify, possibly for loop on AppRecPtr.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1353
Remove OS_BinSemFlush,"**Is your feature request related to a problem? Please describe.**
Leads to race conditions, shouldn't be used.  Also other flushes aren't implemented, so consistency.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-binsem.c#L145

**Describe the solution you'd like**
Deprecate/remove

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/884
Impossible to test OS_CONSOLE_ASYNC false case,"**Is your feature request related to a problem? Please describe.**
Now that OS_CONSOLE_ASYNC is defined locally, it's impossible to functionally test false case or get full branch coverage on `OS_ConsoleCreate_Impl` without modifying the code under test:
https://github.com/nasa/osal/blob/ba0ac40d3b58b4d12f32a2222c8c8ed2fb663c65/src/os/vxworks/src/os-impl-console.c#L41-L48

https://github.com/nasa/osal/blob/ba0ac40d3b58b4d12f32a2222c8c8ed2fb663c65/src/os/vxworks/src/os-impl-console.c#L146-L148

**Describe the solution you'd like**
Either need to be able to exercise this option or remove it.

**Describe alternatives you've considered**
None

**Additional context**
Prevents full branch coverage

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/osal/issues/957
Reflect CI status in different badges on the readme. ,"**Is your feature request related to a problem? Please describe.**
The current CI compiles the code, runs unit tests, builds the documentation and executes cFS all in one script. 

If the script fails at the documentation build the only way to figure out why it fails is to go into the Travis dashboard and read through the log which takes time and is not transparent to our users.

**Describe the solution you'd like**
Have at-a-glance information that reflects what specific part of CI failed.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",non-bug,https://github.com/nasa/cFS/issues/129
add osprintf to OSAL,"JSC has developed a known and understood version of printf that has been code reviewed and unit tested.  It can be used on platforms that do not provide a printf (such as ARCIN653) or as a known, trusted implementation of the printf function on other OSs.  Currently, versions (there are small variations in the implementation between OSs) for the posix, VxWorks6, and ARINC653 OSALs are available.

Need to add branch with OSAL/src/os/posix, vxworks6, ARCIN653/osprintf.c and OSAL/src/os/inc/psprintf_priv.h, osprintf.h",non-bug,https://github.com/nasa/osal/issues/57
Add condition variable implementation for VxWorks,"**Is your feature request related to a problem? Please describe.**
Pull Request #1278 added a condition variable API implementation for POSIX, but RTEMS and VxWorks were set to use the ""not-impl"" module, with a plan to implement in the future.

**Describe the solution you'd like**
Add an implementation of condition variables for VxWorks 7.x

**Additional Context**
Only VxWorks 7.x is likely to be supportable, version 6.x will still need to use the ""not-impl"" module because the underlying sync mechanism may not exist.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1288
CFE_ES_CDSRegDumpRec_t has implicit padding,"**Is your feature request related to a problem? Please describe.**
Related to #664 - implicit padding should be avoided

**Describe the solution you'd like**
Eventually pack definitions will come from a common definition, with explicit padding

**Describe alternatives you've considered**
None

**Additional context**
Observed in testing Bootes

**Requester Info**
Jacob Hageman - NASA/GSFC

@wmoleski",non-bug,https://github.com/nasa/cFE/issues/966
Refactor excessive logic/side effects in return statement,"**Is your feature request related to a problem? Please describe.**
Excessive logic in OS_FileSys_FindVirtMountPoint return statement.  This isn't coding standard compliant and takes a while to sort out when first observed:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-filesys.c#L107-L108

**Describe the solution you'd like**
Refactor/comment to make more clear.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/876
Update copyright and license for open source cFS framework release 6.6.0a,Need to update/add copyright and license to Apache 2.0 for open source release of 6.6.0a.,bug,https://github.com/nasa/cFE/issues/316
Move cmd pipe processing into separate dispatch file,"**Is your feature request related to a problem? Please describe.**
Currently the ""TaskPipe"" function is comprised of a couple big switch statements based on MsgId and FcnCode, along with length validation and potentially other structural checks.   If/When migrating to EDS some of that logic can be handled by common code that check against constraints defined in EDS.

**Describe the solution you'd like**
The current ""TaskPipe"" function and the supporting logic around it should be moved to a separate ""dispatch"" source unit.  This improves organization in general, but also makes for an easier switch to different logic in the future, should that come to be needed.

**Describe alternatives you've considered**
The alternative is to add `#ifdef` blocks if validation logic needs to be switched.  

**Additional context**
The recommended solution of moving this logic to a separate source unit permits source-selection in CMake at configuration time rather than relying on preprocessor-based option selection.  This is generally cleaner, and permits all options to be verified in a single unit test build, as opposed to only being able to test the selected option.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/2262
Apply standard code style,"**Is your feature request related to a problem? Please describe.**
Inconstant style

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/pull/30 and https://github.com/nasa/ci_lab/pull/28

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/tblCRCTool/issues/16
GetSectionHeader - cyclomatic complexity of 35,"**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

elf2cfetbl.c::[GetSectionHeader](https://github.com/nasa/elf2cfetbl/blob/46b29f82c76429be97687203f75f4b1b25227c60/elf2cfetbl.c#L1679) unnecessarily violates the recommendation with a cyclomatic complexity of 35.  

**Describe the solution you'd like**
Clean up GetElfHeader such that it has a cyclomatic complexity of 15 or less.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Imported from JSC static analysis audit

**Requester Info**
Justin Figueroa, Vantage Systems
",non-bug,https://github.com/nasa/elf2cfetbl/issues/130
osloader_testcase code cleanup and resolution of cppcheck results,"cppcheck messages:
{{{
osloader_testcase.c:56: style: struct or union member 'TESTCOPYSymbolRecord_t::SymbolName' is never used.
osloader_testcase.c:57: style: struct or union member 'TESTCOPYSymbolRecord_t::SymbolAddress' is never used.
}}}

This structure exists in order to take the size of the structure
containing these fields, so our code will be retaining the fields
and will not be referring to them.

We need to tell cppcheck that, in these two specific cases,
it is perfectly OK for these members to be unused.

EDIT - ticket diverged to also clean up function pointers, memsets, test logic suggestions, etc
",non-bug,https://github.com/nasa/osal/issues/152
"EVS ""output ports"" should be a function of the PSP","Currently the EVS has 4 ""output ports"" implemented as functions within EVS: {{{EVS_OutputPort1(), EVS_OutputPort2(), EVS_OutputPort3(), EVS_OutputPort4()}}}

These are all **identically hard coded** to {{{OS_printf()}}}

The premise here seems logical -- to have several different destinations that the message may be sent.  But the current implementation does not allow for that to really happen.

The proposal is to change this to a PSP implementation:

{{{CFE_PSP_SendEventToPort(uint32 PortNum, const char *Message);}}}

This single API could be used for all ports, and the PSP could switch based on the ""PortNum"" value if needed, or simply call {{{OS_printf}}} for all messages as it does in the current code.


",non-bug,https://github.com/nasa/cFE/issues/94
Improve consistency in application of CFE_SB_MsgIdToValue/ValueToMsgId conversions,"**Is your feature request related to a problem? Please describe.**
A `CFE_SB_MsgId_t` value, like other IDs, is supposed to be a unique type/opaque value that identifies a message within the SB application context.   Although it is currently implemented using an integer (`uint32` specifically) application should not assume this.  Instead, a set of macros and inline conversion functions (CFE_SB_MsgIdToValue and CFE_SB_ValueToMsgId) are provided for when the application needs to interpret the value as an integer for a valid purpose.

**Describe the solution you'd like**
Add conversions where they are currently missing

**Additional context**
See nasa/cfe#1945 for full info.  A separate issue+PR will be submitted for each framework app.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/sample_app/issues/153
SrcFilename and DstFilename not ensured to be null-terminated,"**Describe the bug**
elf2cfetbl uses strncpy to load the SrcFilename and DstFilename strings, but does not ensure that the strings are null-terminated.

**Additional context**
This is related to https://github.com/nasa/cFE/issues/730

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/elf2cfetbl/issues/45
Compiler errors/warnings on EVS_SendEvent() calls on some architectures,"One roadblock to turning on strict compiler settings (such as -Werror) with full error checking is that MANY compiler warnings are generated by printf error checking done by gcc.

The full error checking is **VERY USEFUL** because it verifies that the argument corresponding to each escape code is the right type, e.g. %s has a string, %d has an integer, etc.

The problem is that we are using the OSAL abstractions such as int32 or uint32.  For example, on some systems, printf'ing an int32 needs a ""%d"" and on other systems it needs a ""%ld"" depending on whether it was typedef'ed as an int or a long.  So fixing an error on one platform by changing the escape code in the format string only generates an error on a different platform.

In order to fix this so that it builds without warnings on all platforms, any argument that ultimately gets passed to any C library printf() call needs to be cast to the right fundamental C type, not the abstracted type, at the call to the variadic function.  

Note this is really only an issue for variable argument functions since for normal functions the correct type is known and the compiler automatically casts it when possible.  But for variadic C library functions this is not possible so we must explicitly ensure that the argument gets converted to the correct type //for the c library//.  GCC is nice enough to implement warnings for this when it is mismatched, we should leverage that.",bug,https://github.com/nasa/cFE/issues/33
Update reusable workflow documentation and diagram,"**Checklist (Please check before submitting)**

* [ ] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [ ] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [ ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
As we add new workflows we should keep documentation up to date

**Describe the solution you'd like**
New diagrams and updated workflow summaries

**Describe alternatives you've considered**
Remove documentation and maintain with each file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz
",non-bug,https://github.com/nasa/cFS/issues/464
lgtm warning - misc. ,"**Describe the bug**
reference issues #320 

posix/osfileapi.c

```
line 186:
execl(shell, ""sh"", ""-c"", Cmd, NULL); /* does not return if successful */
--
  | The value of this argument may come from call to getenv and is being passed to execl
```


**Reporter Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/osal/issues/329
Differentiate hook and handler function filenames,"**Is your feature request related to a problem? Please describe.**
From [CCB:2021-05-05](https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-May-05-2021)

in https://github.com/nasa/cFE/issues/1463#issuecomment-832825759_

**Describe the solution you'd like**
Rename *hooks.c as *handler.c for stubs

**Describe alternatives you've considered**
None

**Additional context**
See nasa/cfe#1463

",non-bug,https://github.com/nasa/osal/issues/983
Clean up build warnings for CFE 6.6,"There are several warnings that appear in a build of the current development branch that should be cleaned up prior to the 6.6 release.

For instance:
{{{
fsw/cfe-core/src/es/cfe_es_api.c: In function ‘CFE_ES_GetAppID’:
fsw/cfe-core/src/es/cfe_es_api.c:748:11: warning: unused variable ‘TaskId’ [-Wunused-variable]
    uint32 TaskId;
}}}

There is also a cmake warning in new versions of the tool (v3.5+ which is in Ubuntu 16.04) and another const-ness warning regarding `CFE_TBL_DumpToFile` that shows up with -Wwrite-strings enabled.
",bug,https://github.com/nasa/cFE/issues/233
Improve consistency in application of CFE_SB_MsgIdToValue/ValueToMsgId conversions,"**Is your feature request related to a problem? Please describe.**
A `CFE_SB_MsgId_t` value, like other IDs, is supposed to be a unique type/opaque value that identifies a message within the SB application context.   Although it is currently implemented using an integer (`uint32` specifically) application should not assume this.  Instead, a set of macros and inline conversion functions (CFE_SB_MsgIdToValue and CFE_SB_ValueToMsgId) are provided for when the application needs to interpret the value as an integer for a valid purpose.

**Describe the solution you'd like**
Add conversions where they are currently missing

**Additional context**
See nasa/cfe#1945 for full info.  A separate issue+PR will be submitted for each framework app.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/to_lab/issues/103
Move typedefs used in cmd/tlm to the *_msg.h file,"**Is your feature request related to a problem? Please describe.**
CFE_ES_AppInfo_t and CFE_ES_MemHandle_t are defined in cfe_es.h, but used in telemetry (cfe_es_msg.h).  All the typedefs used in telemetry should be defined in the *_msg.h file.

**Describe the solution you'd like**
Move CFE_ES_AppInfo_t and CFE_ES_MemHandle_t into cfe_es_msg.h

Note CFE_ES_TaskInfo_t is not used in cmd/tlm.

**Describe alternatives you've considered**
None

**Additional context**
Related to #899

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/909
Remove unit test backwards compatibility in osapi-filesys functions,"Flight code should have the right implementation, and unit test code should be fixed to match.  Current comments indicate the flight code is less than optimal to match unit test code.

Specifically: OS_FS_ERROR vs OS_ERR_NAME_NOT_FOUND returns.",non-bug,https://github.com/nasa/osal/issues/259
Stray remaining use of 'goto' in test code,"**Describe the bug**
Noticed a single stray use of `goto` remaining in the test code.

**Expected behavior**
Use of `goto` is advised against by most coding guidelines.
Preference is to use other method of flow control.

**Code snips**
https://github.com/nasa/osal/blob/a9fece5f320617c850c5925c490ba31e916721b6/src/unit-tests/osfile-test/ut_osfile_test.c#L73-L94

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/osal/issues/1356
Fix git version strings built into executable,"The cmake build system includes version information acquired by running `git describe` in various source trees being used by the build.  These version strings are then linked directly into the output executable.

In testing the CFE 6.5 release I noticed that it wasn't quite working correctly.  The git revs were OK but it in some cases was referencing the wrong base tag or no base tag at all.

",bug,https://github.com/nasa/cFE/issues/184
Either deprecated or require OS_TaskRegister,"**Is your feature request related to a problem? Please describe.**
OS_TaskRegister has comments that it is obsolete, but never got officially deprecated.

**Describe the solution you'd like**
Need to either officially deprecate or officially support.

**Describe alternatives you've considered**
None

**Additional context**
Impacts apps, better now in a major release than later for removal.

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review",non-bug,https://github.com/nasa/osal/issues/853
file descriptor signed or unsigned?,"**Describe the bug**
OS_Open() returns an int32 file descriptor, OS_SocketAccept() takes a uint32 pointer for the file descriptor. They should be the same type. (The socket code should probably use/take int32.)

**Reporter Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/osal/issues/498
many unit tests report event count errors as hex,"**Describe the bug**
Unit tests check the number of events sent during the test, many of these in sb_UT.c are reported as hex...Such as in Test_SB_Cmds_SendPrevSubs (line 2704.)

**To Reproduce**
Uncovered when I was changing GetPipeName to produce events (as part of making it a public API) and the unit test event counts had to be updated. A simple test is to change the ""ExpRtn"" for a test.

**Expected behavior**
Event counts should reported in decimal.

**Code snips**
See above.

**System observed on:**
Linux VM

**Additional context**
N/A

**Reporter Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/418
"Improve coverage test for ""shared"" layer","This is a follow-on to original ticket #28

As part of the original change sets, a basic coverage test was added for the shared layer.  It calls most functions in a nominal case, but does not yet cover a sufficient number of the error cases.  For instance the module loader only has 72% of line coverage.  Others are between 80-90% but could still be improved (files, queues, timers).

It has been discussed in CCB meetings during the review for #28 that we should make another pass through the coverage test logs to improve the error case coverage prior to releasing the next OSAL.
",non-bug,https://github.com/nasa/osal/issues/230
Break up pc rtems bsp to support generic/configurable use,"**Is your feature request related to a problem? Please describe.**
The PC RTEMS OSAL bsp references pc686 bsp specific calls and doesn't easily support reconfiguration.  See https://github.com/nasa/cFS/discussions/314 for more context.

**Describe the solution you'd like**
Break up the implementation to support source selection and allow for exclusion of bsp specific calls.

Could eventually make it generic-rtems w/ bsp specific options.

**Describe alternatives you've considered**
Add a new bsp... but this ends up copying almost all the pc-rtems code.

**Additional context**
I've got something in work but needs cleanup/discussion to ensure it's headed in the right direction.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/1349
Limit the calculated results in CFE_PSP_WatchdogSet,"CFE_PSP_WatchdogSet computes a new value to set the watchdog timer to, but does not limit the results to the specified min and max values (CFE_PSP_WATCHDOG_MIN and CFE_PSP_WATCHDOG_MAX).

The calculation is also not protected from overflowing the possible range, so it is possible to get a much different result than expected.

Issues identified during #14  white box testing commit:[changeset:998ebe4a] ",bug,https://github.com/nasa/PSP/issues/39
Convert CFE_OMIT_DEPRECATED_6_6 to deprecate by default,"Switch ifndef CFE_OMIT_DEPRECATED_6_6 to ifdef CFE_DEPRECATED_6_6, user action is to define if needed but leave out by default.",bug,https://github.com/nasa/cFE/issues/343
Remove old MKS flags in comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",bug,https://github.com/nasa/osal/issues/253
Replace #include of c files with build system source selection,"**Is your feature request related to a problem? Please describe.**
#include of a c file is not acceptable flight coding style for some organizations and complicates formal verification processes

**Describe the solution you'd like**
Source selection should be done via build system

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/285
Comment about MISSION_GLOBAL_APPLIST is confusing,"**Describe the bug**
The first sentence for the description of MISSION_GLOBAL_APPLIST in `cFE/cmake/sample_defs/targets.cmake` does not make sense. 'The ""MISSION_GLOBAL_APPLIST"" is a set of apps/libs that will be built for every defined and target.'  Specifically 'defined and target' does not provide clarity as to the intent here.  Removing the 'and' would have it make sense, but was something else meant to be imparted here?

**To Reproduce**
N/A

**Expected behavior**
N/A

**Code snips**
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/sample_defs/targets.cmake#L84-L85

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
Alan Gibson
NASA GSFC/587
",non-bug,https://github.com/nasa/cFE/issues/1918
Add document build and deploy reusable workflow,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
All apps will need a document build and deploy workflow

**Describe the solution you'd like**
Avoid duplication by implementing reusable workflow from cFS, also use it in cFS to avoid duplication in current documentation workflow.

**Describe alternatives you've considered**
None

**Additional context**
- #447 
Rather than duplicating workflow logic for another doc, just use the reusable workflow for each document.

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFS/issues/455
"In MM_DumpMemToFileCmd, would be faster to checksum while writing","

Imported from GSFCCFS-1558",non-bug,https://github.com/nasa/MM/issues/5
Convert from strlen to strnlen where appropriate,"**Is your feature request related to a problem? Please describe.**
Per security standards strlen should be avoided if possible:
```
src/os/vxworks/src/os-impl-shell.c:        OS_write(fdCmd, Cmd, strlen(Cmd));
src/os/vxworks/src/os-impl-symtab.c:    if (strlen(name) >= OS_MAX_SYM_LEN)
src/os/shared/src/osapi-sockets.c:        len = strlen(sock->stream_name);
src/os/shared/src/osapi-sockets.c:        len = strlen(sock->stream_name);
src/os/shared/src/osapi-idmap.c:            name_len = strlen(record->name_entry);
src/os/shared/src/osapi-filesys.c:    mplen = strlen(filesys->virtual_mountpt);
src/os/shared/src/osapi-filesys.c:    if (strlen(dev_name) >= OS_FS_DEV_NAME_LEN)
src/os/shared/src/osapi-filesys.c:    VirtPathLen = strlen(VirtualPath);
src/os/shared/src/osapi-filesys.c:    if (strlen(name_ptr) >= OS_MAX_FILE_NAME)
src/os/shared/src/osapi-filesys.c:            SysMountPointLen = strlen(filesys->system_mountpt);
src/os/shared/src/osapi-filesys.c:            VirtPathBegin    = strlen(filesys->virtual_mountpt);
```

**Describe the solution you'd like**
Replace with strnlen where possible.

**Describe alternatives you've considered**
None

**Additional context**
Security analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/808
Confirm/add system log write verification explicitly documented in requirements,"**Is your feature request related to a problem? Please describe.**
A handful of the error handling requirements include system log writes.  Need to confirm verification in the associated test.
```
ES: Delete Application - Reject Undefined,cES1309.1,""If the specified Application is undefined then the cFE shall record the error in the System Log, and return an error code."",Can't delete an undefined application.
ES: Restart Application- Reject Undefined,cES1310.1,""If the specified Application is undefined then the cFE shall record the error in the System Log, and return an error code."",Can't restart an undefined application.
ES: Restart Application - Reject On Missing File,cES1310.2,""If the original cFE Application file is not found then the cFE shall record the error in the System Log, and return an error code."",""Can't restart the Application if the original file has been removed. In this case, the Application will continue without a restart.""
ES: Restart Application - Delete On Non-Parameter Error,cES1310.3,""If the cFE Application Restart fails due to a non-parameter error, then the cFE shall record the error in the System Log, and return an error code."",""If the Application is already stopped and there is an error restarting it, then the cFE application will be deleted.""
ES: Create Child Task - Report Error,cES1311.1,""In the event that the cFE Child Task cannot be created, the cFE shall record the error in the System Log, and return an error code."",Need to keep track of the Child Task Create Failures.
ES: Create Child Task - Invalid From Child Task,cES1311.2,""In the event a child task attempts to create another child task, the cFE shall record the error in the System Log, and return an error code."",Only the cFE Application's main task can create a child task. This prevents confusion with parent/child task relationships and the allocation/deallocation of resources.
ES: Delete Child Task - Error If Application Main Task,cES1312.1,""If the specified task is the cFE Application Main Task, the request shall record the error in the System Log, and return an error code."",Cannot use Child Task Exit or Delete on the cFE Application Main Task.
ES: End Child Task - Error If Application Main Task,cES1314.1,""If the calling task is the cFE Application Main Task, the cFE shall record the error in the System Log, and return an error code."",Cannot use Child Task Exit or Delete on the cFE Application Main Task.
ES: Prepare Memory Pool - Too Small,cES1320.1,""If the specified size is less than the <PLATFORM_DEFINED> minimum block size, the cFE shall record the error in the System Log, and return an error code."",""If the size of the Pool is not valid, then an error must be returned.""
ES: Allocate Memory - Invalid ID,cES1321.2,""If the specified Memory Pool identifier is invalid then the cFE shall record the error in the System Log, and return an error code."",""If the handle or Memory Pool ID is not valid, then an error must be returned.""
ES: De-allocate Memory - Invalid ID,cES1322.1,""If the specified Memory Pool identifier is invalid, then the cFE shall record the error in the System Log, and return an error code."",Need to have a valid Memory Pool identifier in order to de-allocate a block of memory.
ES: Processor Reset Set Up Volatile File System - Format On Failure,cES1517.1,""If the volatile file system check fails, the cFE shall format the volatile file system and create a system log entry."",""If the volatile file system is corrupt, it must be reformatted to allow the cFE to function.""
```

**Describe the solution you'd like**
Confirm there's a check for the system log entry, and where required a check of the return code.  If the verification is missing from the coverage check, add it.  If it's not implemented, reconsider requirement (is the system log write really necessary?)

**Describe alternatives you've considered**
None.  Need to verify requirements, and system log writes are easiest to verify from a stub call check in coverage code.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1773
CI updates - add static analysis and format in workflow,"**Is your feature request related to a problem? Please describe.**
Travis-CI not transitioned to github actions

**Describe the solution you'd like**
Transition CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/tblCRCTool/issues/31
Static analysis workflow failure due to style warnings,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/LC/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/LC/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Strict cppcheck warnings cause static analysis workflow to fail, see https://github.com/nasa/LC/runs/6356575973?check_suite_focus=true
```
[fsw/src/lc_cmds.h:86] -> [fsw/src/lc_cmds.c:852]: (style, inconclusive) Function 'LC_ResetResultsAP' argument 3 names different: declaration 'ResetCmd' definition 'ResetStatsCmd'.
[fsw/src/lc_cmds.h:103] -> [fsw/src/lc_cmds.c:932]: (style, inconclusive) Function 'LC_ResetResultsWP' argument 3 names different: declaration 'ResetCmd' definition 'ResetStatsCmd'.
[fsw/src/lc_utils.c:234] -> [fsw/src/lc_utils.c:240]: (style) Variable 'Result' is reassigned a value before the old one has been used.
```

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/LC/issues/26
System Log/Event string table model unification in FSW and UT update,"**Is your feature request related to a problem? Please describe.**
For CFE code that generates syslog messages, the coverage testing checks that a particular message was sent to syslog. The UT code uses a string table, but the CFE code has it hard-coded in the code.

**Describe the solution you'd like**
Unify the string table model in CFE so that all CFE code that uses strings for events, syslog, etc. store those strings in said table. This would simplify UT checks and would also allow for localization of the CFE codebase.

**Describe alternatives you've considered**
Removing the UT string table would also make things simpler.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/655
Make functional tests runnable via CFE_ES_START_APP_CC command,"**Is your feature request related to a problem? Please describe.**
In the functional test proof-of-concept, the test cases are libraries that are loaded in the startup script, and the ""testrunner"" app actually runs them.  But because libraries are not loadable/unloadable via command, it requires a custom startup script, and restarting CFE in order to run tests.

**Describe the solution you'd like**
The functional tests should be integrated with test runner such that they are each their own app, therefore runnable by simply issuing the ES command to start the app if they were not part of the initial startup script.

**Additional context**
This will simplify the process of running tests on targets, since it will alleviate the need to customize the startup script.

The `cfe_assert` library itself will likely need to remain as a library, because it is a common dependency between all test apps.  But it shouldn't hurt to simply load this by default in the sample startup script, it won't interfere with FSW.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1281
Search and replace error in syslog message inside CFE_ES_PoolCreateEx,"**Is your feature request related to a problem? Please describe.**
Interesting word ended up in this syslog:
https://github.com/nasa/cFE/blob/a0c2de62934e61a93bb4282c0fc784cf4be50da9/modules/es/fsw/src/cfe_es_mempool.c#L257

Likely because the code was copied from Library stuff, and ""Lib"" was replaced with ""MemPool"", and this used the full word ""Library"" ....

**Describe the solution you'd like**
Should say ""Mem Pool""

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1852
Add timeout to actions in workflow,"**Is your feature request related to a problem? Please describe.**
Default timeout is 360 minutes which is unnecessary and could exhaust allocations.

**Describe the solution you'd like**
Add a timeout in workflows

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1144
Minor fixes for cmake unit test build,"The CFE unit test build was assuming the use of ""-pg --coverage"" options for gcc.  Most targets do support this for coverage analysis however some do not (RTEMS, for example) as the runtime component of this feature may not be present in the target's c library.  Therefore the UT build currently fails for these targets.

Also, the OSAL build scripts have a feature to allow installation of the unit test executables to the target binary directory.  This is based on the value of a cmake variable called ""INSTALL_TARGET_LIST"", but the current build scripts are not setting this variable.

This ticket will
* Generate an appropriate value for INSTALL_TARGET_LIST
* Use the UT_C_FLAGS as computed by the OSAL build
* Add an ""install"" line for the CFE unit tests as well

These are all fairly minor changes and only affect unit test.
",bug,https://github.com/nasa/cFE/issues/97
Report actual errno / error string from C library calls,"**Is your feature request related to a problem? Please describe.**
During startup, the PSP makes several calls into C library functions, and an unexpected failure of these functions causes the system to abort/not start.  However, the error messages reported do not include any detail of what went wrong.

Example: https://github.com/nasa/PSP/blob/6d40816cfcc2836182f04bacf7d98b7d5cf5163b/fsw/pc-linux/src/cfe_psp_memory.c#L143-L147

**Describe the solution you'd like**
On any system call that sets the global `errno` value, if that function fails, this should be included in the error that is printed to the console.  At a bare minimum, could include the numeric value, but far preferable to use the system library call to print in a more human-friendly form, such as `strerror()` or `perror()` if the system provides it.

**Additional context**
Should probably also not use `OS_printf()` here due to its extra buffering, see #203, #299 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/PSP/issues/302
Clarify cmd processing success event text for cases that just initialize action,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Playback, transfer, and cancel commands just initiate the action which is then handled by the engine.  Event text implies otherwise:
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/src/cf_cmd.c#L168
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/src/cf_cmd.c#L211-L212
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/src/cf_cmd.c#L515

**Describe the solution you'd like**
Update text to indicate the action was successfully initiated

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/CF/issues/299
"Clean up the ""OS_ShellOutputToFile"" implementation","The implementation of this function is something of a kludge, generating a shell command string using redirection characters (>) to redirect the output to a file and then calling `system()` using this string.

As the intended output file is in fact already ""open"" by the local process, it is far cleaner and less error prone to invoke `fork()` directly, and simply `dup` the filehandles to be STDOUT_FILENO and STDERR_FILENO, then exec the shell process.

This avoids a bunch of issues related to the system() call.",non-bug,https://github.com/nasa/osal/issues/243
Scrub reference counting for possible task deletion issues,"**Is your feature request related to a problem? Please describe.**
The OSAL shared layer employs a reference counting scheme for long running/blocking operations, such as file read/write, and socket operations.  This reference count prevents deletion while these operations are still in progress.

However, the possibility exists that the task is deleted while this operation is occurring, which means the reference count may never get decremented.

**Describe the solution you'd like**
Whenever possible/relevant, the OSAL should ""wrap"" the long running operation in a cancellation cleanup handler as was done for binary sems in #470.  For POSIX, this may be needed for anything that invokes a cancellation point:
- read/write/open/close (files)
- send/recv/connect/accept (sockets)
- select
- mq_receive/mq_send (queues)

**Describe alternatives you've considered**
Leave as-is and accept a risk that there may be dangling references when tasks are deleted.

**Additional context**
There is no way for the OSAL to know about and handle inter-relationships between resources that the application may impose (i.e. using a mutex to control access to a shared memory or a reference count of its own) and therefore this cleanup/recovery can never be bulletproof.  

While OSAL could potentially do better at handling its own reference counts in the context of task deletion, there will still be other remaining risks of unreleased resources after tasks being deleted for things it cannot track.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/473
Use of Playback Directory command,"I'd expect the Playback Directory command to function like the following. Assume 7 is the maximum number of transactions that can be occurring simultaneously and that the directory we're attempting to playback has 10 files in it:

- All of the files in the directory get queued.
- Transactions are started for 7 files, at which point the maximum number of transactions is reached.
- Once 1 transaction finishes, CF reads from the queue and starts a transaction for the 8th file.
- Continue until the entire directory has been downlinked.

However, during our testing the command is functioning like the following:
- All of the files in the directory get queued.
- Transactions are successfully started for 7 files, at which point the maximum number of transactions is reached.
- CF also attempts to start transactions for the remaining 3 files at the same time, but they error out since we're at the maximum number of transactions. The remaining files are never downlinked. 

I'm not sure if we're misunderstanding how the command is intended to be used or if there is a bug.",non-bug,https://github.com/nasa/CF/issues/11
classic build broken,"Mike Scott (ASO project at Ames) reports that with the most
recent update to development, his build process that uses
the classic build of OSAL is no longer working. The initial
failure is being unable to find osconfig.h

I started looking into this, and there are further issues that
prevent the classic OSAL build instructions from working now,
and will document each issue (and its repair) here.
",bug,https://github.com/nasa/osal/issues/97
MCP750 should set up a timebase like other PSPs do,"**Is your feature request related to a problem? Please describe.**
MCP750 currently uses a (Very inaccurate) infinite loop with an `OS_TaskDelay()` to mimic a 1Hz callback.  This is inaccurate as it drifts over time and not the best way to create a 1Hz tick.

**Describe the solution you'd like**
In pc-linux and pc-rtems this just sets up a timebase object so CFE_TIME (or anything else) can register their own 1Hz timer and have it by synchronized to the PSP Time source.  Recommend to use this on MCP750 too.

**Additional context**
Infinite loops with no exit condition are also bad for unit testing.

This code to set up a PSP timebase using kernel timer could be modularized, as the implementation is already abstracted in OSAL.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/171
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal",non-bug,https://github.com/nasa/tblCRCTool/issues/27
APIs do not consistently check return value of functions called,"**Describe the bug**
APIs do not consistently check return values of functions called.  

I think not checking the return value is likely by design in many of the below cases...I just wanted to have the group take a look and determine if any updates are warranted.

APIs flagged during audit:
cfe_sb_api.c:CFE_SB_GetPipeOpts
cfe_sb_api.c:CFE_SB_SetPipeOpts
cfe_sb_api.c:CFE_SB_UnsubscribeLocal
cfe_tbl_api.c:CFE_TBL_Register
cfe_time_api:CFE_TIME_ExternalTime
cfe_time_api:CFE_TIME_ExternalGPS
cfe_time_api:CFE_TIME_ExternalMET
cfe_es_api.c:CFE_ES_RegisterCDS
cfe_esmempool.c:CFE_ES_PoolCreateEx
cfe_esmempool.c:CFE_ES_GetPoolBuf
cfe_esmempool.c:CFE_ES_PutPoolBuf
cfe_sb_api.c:CFE_SB_RcvMsg
cfe_sb_api.c:CFE_SB_GetLastSenderId
cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr
cfe_sb_api.c:CFE_SB_Unsubscribe
cfe_sb_api.c:CFE_SB_DeletePipe
cfe_tbl_api.c:CFE_TBL_Unregister
cfe_tbl_api.c:CFE_TBL_Load
cfe_tbl_api.c:CFE_TBL_Share
cfe_tbl_api.c:CFE_TBL_Update
cfe_es_api.c:CFE_ES_ProcessCoreException
cfe_es_api.c:CFE_ES_ResetCFE
cfe_sb_api.c:CFE_SB_CreatePipe
cfe_es_start.c:CFE_ES_Main
cfe_esmempool.c:CFE_ES_GetPoolBufInfo
cfe_es_api.c:CFE_ES_WaitForSystemState
cfe_es_api.c:CFE_ES_RunLoop
cfe_tbl_api.c:CFE_TBL_Validate

Please reference the spreadsheet (API_Audit_v2.xlsx) attached to issue #300 for additional information in regards to why each of the above APIs were flagged. 

**Reporter Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/549
CFE_ES_PerfLogAdd blocking behavior - redesign or document,"**Is your feature request related to a problem? Please describe.**
CFE_ES_PerfLogAdd can block:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_perf.c#L651-L657

**Describe the solution you'd like**
Document behavior/impact/context

**Describe alternatives you've considered**
Consider design updates to avoid blocking

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1351
Naming convention for macros in cfe_mission_cfg and cfe_platform_cfg,"The `cfe_mission_cfg.h` and `cfe_platform_cfg.h` files contain numerous macros for tuning CFE to the jobs that need to be performed.

The two files have different scope: 
* `cfe_mission_cfg.h` is shared by all CPUs within the spacecraft/mission
* `cfe_platform_cfg.h` is specific to a single CPU within the spacecraft/mission.

It is important that the scope of these definitions is well defined and used consistently throughout the code.  A naming convention should be introduced so that it is clear when reading the code whether the macro has mission-level or platform-level scope.
",non-bug,https://github.com/nasa/cFE/issues/142
"consider using ""REUSE"" for license/copyright banner management","Currently copyright headers and the like are all over the map, this software would help automatically check that all of our copyright and license information is correct in every file in the cFS tree.

See: https://reuse.software/

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFS/issues/82
Add top level readme for open source release,"Top level readme that shows up on GitHub

Likely want to also merge this to dev and maintain (vs the wiki which doesn't ship with the release).",bug,https://github.com/nasa/cFE/issues/321
Incorrect Logic in OS_TimespecToUsec,"In the VxWorks and Posix implementation of '''OS_TimespecToUsec()''', the algorithm logic is using the value of the '''output''' (usec) by mistake.  (This first if-test is the same if-test used by the opposite function, OS_UsecToTimespec() just above.  I assume its a copy-paste error).

{{{
 **  Function:  OS_TimespecToUsec
 **
 **  Purpose:  Convert a POSIX timespec structure to microseconds
 **
 */
void OS_TimespecToUsec(struct timespec time_spec, uint32 *usecs)
{
   if ( (*usecs) < 1000000 )
   {
      *usecs = time_spec.tv_nsec / 1000;
   }
   else
   {
}}}
",bug,https://github.com/nasa/osal/issues/85
Build PSP components as a separate targets,"**Is your feature request related to a problem? Please describe.**
As part of coverage testing that is being introduced in #168, it will require rebuilding the PSP code more than once, to make a variant that include coverage instrumentation.  This requires a bit of restructuring to support.

**Describe the solution you'd like**
Build components (e.g. shared directory) as separate targets so they can be added more than once with different configurations.
Define all target names using a separate re-definable string such as `${CFE_PSP_TARGETNAME}` rather than `${CFE_SYSTEM_PSPNAME}` to avoid target name conflicts.

**Additional context**
Prerequisite to #168, isolated to separate issue because it affects FSW headers and build scripts, not just unit test, and therefore warrants separate review.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/169
Refactor UT_SetForceFail,"Describe the bug
UT_SetForceFail was refactored to UT_SetDefaultReturnValue for https://github.com/nasa/osal/issues/559. It needs to have its name changed here as well.

Expected behavior
Change UT_SetForceFail  to UT_SetDefaultReturnValue 

Additional context
Part of https://github.com/nasa/osal/issues/559

Reporter Info
Alex Campbell",non-bug,https://github.com/nasa/sample_app/issues/106
UT_SetForceFail is a misnomer,"**Describe the bug**
UT_SetForceFail assumes that the value given, that is being set as return value, is a fail condition.  There may be sometimes that a function returns more than 1 value that is not considered a fail.

**To Reproduce**
Use in a unit test where there is a stubbed function with more than 1 ""successful"" return value.

**Expected behavior**
Change to something like UT_SetForcedReturnValue to make it more generic.  

**Code snips**
N/A

**System observed on:**
RHEL 7.6

**Additional context**
Not a required or debilitating situation, but a name change may be make the function's effects more clear.

**Reporter Info**
Alan Gibson NASA-GSFC/587
",bug,https://github.com/nasa/osal/issues/559
Replace calls OS_open and OS_create with OS_OpenCreate,"**Is your feature request related to a problem? Please describe.**
For nasa/osal#556 the `OS_open()` and `OS_create()` API calls will be deprecated, because they don't follow the correct pattern of returning an OSAL ID via an output variable, instead returning the ID via the `int32` return code.

**Describe the solution you'd like**
Use the newly exposed OSAL API `OS_OpenCreate()` which can replace both `OS_open` and `OS_creat` via different flags, and outputs the ID as all other OSAL functions do.

**Additional context**
Prerequisite to being able to deprecate these APIs that don't follow the OSAL pattern.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/893
Remove suppression of files checked by cppcheck in action to allow visual confirmation it worked,"**Is your feature request related to a problem? Please describe.**
The ""all"" static analysis check suppresses standard output with `--quiet`, so can't see that it actually did anything

**Describe the solution you'd like**
Remove `--quiet`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1488
Improper calls to CFE_ES_WriteSysLog,"**Describe the bug**
At some point some extra writes to the syslog were added, for example:

```
       CFE_ES_WriteToSysLog(""SCHEULE APP: Error Releasing Table \
                             SCH_LAB_SchTbl, RC = 0x%08X\n"", Status);
```

There are two issues:
1. Use of the ""line-continuation"" backslash to split across lines -- note this does _not_ remove the leading whitespace on the next line, so the actual literal result will have a large space in it.
2. Lack of a cast on the parameter.  This causes build failure on platforms where `int32` is actually a `long`, not `int`.

**To Reproduce**
Build for a 32-bit platform.  Triggers a warning about the incorrect argument type.

**Expected behavior**
Should build cleanly on a 32-bit platform.

**System observed on:**
Ubuntu 18.04 LTS 64-bit build host, building for i686-rtems4.11 target.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/sch_lab/issues/23
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/775
Use C11's _Static_assert for CompileTimeAssert when available,"It is straightforward to test the C version and define `CompileTimeAssert` using C11's  [https://en.cppreference.com/w/c/language/_Static_assert _Static_assert keyword]

This can be done e.g. 
{{{#!c
#if __STDC_VERSION__ >= 201112L
#define CompileTimeAssert(Condition, Message) _Static_assert(Condition, #Message)
#else
#define CompileTimeAssert(Condition, Message) typedef char Message[(Condition) ? 1 : -1]
#endif
}}}

This avoids polluting the type namespace with the magic typedefs used in the older implementation, and also produces better error messages if the assertion fails.

It would also be possible to use C++11's [https://en.cppreference.com/w/cpp/language/static_assert static_assert keyword] in a similar manner, but I am not sure if this is desirable; this depends whether we want to officially support using this header in C++ code.

I will create a branch containing the attached patch and update this ticket.",non-bug,https://github.com/nasa/osal/issues/248
Using void ** reference,"https://github.com/nasa/sch_lab/blob/4a1b72e5a3092369b49d5c65f325bc48e1f7f832/fsw/src/sch_lab_app.c#L179

According to this [reference](http://c-faq.com/ptrs/genericpp.html), we should use the CFE_TBL_GetAddress like:

```
void * ConfigTableTmp = ConfigTable;
Status = CFE_TBL_GetAddress(&ConfigTableTmp, SCH_LAB_Global.TblHandle); 
ConfigTable = ConfigTableTmp;
```

The C reference recommends this instead of (void **) casting.",non-bug,https://github.com/nasa/sch_lab/issues/77
Add missing API's to User guide ,"**Describe the bug**
In section 8 of the user guide, it lists all the APIs, and some are missing from that list.

cFE Resource ID API's
– CFE_ES_AppID_ToIndex
– CFE_ES_LibID_ToIndex
– CFE_ES_TaskID_ToIndex
– CFE_ES_CounterID_ToIndex

cFE FS File Utility APIs
– CFE_FS_GetDefaultMountPoint 
– CFE_FS_GetDefaultExtension
– CFE_FS_ParseInputFileNameEx
– CFE_FS_ParseInputFileName
– CFE_FS_BackgroundFileDumpRequest
– CFE_FS_BackgroundFileDumpIsPending

**Expected behavior**
Should be listed in section 8. 

**Additional context**
the details of the functions are in there correct place later in the guide. 

**Reporter Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFE/issues/1646
Comments/document cleanup relative to SB/MSG/SBR review (and #1375),"**Is your feature request related to a problem? Please describe.**
Clarify CCSDS comment, just note CCSDS maximum is 7 bigger than int16:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_msg_api_typedefs.h#L48

Add link to options in documentation:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L157

Clarify comments to eliminate implied coupling (SBN is an example use):
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L315-L316

Mention CFE_SB_ReleaseMessageBuffer for the case when a message is not transmitted in `CFE_SB_AllocateMessageBuffer`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L474

Extra `a` in comment:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_private/fsw/inc/cfe_sbr.h#L52

Comment in `CFE_SB_UnsubscribeFull` about CFE_SUCCESS status should be brought up to the `else` level, everything is success and explicitly mention in API documentation:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L1264

s/bush/bus:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sbr/CMakeLists.txt#L33

Fix comment, doesn't pad to boundary, instead pads to be divisible by 64 so compiler won't add padding if payload structure requires 64 bit alignment:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/msg/option_inc/default_cfe_msg_hdr_pri.h#L91
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/msg/option_inc/default_cfe_msg_hdr_priext.h#L77

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1452
UT_CheckForOpenSockets prototype duplicated,"**Is your feature request related to a problem? Please describe.**
Prototype defined in both cFE and OSAL.

https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/fsw/cfe-core/unit-test/ut_support.h#L656-L671

https://github.com/nasa/osal/blob/f12d42ba58837a645d05eda3479d5f613ebad6c4/src/ut-stubs/utstub-helpers.h#L111-L115

Implemented here:
https://github.com/nasa/osal/blob/f12d42ba58837a645d05eda3479d5f613ebad6c4/src/ut-stubs/utstub-helpers.c#L195-L217

Also violation of magic number use in the implementation, and doesn't seem to actually do what it says (I don't see the close).

**Describe the solution you'd like**
Maybe remove if not useful?  If not, at least use the correctly scoped prototype and remove the second definition.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/901
Remove OSAL API guide from CFE,"**Is your feature request related to a problem? Please describe.**
In nasa/osal#1033 the scripts for generating the OSAL API guide are now included in the OSAL repo, based on what CFE had here.  With this, it should not be necessary to include the OSAL documentation in the CFE repo any longer.

**Describe the solution you'd like**
Remove the OSAL API guide config/templates from CFE, and call the OSAL script as a subdirectory to build the OSAL API documentation.

**Additional context**
Depends on nasa/osal#1033 being merged first (or at the same time)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1561
Dereference Null Return Value warning false alarm,"**Describe the bug**
Dereferencing BucketPtr, which is known to be NULL.

**Expected behavior**
Check if BucketPtr is not NULL before dereferencing. 

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/src/cfe_es_generic_pool.c#L228

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/cFE/issues/1990
Embed table modification response actions/notification in `CFE_TBL_ReleaseAddress`,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_Modified` API that notifies table services the table has been modified could be replaced by an additional parameter to `CFE_TBL_ReleaseAddress`, which might help with table sharing/synchronization since required actions could be completed prior to release.

**Describe the solution you'd like**
Perform ""modification"" response actions as part of `CFE_TBL_ReleaseAddress`.

**Describe alternatives you've considered**
Consider as part of design review related to #1493

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1495
Fix travis-CI config warnings,"**Is your feature request related to a problem? Please describe.**
Build config validation (from travis-CI) -
root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/commit/6cf5a57f5995710345b2a5411d11af2b2d7f80ee

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/143
Small Fixes pc-rtems BSP,"This fixes a number of small issues found when testing the ""pc-rtems"" PSP:

* when compiling with -pedantic, gcc complains about the old-style initializer syntax
* move the shell init call earlier in the main process, this is more logical placement and allows for a working console in the event that the CFE Main function has a problem.
* utilize the OS_API_Wait call implemented in the newest OSAL
* remove conditional compiles around timer setups (it is not expected this PSP will be used with earlier OSAL versions)

",bug,https://github.com/nasa/PSP/issues/26
SB - Add Last Pipe ID and Msg ID to Routine Telemetry for Diagnosing Message Limit Error and Buffer Overrun Errors (GSFC DCR 22081),Often the SB Message Limit Error and Buffer Overrun Error event messages are filtered. In order to help diagnose these SB issues it would be helpful to include the last Pipe ID and Message ID associated with these errors in routine telemetry.,non-bug,https://github.com/nasa/cFE/issues/129
RTEMS fails to build with shell enabled,"**Describe the bug**
The prototype for the OS_ShellOutputToFile_Impl() function has gotten stale and needs an update.  Unfortunately this isn't built as part of any regularly-run test routine.

**To Reproduce**
Change OSAL config to enable shell
Build on RTEMS

**Expected behavior**
Build should pass

**Code snips**
https://github.com/nasa/osal/blob/65c584feea04b4c77389667a1e30ae56b4da35ce/src/os/rtems/src/os-impl-shell.c#L55

**System observed on:**
RTEMS 4.11.3 target, Ubuntu 20.04 host.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/945
CFE_PSP_MemRead/Write() not checking for NULL pointer args,"In the psp/fsw/shared/cfe_psp_ram.c, we have CFE_PSP_MemRead8/16/32 and CFE_PSP_MemWrite8/16/32 functions.  They all take memory addresses as uint32 values and the *Read functions take a pointer.  All of these addresses & pointers are happily dereferenced without checking for a null pointer.  (The -16 and -32 read/write functions DO check for alignment and error out.)

Some spot-checks revealed a larger problem: some clients that call these functions don't look at the return value.

CFE_PSP_MemRead8(): The CFS **MD** does check the return value in md_dwell_pkt.c, but **MM** does not in 10 call sites (mm_dump.c and mm_mem8.c), and cFE's **ES** doesn't check the status.  

CFE_PSP_MemWrite8(): The CFS **MMM** does not check the return value in 4 call sites (mm_load.c and mm_mem8.c).

Similar results for CFE_PSP_MemRead16(), CFE_PSP_MemWrite16(), CFE_PSP_MemRead32(), and CFE_PSP_MemWrite32().

Recommendation: Since these return an error code already, these functions should check for null pointers/addresses.  But ES and MM should be fixed to properly check the return codes first.",bug,https://github.com/nasa/PSP/issues/34
Update README badges for workflow actions,"**Is your feature request related to a problem? Please describe.**
Badge in readme still shows travis results

**Describe the solution you'd like**
Update to reflect action status

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1145
User-friendly memory alignment from CFE_SB_RcvMsg,"**Is your feature request related to a problem? Please describe.**
~Command with 8 byte alignment requires a memcpy by the user (AFAIK).~

EDIT - See below, should already provide sufficient alignment.

**Describe the solution you'd like**
Align the buffer for the user?  Any other options to make this easier?

**Describe alternatives you've considered**
None.

**Additional context**
Stakeholder request/question.

**Requester Info**
Jacob Hageman - NASA/GSFC (from stakeholder)

@excaliburtb",non-bug,https://github.com/nasa/cFE/issues/1001
CFE_PSP_MemRangeSet() description error,"CFE_PSP_MemRangeSet() in cfe_psp_memrange.c has a comment error on the MemoryType argument that could be misleading.

CFE_PSP_MemRangeSet() validates against CFE_PSP_MEM_RAM and CFE_PSP_MEM_EEPROM types and errors out with any other type.  (This is consistent with the CFE_PSP_MemValidateRange() implementation.)  But the source file comments for CFE_PSP_MemRangeSet() have (cfe_psp_memrange.c, line 188):
{{{
<...snip...>
**
** Parameters: 
**    RangeNum --   A 32 bit integer ( starting with 0 ) specifying the MemoryTable entry.
**    MemoryType -- The memory type to validate: CFE_PSP_MEM_RAM, CFE_PSP_MRM_EEPROM, or CFE_PSP_MEM_ANY
**    Address --    A 32 bit starting address of the memory range
<...snip...>
}}}

That last ""or CFE_PSP_MEM_ANY"" is incorrect.",bug,https://github.com/nasa/PSP/issues/38
CFE_PSP_WriteToCDS input buffer should be const,"The CFE_PSP_WriteToCDS() API is not currently const-correct.  The input buffer should be qualified as ""const"" but it is not currently so.

The API prototype:

{{{
int32 CFE_PSP_WriteToCDS(void *PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}

should become:

{{{
int32 CFE_PSP_WriteToCDS(const void *PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}

In particular, this incorrect definition can cause a spurious compiler warning any time the data being written is ""const"".  In certain places, CFE calls this function with string literals, which trigger compiler warnings on some platforms/configurations.

",bug,https://github.com/nasa/PSP/issues/89
Improve shared layer to support lookups by keys other than ID,"The shared layer currently only supports object/resource lookups by ID.  The code locks the table, does a direct calculation of the table index using the ID, and confirms that the ID is correct.

This supports the vast majority of OSAL calls where the subject resource is passed in using a 32-bit resource identifier.

However, there are other API calls which require lookup by name rather than ID.  Some of these must continue to exist for backward compatibility, but still should use as much of the same infrastructure as possible.",non-bug,https://github.com/nasa/osal/issues/242
rtems ostimer.c functions not using semaphore,"In the RTEMS version of ostimer.c, some functions are not using the semaphore with accessing the OS_timer_table.  See #92, and #94 for similar issue in other OSALs.

'''OS_TimerSignalHandler(), OS_TimerSet(), OS_TimerGetIdByName()''' don't touch the semaphore but do access or modify the table.  '''OS_TimerCreate()''' obtains & releases the semaphore, but is modifying the table after releasing the semaphore.

",bug,https://github.com/nasa/osal/issues/95
"Update standard ""development"" version indicator to use 0xFF ","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**

Historically, setting the Revision number to ""99"" indicates that the source code in question is a ""development"" version and thus hasn't been fully tested. 

In https://github.com/nasa/osal/pull/824, we put this information in the Mission_Rev instead and set it to ""0xFF"". This pattern has a couple of problems:
- It is not standard, cFE documentation needs to be updated
- If a user changes the MISSION_REV while building on top of a development version, there is no way to know what the original version was by looking at source code. (eg x.y.z.99 is changed by a user to x.y.z.100) kudos to @skliper for this observation 
- Older telemetry or ""ground"" systems may be used to the two-character legacy number of ""99"" instead of ""0xFF"" and convert the value into a two-character string thereby cutting off the value. 

**Describe the solution you'd like**

1. Revert to using the Revision number
2. Move from 99 to 0xff
3. Communicate the change to users 

**Describe alternatives you've considered**
Keep Revision = 99

**Additional context**

Need to open related Issues in other cFS component repositories

**Requester Info**
Gerardo Cruz-Ortiz, NASA 
",non-bug,https://github.com/nasa/cFS/issues/440
Remove PktSize from add packet command,"**Is your feature request related to a problem? Please describe.**
PktSize is unused

**Describe the solution you'd like**
Remove from command

**Describe alternatives you've considered**
None

**Additional context**
Observed in testing #71 

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/to_lab/issues/73
Correct syslog message in UT_BSP_Unlock,"**Describe the bug**
The log message in `UT_BSP_Unlock` has the wrong function name (OS_MutSemTake).  Appears to be a copy/paste error from UT_BSP_Lock above.

**To Reproduce**
N/A (does not fail in normal operation)

**Expected behavior**
Log message should have `OS_MutSemGive`, not `OS_MutSemTake`

**Code snips**
https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/cfe_assert/src/cfe_assert_io.c#L59

**System observed on:**
Ubuntu

**Additional context**
Mismatch noted as part of review for #1599 

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1693
Add example of hardware-based 1Hz signal,"**Is your feature request related to a problem? Please describe.**
A few releases back the 1Hz configuration was changed to be initiated by CFE TIME itself, rather than started by the PSP.  This was done in order to resolve a race condition where the signal arrived before CFE TIME was ready to process it.

However, as a result, we no longer have a good example of a ""real"" hardware-based 1PPS/1Hz signal driving the CFE TIME 1Hz input, as the current example uses a software kernel timer only.

**Describe the solution you'd like**
Create an alternative to the `soft_timebase` module that reads a 1PPS signal from an external reference such as a serial port - as a number of GPS receivers do use a serial line to provide 1PPS along with location data.  This probably still wouldn't be directly usable but it would at least provide a (closer) example of how this could be achieved, that the user could modify for their particular setup.

**Describe alternatives you've considered**
There are two other ways this could be synced:
1. Use an external process like gpsd to sync the kernel clock to the 1PPS, then use `soft_timebase` as-is.  The result is that the 1Hz TIME signal will be in phase with the reference signal, but it won't occur at the same time.  This phase delay may or may not acceptable depending on the application.  This does have the advantage of having only a single time domain across the entire system (kernel/OS clocks and timers will all be synchronous with the GPS time) and it is totally transparent to apps - they just read time as normal.
2. Use an external sync routine (last argument to `OS_TimeBaseCreate` to wait for the 1PPS.  This is similar to 1 but easier to implement (no external dependencies) however the result will be more jittery and apps must know that this timebase may not be synchronous with the OS/kernel clock.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/PSP/issues/384
Make MM MemType into an enum,"

Imported from GSFCCFS-1568",non-bug,https://github.com/nasa/MM/issues/9
Doxygen generator code had gotten stale,"The CMake build system included some logic to support building the Doxygen-based CFE documentation.  However these rules had gotten out of date with respect to other changes that had gone into the build since they were written, and a couple variable name and path names need to be fixed.",bug,https://github.com/nasa/cFE/issues/201
Remove obsolete *.mak files,"**Is your feature request related to a problem? Please describe.**
find ./ -name ""*.mak"" shows obsolete make files

**Describe the solution you'd like**
Remove them

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/498
"Combine ""pc-linux"" and ""pc-linux-ut"" OSAL BSPs","There is a separate BSP called {{{pc-linux-ut}}} that is used for unit testing.  This differs slightly from the normal {{{pc-linux}}} BSP:

* It does not block signals
* It does not have an idle wait at the end of {{{main()}}}

Having a different BSP violates the ""fly what you test, test what you fly"" philosophy.

The unit tests driven by timers do not work with signals blocked, because these rely on signals working during {{{OS_Application_Startup()}}} in order to function.  This is probably the reason for the alternate BSP.

However, these tests can and should be fixed to operate using the normal BSP with signals blocked, as this will be more representative of what happens in a normal system.  To fix these tests just requires creating a child thread to handle the test logic and allowing {{{OS_Application_Startup}}} to complete normally.





",bug,https://github.com/nasa/osal/issues/81
"UtAssert ""N/A"" test case type is slightly overloaded","**Is your feature request related to a problem? Please describe.**
There are a number of similar situations for which the ""N/A"" (aka `UTASSERT_CASETYPE_NA`) log type is used, but have different nuances:

1. When a certain functionality is not implemented at all (e.g. network tests on a system without network stack, the API returns `OS_ERR_NOT_IMPLEMENTED`).  In this case a single ""N/A"" entry is used and the whole group of tests is skipped.
2. When a certain functionality is implemented, but cannot be tested due to external factors, such as the state of the system, how it was booted, etc.  (e.g. in the ""CDS"" test in ES, when calling CFE_ES_RegisterCDS(), if the CDS memory was not cleared before the test, the result may be ""CFE_ES_CDS_ALREADY_EXISTS"").  In this case the ""N/A"" entry is used to advise the user that the test is **incomplete** due these external factors, and that the user should take action to correct this and get a complete test result.
3. When there is more than one possible acceptable result from a specific function call.  In this case, the test code checks for each acceptable result, but are checked with `UTASSERT_CASETYPE_NA` to indicate that although this value was checked and does not match, it does _not_ constitute a failure of the test (the test can go on to check for the other possible acceptable results).

**Describe the solution you'd like**
These three different ""N/A"" nuances should ideally have a different case type.  (specific words/abbreviations can be discussed).  As the traditional meaning of ""N/A"" is ""Not applicable"", it likely line up best with the use case (1) above, where a test is truly not applicable on that platform/setup.  

For the other two, a separate casetype should be added to better convey the intent:

For item (2) above is to warn the user that the results are incomplete due to external factors, and they need to take action to correct those external factors to get a complete result.  This shouldn't necessarily be a failure; the test can still succeed in reduced form, but the report should be very clear that tests were skipped or not complete, and the user needs to take manual action to correct it.

For item (3) above, the intent is allow a ""soft"" test - where multiple values are acceptable, it is necessary to ""PASS"" (and log it) if a value _does_ match the acceptable value, but _not_ fail if the value does not match - because there are other acceptable values.  Typically these checks wouldn't need to go in the log at all; they may only be of interest to developers implementing the test, it does not provide much value in a final report log to see values that were checked for but didn't match.  (In that sense, visibility of these tests should be similar to DEBUG, but we should not overload DEBUG either).  

**Describe alternatives you've considered**
Leave all these case types as N/A

**Additional context**
Existing overload of N/A is not horribly broken/wrong, but it makes the logs a little harder to process, and not as clear as to what action (if any) the user needs to take for the N/A reports.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1130
Use compile time assert on address length check in bind,"**Is your feature request related to a problem? Please describe.**
Known at compile time:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L203

**Describe the solution you'd like**
Use CompileTimeAssert

**Describe alternatives you've considered**
What if sizeof(struct sockaddr_in6) is > OS_SOCKADDR_MAX_LEN but only AF_INET is used?  Not really an error?  Maybe only really known if OS_NETWORK_SUPPORTS_IPV6 is not defined?

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/861
Calculate crc can't return error code ,"**Is your feature request related to a problem? Please describe.**
Calculate CRC returns a uint so any error code you use gets overloaded. 

**Describe the solution you'd like**
be able to handle errors 

**Additional context**
Was found while working on #547 

**Requester Info**
Alex Campbell GSFC",bug,https://github.com/nasa/cFE/issues/1119
Update assert_eq to print both decimal and hex,"**Is your feature request related to a problem? Please describe.**
For many cases bits or error codes are being compared, where hex is easier to interpret the difference

**Describe the solution you'd like**
Print both

**Describe alternatives you've considered**
Add specific hex assert_eq

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/780
"ES uncovered code cfe_es_api.c, CFE_ES_ExitApp infinite loop (spins until deleted)","**Is your feature request related to a problem? Please describe.**
Missing coverage for CFE_ES_ExitApp function that contains an infinite loop.

https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/es/fsw/src/cfe_es_api.c#L444-L464

**Describe the solution you'd like**
Add coverage tests to include part of the function that is currently not being tested.

**Describe alternatives you've considered**
None.

**Requester Info**
Jose F. Martinez Pedraza/NASA GSFC
",non-bug,https://github.com/nasa/cFE/issues/1628
Re-enable static analysis after Travis-CI shutdown,"**Describe the bug**
The Travis CI runner ran cppcheck which we don't have anymore

**To Reproduce**
Submit pull request, notice that Travis CI doesn't run anymore.

**Expected behavior**
A success or failure report of a cppcheck run.

**Code snips**
Check from travis.yml

```
  #cppcheck flight software fsw/cfe-core/src and modules
  - cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style --suppress=variableScope --inconclusive fsw/cfe-core/src modules 2>cppcheck_flight_cfe.txt
  - |
    if [[ -s cppcheck_flight_cfe.txt ]]; then
      echo ""You must fix cppcheck errors before submitting a pull request""
      echo """"
      cat cppcheck_flight_cfe.txt
      exit -1
    fi
```

**System observed on:**
n/a

**Additional context**
Part of ongoing TravisCI to GitHub Actions migration
",bug,https://github.com/nasa/cFE/issues/1064
FM_ChildConcatCmd - cyclomatic complexity of 17,"**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x ] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
* [x ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity in software, in particular flight software of 15.

fm_app.c::FM_ChildConcatCmd unnecessarily violates the recommendation with a cyclomatic complexity of 17.  

**Describe the solution you'd like**
Clean up FM_ChildConcatCmd such that it has a cyclomatic complexity of 15 or less.

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/FM/issues/86
LGTM issue - replace call to ctime with ctime_r,"**Is your feature request related to a problem? Please describe.**
```
line: 1382
if (Verbose) printf(""Original Source File Modification Time: %s\n"", ctime(&SrcFileStats.st_mtime));
--
  | Call to ctime is potentially dangerous
```

**Describe the solution you'd like**
LGTM recommends replace with ctime_r

**Describe alternatives you've considered**
strftime

**Additional context**
Split from #28

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/elf2cfetbl/issues/58
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/PSP/issues/327
Collapse down to 1 time format for packet headers (missions can customize msg module for alternates),"**Is your feature request related to a problem? Please describe.**
#726 made it possible to replace header implementation such that the core no longer needs to carry mission unique logic.  It also added the single time format implementation, but did not switch to use it by default to minimize functional changes from that PR.

**Describe the solution you'd like**
Clean/remove all references to CFE_MISSION_SB_PACKET_TIME_FORMAT.  Note the change in #726 also fixes #92 when the new implementation is chosen.  Now just will do big endian, 6 byte sub-second field.

**Describe alternatives you've considered**
N/A

**Additional context**
#726

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/795
Two events in md_events.h have the same event ID,MD_TBL_VAL_NULL_PTR_ERR_EID & MD_UPDATE_TBL_SIG_ERR_EID are both assigned event ID 55,bug,https://github.com/nasa/MD/issues/11
"Memory alignment issues in TIME (32bit, MCP750, CCSDS_VER_2 config)","**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c: In function 'CFE_TIME_Tone1HzTask':
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:1220: warning: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:1228: warning: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c: In function 'CFE_TIME_Local1HzTask':
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:1437: warning: cast increases required alignment of target type
```

**Describe the solution you'd like**
Force alignment where possible without changing bits on the wire

**Describe alternatives you've considered**
Remove `-Wcast-align` for this build

**Additional context**
Note there are other alignment issues for other configuration options (#313, #314) but they don't show up for MCP750 with CCSDS Version 2 so aren't critical to 6.8.

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/666
Scrub configuration file for items that don't change,"Suggest removing non-project configuration items from this file. Would help to limit this list to only items that projects should expect to manage.

Examples of things I wouldn't consider for project configuration - app name, wakeup pipe depth, table names, etc.

Note open ticket on CPU utilization/idle task so avoiding comments on those parameters since I expect this implementation to change.

Imported from GSFCCFS-1014",non-bug,https://github.com/nasa/HS/issues/6
Minor redundancy cleanup from static analysis warnings,"**Is your feature request related to a problem? Please describe.**
Two minor redundant logic/checks:
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/vxworks/src/os-impl-timebase.c#L397-L411
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/vxworks/src/os-impl-network.c#L88

No actual issues, just minor cleanup.

**Describe the solution you'd like**
Remove first, refactor second so the bound is just checked in one place

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warnings

**Requester Info**
Jacob Hageman - NASA",non-bug,https://github.com/nasa/osal/issues/819
Add timebase API calls to existing OSALs for API compatibility,"To allow backward/forward compatibility once PSPs begin using the OSAL Timebase API added in #38, the existing OSALs (posix/rtems/vxworks6) need to have some implementation of these functions or else the link will fail.

This just adds an implementation that returns {{{OS_ERR_NOT_IMPLEMENTED}}} for all these calls for the 3 existing OSAL libraries, which allows the PSP or other application code to determine at runtime if the functionality is available or not.



",bug,https://github.com/nasa/osal/issues/86
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the sample_lib repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/sample_lib/issues/52
"MM IntLock removed, no longer implements ""write with interrupts disabled"" requirement MM2003","Historical - (note the lock/unlock have been removed, see comments):
Memory Manager uses OS_IntLock() and OS_IntUnlock(). That's the only place any of the OS_Int* functions are used in the GSFC apps.  These functions will likely be deprecated in the next OSAL release.

I'm guessing it does this with the intent of loading the mem block ""atomically"" with the hope of preventing another task from writing to it while this happens?

IntLock/Unlock has always been a no-op on POSIX, and furthermore even on platforms where it does something, it will not achieve that exclusivity effect on Multi-Core CPUs, as it only locks the interrupts on the core which calls it, and other cores continue to run anyway, interrupt or not.

Probably worth re-evaulating what MM is trying to achieve with the intlock... might be able to simply take it out with no loss of function.

20220324 - OS_IntLoc and OS_IntUnlock were removed as part of GSFCCFS-1156.  Although now requirement GSFCCFS-611 isn't being met.

Imported from GSFCCFS-1132",bug,https://github.com/nasa/MM/issues/2
Use `TblName` in TBL reporting when available,"**Is your feature request related to a problem? Please describe.**
Inconsistent reporting of table ""context"" throughout `CFE_TBL_Register` (and likely others).

Just 'Name' (no app) example:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L103

No table context at all:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L263-L265

Re-assembled name:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L373-L375

Actual `TblName` use:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L183-L185

**Describe the solution you'd like**
Just use `TblName`, it's assembled right at the start.  Consistent syslog format (see also #1325) of ""function: TblName - message"" or similar.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1506
ES - Incorrect Use of CFE_SB_MessageStringGet Function in CFE_ES_ShellOutputCommand,"The calls to CFE_SB_MessageStringGet on lines 119 and 123 in cfe_es_shell.c are passing in an incorrect ""SourceMaxSize"" parameter causing the command to be truncated to 4 characters.  

Possible solutions are documented in the attached email thread.  The CCB will determine final solution. ",bug,https://github.com/nasa/cFE/issues/228
Do not block synchronous hardware-generated signals in pc-linux BSP,"As of OSAL 4.1, __all__ signals are blocked during execution of the OS_Application_Startup() call, then unblocked before entering the wait loop.

There is some valid logic behind this -- 
* By definition, a signal is directed to a process, not a thread.  In a multi-threaded process, each thread gets its own signal mask and ""normal"" signals may be delivered to __any thread__ within that process that has the signal unmasked.
* By masking all signals during OS_Application_Startup(), any threads created during this time will automatically inherit the mask and therefore have all signals blocked. 
* Signals will then be unblocked only in the original (main) thread, therefore any signals generated will be delivered only to this thread.

The issue here is that some signals on Linux are generated by the underlying hardware and the kernel forwards these (synchronously) to the specific __thread__ that was executing on the CPU when the actual signal was triggered.  

The set of hardware-generated signals: SIGSEGV, SIGILL, SIGBUS, SIGFPE should **NOT** be blocked at any time by any thread.

For instance, if a thread causes a segmentation fault by using a bad pointer while SIGSEGV is blocked, the thread will continue running, but results are undefined.


",bug,https://github.com/nasa/osal/issues/51
Pass flags parameter to OS_ModuleLoad(),"**Is your feature request related to a problem? Please describe.**
Change in nasa/osal#643 adds a ""flags"" parameter to OS_ModuleLoad, which needs to be added to CFE where this function is invoked..

**Describe the solution you'd like**
Add ""flags"" parameter.  Initially this can just use the GLOBAL flag (0) to maintain the same behavior.

**Additional context**
Dependency of nasa/osal#643

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/999
vxworks OS_ModuleLoad() module_name arg too long,"If the module_name argument for osloader.c's OS_ModuleLoad() is too long (compared to OS_MAX_API_NAME) then an unterminated string can be copied into the OS_module_table[i].name field.

The OSAL API doc & source comments specify the following return values:
* OS_ERROR if the module cannot be loaded
* OS_INVALID_POINTER if one of the parameters is NULL
* OS_ERR_NO_FREE_IDS if the module table is full
* OS_ERR_NAME_TAKEN if the name is in use
* OS_SUCCESS if the module is loaded successfuly

The osapi.h OS_ERR_NAME_TOO_LONG would be a more descriptive return code... but if we don't want an API change then the best thing to do would be to check the argument length (with terminating null) and return OS_ERROR.

(Discovered as part of #45 coverage testing.)",bug,https://github.com/nasa/osal/issues/98
why I could not update cFS,"Dear,
I clone the repository using git clone, cd to the directory then git submodule init, but when update it, it could not get the cfe, is there any wrong? Thanks
I can update the cFE repository.
Sincerely",non-bug,https://github.com/nasa/cFS/issues/164
Replace magic number in `CFE_EVS_MAX_PORT_MSG_LENGTH` defnition,"**Is your feature request related to a problem? Please describe.**
Magic number used:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.h#L63

**Describe the solution you'd like**
Use a defined size (this is probably for time)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1434
Add delayed responses to command verification documentation related to command codes,"**Is your feature request related to a problem? Please describe.**
Missing documentation on delayed responses.  

For example, CFE_ES_STOP_APP_CC is a ""request"" which when initiated creates the CFE_ES_STOP_DBG_EID (documented), but when the request is actually completed a CFE_ES_STOP_INF_EID is sent (not documented).
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/inc/cfe_es_events.h#L90-L112
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/inc/cfe_es_msg.h#L234-L249

**Describe the solution you'd like**
Scrub ""request"" class of commands for complete verification documentation and add where missing.  Confirm these events are checked in test.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/2000
Remove obsolete reference to OS_TaskRegister,"**Is your feature request related to a problem? Please describe.**
Obsolete comment (in each psp, but sample below):
https://github.com/nasa/PSP/blob/859101404d43c65abe62bf2893e71a7bd4cc125e/fsw/mcp750-vxworks/src/cfe_psp_exception.c#L172

**Describe the solution you'd like**
Remove obsolete comment

**Describe alternatives you've considered**
None.

**Additional context**
nasa/osal#255

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/222
"If a message is subscribed, then unsubscribed, additional unsubscribes do not raise error events ","**Describe the bug**
If a message is subscribed, then unsubscribed, additional unsubscribes do not raise error events 

**To Reproduce**
Have SB subscribe to a message
Have SB unsubscribe to that message
Have SB unsubscribe again to that message

**Expected behavior**
Event message should be raised

**Code snips**
https://github.com/nasa/cFE/blob/08f6eab17702eac689a468974a32af8d41d4362a/fsw/cfe-core/src/sb/cfe_sb_api.c#L1059-L1112

If a message was previously subscribed to, and all pipes subscribing to it were subsequently unsubscribed, and an additional unsubscribe is issued, a valid routing index would still exist in the msgmap table, and thus an error event would not be raised.

**System observed on:**
N/A, discovered via code inspection


**Additional context**
N/A

**Reporter Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/cFE/issues/862
Data instantiated in to_lab_sub_table.h is a standards violation,"**Is your feature request related to a problem? Please describe.**
Headers define, c code instantiates per coding standard

**Describe the solution you'd like**
Move and change to a c file.  Also confuses ""table"" concept, since this isn't a real table.  Maybe make it one?

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/to_lab/issues/32
Add Testing Tools to the Security Policy ,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/elf2cfetbl is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/elf2cfetbl while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/elf2cfetbl/issues/73
Scrub All Verify.h Files,"From ticket #131:

A scrub of the cfe_xx_verify.h files is needed for all the services to ensure that the checks make sense and remove the checks that don't make sense, ensure the proper rationale is provided for all the checks that do make sense and possibly adjust their values.  
",non-bug,https://github.com/nasa/cFE/issues/205
Add generation of branch coverage info to genhtml line (make lcov rule),"**Is your feature request related to a problem? Please describe.**
genhtml not reporting/generating branch coverage

**Describe the solution you'd like**
Add `--branch-coverage` to genhtml line in Makefile

**Describe alternatives you've considered**
None

**Additional context**
Adds the text summary and info in html

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1259
RTEMS CFE_FT_Global build failure ,"**Describe the bug**

RTEMS CI fails due to ""multiple definitions"" of `CFE_FT_Global` 

```
[ 96%] Linking C shared module cfe_testcase.obj
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/cfe_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_content_access_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_content_mang_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_information_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_registration_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
```

**To Reproduce**

Checkout cFS bundle at `871a2d7` then point cFE to 600fd7a320e0a11cd892bf311d490735ca132f5a

**Expected behavior**
Both Linux and RTEMS build succesfully

**Code snips**
Related to setting Table releated entries in global struct in `modules/cfe_testcase/src/cfe_test_table.c`

```c
/* Constant Table information used by all table tests */
CFE_FT_Global_t CFE_FT_Global = {
    .TblName = ""TestTable"", .RegisteredTblName = ""CFE_TEST_APP.TestTable"", .TblFilename = ""test_tbl.tbl""};
```

**System observed on:**
CI build of RTEMS 4.11 and 5.0

**Additional context**
Found during IC:2021-08-10 process. 

See https://github.com/nasa/cfe/issues/1772 and https://github.com/nasa/cFS/pull/333
",non-bug,https://github.com/nasa/cFE/issues/1780
CFE_PLATFORM_SB_MAX_PIPE_DEPTH reporting and use misleading in relation to OS_MAX_QUEUE_DEPTH,"**Is your feature request related to a problem? Please describe.**
CFE_PLATFORM_SB_MAX_PIPE_DEPTH is reported in CFE_SB.StatTlmMsg.Payload.MaxPipeDepthAllowed, which is not true if it's > OS_MAX_QUEUE_DEPTH.

**Describe the solution you'd like**
Maybe remove as a CFE platform config?  It doesn't size arrays or anything, so it seems arbitrary at the cFE level.  OSAL checks vs OS_MAX_QUEUE_DEPTH.

**Describe alternatives you've considered**
Verify < or = OS_MAX_QUEUE_DEPTH?

**Additional context**
See nasa/osal#235

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/996
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/DS/issues/60
Question: Difference between WriteToSysLog or SendEvent,"Hi, I was reading through the application developers guide and I read ""_Developers should make use of the Event Services CFE_EVS_SendEvent whenever possible. If, however, there is a significant Event that cannot be recorded using the CFE_EVS_SendEvent function, then the Developer can use the CFE_ES_WriteToSysLog function._ ""

I was wondering what difference does it make if I use WriteToSysLog or SendEvent if my main goal is to print something to the terminal? Can I just always use WriteToSysLog?

Thanks!",non-bug,https://github.com/nasa/cFE/issues/1201
Order event ID's and fix duplicates,"**Is your feature request related to a problem? Please describe.**
The whole ""MAX EID"" concept for  avoiding conflicts is poorly followed, out of order EID's then lead to collisions.  Just one example shown here (there are multiple):
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/sb/fsw/inc/cfe_sb_events.h#L195
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/sb/fsw/inc/cfe_sb_events.h#L892

**Describe the solution you'd like**
Order EID's by number.  Put new ones at the end.  Remove the unused MAX EID value which is fragile anyways.

**Describe alternatives you've considered**
None

**Additional context**
#1320 - incorrect max

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1583
Add to table search path... either point solution or general,"**Is your feature request related to a problem? Please describe.**
Power users have had to clone and own the cmake logic for adding tables to implement preferred directory structure and naming patterns in searching for the table files.  Currently not a good way (that I know of) to customize:

https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/cmake/arch_build.cmake#L128-L140

**Describe the solution you'd like**
Some way to customize the search path... or we could just do a point solution where we add the desired search path for this stakeholder.

if (EXISTS ""${MISSION_DEFS}/${TGT}/tables/${TBLWE}.c"")

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/766
,,non-bug,
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/elf2cfetbl/issues/99
LC: Consider making states into enums,"In lc_msgdefs.h, LC states could be made into enums

Imported from GSFCCFS-1370",non-bug,https://github.com/nasa/LC/issues/16
Question on Table Service update procedure and notifications by message,"**Is your feature request related to a problem? Please describe.**
I guess some more documentation on this procedure would be beneficial when talking about the table services. This is related to issue #130 but more on documenting that feature. Specifically, there really isn't a lot of documentation on notify by message function:

> int32 CFE_TBL_NotifyByMessage(CFE_TBL_Handle_t TblHandle, CFE_SB_MsgId_t MsgId, uint16 CommandCode, uint32 Parameter);

We want to use this to not have to poll for changes which works but I am slightly confused on the notification process.

**Describe the solution you'd like**
I have enabled notify by message and I execute the following to test the app:
1. Upload new file to ""spacecraft"" (Just a new table with the table's exact name in it)
2. Send command to load table (this goes into inactive buffer):
   1. ./cmdUtil --endian=LE --host=localhost --port=1234 --pktid=0x1804 --cmdcode=2 --string=""064:/cf/apps/SampleAppletTb2.tbl""
3. Send command to validate table in inactive buffer
   1. ./cmdUtil --endian=LE --host=localhost --port=1234 --pktid=0x1804 --cmdcode=4 --half=0 --string=""040:SampleApplet_App.SATable1"" 
   2. **Note: this is the first time our App will be notified something has changed. Yet it can't do anything because the table is in the inactive buffer (the app sees there is no new info). This seems like a strange notification to receive. Why?**
4. Send command to active table
    1. ./cmdUtil --endian=LE --host=localhost --port=1234 --pktid=0x1804 --cmdcode=5 --string=""040:SampleApplet_App.SATable1""
    2. **Note: this will also notify our App and this time our App will be given the signal that there is information that needs to be updated.**
	
Questions:
First, is this the ideal process for updating tables in flight? I mostly had to piece together this by looking through the public headers. If I happened to just mistakenly miss some documentation on this then a pointer to that documentation would be awesome! 

Second, why is there a message after the validation function if the app can't do anything since the new table is still in the inactive buffer. Is this a way to potentially ask the app to release the table pointer if it had been holding on to it? 

**Describe alternatives you've considered**
N/A

**Additional context**
Maybe there should be a issue format for questions? 

**Requester Info**
Philip Cooksey, NASA Ames

Thank you for your time and help!
",non-bug,https://github.com/nasa/cFE/issues/620
Incomplete coverage test for src/sb,"**Is your feature request related to a problem? Please describe.**
Current coverage: 99.7 %

Missing code coverage for the following: 
cfe_sb_api.c

CFE_SB_SetPipeOpts
```
     433             :         /* shouldn't happen... */
     434           0 :         return Status;
```

CFE_SB_SendMsgFull
```
   1395          23 :         if(DestPtr == NULL)
    1396             :         {
    1397           0 :           break;
```


cfe_sb_task.c
CFE_SB_TaskMain

```
    106             :             /* Process cmd pipe msg */
     107           0 :             CFE_SB_ProcessCmdPipePkt();
```

CFE_SB_AppInit

```
    203          11 :     if(CFE_PLATFORM_EVS_MAX_EVENT_FILTERS < CfgFileEventsToFilter){
     204           0 :       CfgFileEventsToFilter = CFE_PLATFORM_EVS_MAX_EVENT_FILTERS;
```

**Requester Info**
Anh Van, NASA Goddard",non-bug,https://github.com/nasa/cFE/issues/471
Binary Semaphore locked after thread cancellation,"**Describe the bug**
On POSIX systems using the Binary Semaphore API, there is a risk that threads can become deadlocked after deleting a task that was executing an `OS_BinSemTake()` API call.

**To Reproduce**
- Create two tasks and one binary semaphore.
- Task A calls `OS_BinSemGive()` at some event/interval.
- Task B waits on the binary sem using `OS_BinSemTake()`

Then delete task B while it was pending in `OS_BinSemTake()`.

The semaphore resource is now inoperable, because the condition mutex was ""owned"" by task B at the time it was deleted, and is never released, thereby preventing any other task from using the mutex.

**Expected behavior**
The semaphore should continue to be usable by other tasks after deleting task B.

**System observed on:**
Ubuntu 20.04

**Additional context**
This was originally reported/observed in nasa/cfe#701, during shutdown where timers were used.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.  
(After diagnosis/investigation of issue reported by @excaliburtb in above ticket)
",bug,https://github.com/nasa/osal/issues/470
Not updated for new cFS versions,The cFS API has changed substantially since the last commit to this repo and the SC app no longer compiles with new versions of cFS.,bug,https://github.com/nasa/SC/issues/3
Scrub all public API calls to ensure that all input parameters are properly sanitized before use,"As a matter of policy, all CFE function calls that are available for use by external apps or libraries (i.e. all headers in the `fsw/cfe-core/src/inc` subdirectory) should sanity-check their input values before using them.

During recent code reviews it was noted that at least two of these functions were missing a required range check, as noted in bug #299.

This task is to perform an additional review on the public API calls and ensure that proper input value sanitization is being performed.
",non-bug,https://github.com/nasa/cFE/issues/300
cFE cmd/tlm packet clean up,"**Is your feature request related to a problem? Please describe.**
cFE telemetry/command packets could be organized such that variables are ordered in descending size to reduce overall length.  This would make them easier to maintain and remove some of the alignment issues/reduce required padding.

There's also configurable length elements before spares, which doesn't make sense if the configuration changes.

Also should standardize spare/alignment names, many no longer make sense (why ""4"" in example):
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/inc/cfe_tbl_msg.h#L829-L830

**Requester Info**
Dan Knutsen
NASA/Goddard
",non-bug,https://github.com/nasa/cFE/issues/664
Update PSP to use osal_id_t type instead of uint32,"**Is your feature request related to a problem? Please describe.**
The `osal_id_t` typedef was recently added to OSAL to differentiate OSAL IDs from simple integers.

**Describe the solution you'd like**
PSP should use this type, instead of `uint32`, for all the places where an ID is stored.

**Additional context**
Using the typedef helps future-proof  the code for possible ID type changes.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/PSP/issues/200
"Fix warnings in OSAL ""unit-test"" code","The code in the ""unit-tests"" directory in OSAL has a number of warnings when it compiles and this is one thing preventing turning on the strictest compiler settings (-Wall -Werror, etc) during the build.

Many of the warnings are related to passing a non-const string directly to a printf function when logging test results.
",bug,https://github.com/nasa/osal/issues/30
should sample_app be writing to syslog?,"**Is your feature request related to a problem? Please describe.**
I thought that, generally, apps should be generating events on errors, not writing to syslog. However, if you look at, say SAMPLE_AppInit(), it writes to syslog for a number of error conditions.

**Describe the solution you'd like**
Re-write to generate events.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/sample_app/issues/72
Add shared layer API for handling global mutex,"**Is your feature request related to a problem? Please describe.**
Currently the shared layer calls `OS_Lock_Global_Impl()` and `OS_Unlock_Global_Impl()` directly when locking/unlocking the internal tables within OSAL.  

This does not offer a place to:
- check return code of operation
- track ownership of resource in case of not being freed.

**Describe the solution you'd like**
Should implement `OS_Lock_Global()` and `OS_Unlock_Global()` wrappers at the shared API level, which can provide a common place to check status, handle failure, and track resource usage.

**Additional context**
In #474, the global table lock was correctly returning an error but nothing ever checked the return code.  Rather than adding a specific return code test everywhere this is used, simpler and better to add a wrapper.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/476
"sample_app should have a clearly-defined ""publish telemetry"" function","**Is your feature request related to a problem? Please describe.**
I'd venture most folks who look at the sample_app code are looking to read some data from a sensor/instrument and publish the telemetry onto the software bus. The current code does not make it clear where such code would go...I'd venture it'd go in ""ProcessCC()""? In fact, the only call to CFE_SB_SendMsg() is in ReportHousekeeping() function.

**Describe the solution you'd like**
The Sample App demonstrates reading from a table and calling a library, perhaps a call to a library function that iterates through an array (provided by a table) of values and publishes the next one on each command received?

Needless to say, a big comment block stating ""add your code here"" would be appropriate. The ProcessCC() function really has no documentation in the comments as to what it does.

**Describe alternatives you've considered**
I think some folks on the CCB consider the sample app to *not* be a skeleton for a real application. If that is the intent, it should be made more clear in the sample_app.c file and the README.md, and it would be appropriate to have a separate skeleton app for folks to start developing from. (In fact, such a skeleton would be a nice source for developers to fork from, and any major framework changes could be made in the skeleton and folks would see the change when they fetch from their upstreams.)

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/sample_app/issues/39
Use of hardcoded numbers for bad IDs in OSAL unit tests,"**Is your feature request related to a problem? Please describe.**
Some unit tests pass a hardcoded magic number i.e. 99999 to OSAL functions to evoke a bad ID error, such as the case here:

https://github.com/nasa/osal/blob/bc73437ea95af54078ba40ce4001a567b1bbc393/src/unit-tests/ostimer-test/ut_ostimer_timerio_test.c#L515-L519

As the API doesn't specifically dictate what constitutes a good ID vs. a bad ID, there is a possibility that in some OSAL implementation this value `99999` might actually be a valid ID.  

This is a concern for black box tests which are supposed to be implementation-agnostic, but need to validate that the correct error is returned when called with a bad ID.

**Describe the solution you'd like**
The OSAL API should define macro to provide a value which is guaranteed to always be a valid ID.  Unit tests can use this symbol instead of the magic number.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/515
Add functional tests for cFE Performance Monitor APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Performance Monitor APIs
– CFE_ES_PerfLogEntry - Entry marker for use with Software Performance Analysis Tool.
– CFE_ES_PerfLogExit - Exit marker for use with Software Performance Analysis Tool.
– CFE_ES_PerfLogAdd - Function called by CFE_ES_PerfLogEntry and CFE_ES_PerfLogExit macros.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/812
Add (unsigned int) cast to MIR prints in time_UT.c,"**Is your feature request related to a problem? Please describe.**
MIR prints in time_UT.c break the RTEMS build because %u expects (unsigned int), but uint32 in RTEMS is an unsigned long.

**Describe the solution you'd like**
Add (unsigned int) cast to MIR prints in time_UT.c

**Requester Info**
Jose F. Martinez Pedraza / NASA GSFC",bug,https://github.com/nasa/cFE/issues/1738
Incorrect assertions in network-api-test,"**Describe the bug**
The test is not correctly checking the return value in a few places.  For example:

https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/tests/network-api-test/network-api-test.c#L129

https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/tests/network-api-test/network-api-test.c#L133

**To Reproduce**
Make the subject code return something other than OS_SUCCESS or OS_ERR_NOT_IMPLEMENTED.  Assert statement will still be true.

**Expected behavior**
Probably should be `actual == OS_SUCCESS || actual == OS_ERR_NOT_IMPLEMENTED`

**System observed on:**
N/A - inspection

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/692
Provide file for cFE detail design,"**Is your feature request related to a problem? Please describe.**
By default, when building cFE mission ""detail design"" document, the entire module directory is added to the doxygen input, which will recursively pick up all source files, but also everything else too.  

This can lead to conflicts with e.g. ""mainpage"", where OSAL provides its own mainpage for its API guide, but this should NOT be used for other documentation that includes OSAL, like the detail design doc.

**Describe the solution you'd like**
OSAL should provide a detaildesign template file that indicates which sources should be used, rather than everything.

**Describe alternatives you've considered**
cFE itself could exclude certain parts in its templates, but that means cFE must have knowledge of OSAL directory tree.

**Additional context**
Related to nasa/cfe#1612

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1069
"Remove ""ENHANCED_BUILD"" macro","The classic build is being deprecated, so the ""ENHANCED_BUILD"" switch that indicated a cmake-based build is no longer required, as it is always the case.

This is related to [cfs_cfe:318] in CFE.",bug,https://github.com/nasa/PSP/issues/106
ES - Memory Pool Size No Longer Requires 32-bit Alignment,"The CCB approved commit under Trac #230 redesigned the ES memory pool to perform alignment in accordance with the base address vs. the size of the data pool.  This change affects ES requirement cES1321.1 which is no longer needed.  Instead a new error check is performed to ensure the size of the pool is not less than the minimum block size.  The affected requirement, along with its parent, is pasted below for reference.

cES1321: 

""cES1321 Upon receipt of a Request the cFE shall allocate a block of memory of the specified size from the specified Memory Pool.""

cES1321.1:

""cES1321.1 If the specified size is not an integral multiple of 32 bit words, the size shall be rounded up to an integral of 32 bit words.""


",bug,https://github.com/nasa/cFE/issues/250
Update Library code to decouple IDs from table indices,"**Is your feature request related to a problem? Please describe.**
Library IDs are currently coupled to the Library table index.   

**Describe the solution you'd like**
Library IDs should be opaque values and not interpreted directly as a table index.
Apply the same pattern as in previous PRs #859 and #871 to the Library code.

**Additional context**
Part of ongoing effort to clean up IDs across all of ES.  

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/886
Compiler warnings regarding some CFE_SB API calls,"The `CFE_SB_GetMsgId()`, `CFE_SB_GetUserDataLength()`, and `CFE_SB_GetTotalMsgLength()` API calls trigger compiler warnings if they are called with a buffer that is qualified as `const`.

As these 3 functions are read-only (they do not modify the buffer) the input should be qualified as `const`, which fixes the warning.
",bug,https://github.com/nasa/cFE/issues/281
SC_ProcessAtpCmd is very long - could be refactored,"

Imported from GSFCCFS-1461",non-bug,https://github.com/nasa/SC/issues/9
Pool buffers should not use `uint32*` as interface type,"**Is your feature request related to a problem? Please describe.**
The ES memory pool API uses `uint32*` as a buffer pointer - this is the type used in  `CFE_ES_GetPoolBuf()` and `CFE_ES_PutPoolBuf()` among others.

This presents a few usability problems:

- Most often the data being stored is _not_ actually `uint32` - so it generally needs to be type cast by the user.
- Typecasts are ugly and risky
- Specifically - Typecasts to/from `uint32*` might create a warning about alignment on some platforms  (one direction or the other is likely to be seen as an upgrade in alignment requirement)
- If alignment was the goal, 32 bits is still too low for `double` type, or a 64-bit pointer, so it fails at that job.

**Describe the solution you'd like**
The API should use `void*`.  

**Additional context**
Although this basically turns off type checking, there was no real type checking here to begin with, and pool buffers _intentionally_ should be convertible to any type, so no need for it here anyway.

Using `void*` will clean up the code substantially, allowing a lot of unnecessary type casts to be removed.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1021
DS Hash logic comments only applicable to V1 Message IDs,"If the V1 Message ID isn't used, theoretically the hash could collide up to the entire length of the linked list.

At minimum the comments should reflect the possibility for more hash collisions, but might be worth reconsidering implementation or reporting collision depth.

Imported from GSFCCFS-1880",non-bug,https://github.com/nasa/DS/issues/11
Check fcntl return status or explicitly (void),"**Is your feature request related to a problem? Please describe.**
Return status not checked/reported
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L364

**Describe the solution you'd like**
Add check and debug error output or explicitly void.  Need to resolve w/ documentation research.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/863
 Add a github actions workflow to replace travis CI,"**Is your feature request related to a problem? Please describe.**
Travis CI billing change is hindering our continuous integration flows

**Describe the solution you'd like**
A service that doesn't limit our runs

**Describe alternatives you've considered**
Running all tests locally, paying for Travis or another service

**Additional context**
None
",non-bug,https://github.com/nasa/cFS/issues/161
FM_ChildSizeTimeMode doesn't clear FileMode on OS_stat failure,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
FileMode could be uninitilized when written if there's an OS_stat failure since it's not cleared:
https://github.com/nasa/FM/blob/9210c2d314d3506fb50560d9bc6513c2b7fb4983/fsw/src/fm_child.c#L1587-L1610

**To Reproduce**
Pass in uninitialized FileMode, observe not cleared on OS_stat failure.

**Expected behavior**
Should clear all values.

**System observed on:**
Observation

**Additional context**
Low likelihood of ever seeing this (maybe file deleted between directory read and OS_stat?), and just would write uninitialized data to the output.

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/FM/issues/43
"CF_DELETE_QUEUE_NODE_CC not used, expected command length for CC 14 filled in","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Command code `CF_DELETE_QUEUE_NODE_CC` not used:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_msg.h#L140

CC 14 expected length is set but not used:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_cmd.c#L1296

**Describe the solution you'd like**
Remove unused elements, also clean up comments when done:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_msg.h#L116

**Describe alternatives you've considered**
None

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
",non-bug,https://github.com/nasa/CF/issues/287
Confirm valid PERF_ID use,"Originated by abrown4 (69 on babelfish):

cFE reserves 0-31 perf-ids. Need to confirm ci_lab does not use these.",bug,https://github.com/nasa/sch_lab/issues/1
HS idle task consumes 100% CPU on POSIX systems,"

Imported from GSFCCFS-727",bug,https://github.com/nasa/HS/issues/4
Duplicate OSAL error codes and  error string API,"osapi-os-filesys.h has its own set of error codes that overlap with and are **different from** the rest of OSAL error codes.  For example, ""OS_FS_ERR_NAME_TOO_LONG"" is not the same as ""OS_ERR_NAME_TOO_LONG"".  There are several codes that are redefined differently.  At a minimum, this is confusing, but it can also cause real bugs if the wrong action is taken due to misinterpreting an error.

Furthermore, FS has a second implementation of OS_GetErrorName called OS_FS_GetErrorName() that only translates the FS error codes.  Passing an error code from one of the filesystem functions into OS_GetErrorName will get the wrong string.

This should be cleaned up - the FS error codes should be merged with the rest of OSAL error codes into a single set, with a single implementation of OS_GetErrorName() to get them all.

",bug,https://github.com/nasa/osal/issues/34
ostimer unit test needs non-zero stack size parameter passed to OS_TaskCreate,The call to OS_TaskCreate in ostimer-test.c needs a non-zero stack-size.,bug,https://github.com/nasa/osal/issues/167
Complete Writing High Quality Code for Contributing.MD,"**Is your feature request related to a problem? Please describe.**
Provide instructions to users on how to write high quality code. 

**Describe the solution you'd like**
Complete the Writing High Quality Code section to add to the Contributing Guide. 

**Additional context**
The draft so far:

## Writing High-Quality Code

1. Follow cFS code conventions (formatting, symbol naming, file naming, etc) but do *not* change/reformat existing code except to address your changes.

2. For any new API's, add unit tests to cover nominal and off-nominal conditions.

3. Add/edit stubs to the unit test codebase for any new/modified functions.

4. For any changes to existing API's, alter the unit tests to cover the changes (and remove tests made irrelevant due to your changes).

5. Test your code, on a Linux platform (at minimum) --
    _TODO:_ Specific distros/versions/CPU architectures of Linux?

6. Build your code, including unit tests.
    _TODO:_ need ""standard"" build process.

6. Run the unit tests (all passed, yes?)
    _TODO:_ need ""standard"" test procedure.

7. Run the main cfs executable (no errors reported, yes?)
    _TODO:_ need ""standard"" test procedure, including targets.cmake recommendations.

8. ?? Do we expect contributors to run coverage ?? Guessing no.

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/cFS/issues/208
shell-test does not appear to work on VxWorks,"**Describe the bug**
The ""shell-test"" program attempts to run the following command:

    echo -n ""ValueToEchoInTheFile""

But this does not appear to work correctly on VxWorks 6.9.  The test reports:

```
[ FAIL] 01.005 shell-test.c:83 - Read: 
echo -n ""ValueToEch, Written: ValueToEchoInTheFile
```

**To Reproduce**
Enable shell and run ""shell-test"" on MCP750

**Expected behavior**
Test should pass

**System observed on:**
MCP750 VxWorks 6.9

**Additional context**
I'm not familiar enough with VxWorks, it seems the interactive shell does not even have an ""echo"" command so I am not sure how this is expected to work to begin with.

If run directly on the shell as a test, I get:
```
-> echo -n ""ValueToEchoInTheFile""
C interp: unknown symbol name 'echo'.
```

So it is not clear to me how this is expected to work.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/939
Remove unnecessary `memset` in `CFE_TBL_LoadFromFile`,"**Is your feature request related to a problem? Please describe.**
Memset followed by writing everything except last char:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L903

**Describe the solution you'd like**
Just do the `strncpy` then `WorkingBufferPtr->DataSource[sizeof(WorkingBufferPtr->DataSource)-1] = '\0';`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1515
CFE_ES_PerfLogAdd needs better mutual exclusion,"**Describe the bug**
The `CFE_ES_PerfLogAdd()` routine uses `OS_IntLock()` in an attempt to get exclusive access to a common global data structure to record performance metrics/state.  This is insufficient.

The `OS_IntLock` function is generally not implemented on SMP, and even if it is, it probably only affects the current core.  Either way, it will **not** provide exclusivity, because the other cores can still access the data even when interrupts are disabled.  

This function is also a no-op in the POSIX OSAL.

**To Reproduce**
Enable performance monitoring on a POSIX system and observe that occasionally samples occur in the log out of order or otherwise appear corrupted.  This is likely due to concurrent writes to the same entry related to insufficient locking.

**Expected behavior**
The function should use some form of primitive that actually does provide exclusivity between threads (such as a mutex/spinlock) and not an interrupt lock.

**Code snips**
https://github.com/nasa/cFE/blob/2b27dfc8f2a4e0627e6c4b646765269213584cda/fsw/cfe-core/src/es/cfe_es_perf.c#L439-L440

**System observed on:**
Ubuntu 18.04 LTS 64-bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/456
Caelum non-tested TBL APIs,"**Is your feature request related to a problem? Please describe.**
The following TBL APIs are not being exercised in the functional test:

Cases requiring a second/companion app without access to the test table:
```
 + condition: CFE_TBL_DumpToBuffer[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_GetAddress[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Modified[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Register[any]=>CFE_TBL_ERR_DUPLICATE_NOT_OWNED
 + condition: CFE_TBL_ReleaseAddress[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Unregister[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Update[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Validate[any]=>CFE_TBL_ERR_NO_ACCESS
```

Other special registration cases that may require an intermediate reboot to achieve:
```
 + condition: CFE_TBL_Register[any]=>CFE_TBL_INFO_RECOVERED_TBL
 + condition: CFE_TBL_Register[any]=>CFE_TBL_WARN_NOT_CRITICAL
```

Cases requiring a transient state outside control of the test:
```
 + condition: CFE_TBL_DumpToBuffer[any]=>CFE_TBL_INFO_DUMP_PENDING
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_INFO_DUMP_PENDING
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_INFO_UPDATE_PENDING
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_INFO_VALIDATION_PENDING
 + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_LOAD_IN_PROGRESS
 + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_BUFFER_AVAIL
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_INFO_DUMP_PENDING
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_INFO_UPDATE_PENDING
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_INFO_VALIDATION_PENDING
```

**Describe the solution you'd like**
Document for Caelum, eventually add a second test app and/or more sophisticated tests that can exercise these.

**Additional context**
Identified as part of scrub in #1724
Some cases depend on having second test app per #1761

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1875
Fix inclusion of PSP private header files in CFE layer,"Certain files are directly #include'ed from the PSP library in the CFE code.

Only the ""public"" PSP API defined in ""psp/fsw/inc"" should be directly used by application code.  Other files such as those under an architecture-specific PSP (e.g. psp/fsw/pc-linux/inc) should be treated as private data to that particular PSP and NOT be used or called directly from the application.  If some value is necessary then a public API should be defined to retrieve it, rather than #including it directly.

Fixing this up will make the build cleaner and more efficient.  It will also ensure that application code is portable to __ALL__ PSP's because it does not depend on some value that only one particular PSP provides.

Note there is a corresponding ticket in the PSP to stop using CFE headers as well: [https://babelfish.arc.nasa.gov/trac/cfs_psp/ticket/6].

When both of these tickets are merged in the incremental build process becomes much cleaner and faster.",bug,https://github.com/nasa/cFE/issues/50
Resolve routeid msgid comparison issue reported by LGTM,"**Is your feature request related to a problem? Please describe.**
Comparison between routeidx of type CFE_SB_RouteId_Atom_t and endidx of wider type CFE_SB_MsgId_Atom_t.
This alert was introduced in0c4f5d82 months ago
https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/modules/sbr/src/cfe_sbr_route_unsorted.c#L215

**Describe the solution you'd like**
This was implemented when there were two foreach functions, but foreach msgid was removed due to being a resource hog.  Really don't need a separate helper function anymore and types can be made consistent.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1069
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the OSAL repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the ci_lab contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/ci_lab/issues/80
Update VxWorks 6.9 toolchain,"**Describe the bug**
The example toolchain file for vxworks 6.9 does not work ""out of the box"" in combination with the current MCP750 PSP.

Need to add additional include paths and other paths under `WIND_BASE` / `WIND_HOME` environment variables to more easily adapt to other platforms.

**To Reproduce**
See nasa/psp#181

**Additional context**
Proposing alternative solution this issue via cmake toolchain file modifications.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/785
OS_ModuleLoad_Impl function header does not match definition,"**Describe the bug**
When OS_INCLUDE_MODULE_LOADER is not defined, the function header does not
match the definition:

```
[ 98%] Building C object examples/rtems-cfs-hello-world/osal/CMakeFiles/osal.dir/src/os/rtems/osloader.obj
/home/andrei/Workspace/cFS/osal/src/os/rtems/osloader.c:320:7: error: conflicting types for 'OS_ModuleLoad_Impl'
 int32 OS_ModuleLoad_Impl ( uint32 module_id, char *translated_path )
       ^~~~~~~~~~~~~~~~~~
In file included from /home/andrei/Workspace/cFS/osal/src/os/rtems/os-rtems.h:39:0,
                 from /home/andrei/Workspace/on-board-software/vendor/cFS/osal/src/os/rtems/osloader.c:26:
/home/andrei/Workspace/cFS/osal/src/os/shared/os-impl.h:1230:7: note: previous declaration of 'OS_ModuleLoad_Impl' was here
 int32 OS_ModuleLoad_Impl ( uint32 module_id, const char *translated_path );
```

This issue was introduced in PR #21 .

**To Reproduce**
Build with `OS_INCLUDE_MODULE_LOADER` not defined.

**Expected behavior**
Build succeeds.",bug,https://github.com/nasa/osal/issues/357
"Add ""Maximum EID"" Comment to the Top of All cFE events.h Files","If a new event identifier (EID) needs to be added, and the best place for the event identifier is not at the end of the identifier list, developers may be inclined to renumber the preexisting EIDs to be in numerical ascending order with the new EID.  

Renumbering existing EIDs could break tools, tests scripts, etc.

It is recommended to comment all the cFE event.h files (as was done with sb_events.h under ticket #221) to alert developers on the max EID value in the file and how to number new EIDs using the max.",bug,https://github.com/nasa/cFE/issues/225
Not all validated commands send an info event message,"Per requirement CF1003, validated commands should issue an info event message. This is not the case for most of the CF commands. The command counter increments but no event message is sent. This applies to the following command codes but there could be more:
ABANDON, CANCEL, ENABLE/DISABLE DEQUEUE, ENABLE/DISABLE ENGINE, ENABLE/DISABLE POLLDIR, FREEZE, THAW, SUSPEND, RESUME, PURGE, WRITE QUEUE",bug,https://github.com/nasa/CF/issues/117
Update Sample CMake configuration,"CFE includes a ""sample_defs"" directory containing a
sample configuration for CMake, which fell out of date
over time.

This needs to be updated.

This is an ex-post-facto report; we fixed this on the
fly while creating the 6.5.0 tarball; this ticket will
be used when cycling this hotfix back into development.",bug,https://github.com/nasa/cFE/issues/203
Implement macro to facilitate argument checking,"**Is your feature request related to a problem? Please describe.**
OSAL and CFE contain many argument checks at the beginning of functions.  These would benefit from a macro to keep them consistent and readable in the application code, as well as offer alternative implementations/options for controlling how these are handled on an application-wide basis.

**Describe the solution you'd like**
Provide assert-style macros in OSAL that can facilitate argument checking, bug checking, and error handling.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/688
Memory alignment issues in Table Services,"The CFE code has some problem areas for CPUs that have strict memory alignment requirements (e.g. SPARC).  Casting from a type with smaller requirements to a type with larger requirements generates a compile time warning and may induce a runtime exception if the memory actually is not aligned.

The following errors exist in the TBL subsystem:

{{{
/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c: In function 'CFE_TBL_RemoveAccessLink':
/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c:480:70: warning: cast increases required alignment of target type [-Wcast-align]
             Status = CFE_ES_PutPoolBuf(CFE_TBL_TaskData.Buf.PoolHdl, (uint32 *)RegRecPtr->Buffers[0].BufferPtr);
                                                                      ^
/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c:492:74: warning: cast increases required alignment of target type [-Wcast-align]
                 Status = CFE_ES_PutPoolBuf(CFE_TBL_TaskData.Buf.PoolHdl, (uint32 *)RegRecPtr->Buffers[1].BufferPtr);
                                                                          ^
}}}

NOTE: This is related to PSP ticket [cfs_psp:41]",bug,https://github.com/nasa/cFE/issues/314
Add functional tests for CFE File Header Management APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE File Header Management APIs
– CFE_FS_ReadHeader- Read a header.
– CFE_FS_InitHeader- Initialize a header.
– CFE_FS_WriteHeader- Write a header.
– CFE_FS_SetTimestamp- Change the timestamp of a header. 

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",non-bug,https://github.com/nasa/cFE/issues/1297
Update SB/MSG tests to verify Not Implemented functions,"**Is your feature request related to a problem? Please describe.**
Functional tests fail if project is using custom CFE_MSG functions that return CFE_SB_NOT_IMPLEMENTED.

**Describe the solution you'd like**
In functional test, verify that function to be tested is implemented before running the tests.

**Describe alternatives you've considered**
None.

**Requester Info**
Jose F. Martinez Pedraza / NASA GSFC",non-bug,https://github.com/nasa/cFE/issues/1931
Use `LogFullFlag` instead of checking `LogCount == CFE_PLATFORM_EVS_LOG_MAX` in event log logic,"**Is your feature request related to a problem? Please describe.**
`LogFullFlag` is already available, don't need to check `LogCount`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L188-L189

**Describe the solution you'd like**
Use `LogFullFlag`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1408
Remove CFE_PSP_MemSet and CFE_PSP_MemCpy use on addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/FM/issues/29
SB message id documentation is unclear and arguably misleading,"**Is your feature request related to a problem? Please describe.**
As a new cFS developer, I've been trying to build my first complete app utilizing the cFE Application Developer doc (and as of the last 2 days the md). Rather than copy/paste the sample_app, it has been my intent to build up my experience by starting from scratch (i.e. minimize copy/paste).  Thus, when setting up message ids, I utilized the logic explained in section 6.1.1. It's fairly simple and without really knowing what CCSDS represented, I read this as follows ""pick any number, let it be unique within the application, but don't set the upper 3 bits"". So I did. 

Then I finally got around to trying to use the ground system tool by adding my app to the tool. It was at that time, I realized that I had a problem. All my ""commands"" were being interpreted as ""telemetry"". 

I figured that I might have associated the wrong info into the tool. No, everything checked out with the tool setup. Then I went through my app trying to see if maybe I was improperly initializing or associating something. I could find nothing. Then I jumped into the debugger. 

I found that the first byte of my message id was being checked for 2 characteristics. My message id was failing the two checks and hence my ""command"" had become a ""telemetry"" message and could therefore never be utilized to drive command codes.

After researching CCSDS and examining the cFE logic, I was able to finally track down the exact spec that outlines what bits should be set within a message id.

The lightbulb came on .. this is why all the default apps use 0x18** or 0x08** values in their msg.h files. Unfortunately, it was not explained in the sample code or documentation. 

This information is massively impactful and should not be left out of the cFE App Dev guide. The guide unfortunately makes it sounds like you can pick anything but that is far from the truth. It's much more stringent than keeping the 3 most significant bits at zero. 

**Describe the solution you'd like**
The cFE documentation should clearly outline the following:

1. in the default build of cFS, you are bound to CCSDS rules. 
2. explain how those rules influence the cFE api (aside from message ids, what else do devs need to know about?)
3. and most importantly, clearly explain why/when you need to set bit fields 3 and 4 in your message id.
4. in the sample_app, it would be nice have some contextual information related to creating proper ids (for those who might copy/paste the app).

Also, APID is mentioned in the Acronyms list but it not utilized in the dev guide document. This needs to be explained or arguably removed from the document. 


**Describe alternatives you've considered**
None. Devs rely on the documentation to create their apps.


**Additional context**
I found the info that ties the cFE bit check to an actual spec at https://public.ccsds.org/Lists/CCSDS%201330P11/133x0p11.pdf (see section 4.1.2.3)

Working with dev guide updated as of commit 5602bff3

**Requester Info**
Maurice Prather
",non-bug,https://github.com/nasa/cFE/issues/590
Possible uninitialized variable (false alarms) - static analysis,"**Is your feature request related to a problem? Please describe.**
All false alarms based on logic, but easy to squash (just initialize).

This one could be avoided w/ simple refactor (move success logic into if) which reduces to one return location (preferred coding style):
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/time/cfe_time_api.c#L727

Just initialize:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L648
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_api.c#L108
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_task.c#L923

Likely resolved if OS_OpenCreate_t initialized the file descriptor on failure:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L83
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_task.c#L1341
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_syslog.c#L471

**Describe the solution you'd like**
See above

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warnings, wait until #972 is resolved

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1185
"Simplify TBL `LoadInProgress` indication, and possibly the buffered table concept in general","**Is your feature request related to a problem? Please describe.**
Strange indexing/math for double buffered vs non-double buffered tables for `LoadInProgress`:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1086-L1101

Really the whole ""double buffered"" table concept is a bit strange/limited.

**Describe the solution you'd like**
Separate into explicit shared buffer index and table buffer index or other method to deconflict meaning.

**Describe alternatives you've considered**
Really ""double buffered"" is the capability to have 2 versions of a table in memory and be able to switch.  Could generalize to define the number of tables in memory, and be able to load to any of them, activate whichever one is request, etc.  If the selected table to load to is active, then use a shared buffer and if not just directly load.  Design collapses and unique logic for ""double buffering"" goes away (for just 1 table in memory it's the ""single buffer"" use case, more than 1 is an enhanced version of ""double buffer"" but still allows user to load to whatever index they want).  Could have an option to ""disallow"" loads to active table (single buffer would reject reloads, multiple would prevent loading active index).

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1529
fails to build on Raspbian,"**Describe the bug**
Building sch_lab under Raspbian (a Debian variant for Raspberry Pi SBC's) fails due to alignment issues.

```
/home/pi/cFS/apps/sch_lab/fsw/src/sch_lab_app.c: In function ‘SCH_Lab_AppMain’:
/home/pi/cFS/apps/sch_lab/fsw/src/sch_lab_app.c:115:42: error: cast increases required alignment of target type [-Werror=cast-align]
                           CFE_SB_SendMsg((CFE_SB_MsgPtr_t)&SCH_CmdHeaderTable[i]);
                                          ^
```

**To Reproduce**
Build on Raspbian.

**Expected behavior**
Error-free compile.

**Code snips**
If applicable, add references to the software.

**System observed on:**
Raspberry Pi Zero W.

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/sch_lab/issues/31
cFE Cmake Does Not Build Out-of-the-Box,"The list of options included in the cmake/sample_defs directory are out of date.  These options have not been kept up with the cmake options that are defined in the test area used for the bamboo builds.
",bug,https://github.com/nasa/cFE/issues/200
Missing newline at end of sample_lib.c,"**Is your feature request related to a problem? Please describe.**
Clang throws an error about the missing newline at the end of sample_lib.c

**Describe the solution you'd like**
Add a new line, they are pretty cheap these days.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_lib/issues/91
vxworks osfileapi.c functions not using semaphore,"Multiple functions in the VxWorks osfileapi.c are not taking the semaphore when accessing the shared table.

OS_close, OS_read, OS_write, OS_lseek, OS_remove, OS_rename, OS_cp, OS_mv, OS_ShellOutputToFile, OS_FDGetInfo.

Identified with #45 white-box coverage testing.",bug,https://github.com/nasa/osal/issues/106
TimeBase API missing functional tests,"**Is your feature request related to a problem? Please describe.**
OS_TimeBaseCreate, OS_TimeBaseSet, OS_TimeBaseDelete, OS_TimeBaseGetIdByName, OS_TimeBaseGetInfo, OS_TimeBaseGetFreeRun all missing functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None

**Additional context**
Certification Issue

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/osal/issues/380
Remove cast when starting timebase callback,"**Describe the bug**
The cast was originally hiding a bug, as described in #1244. In #1244 comments, @jphickey suggested we remove the cast. The commit was made to remove this cast, but somehow the changes were lost.

**Code snips**
https://github.com/nasa/osal/blob/main/src/os/rtems/src/os-impl-timebase.c#L393

**Reporter Info**
Jose F. Martinez Pedraza / GSFC 582",bug,https://github.com/nasa/osal/issues/1366
OS_TranslatePath() has unused variables,DeviceLen and FilenameLen of OS_TranslatePath() are function-local variables that are written to but never used.,bug,https://github.com/nasa/osal/issues/119
Add Alternate MID for TIME Diagnostics Packet Request,"**Is your feature request related to a problem? Please describe.**
The current mechanism to collect the diagnostics packet from the TIME app requires a command to be sent to the app, which increments the TIME Command Counter. For anyone that wants this diagnostics packet to be generated regularly, this causes the Command Counter to also increment regularly, which makes the Command Counter less useful.

**Describe the solution you'd like**
Add a MID to the TIME app for diagnostic packet requests, which won't result in the Command Counter being incremented.

This will create two ways to request the TIME Diagnostics Packet (by command or by message). 

**Describe alternatives you've considered**

- Adding a configuration that enables/disables whether the command counter is incremented when this command is received.
- Check if the command was sent from the scheduler, and don't increment the command count if so.

Both of these go against the current requirement/philosophy of ""all commands should increment a command counter"".

**Additional context**
None.

**Requester Info**
Keegan Moore - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/527
Update backwards compatibility comments in the osapi-filesys functions,"Really not backwards compatibility, but in support of abstraction and in the spirit of portability operations attempted on a FS_BASED file system that arn't actually allowed should no-op and return success.",bug,https://github.com/nasa/osal/issues/257
Abort on restart after maximum resets (Linux w/ mismatched restart request/restart type),"**Describe the bug**
After exceeding the maximum number of unplanned resets allowed per CFE_PLATFORM_ES_MAX_PROCESSOR_RESETS, the system attempts to perform a POR instead of a PROCESSOR reset. Unfortunately this orderly reset fails due to an apparent deadlock and the system eventually times out and calls Abort.

Note that this does not occur when using CFE_ES_ResetCFE, only with CFE_PSP_Restart(CFE_PSP_RST_TYPE_PROCESSOR).

**To Reproduce**
Steps to reproduce the behavior:
Modify any app to call CFE_PSP_Restart(CFE_PSP_RST_TYPE_PROCESSOR) on command
 - I used sample app's noop command
Issue the command to trigger the restart and then re-spawn the executable
Repeat the restart until the system falls back to a POR reset

**Expected behavior**
Expect a clean POR restart without the 10 second timeout and abort

**Code snips**


**System observed on:**
 - Hardware
    Intel i7-10870H
    64 GB RAM
 - OS: [e.g. Linux 4.4]
    Linux -------- 5.18.10-76051810-generic #202207071639~1657252310~21.10~7d5e891 SMP PREEMPT_DYNAMIC Fri J x86_64 x86_64 x86_64 GNU/Linux
 - Versions [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps]
    Latest cFS distribution as of July 28, 2022, modification to sample_app to call CFE_PSP_Restart.

**Additional context**
Stack Trace from running threads at the time of the abort

```
(gdb) r
Starting program: /home/ldmiller/cFS/build/exe/cpu1/core-cpu1 
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
OS_BSP_Initialize():Maximum user msg queue depth = 100
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 1
CFE_PSP: Default Spacecraft ID = 66
CFE_PSP: Default CPU Name: cpu1
OS_Posix_GetSchedulerParams():187:Policy 1: available, min-max: 1-99
OS_Posix_GetSchedulerParams():187:Policy 2: available, min-max: 1-99
OS_Posix_TaskAPI_Impl_Init():373:Selected policy 2 for RT tasks, root task = 99
OS_Posix_TaskAPI_Impl_Init():390:Could not setschedparam in main thread: Operation not permitted (1)
[New Thread 0x7ffff7fc1640 (LWP 451164)]
[New Thread 0x7ffff7fbc640 (LWP 451165)]
CFE_PSP: Instantiated software timebase 'cFS-Master' running at 10000 usec
CFE_PSP: Using POSIX monotonic clock as CFE timebase
CFE_PSP: Using MMAP simulated EEPROM implementation
CFE_PSP: Physical RAM access not implemented
CFE_PSP: I/O Port access not implemented
CFE_PSP: EEPROM Range (2) created: Start Address = 7FFFF7B80000, Size = 00080000 Status = 0
CFE_PSP: Normal exit from previous cFE instance
CFE_PSP: Starting the cFE with a PROCESSOR reset.
1980-003-11:57:59.61581 CFE_ES_SetupResetVariables: POWER ON RESET due to max proc resets (Watchdog).
CFE_PSP: Exiting cFE with POWERON Reset status.
CFE_PSP: Critical Data Store Shared memory segment removed
Reset Area Shared memory segment removed
User Reserved Area Shared memory segment removed
 
Thread 1 ""core-cpu1"" received signal SIGABRT, Aborted.
__pthread_kill_implementation (no_tid=0, signo=6, threadid=140737353758528) at pthread_kill.c:44
44      pthread_kill.c: No such file or directory.
(gdb) info threads
  Id   Target Id                                      Frame 
* 1    Thread 0x7ffff7fa3740 (LWP 451163) ""core-cpu1"" __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737353758528) at pthread_kill.c:44
  2    Thread 0x7ffff7fc1640 (LWP 451164) ""core-cpu1"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:57
  3    Thread 0x7ffff7fbc640 (LWP 451165) ""core-cpu1"" 0x00007ffff7c4323a in __GI___sigtimedwait (set=set@entry=0x5555556ed658 <OS_impl_timebase_table+280>, info=info@entry=0x7ffff7fbbc80, timeout=timeout@entry=0x0)
    at ../sysdeps/unix/sysv/linux/sigtimedwait.c:61
(gdb) bt
#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737353758528) at pthread_kill.c:44
#1  __pthread_kill_internal (signo=6, threadid=140737353758528) at pthread_kill.c:80
#2  __GI___pthread_kill (threadid=140737353758528, signo=signo@entry=6) at pthread_kill.c:91
#3  0x00007ffff7c42476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26
#4  0x00007ffff7c287b7 in __GI_abort () at abort.c:79
#5  0x00005555555a2f93 in CFE_PSP_Restart (reset_type=2) at /home/ldmiller/cFS/psp/fsw/pc-linux/src/cfe_psp_support.c:114
#6  0x00005555555730d9 in CFE_ES_SetupResetVariables (StartType=1, StartSubtype=1, BootSource=1) at /home/ldmiller/cFS/cfe/modules/es/fsw/src/cfe_es_start.c:407
#7  0x0000555555572bdc in CFE_ES_Main (StartType=1, StartSubtype=1, ModeId=1, StartFilePath=0x5555555a6271 ""/cf/cfe_es_startup.scr"") at /home/ldmiller/cFS/cfe/modules/es/fsw/src/cfe_es_start.c:121
#8  0x00005555555a2a84 in OS_Application_Startup () at /home/ldmiller/cFS/psp/fsw/pc-linux/src/cfe_psp_start.c:432
#9  0x00005555555a517e in main (argc=1, argv=0x7fffffffdeb8) at /home/ldmiller/cFS/osal/src/bsp/generic-linux/src/bsp_start.c:238
(gdb) thread 2
[Switching to thread 2 (Thread 0x7ffff7fc1640 (LWP 451164))]
#0  __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:57
57      futex-internal.c: No such file or directory.
(gdb) bt
#0  __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:57
#1  __futex_abstimed_wait_common (cancel=true, private=<optimized out>, abstime=0x0, clockid=0, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:87
#2  __GI___futex_abstimed_wait_cancelable64 (futex_word=futex_word@entry=0x5555556ec640 <OS_impl_console_table>, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=<optimized out>)
    at futex-internal.c:139
#3  0x00007ffff7c9ca3f in do_futex_wait (sem=sem@entry=0x5555556ec640 <OS_impl_console_table>, abstime=0x0, clockid=0) at sem_waitcommon.c:112
#4  0x00007ffff7c9cad8 in __new_sem_wait_slow64 (sem=0x5555556ec640 <OS_impl_console_table>, abstime=0x0, clockid=0) at sem_waitcommon.c:184
#5  0x000055555559abbc in OS_ConsoleTask_Entry (arg=0xc0001) at /home/ldmiller/cFS/osal/src/os/posix/src/os-impl-console.c:97
#6  0x00007ffff7c94947 in start_thread (arg=<optimized out>) at pthread_create.c:435
#7  0x00007ffff7d24a44 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:100
(gdb) thread 3
[Switching to thread 3 (Thread 0x7ffff7fbc640 (LWP 451165))]
#0  0x00007ffff7c4323a in __GI___sigtimedwait (set=set@entry=0x5555556ed658 <OS_impl_timebase_table+280>, info=info@entry=0x7ffff7fbbc80, timeout=timeout@entry=0x0) at ../sysdeps/unix/sysv/linux/sigtimedwait.c:61
61      ../sysdeps/unix/sysv/linux/sigtimedwait.c: No such file or directory.
(gdb) bt
#0  0x00007ffff7c4323a in __GI___sigtimedwait (set=set@entry=0x5555556ed658 <OS_impl_timebase_table+280>, info=info@entry=0x7ffff7fbbc80, timeout=timeout@entry=0x0) at ../sysdeps/unix/sysv/linux/sigtimedwait.c:61
#1  0x00007ffff7c428ac in __GI___sigwait (set=0x5555556ed658 <OS_impl_timebase_table+280>, sig=0x7ffff7fbbd44) at ../sysdeps/unix/sysv/linux/sigwait.c:28
#2  0x000055555559d7f5 in OS_TimeBase_SigWaitImpl (obj_id=524289) at /home/ldmiller/cFS/osal/src/os/posix/src/os-impl-timebase.c:159
#3  0x0000555555598e8f in OS_TimeBase_CallbackThread (timebase_id=524289) at /home/ldmiller/cFS/osal/src/os/shared/src/osapi-timebase.c:422
#4  0x000055555559db03 in OS_TimeBasePthreadEntry (arg=0x80001) at /home/ldmiller/cFS/osal/src/os/posix/src/os-impl-timebase.c:319
#5  0x00007ffff7c94947 in start_thread (arg=<optimized out>) at pthread_create.c:435
#6  0x00007ffff7d24a44 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:100
(gdb) 
```

**Reporter Info**
Lorn Miller
Red Canyon Engineering & Software
",bug,https://github.com/nasa/cFE/issues/2127
Refactor or replace API's related to `CFE_TIME_GetReference`,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_GetSTCF`, `CFE_TIME_GetMET`, `CFE_TIME_GetMETSeconds`, `CFE_TIME_GetMETSubsecs`, `CFE_TIME_GetLeapSeconds` all just call `CFE_TIME_GetReference`.

**Describe the solution you'd like**
Could just expose and use CFE_TIME_GetReference.

**Describe alternatives you've considered**
If the structure needs to stay internal, consider factoring out common logic.

**Additional context**
Code review.  Related to #1500

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1535
Avoid continuous looping in the time base callback thread,"As part of the ""timebase"" implementation, a high priority helper thread is used as the context for timer callbacks.  This is supposed to block on a `sigwait()` or some other custom PSP-supplied function until a tick arrives.

However, if something goes wrong with the wait routine and it does NOT actually block for whatever reason, then a continuous loop is possible.  Because it is running as a high priority realtime thread, on a single core system this has the effect of locking up the CPU.

In the case that the blocking function fails to block, this needs a failsafe to prevent hogging the CPU.",bug,https://github.com/nasa/osal/issues/246
Write `CFE_TBL_EarlyInit` errors to syslog,"**Is your feature request related to a problem? Please describe.**
Multiple errors are not written to the syslog:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L92-L96
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L101-L105
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L108-L114
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L122-L128

**Describe the solution you'd like**
Report errors

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1510
Fix mismatched `foreach` `endforeach`,"**Is your feature request related to a problem? Please describe.**
Mismatch:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/CMakeLists.txt#L122-L125

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1366
Clear BSS on App Restart,"Under normal conditions, when a task is started, the process of loading
the task will clear the BSS segment (used to store global-scope variables
that are not explicitly initialized).

However, if a task is ""restarted"" without ""reloading"" it may find that
its BSS segment still retains the content from the prior run.

We discussed this at the CCB meeting on 2016-Jan-19, and the moderate
concensus was that it might be most useful for the BSP to explicitly clear
the BSS of tasks before they are started. According to my notes, Joe was
going to take a look at this.
",bug,https://github.com/nasa/cFE/issues/1036
Clean up old license headers,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Old headers still exist in the codebase.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/207
Resolve strange newline formatting,"**Is your feature request related to a problem? Please describe.**
Strange newline locations:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/inc/cfe_es_msg.h#L1279-L1280
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_version.h#L39-L41
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_version.h#L32-L34

**Describe the solution you'd like**
Adjust weighting in format definition (this would be done in cFS)

**Describe alternatives you've considered**
Reformat comments such that they format cleaner relative to cFS format definition

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1321
Document CFE_ES_WriteToSysLog() can be used when CFE_ES_RegisterApp() fails,"On Thu, Apr 26, 2018 at 5:11 PM, Fleming, Thadeus <thadeus.fleming@odysseysr.com> wrote:
It's clear that CFE_ES_RegisterApp is supposed to be the first CFE
function an app calls, and that the app shouldn't continue if the call
fails.

However, it's not clear whether it's kosher to call
CFE_ES_WriteToSysLog to log failure of CFE_ES_RegisterApp. It appears
to be both safe (the function source doesn't look at the app's entry
in the AppTable) and common practice (e.g. the gen_app_code app
template does it).

I'd suggest that apps be allowed to call WriteToSysLog when
RegisterApp fails, and that the practice is documented so that future
versions of cFE don't modify WriteToSysLog in such a way that it would
become a problem.
",non-bug,https://github.com/nasa/cFE/issues/267
Use fixed sizes for memory addresses and offsets in tbl/cmd/tlm,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/MD/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/MD/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Same as nasa/CS#26.  Using cpuaddr in tbl/cmd/tlm results in different sized structures (and possibly different alignment/padding).

**Describe the solution you'd like**
Use `CFE_ES_MemAddress_t` and `CFE_ES_MemOffset_t`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/MM/issues/30
"Incorrect size passed to ""strncmp""","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The size passed to `strncmp` here is not correct:
https://github.com/nasa/CS/blob/a249bcf668a752c08189463921881d7f8a0c2918/fsw/src/cs_table_processing.c#L361

The `Name` string being compared here is sized on `OS_MAX_API_NAME`, not `CFE_TBL_MAX_FULL_NAME_LEN`, as declared here:
https://github.com/nasa/CS/blob/a249bcf668a752c08189463921881d7f8a0c2918/fsw/inc/cs_tbldefs.h#L107

**To Reproduce**
Build with GCC 12 and full warnings enabled, this is reported.

**Expected behavior**
use `sizeof()` to avoid this possibility

**System observed on:**
Debian

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/CS/issues/71
Add feature to CFE assert to write output to log file,"**Is your feature request related to a problem? Please describe.**
The CFE functional tests executed via the cfe_assert helper app currently report test cases as events.  Problem is:
- Events are (by default) limited to 122 chars, and assert strings tend to be long-ish, so these are likely to get truncated
- Makes it difficult to write test analyzing tools - either need to somehow subscribe to those event IDs (non-trivial w/current script capabilities), or pipe the entire terminal log to a file (OS dependent).  And in both cases, still subject to text truncation.

**Describe the solution you'd like**
The cfe_assert app should have a feature to internally ""tee"" the results to a log file.  This would alleviate the need (and OS dependency) on trying to ""tee"" the output externally, and the output would contain ONLY test logs i.e. not mixed with other syslog messages.

**Additional context**
See #1608, this would make CI tests more reliable

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1625
CFE_TIME_GetTime() should not return a structure,"In general it is not a good idea to return a structure from a function because compilers do not all perform this the same way.  Some compilers/ABIs are reasonably efficient at this (as gcc seems to be), but others are not so efficient and will do extra copies of the structure.",non-bug,https://github.com/nasa/cFE/issues/45
Add tag to `CFE_SB_DestinationD_t` structure and use it instead of `void *` for `Prev` and `Next`,"**Is your feature request related to a problem? Please describe.**
Void pointers used in `CFE_SB_DestinationD_t`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_private/fsw/inc/cfe_sb_destination_typedef.h#L41-L52

**Describe the solution you'd like**
Defining a tag and use in pointer definitions

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1455
Add CONTRIBUTING.md,"Is your feature request related to a problem? Please describe.
github repositories are suggested to have a CONTRIBUTING.md document which describes best practices for developers wishing to contribute to the main release.

Describe the solution you'd like
Develop a CONTRIBUTING.md document with simple stuff like ""follow the coding style guidelines"", run unit tests prior to a pull request, etc.

Describe alternatives you've considered
Likely will need to incorporate or reference existing documentation. Could also use the wiki capabilities of dropbox.

Additional context
Add any other context about the feature request here.

Requester Info
Chris Knight, NASA Ames Research Center.",non-bug,https://github.com/nasa/cFE/issues/405
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_lib/issues/77
CFE RELOAD and RESTART commands handled (almost) identically,"**Describe the bug**
The documentation of the `CFE_ES_RESTART_APP_CC` specifically says here that it is _not_ reloaded from the disk file:

https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/src/inc/cfe_es_msg.h#L324

But in the way the code has evolved, both RELOAD and RESTART control requests end up going through `CFE_ES_CleanUpApp()` function:

https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/src/es/cfe_es_apps.c#L961-L968
https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/src/es/cfe_es_apps.c#L997-L1003

Notably, the `CFE_ES_CleanUpApp()` function will, in fact, unload the module via `OS_ModuleUnload()`, and the subsequent `CFE_ES_AppCreate()` function will load it again from disk.  Also important that the AppID might change too as part of this process, which may or may not be expected?

**Expected behavior**
Should make the documentation and code match one way or another:
- If we want a true ""restart"" without reload, as the documentation for `CFE_ES_RESTART_APP_CC` says, we need to update this to NOT completely unload the module.
- OR If the current implementation is OK then I'd say it isn't sufficiently different from `CFE_ES_RELOAD_APP_CC` to warrant the existence of a separate command.

**Additional context**
I noticed this inconsistency while doing implementation of #28.  I can put in a fix for this issues as part of the same (upcoming) PR, just need CCB concurrence on which way to go - do we make it work as described, or we describe the way it works.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/793
Remove CFE_PSP_MemSet use for addresses in RAM,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/CS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Should just use memset/memcpy for addresses in RAM.  The PSP functions serve no use in this context.

**Describe the solution you'd like**
Replace with memset/memcpy.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/LC/issues/32
Add cFE ES Child Task API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Child Task API functional tests
– CFE_ES_RegisterChildTask - Registers a cFE Child task associated with a cFE Application.
– CFE_ES_CreateChildTask - Creates a new task under an existing Application.
– CFE_ES_DeleteChildTask - Deletes a task under an existing Application.
– CFE_ES_ExitChildTask - Exits a child task.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/809
Incomplete coverage test for src/time,"**Is your feature request related to a problem? Please describe.**
Current Coverage: 99.1 %

cfe_time_api.c
CFE_TIME_CFE2FSSeconds

```
     681           0 :         if (-ConvertFactor > SecondsCFE)
     682             :         {
     683           0 :             SecondsFS = 0;
     684             :         }
```

CFE_TIME_Print
```
     766           0 :         NumberOfMinutes++;
     767           0 :         NumberOfSeconds -= 60;
```

cfe_time_task.c
CFE_TIME_TaskInit
```
     352           0 :       CFE_ES_WriteToSysLog(""TIME:Error subscribing to time at the tone request data cmds:RC=0x%08X\n"",(unsigned int)Status);
     353           0 :       return Status;
```

cfe_time_utils.c
CFE_TIME_GetReference
```
  676           0 :         if (RetryCount == 0)
     677             :         {
     678             :             /* unsuccessful read */
     679           0 :             break;
     680             :         }
     681             : 
     682           0 :         --RetryCount;
     683             :     }
     684             : 
```

**Requester Info**
Anh Van, NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/473
Clean up version header and standardize reporting,"**Is your feature request related to a problem? Please describe.**
Unnecessary macros (coding standard), strange line splits,  various event formats.

**Describe the solution you'd like**
I'll provide a suggested cleanup.  If people like it, keep it and consider applying the pattern across repos... if not, toss it.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1604
PSP modular build enhancements,"Currently, in order to support a different variant of a board, such as one that has the same processor but different set of peripherals, one must ""clone"" the entire PSP of the board and modify it to support the new board.

The problem with this approach is that as usage becomes more widespread we will end up with a large number of similar-but-different PSPs needing maintenance.  Any change to the CFE that requires PSP support will require updating ALL VARIANTS of the PSP which will become increasingly difficult.

The CMake build system introduced in ticket #4 as the ability to //statically// link in a set of extra mission-defined code modules into the PSP library.  With this system in place, CFS applications can bind to specific ""PSP drivers"" at runtime.

This is analogous to statically linking driver modules into the Linux kernel depending on the hardware configuration.  As long as the interface is the same (e.g. ""/dev/ttyS*""), the application need not know what hardware is actually providing the interface.

This allows code re-use in many ways:
* A single PSP can support multiple physical board variations by loading a different module set.
* Multiple PSP's can leverage the same drivers where appropriate (e.g. an ADC driver that communicates over a serial bus can work equally well on ARM, x86, or PPC as long as it has a compatible serial bus).
* As long as all similar-function PSP modules provide the same application-facing API, any CFS application implementing ""business logic"" can operate in a completely hardware-independent manner.  The driver module can be replaced with a different module and the CFS application does not need to change (or even be recompiled) to work with alternate hardware.

This framework should help avoid the need to ""clone-and-own"" a PSP for a particular project.  This is especially true for Linux PSPs which are already very generic (e.g. pc-linux easily runs on ARM Linux or PPC Linux).  The framework is a very simple extension to the PSP and does not change existing PSP APIs so it will not interfere with existing code.

",non-bug,https://github.com/nasa/PSP/issues/6
Consider simplifying the zero-copy SB API,"**Is your feature request related to a problem? Please describe.**
After some refactoring in PR #1154 the whole `CFE_SB_ZeroCopyHandle_t` has become somewhat extraneous - there is no extra handle/descriptor for a zero copy buffer - they are all the same, and this simply refers to the same buffer descriptor now.

**Describe the solution you'd like**
The API can be simplified and this extra handle removed.  The buffer content pointer is good enough to reconstitute the descriptor  pointer (fixed offset).

**Describe alternatives you've considered**
Leave API as is (backward compatible, just a little more complex than it needs to be).

**Additional context**
This will affect public APIs - CFE_SB_ZeroCopyGetPtr, CFE_SB_ZeroCopyReleasePtr, CFE_SB_TransmitBuffer.  (CFE_SB_ZeroCopySend and CFE_SB_ZeroCopyPass are affected but already deprecated).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1155
Remove test results from fsw path,"**Is your feature request related to a problem? Please describe.**
Test results should be supplied as artifacts with the release.  These results are outdated and not used for any new comparison checks.

**Describe the solution you'd like**
Remove from FSW.

**Describe alternatives you've considered**
None

**Additional context**
Specifically:
 - cfe/fsw/cfe-core/unit-test/EsResults
 - cfe/fsw/cfe-core/unit-test/EvsResults
 - cfe/fsw/cfe-core/unit-test/FsResults
 - cfe/fsw/cfe-core/unit-test/SbResults
 - cfe/fsw/cfe-core/unit-test/TblResults
 - cfe/fsw/cfe-core/unit-test/TimeResults

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/379
Incorrect ReturnCode check in CFE_ES_CreateObjects,"**Is your feature request related to a problem? Please describe.**
The `CFE_ES_StartAppTask` returns a CFE status.  However, when checking the the return code, it is compared to `OS_SUCCESS`, rather than `CFE_SUCCESS`.

https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/es/fsw/src/cfe_es_start.c#L786-L799

**Describe the solution you'd like**
Check against `CFE_SUCCESS`

**Describe alternatives you've considered**
N/A

**Additional context**
This is just a minor/pedantic correctness issue, since in practice OS_SUCCESS and CFE_SUCCESS are the same value (0).  However when scrubbing for type correctness this shows up.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1698
Return value of CFE_MSG_GetMsgId is not checked during ProcessCommandPacket or VerifyCmdLength,"**Describe the bug**
CFE_MSG_GetMsgId returns a status value to indicate success or failure of the call, but neither of the usages in the sample app  check if it is successful nor do they state that the return value is ignored by design.

**To Reproduce**
N/A

**Expected behavior**
Sample app should either make use of the return value to verify success or should note the reason why this is not being done.

**Code snips**
https://github.com/nasa/sample_app/blob/d009197df721af1f430d173584fa64a507a94a13/fsw/src/sample_app.c#L235
https://github.com/nasa/sample_app/blob/d009197df721af1f430d173584fa64a507a94a13/fsw/src/sample_app.c#L442

**System observed on:**
N/A

**Reporter Info**
Alan Gibson  NASA/GSFC 587
",non-bug,https://github.com/nasa/sample_app/issues/159
"CFE_SB_GetMsgId use, UT_SetForceFail does not set the return code (returns 0).","**Describe the bug** 
CFE_SB_GetMsgId in cfe/fsw/cfe-core/ut-stubs/ ut_sb_stubs.c.
 
CFE_SB_GetMsgId is not returning the PLSS_STATE_DET_WAKEUP_MID set by UT_SetForceFail. The problem I see is the MsgId is now calculated by the MsgPtr which points to a Buffer.Msg (defined in CFE_SB_RcvMsg) but this Buffer.Msg (StreamId[0] and streamId[1]) is set to all zeros and never set to the PLSS_STATE_DET_WAKEUP_MID. In cfe6.6, the MsgId was calculated from the StubEntry data which is set by  UT_SetForceFail.



**To Reproduce**
Steps to reproduce the behavior:



Here is my unit test sequence
 ```
plss_state_det_UT_app.c
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, CFE_SUCCESS);
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, !CFE_SUCCESS);      // in ProcessNewCmds()
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, !CFE_SUCCESS);      // in ProcessNewData()
    UT_SetForceFail(UT_KEY(CFE_SB_GetMsgId), PLSS_STATE_DET_WAKEUP_MID);     // #define 0x18D2   <-----  Setting the MsgID to be returned by CFE_SB_GetMsgId
    UT_SetHookFunction(UT_KEY(CFE_EVS_SendEvent), UTHF_CFE_EVS_SendEvent_HookMyString, NULL);
  
    iRetVal = PLSS_STATE_DET_RcvMsg(5);      // arbitrary iBlocking value, CFE_SB_RcvMsg is being hooked
 ```
```
plss_state_dep_app.c
int32 PLSS_STATE_DET_RcvMsg(int32 iBlocking)
{
…
    iStatus = CFE_SB_RcvMsg(&MsgPtr, g_PLSS_STATE_DET_AppData.SchPipeId, iBlocking);   ß-------------  Returns MsgPtr pointing to Buffer.Msg (set to all zeros)
 
…
    if (iStatus == CFE_SUCCESS)
    {
        MsgId = CFE_SB_GetMsgId(MsgPtr);         <--------  Returns 0, using Buffer.Msg not using StubEntry data  
        switch (MsgId)
       {
            case PLSS_STATE_DET_WAKEUP_MID:
 ```
 
The MsgId is 0 which should be PLSS_STATE_DET_WAKEUP_MID.
The reason is because the MsgPtr points to Buffer.Msg (set to all zeros) defined in CFE_SB_RcvMsg
 
```
cfe/fsw/cfe-core/ut-stubs/ ut_sb_stubs.c:
int32 CFE_SB_RcvMsg(CFE_SB_MsgPtr_t *BufPtr,
                    CFE_SB_PipeId_t PipeId,
                    int32 TimeOut)
{
    int32 status;
    static union
    {
        CFE_SB_Msg_t Msg;
        uint8 Ext[CFE_MISSION_SB_MAX_SB_MSG_SIZE];
    } Buffer;
 
    status = UT_DEFAULT_IMPL(CFE_SB_RcvMsg);
    if (status >= 0)
    {
        if (UT_Stub_CopyToLocal(UT_KEY(CFE_SB_RcvMsg), (uint8*)BufPtr, sizeof(*BufPtr)) < sizeof(*BufPtr))
        {
            memset(&Buffer, 0, sizeof(Buffer));
            *BufPtr = &Buffer.Msg;
``` 
 
The MsgPtr is passed to the CFE_SB_GetMsgId, where the MsgId is calculated using        #define CCSDS_RD_SID(phdr)         (((phdr).StreamId[0] << 8) + ((phdr).StreamId[1]))
The calucated MsgId is 0 since MsgPtr is pointing to Buffer.Msg which is set to all zeros.
 
 ```
CFE_SB_MsgId_t CFE_SB_GetMsgId(const CFE_SB_Msg_t *MsgPtr)
{
    CFE_SB_MsgId_t MsgId = 0;
 
    UT_DEFAULT_IMPL(CFE_SB_GetMsgId);
 
    if (UT_Stub_CopyToLocal(UT_KEY(CFE_SB_GetMsgId), &MsgId, sizeof(MsgId)) < sizeof(MsgId))
    {
#ifdef MESSAGE_FORMAT_IS_CCSDS
 
#ifndef MESSAGE_FORMAT_IS_CCSDS_VER_2 
        MsgId = CCSDS_RD_SID(MsgPtr->Hdr);
#else
 ```
 
Note: For UT_DEFAULT_IMPL(CFE_SB_GetMsgId); I.  I do see PLSS_STATE_DET_WAKEUP_MID  being used.






**Expected behavior**
Return PLSS_STATE_DET_WAKEUP_MID

**System observed on:**
 - Hardware
 - OS: Centos 7
 - Versions:cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.8.0, chksm 9194

**Reporter Info**
Jose Tovias CACI/LZT Technology",non-bug,https://github.com/nasa/cFE/issues/659
Scrub CFE to use correct type for OSAL IDs,"**Is your feature request related to a problem? Please describe.**
nasa/osal#568 introduces a proper typedef for OSAL IDs: `osal_id_t`

**Describe the solution you'd like**
The CFE needs to be scrubbed to use this typedef whenever storing an OSAL ID, rather than `uint32`

**Describe alternatives you've considered**
Keep using `uint32` as-is, but that defeats the purpose of having a typedef.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/858
FS Header Functional Tests,"**Is your feature request related to a problem? Please describe.**
The functional test currently only test the base cases of the API functions. More in depth tests still need to be written.

**Describe the solution you'd like**
Write tests for all the possible cases

**Additional context**
Follow up to #1414

**Requester Info**
Alex Campbell",non-bug,https://github.com/nasa/cFE/issues/1480
Add Description of Workflows in Contributing Guide,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Users may not know the purpose of each workflow we use. 

**Describe the solution you'd like**
Provide a short description of each workflow.

**Describe alternatives you've considered**
N/A

**Requester Info**
Ariel Adams, ASRC Federal 
",non-bug,https://github.com/nasa/cFS/issues/253
Remove all MKS $log comments in file header prologs,"The git version control system eliminates the need to have ""change logs"" included in each source code file.  

The original cFS MKS change logs have been accumulating since 2006 making the source code files very lengthy.  The logs are outdated and of little practical use.  Now that the code is being maintained via git, the old MKS $log tags are no longer used.  

The old MKS $log tags and old MKS log information/comments should be removed from all source code files.

Note: This needs to be performed after ticket #142 changes have been merged to prevent any merge conflicts. ",bug,https://github.com/nasa/cFE/issues/208
Reference to deprecated symbol when extended header enabled,"**Describe the bug**
If `MESSAGE_FORMAT_IS_CCSDS_VER_2` is defined then this references a deprecated symbol and fails to build when `OMIT_DEPRECATED` is also set.


**To Reproduce**
Build with both `MESSAGE_FORMAT_IS_CCSDS_VER_2` mission config and `OMIT_DEPRECATED`  compile option.

**Expected behavior**
Should build successfully.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc
",bug,https://github.com/nasa/cFE/issues/676
Counters included in cFE functional test summary does not add up to total test count,"**Is your feature request related to a problem? Please describe.**
cFE functional test summary does does not contain information on all counters that increase the total test case count.  This results in the appearance of missing tests when the results are read.

**Describe the solution you'd like**
Add an information statement that includes the test counters for the remaining tests that increase the total test count.  

**Requester Info**
Dan Knutsen
NASA Goddard
",non-bug,https://github.com/nasa/cFE/issues/2349
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_app/issues/124
Enhanced version reporting,"Use CI_LAB_VERSION from cfecfs_version_info.h if available and report on NOOP and startup (along with classic version numbering)

Classic version numbering can then just be updated on release, vs for every commit.",non-bug,https://github.com/nasa/to_lab/issues/6
OS_TaskDelay has wrong nanosleep values,"in src/os/posix/osapi.c, lines 845-846, OS_TaskDelay should use:

    waittime.tv_sec  = ms / 1000000;
    waittime.tv_nsec = (ms % 1000000) * 1000000;

not

    waittime.tv_sec  = ms / 1000;
    waittime.tv_nsec = (ms % 1000) * 1000000;
",bug,https://github.com/nasa/osal/issues/78
Items instantiated in header causes duplicate definitions and link errors,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/LC/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The unit test header file `lc_test_utils.h` instantiates objects directly in the header file, which breaks if it is ever included in more than one C file.

**To Reproduce**
Build LC with unit tests enabled, get lots of linker errors:

```
usr/bin/ld: libcoverage-lc_internal-stubs.a(lc_test_utils.c.o):/home/joe/code/cfecfs/github/apps/lc/unit-test/utilities/lc_test_utils.h:39: multiple definition of `WDTable'; CMakeFiles/coverage-lc-lc_action-testrunner.dir/lc_action_tests.c.o:/home/joe/code/cfecfs/github/apps/lc/unit-test/utilities/lc_test_utils.h:39: first defined here
/usr/bin/ld: libcoverage-lc_internal-stubs.a(lc_test_utils.c.o):/home/joe/code/cfecfs/github/apps/lc/unit-test/utilities/lc_test_utils.h:40: multiple definition of `ADTable'; CMakeFiles/coverage-lc-lc_action-testrunner.dir/lc_action_tests.c.o:/home/joe/code/cfecfs/github/apps/lc/unit-test/utilities/lc_test_utils.h:40: first defined here
```

**Expected behavior**
Build should work?

**Code snips**
https://github.com/nasa/LC/blob/543cf6b8906cd976d33f14d3907567d6bc8c8cd9/unit-test/utilities/lc_test_utils.h#L38-L43

**System observed on:**
Ubuntu 

**Additional context**
I was just trying to build LC ""out of the box"" - not modified in any way - and it failed badly.  Not sure how this ever built or passed any validation testing with this the way it was.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/LC/issues/51
Add API to Return EEPROM write enable/disable status (GSFC DCR 13420),"The PSP should provide an API to allow a caller to retrieve the write enable/disable status of a selected bank of EEPROM (or alternatively, the status of all available banks).  This would allow this information to be made available in telemetry.   ",non-bug,https://github.com/nasa/PSP/issues/70
CFE_ES_GetAppID should call CFE_ES_GetAppIDInternal,"Simplifies the code, ensures the same logic.",bug,https://github.com/nasa/cFE/issues/223
Application performance monitoring and deadlines,"     
**Is your feature request related to a problem? Please describe.**

- When developing a cFS application, I want to detect and correct performance problems as early as possible.
- When integrating a cFS system, I want to observe application timing so I can confirm whether system performance matches my expectations.

**Describe the solution you'd like**

- I would like an easy way to track performance statistics for each cFS application, specifically, last, average and max observed run time.
- For systems using SCH (Scheduler), I would also like enough information to trace in detail _when_ each application starts and finishes so I can compare the system's actual timing to the timing that I specified.
- I would like all this to be possible without adding special performance instrumentation to the cFS application.

**Describe alternatives you've considered**

Here are some ways that cFE (and cFS) can measure application performance today:

| Approach | Limitation |
|---|---|
| ES (Executive Services) Task Execution Counter | Tracks # of passes through application's main loop.  Does not track detailed timing information. |
| ES (Executive Services) Performance Log | Tracks detailed timing information, but must be manually maintained (started and stopped) by the application. |
| HS (Health & Safety) CPU Utilization Monitoring | Tracks overall CPU utilization.  Not broken down per cFS application. |
| HK (Housekeeping) telemetry messages published by each application | An application's HK telemetry message can measure and report any timing information it wants, but this must be implemented by each application, so it's not very consistent! |

As a rule, existing methods are limited in that either (1) they do not track detailed timing information, or (2) they require application authors to manually instrument their cFS app and thus are not supported for all apps.

**Additional context**

Any solution must take into account the fact that a typical cFS application spends a lot of time idle, waiting for Software Bus messages.  This means that simply instrumenting the CFE_ES_Runloop() function won't give an accurate sense of how much CPU time is being consumed by even a simple application such as the SAMPLE_APP.

```
while (CFE_ES_Runloop(...) == true)
{
    status = CFE_SB_ReceiveBuffer(...) // Wait for wakeup message
    // Perform work ...
}
```

There are many possible solutions.  My suggestion is to make CFE_ES_Runloop() fire either an Event or a SB message signaling that each application has reached the top of its main loop (i.e., finished executing).  Because application execution is normally _triggered_ by a wakeup message as well, comparing the timing of the two messages allows measurement of application execution time.

```
time --> 

wakeup message sent to app         X          X          X     
CFE_ES_RunLoop() called by app          Y          Y          Y

application execution time         ^----^     ^----^     ^----^
```

A ""statistics tracking"" application could subscribe to both messages, compare their timings, and calculate/report any statistics desired, such as last, average, and max observed run time.  Outsourcing calculations to an app means they can be easily customized or disabled per mission without modifying cFE.

**Side benefit: deadlines**

I am fond of this particular implementation because it easily enables another feature: application deadlines.  A deadline is an execution time bound triggering a configurable action.  It can also be thought of as a ""software watchdog"".  Deadlines are important because they allow unexpectedly long-running applications to be rapidly detected and can help mitigate the timing impact of such applications on the rest of the system.

Today, the closest analogous feature is HS (Health & Safety) Application Monitoring of the ES Task Execution Counter.  This only detects applications that get ""stuck"" for a long time.  Also, HS only monitors counters for liveness and does not check that they are incrementing at the expected rate.

Here is my suggested way to implement deadlines.  The Scheduler (SCH) application assigns each scheduled app a deadline of configurable length L.  If SCH sends the application a wakeup message at time T, it will expect to receive the application's RunLoop() message by time T+L.  When the deadline is reached, if the application is not done, SCH fires a schedule overrun event.  The event can be caught and used by HS (Health & Safety) or some other application.

```
time --> 

wakeup message sent to app         X              X        
CFE_ES_RunLoop() called by app          Y                       Y  

application execution time         ^----^         ^-------------^ 
deadline                           ^........^     ^........^ 
                                       L              L    | 
                                                           |
                                                           v
                                   (ok)         schedule overrun event
```

Note: I've presented a lot of detail here.  I'm not tied to any of the details.  My goal is to present a starting point for further discussion of whether these features are useful, and for any resulting implementation to be consistent with cFS's architecture.

**Requester Info**

Peter Fidelman - Blue Origin

These ideas were originally presented during a talk at [Flight Software Workshop 2021](http://flightsoftware.jhuapl.edu/workshop/FSW2021) ([slides](https://drive.google.com/file/d/10rWCAh3jh204yK0dQ9yh2CwveZCXsixp/view?usp=drive_web)).

",non-bug,https://github.com/nasa/cFE/issues/1214
OSAL Configuration Guide Link is broken in README,"**Describe the bug**
The link to the OSAL Configuration Guide is broken in blob/main/README.md.

**To Reproduce**
Go to https://github.com/nasa/osal/blob/main/README.md and then click on the ""Configuration Guide"" link near the bottom of the file. It navigates to the old PDF file link.

**Expected behavior**
I expected the link to take me to the Markdown file in the repo.

**Code snips**
`See the [Configuration Guide](https://github.com/nasa/osal/blob/master/doc/OSAL-Configuration-guide.pdf) for more information.` (should reference doc/OSAL-Configuration-Guide.md).

**System observed on:**
Documentation only.

**Additional context**
N/A

**Reporter Info**
Ross Peters
",non-bug,https://github.com/nasa/osal/issues/961
MM Investigate use of static variables,"In MM_DumpInEventCmd, EventString is declared as static to keep it off the stack.  Need to investigate whether this is necessary.

Imported from GSFCCFS-1562",non-bug,https://github.com/nasa/MM/issues/7
vxWorks OSAL implementation needs OS_IdleLoop and OS_Application_Shutdown,"[changeset:facd2b3] ready for CCB review
",bug,https://github.com/nasa/osal/issues/174
Generate new set of CFE coverage test stubs,"**Is your feature request related to a problem? Please describe.**
To achieve max flexibility the CFE coverage test stubs should have no built-in logic, with all handler logic in a separate function.

This is the pattern that was introduced with nasa/osal#966, along with the stub generator script.

**Describe the solution you'd like**
Run the stub generator script on CFE core API headers to generate a new set of ""pure"" stub implementation files with no extra logic in them.
Migrate any existing post-hook logic in the old stub to be a default handler function, as was done for OSAL stubs.

**Additional context**
Extension of original request in nasa/osal#832, but for CFE.  Depends on nasa/osal#966 to be accepted/merged before this can be done.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1417
Streamline SC_GetNextRtsCommand and SC_ParseRts,"Both functions use temporary buffers and potentially unnecessary copies.

Imported from GSFCCFS-1471",non-bug,https://github.com/nasa/SC/issues/13
Fix nonexistent symbol lookup in RTEMS,"In the event of a lookup on a nonexistent symbol, The RTEMS `dlError` implementation does not return NULL like the POSIX implementation does.  This is intended to differentiate between a nonexistent symbol and a symbol that exists but actually has an address of NULL.

Unfortunately, this makes the OSAL symbol lookup API return ""success"" and a NULL address, which can cause the implementation to jump to NULL if e.g. a bad entry point name was supplied.",bug,https://github.com/nasa/osal/issues/244
Replace UT_Stub_CheckForceFail with UT_Stub_CheckDefaultReturnValue,"**Is your feature request related to a problem? Please describe.**
See nasa/osal#737

**Describe the solution you'd like**
Update to use new name

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1172
way to get raw OS task priority/OSAL has too many priorities,"OSAL attempts to provide a uniform set of task priority by translating the given priority to a native OS priority. This is often done by assigning bins that certain priorities can fall into. Typically, applications can set their priorities far enough apart that this is not a problem. However, sometimes tighter control would be nice especially in systems where the number of available priorities is fewer than OSAL. (For example, OSAL provides 255 priorities but POSIX only 100.)

POSIX, for example, can see priorities squashed where tasks become round-robin instead of higher priority than one another. Having to pick OSAL priorities when writing apps with many child threads based on what you know the characteristics of the underlying OS to be defeats the purpose of OSAL.

One way to fix this is to create a macro os_raw_prio(X) where the most significant bit of a priority is set, which has meaning to OSAL's thread creation mechanism. This would tell it to use the raw value instead of translating.

Another approach would be to lower the number of maximum OSAL priorities to a number lower than most RTOSs (like 50 or so) so that there can always be unique priorities in any underlying OS. Or, this could be made configurable when building the system.",non-bug,https://github.com/nasa/osal/issues/222
Remove classic build support,Only supporting cmake build going forward.,non-bug,https://github.com/nasa/sch_lab/issues/4
Table data pointer not successfully being re-acquired in SC_ManageTable,"**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/SC/blob/main/CONTRIBUTING.md).
* [x ] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
SC is not able to successfully send commands.

**To Reproduce**
Attempt to send a command from a SC table.

**Expected behavior**
Stored commands executes nominally.

**Code snips**
   uint32 *         TblAddr;

    switch (type)
    {
        case ATS:
            TblHandle = SC_OperData.AtsTblHandle[ArrayIndex];
            TblAddr   = SC_OperData.AtsTblAddr[ArrayIndex];
            break;
        case RTS:
            TblHandle = SC_OperData.RtsTblHandle[ArrayIndex];
            TblAddr   = SC_OperData.RtsTblAddr[ArrayIndex];
            break;
        case APPEND:
        default:
            TblHandle = SC_OperData.AppendTblHandle;
            TblAddr   = SC_OperData.AppendTblAddr;
            break;
    }

    /* Release table data pointer */
    CFE_TBL_ReleaseAddress(TblHandle);

    /* Allow cFE to manage table */
    CFE_TBL_Manage(TblHandle);

    /* Re-acquire table data pointer */
    Result = CFE_TBL_GetAddress((void *)&TblAddr, TblHandle);

**System observed on:**
 - Hardware
 - OS: [e.g. Linux 4.4]
 - Versions [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps]

**Reporter Info**
Dan Knutsen
NASA/Goddard
",bug,https://github.com/nasa/SC/issues/66
"Improve version control, reporting, and integrity support to enhance security","**Is your feature request related to a problem? Please describe.**
Elements could be modified between original generation and use without easily being noticed.  A holistic design approach to version control, reporting, integrity should be considered to support the various use cases.

Currently state:
1. Repo information (git describe in a subset of repos) is gathered during build and reported on execution for top branch, cFE and OSAL- need to expand this to include all the elements (apps, libs, psp, etc)
2. Build information is gathered during build and reported on execution - user name and date for last full build covering cFE (doesn't cover uploaded apps or elements built separately/after the original full build)
3. Version information updated by hand and reported at execution time for most of cFS - elf2cfetbl and tblCRCtool don't report version information, hasn't been consistently updated
4. Checksums are typically just calculated and reported at load/execution, doesn't cover libs, really should employ digital signatures that can be verified

**Describe the solution you'd like**
See above suggestions

**Describe alternatives you've considered**
None, but should discuss with security experts and come up with a complete, well vetted solution.

**Additional context**
Likely very beneficial to community requiring a more robust security approach

**Requester Info**
Jacob Hageman/NASA-GSFC",non-bug,https://github.com/nasa/cFS/issues/11
C++ comment style and commented out code violations,"**Is your feature request related to a problem? Please describe.**
C++ comment style and commented out code violates style guidelines
https://github.com/nasa/PSP/blob/0cd14abbb58691eb83afdd816e116f68e681b8e0/fsw/pc-rtems/src/cfe_psp_memory.c#L544-L565

**Describe the solution you'd like**
Clean up

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/246
Remove remaining stray references to old event types,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
While updating event type constants in https://github.com/nasa/cFE/pull/2221 it was noticed that a few stray uses of the old types (`CFE_EVS_ERROR`, `CFE_EVS_INFORMATION` etc.) were still present in LC's commented-out tests.

**Expected behavior**
Update to new event type constants or remove these commented-out tests.

**Code snips**
https://github.com/nasa/LC/blob/358fc484e93d0c2c63e4a2faf1d61883962f0c0b/unit-test/lc_app_tests.c#L470
https://github.com/nasa/LC/blob/358fc484e93d0c2c63e4a2faf1d61883962f0c0b/unit-test/lc_app_tests.c#L283

**Reporter Info**
Avi Weiss @thnkslprpt",non-bug,https://github.com/nasa/LC/issues/53
Documentation in targets.cmake does not match current implementation,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/cmake/sample_defs/targets.cmake#L8-L12

https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/cmake/sample_defs/targets.cmake#L100-L105

cpu number is now assigned differently, name is assigned differently, etc...

**Describe the solution you'd like**
Update documentation to be consistent

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/904
Return code not passed back in OS_ConsoleAPI_Init - static analysis warning,"**Is your feature request related to a problem? Please describe.**
OS_ConsoleAPI_Init always returns success, but could error.  Inconsistently implemented (if return_code is being recorded, return it... if it isn't needed why set it?)

**Describe the solution you'd like**
Either don't have a return value, or return the actual status.  In test/coverage the expected return value should be confirmed.

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning since return_code is unused

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/790
DS should add a per-message and/or per-file checksum,"Files generated by DS on a spacecraft may be subject to SEU. As such, DS should add checksums to messages stored in the DS file, and/or store a checksum for the entire DS file at close time.

Imported from GSFCCFS-752",non-bug,https://github.com/nasa/DS/issues/5
Strict aliasing build errors in unit test code,"**Describe the bug**
When using strict aliasing in combination with tests (i.e. ENABLE_UNIT_TESTS=true), additional aliasing warnings are produced by GCC 10.3. 

**To Reproduce**
Build CFE with tests enabled along with strict aliasing compiler settings (`-O3 -fstrict-aliasing -Wstrict-aliasing=2`), build will fail with errors such as:

```
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c: In function ‘UT_DefaultHandler_CFE_ES_GetAppID’:
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c:136:60: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  136 |         UT_GetDataBuffer(UT_KEY(CFE_ES_GetAppID), (void **)&IdBuff, &BuffSize, &Position);
      |                                                            ^~~~~~~
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c: In function ‘UT_DefaultHandler_CFE_ES_GetTaskID’:
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c:170:61: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  170 |         UT_GetDataBuffer(UT_KEY(CFE_ES_GetTaskID), (void **)&IdBuff, &BuffSize, &Position);
      |                                                             ^~~~~~~
```

**Expected behavior**
Should build cleanly

**System observed on:**
Ubuntu 21.04 (w/gcc 10.3)

**Additional context**
Most of these are related to `(void**)` casts, which is easily resolved by making another local `void*` variable to temporarily hold the pointer.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1984
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sch_lab/issues/106
Add cFE ES Critical Data Store API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Critical Data Store API functional tests
– CFE_ES_RegisterCDS - Reserve space (or re-obtain previously reserved space) in the Critical Data Store
(CDS)
– CFE_ES_CopyToCDS - Save a block of data in the Critical Data Store (CDS)
– CFE_ES_RestoreFromCDS - Recover a block of data from the Critical Data Store (CDS)

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/810
Update cFS training package link,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
New slide package available at https://ntrs.nasa.gov/citations/20210022378

**Describe the solution you'd like**
Update README

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFS/issues/378
Variables declared mid-function,"According to many coding standards (GSFC FSW included, AFAIK), variables should not be declared only at the top of functions, not in the middle.   However, CF has many cases of this.

Any variables declared mid-function should be moved to the top of the function to correct this.",non-bug,https://github.com/nasa/CF/issues/109
Include doxyfile templates in OSAL,"**Is your feature request related to a problem? Please describe.**
Currently the OSAL API is marked up with doxygen, but the required `Doxyfile` config file/template exists in the CFE repo, not in the OSAL repo.

**Describe the solution you'd like**
The `Doxyfile` and other support/config files for the OSAL guide should exist in this repository, in the docs directory, so OSAL documentation can be generated on its own without CFE.

**Additional context**
OSAL is supposed to be a standalone product, but currently only CFE users can generate OSAL documentation.  It also makes management harder having certain config files in a separate repo.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/osal/issues/1032
Missing test cases for executive services API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the executive services functional test:

```
  + condition: CFE_ES_CreateChildTask[any]=>CFE_ES_ERR_CHILD_TASK_CREATE
  + condition: CFE_ES_CreateChildTask[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_ES_DeleteChildTask[any]=>CFE_ES_ERR_CHILD_TASK_DELETE
  + condition: CFE_ES_DeleteChildTask[any]=>CFE_ES_ERR_CHILD_TASK_DELETE_MAIN_TASK
  + condition: CFE_ES_GetAppID[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_ES_GetAppIDByName[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetAppInfo[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetAppInfo[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_GetLibIDByName[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetLibName[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetLibName[<zero-value>@2]=>ERROR_ZERO_VALUE
  + condition: CFE_ES_GetMemPoolStats[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetMemPoolStats[CFE_ES_MemHandle_t@1]=>ERROR_RESOURCEID_INVALID
  + condition: CFE_ES_GetMemPoolStats[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_GetPoolBufInfo[any]=>CFE_ES_BUFFER_NOT_IN_POOL
  + condition: CFE_ES_GetTaskID[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_ES_GetTaskIDByName[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetTaskInfo[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetTaskInfo[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_PoolCreateEx[any]=>CFE_ES_NO_RESOURCE_IDS_AVAILABLE
  + condition: CFE_ES_PoolCreateEx[any]=>CFE_STATUS_EXTERNAL_RESOURCE_FAIL
  + condition: CFE_ES_RegisterCDS[any]=>CFE_ES_CDS_INVALID
  + condition: CFE_ES_RestoreFromCDS[any]=>CFE_ES_CDS_BLOCK_CRC_ERR
  + condition: CFE_ES_WaitForSystemState[any]=>CFE_ES_OPERATION_TIMED_OUT
  + condition: CFE_ES_WriteToSysLog[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_WriteToSysLog[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_WriteToSysLog[any]=>CFE_SUCCESS
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",non-bug,https://github.com/nasa/cFE/issues/1866
CFE_MISSION_ES_MAX_SHELL_PKT Causes ES Error When Unsigned,"When CFE_MISSION_ES_MAX_SHELL_PKT is defined as an unsigned value (2000u, for example) and a shell command is executed that results in a shell output file of less than CFE_MISSION_ES_MAX_SHELL_PKT, ES gets stuck in a loop of sending millions of ES Shell Telemetry packets.

This error/loop is in the int32 CFE_ES_ShellOutputCommand(const char * CmdString, const char *Filename) function. I think it is caused by the FileSize variable (int32) getting converted to an uint32 and under-flowing.

A workaround to this is to keep CFE_MISSION_ES_MAX_SHELL_PKT defined as a signed integer, but I think that the fix should be for ES to fix this under-flow. The CFE_MISSION_ES_MAX_SHELL_PKT should be able to be thought of/defined as an unsigned value.",bug,https://github.com/nasa/cFE/issues/335
Default `ValuePtr` in `CFE_ES_FindConfigKeyValue`,"**Is your feature request related to a problem? Please describe.**
`ValuePtr` is set to a default value whenever `CFE_ES_FindConfigKeyValue` returns `NULL`

**Describe the solution you'd like**
Could just set to the default value within this helper

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1359
OSAL timer tests may crash on 32-bit Linux,"I have seen changes between test runs of the same branch
where sometimes the timer related test programs run OK
and other times when they die with a SIGSEGV.

Test results need to be robust and repeatable. I suspect
that these tests are sensitive to some condition that is
not being adequately controlled on the test targets.

I am making the initial assumption that this is going to
require an update to the test scripts for OSAL, but debugging
is going to require some tinkering inside OSAL to extract
what is going on.

So this bug is being filed in both OSAL and TEST.

",bug,https://github.com/nasa/osal/issues/83
CFE_SB_ReceiveBuffer() -- switch timeout to int32,"**Describe the bug**
Per discussion at the Jan. 6, 2020 CCB, @jphickey suggested that the timeout parameter should be int32, not uint32. This should be changed.

See also #1063 

**Reporter Info**
Christopher.D.Knight@nasa.gov",non-bug,https://github.com/nasa/cFE/issues/1078
Redundant conditional (and repeated code) for determining ATS A vs B,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/SC/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [README file](https://github.com/nasa/SC/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`TempAtsChar` is set by testing `AtsNumber` against both `SC_ATSA` and `SC_ATSB`.  Not much point testing twice since the index is already assumed valid when used to dereference array elements.  It's also repeated multiple times.
https://github.com/nasa/SC/blob/259415fb01d9a3b9d271974caf8d2ab29fff2977/fsw/src/sc_cmds.c#L173-L176
https://github.com/nasa/SC/blob/259415fb01d9a3b9d271974caf8d2ab29fff2977/fsw/src/sc_cmds.c#L209-L212
https://github.com/nasa/SC/blob/259415fb01d9a3b9d271974caf8d2ab29fff2977/fsw/src/sc_cmds.c#L245-L248

**Describe the solution you'd like**
Implement logic once, and it's either A or B.

**Describe alternatives you've considered**
None

**Additional context**
Coverage issue

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/SC/issues/36
Registration of events with 0x0000 filters isn't all that helpful,"**Is your feature request related to a problem? Please describe.**
Registration of all events with `0x0000` filters just loads the system without actually filtering anything.  Also fills the event filter buffer for the app and likely drops some since default limit is 8.

**Describe the solution you'd like**
Remove zero entries from initialization and add a filter when/if needed (or operationally via command).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/to_lab/issues/121
Default Configuration Setting for CFE_ES_STARTUP_SCRIPT_TIMEOUT_MSEC is Too Big,"The CFE_ES_STARTUP_SCRIPT_TIMEOUT_MSEC default configuration setting is currently set to 30 seconds.  A full cFS system typically takes ~1 second to launch and initialize the cFE and all applications.  The cFE ""out-of-the-box"" open source release package initializes in less than a second.  Having the system wait 30 seconds causes the software to appear as though it is hung.  It is recommended to set the default for this configuration to  1 second.  Projects with a larger application base can configure accordingly.  ",non-bug,https://github.com/nasa/cFE/issues/114
"Remove ""PspConfig"" member in config structure","**Is your feature request related to a problem? Please describe.**
The ""PspConfig"" member does not really serve a useful purpose anymore and should be cleaned up.  Issue nasa/psp#280 will remove the PSP definition of this structure.

**Describe the solution you'd like**
This structure also needs to be removed from the CFE `GLOBAL_CONFIGDATA` object.  

**Additional context**
This is co-dependent with nasa/psp#280 and needs to be done in the same build cycle.

The only remaining reference to this `PspConfig` member object is via the CFE_PSP_VERSION macro, where the version is printed.  This should be replaced with a call to `CFE_PSP_GetVersionString()` instead.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1273
Preserve Reserved Memory on a Soft Power-On Reset (GSFC DCR 18535),"The default action on all PSP implementations is to clear the reserved memory on a soft Power-On Reset.  This is where the cFE stores the exception and reset log information.

On both the GPM and MMS missions, the PSP's were customized to preserve the reserved memory on most soft power-on resets.  The PSP implementations should be changed to preserve this memory where possible.  This may not be possible for all PSP, but at a minimum could be done for the mcp750 target.

Attached is a sample of how the PSP was changed on GPM for their rad750 target. ",non-bug,https://github.com/nasa/PSP/issues/71
Should zero global data structure at initialization,"**Is your feature request related to a problem? Please describe.**
Fragile initialization touches individual elements, no memset 0

**Describe the solution you'd like**
memset the global to zero, only initialize non-zero elements

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/141
Update doxygen groupnames to match cFS naming conventions,"## Description

The doxygen ""groupnames"" do not have any separators and are difficult to read, see `CFEAPIESEntryExit` in code snippet below.

https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/docs/src/cfe_api.dox#L5-L10

See short discussion in https://github.com/nasa/cFE/pull/1670#discussion_r672549310

## Proposed Solution

Have the group name match the updated directory structure after the modules update, for example 
- `CFE_CORE_API_ES_EntryExit, or
- `CFE_ES_EntryExit

## Alternatives

Leave names as is but introduce underscores `CFE_API_ES_EntryExit`. ",non-bug,https://github.com/nasa/cFE/issues/1697
tblCRCTool build warnings,"The tblCRCTool had build warnings (using CentOS 6). Easy fix.
Adding 

    #include <stdlib.h>

fixed it.
Also the Makefile has the wrong include directory (should be ""-I."") and it breaks if make clean is already run (need ""rm -f"").",bug,https://github.com/nasa/tblCRCTool/issues/2
Update CMake logic to utilize built in capabilities,"**Is your feature request related to a problem? Please describe.**
 - Could get GIT_EXECUTABLE from CMake Module:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/generate_git_module_version.cmake#L16

 - Could simplify using `string(MAKE_C_IDENTIFIER)`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/global_functions.cmake#L32

**Describe the solution you'd like**
Use FindGit

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1310
Version string not reported correctly,"@skliper commented on [Fri Jan 08 2021](https://github.com/nasa/cFE/issues/1080)

**Is your feature request related to a problem? Please describe.**
`EVS Port1 66/1/CFE_ES 2: cFS Versions: cfe v6.8.0-rc1+dev236, osal v5.1.0-rc1+dev149, psp v1.5.0-rc146. cFE chksm 52385`

Note missing `+dev` for psp

**Describe the solution you'd like**
add `+dev`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC


",bug,https://github.com/nasa/PSP/issues/241
printf format issue on RTEMS,"**Describe the bug**
When compiling the test app under RTEMS, a build failure occurs:
```
/home/joe/code/cfecfs/github/cfe/modules/cfe_testcase/src/es_task_test.c: In function 'TestCreateChild':
/home/joe/code/cfecfs/github/cfe/modules/cfe_testcase/src/es_task_test.c:89:5: error: format '%d' expects argument of type 'int', but argument 7 has type 'uint32' [-Werror=format=]
     UtAssert_True(countCopy == count || countCopy == count + 1, ""countCopy (%d) == count (%d)"", countCopy, count);
     ^
```

**To Reproduce**
Build system for RTEMS 4.11 with unit tests enabled, and `es_task_test.c` will fail to build.

**Expected behavior**
Build should succeed.

**System observed on:**
RTEMS 4.11

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/1522
Remove/replace/rework `CFE_BIT` related macros,"**Is your feature request related to a problem? Please describe.**
The `CFE_BIT`, `CFE_SET`, `CFE_CLR`, `CFE_TST` are all only used within cFE for avoiding recursion in SB, all just once except `CFE_BIT`

**Describe the solution you'd like**
Remove unnecessary macro, clearer to just use the expression vs an abstraction like everywhere else bits are set, cleared, tested.  Coding standards encourage avoiding overuse of macros.

**Describe alternatives you've considered**
Could replace with inline functions and provide as a general utility (SB scope isn't all that intuitive), and use it more consistently.  These aren't thread safe, if they are maintained consider atomic bit ops.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1453
"SB: ""cfe_sb.h"" should not depend on cfe_platform_cfg.h","The public include file `cfe_sb.h` currently includes `cfe_platform_cfg.h` within it.

However, nothing within cfe_sb.h actually depends on the macros in this file.

Usage of `cfe_platform_cfg.h` macros should be limited to CFE itself; however, CFS apps may include `cfe_sb.h`.  Having the platform config included like this can cause problems for apps as it prevents them from building in a platform-config-agnostic way.
",bug,https://github.com/nasa/cFE/issues/166
"Remove references to ""cfe_platform_cfg.h"" from PSP","For maximum portability and the simplest build process, the PSP library should be completely independent of the specific CFE configuration that is running on top of it.  The PSP's behavior should be dictated entirely by the capabilities/capacities of the platform it is supporting, not the application using it.

As such, it should not need to directly ""compile-in"" any values or definitions from the application layer (cFE).

* The ""reset types"" returned by the PSP functions use a definition that comes directly from the CFE ES core application.  Since the hardware platform is what actually defines the different reset types, the definition of these types really belongs in the PSP.
* For memory area sizes, a better differentiation should be made between the size of memory that the hardware provides (capacities) and the sizes that cFE needs in order to operate (requirements).  Currently only one value is defined for both which is not really accurate; the cfe_platform_cfg.h defines the cFE requirements but the capacities are fixed by the physical hardware available.
",bug,https://github.com/nasa/PSP/issues/9
"Suggest refactoring sample_app to more closely match ""real"" apps.","**Is your feature request related to a problem? Please describe.**
This ticket is not related to a problem.  This is a feature request to reorganize the sample app to more closely match ""real"" apps (namely the GSFC open source apps).  This would increase sample_app's value as a template.  In addition to providing a more realistic example, the organization of functions into files has implications for unit testing.

**Describe the solution you'd like**
1. Move command functions into a separate sample_app_cmds.c file.  
2. Move utility functions into a separate sample_app_utils.c file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Elizabeth Timmons - NASA/GSFC
",non-bug,https://github.com/nasa/sample_app/issues/45
CI updates - add static analysis and format in workflow,"**Is your feature request related to a problem? Please describe.**
Travis-CI not transitioned to github actions

**Describe the solution you'd like**
Transition CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sch_lab/issues/63
Possible negative char to isspace - static analysis warning,"**Is your feature request related to a problem? Please describe.**
In theory a negative value could reach this code through public APIs, which would lead to undefined isspace behavior as it gets converted to int.
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_syslog.c#L432

**Describe the solution you'd like**
Recommended practice is to cast to `unsigned char`, such that the conversion to `int` results in defined behavior.

**Describe alternatives you've considered**
Could adjust all the parameters involved to `unsigned char`, but probably not worth it.

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/1208
CFE_TIME_Local1HzISR duplicated define,"**Is your feature request related to a problem? Please describe.**
Defined in both cfe_time.h and cfe_time_utils.h (standard violation)

**Describe the solution you'd like**
Single source of truth

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/551
Remove conditionally compiled code prior to next OSAL release,"As part of OSAL development several macros are utilized to allow the code to be merged in pieces without breaking existing code.

Before the next OSAL release is finalized, these conditional-compile macros should be removed and only the active branch should remain.

At least these two macros should always be considered ""enabled"" in future versions:
`OSAL_OPAQUE_OBJECT_IDS`
`OSAL_ABSTRACT_FILESYS_TYPES`


",non-bug,https://github.com/nasa/osal/issues/223
Apply standard code style,"**Is your feature request related to a problem? Please describe.**
Inconstant style

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/pull/30 and https://github.com/nasa/ci_lab/pull/28

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/sample_lib/issues/15
"Replace UT_Text with UtDebug and UtPrintf, remove UT_VERBOSE ifdefs","**Is your feature request related to a problem? Please describe.**
Compile time defines used for controlling reporting levels, also needless redefine ut_assert functions defeats the reporting of function and line number

**Describe the solution you'd like**
ut_assert provides for run-time reporting levels, use them instead of compile time defines.  This will also then cause the line number and file to be useful.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/900
"CF Assertions should not be compiled in when using ""release"" buildtype","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1787] CF Assertions should not be compiled in when using ""release"" buildtype
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 18:42:37 2021

_Original Description_:
See also #23 regarding the use of ""unlikely"" in this macro.  
  
When building with BUILDTYPE=release, the NDEBUG macro will be set. Typically this turns off assertions in the code, but in CF this is not the case, it redefines CF\_Assert to a local handler instead.  
  
Typically code will disable/compile-out assertion statements when in release mode, as they should never be triggered, so they just waste cycles.",bug,https://github.com/nasa/CF/issues/51
checking return codes in CFE,"For example, in CFE_SB_CreatePipe, it calls CFE_ES_GetAppID but does not confirm that it returned CFE_SUCCESS. Should it check that return value? (The AppID is zeroed by GetAppID.) This could create a situation where an app creates a lock (and somehow an error is generated) and the app could not later delete the pipe as it does not ""own"" it.

It would be good to scrub all CFE code, looking for calls to internal functions that do not verify the return.

Also, what should be the behavior when these calls do not return CFE_SUCCESS? Should they generate events (when EVS may not be functional) or syslog messages or OS_printf?",non-bug,https://github.com/nasa/cFE/issues/226
Add missing doxygen to new UT Assert API,"**Is your feature request related to a problem? Please describe.**
cFS documentation workflow is failing with some undocumented parameters:

```
/home/runner/work/cFS/cFS/osal/ut_assert/inc/utstubs.h:201: warning: The following parameters of UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre, int32 DeferCount, const char *TypeName) are not documented:
  parameter 'ValuePtr'
  parameter 'ValueSize'
  parameter 'ValueGenre'
  parameter 'DeferCount'
  parameter 'TypeName'
```

**Describe the solution you'd like**
Add documentation

**Additional context**
This unfortunately is not found by OSAL CI workflows, it was found by CFS workflows only after merging to main.  Potentially need to tweak workflows so this type of thing gets detected by the OSAL checks and/or a way to point the CFS workflow at the IC branch so it can be identified before merge.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/1361
Remove dependencies on deprecated elements,"Building with CFE_OMIT_DEPRECATED_6_6 fails, needs to be fixed.",bug,https://github.com/nasa/elf2cfetbl/issues/8
Report mission rev in startup and noop event string,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`EVS Port1 66/1/CF 20: CF Initialized. Version 3.0.99`

Every other app reports major.minor.rev.mission_rev (mission_rev missing above)

**Describe the solution you'd like**
Add mission rev to version reporting both for startup and noop.  May actually need to add `MISSION_REV` define (not found during quick inspection).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/CF/issues/217
Overrun warning false alarms in to_lab_app.c,"**Describe the bug**
Out-of-bounds access (OVERRUN) in to_lab_app.c

**Expected behavior**
Fix overruns

**Code snips**
Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 19 using argument 20UL.
https://github.com/nasa/to_lab/blob/0c6d816301ca943b2257c47c9af8695c2b47fa9f/fsw/src/to_lab_app.c#L168-L169

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 79 using argument 80UL.
https://github.com/nasa/to_lab/blob/0c6d816301ca943b2257c47c9af8695c2b47fa9f/fsw/src/to_lab_app.c#L399-L400

Overrunning array PipeName of 16 bytes by passing it to a function which accesses it at byte offset 19.
https://github.com/nasa/to_lab/blob/0c6d816301ca943b2257c47c9af8695c2b47fa9f/fsw/src/to_lab_app.c#L199

Overrunning array ToTlmPipeName of 16 bytes by passing it to a function which accesses it at byte offset 19.
https://github.com/nasa/to_lab/blob/0c6d816301ca943b2257c47c9af8695c2b47fa9f/fsw/src/to_lab_app.c#L210

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",non-bug,https://github.com/nasa/to_lab/issues/108
OS_FS_GetPhysDriveName should take a buffer size,"**Is your feature request related to a problem? Please describe.**
OS_FS_GetPhysDriveName assumes buffer size:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-filesys.c#L631-L632

**Describe the solution you'd like**
Update/replace with API that takes buffer size

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",non-bug,https://github.com/nasa/osal/issues/877
Should results tables be critical tables instead of stored to CDS,"The Watchpoint Results Table and Actionpoint Results Table are currently saved to the CDS on the housekeeping request interval (see functions  LC_UpdateTaskCDS and LC_HousekeepingReq).  Should these tables be critical tables instead?  

Imported from GSFCCFS-1103",non-bug,https://github.com/nasa/LC/issues/11
Expand cppcheck application,"The initial ""cppcheck"" configuration has been running for a while and looks both useful and stable, but is not using the full power of cppcheck.

I need to research the more advanced features of CPPCHECK and
how to make them useful in our environment.

This is likely to require someone (probably me) to evaluate each function exposed in each API for the documented intent of the function with respect to these features, and encode them in the `cppcheck.cfg` file.

This task may take a significant amount of time. In the interest of getting utility out of the effort quickly, I will break it up into smaller chunks that can be managed independently -- and once the ball gets rolling, with luck, allow more than one person to generate configuration file data.

My plan is to identify one CPPCHECK feature at a time, write a comment on this ticket about the feature, then open a separate ticket to track setting up that feature.
",non-bug,https://github.com/nasa/osal/issues/145
CFE_SB_CreatePipe should avoid nesting locks,"CFE_SB_CreatePipe calls GetAppID and GetAppName in a block of code that uses a lock to protect against concurrent modification. (Per recommendation from Joe) we should avoid nesting locks, so these calls should go outside the protected block.",bug,https://github.com/nasa/cFE/issues/224
Reorganize include files for CFE,"**Is your feature request related to a problem? Please describe.**
A recommendation for header file naming and scoping was documented in #2305 and PR #2306.  However, that PR was just a document, CFE itself does not (yet) adhere to this convention

**Describe the solution you'd like**
Split the current ""cfe_mission_cfg.h"" and ""cfe_platform_cfg.h"" into module-specific chunks (es, sb, evs, tbl, time).  And organize the names and contents of those chunks according to the documented convention in https://github.com/nasa/cFE/blob/main/docs/cFE%20Application%20Developers%20Guide.md#421-cfs-application-template

**Describe alternatives you've considered**
N/A

**Additional context**
This is important going forward as some files (in particular, those that define the interfaces) may be generated from a tool.  It is therefore important to separate the file content according to the convention.  This allows headers that are generated by the tool to be ""source-selected"" accordingly; we do not want to have those definitions mixed with other types of unrelated definitions.  

Currently, the CFE platform and mission config files contain a mixture of definitions - all of the core apps are mixed together,  and some of the definitions affect the interfaces, and some do not.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",non-bug,https://github.com/nasa/cFE/issues/2320
Combine mostly duplicated logic in `CFE_SB_BroadcastBufferToRoute`,"**Is your feature request related to a problem? Please describe.**
Duplicated logic:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L1650-L1667

**Describe the solution you'd like**
Factor out, make an else with shared logic and internal if for the unique logic

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",non-bug,https://github.com/nasa/cFE/issues/1460
Cast-align warning in sb_UT.c,"**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c: In function ‘Test_SendMsg_MaxMsgSizePlusOne_ZeroCopy’:
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c:3330:33: warning: cast increases required alignment of target type [-Wcast-align]
 3330 |                                 (CFE_SB_ZeroCopyHandle_t *) &TlmPkt);
      |                                 ^
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c: In function ‘Test_SendMsg_NoSubscribers_ZeroCopy’:
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c:3365:33: warning: cast increases required alignment of target type [-Wcast-align]
 3365 |                                 (CFE_SB_ZeroCopyHandle_t *) &TlmPkt);
```

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
Ubuntu 20.04 w/ cast-align=strict

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/911
Update startup processing to optionally use module suffix,"**Is your feature request related to a problem? Please describe.**
Startup scripts currently need to be modified across systems that have different module suffixes.

**Describe the solution you'd like**
#941 makes the module suffix available in software.  If there is no suffix specified in the startup script, append it (backwards compatible).  This would make startup scripts more portable.

**Describe alternatives you've considered**
None

**Additional context**
#583 - table implementation would also benefit from not needing the suffix

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/cFE/issues/981
Add PSP_Status_t and associated macros/wrappers/APIs,"**Is your feature request related to a problem? Please describe.**
Same justification as nasa/cFE#2110, supports clean handling/reporting of PSP status.

**Describe the solution you'd like**
Add the type and wrappers, note actual use/enforcement can be later but elements need to exist in Draco to maintain future compliance.

**Describe alternatives you've considered**
None.

**Additional context**
- nasa/cFE#2110
- nasa/osal#1112
- nasa/cFE#2010

**Requester Info**
Jacob Hageman - NASA/GSFC",non-bug,https://github.com/nasa/PSP/issues/345
"POSIX - Consider using ""SCHED_RR"" instead of ""SCHED_FIFO"" for realtime threads","Although OSAL defines 256 priority levels (0-255), most typical POSIX systems will have considerably fewer than 256 priority levels for task scheduling.  A typical Linux system offers priority levels ranging from 1 to 99.

To handle this, the POSIX layer combines multiple OSAL priorities into a single POSIX priority bucket, evenly spreading the OSAL range into the available POSIX priority range.

When combined with the SCHED_FIFO policy, this may have unintended consequences in the case that two OSAL tasks are created with priority values that cause them to be mapped into the same POSIX bucket.

To illustrate: consider two OSAL tasks, created with priority levels ""1"" and ""2"".  If both get mapped into the same bucket (likely) then the OS will treat them as equal for scheduling purposes.

Assuming the task at priority ""2"" becomes ready-to-run first, it can use the CPU indefinitely even if the task with priority ""1"" also becomes ready-to-run.  This is because task 1 will be behind task 2 in the FIFO queue.

Using the round-robin (RR) scheduling policy can be an improvement here, since the kernel will time-slice the two tasks rather than allowing task 2 to indefinitely preempt task 1.

Although there is no ideal solution due to the lower number of actual priority levels in the kernel, the RR policy is arguably a better choice here.







",non-bug,https://github.com/nasa/osal/issues/68
