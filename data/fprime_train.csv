title,body,label,url
A global-buffer-overflow error in BufferQueueTest.cpp line 126,"| | |
|:---|:---|
|**_F´ Version_**|1.5 |
|**_Affected Component_**| Os/Pthreads |
---
## Problem Description

A global-buffer-overflow error in [BufferQueueTest.cpp line 126](https://github.com/nasa/fprime/blob/ada6e424b813e6434284bbde9f785656a61c8539/Os/Pthreads/test/ut/BufferQueueTest.cpp#L126)

```
zyh@virtual:~/fprime$ ./build-fprime-automatic-native-ut/bin/Linux/Os_pthreads
Creating queue.
Test empty queue...
Passed.
Test full queue...
Pushing 0.
Pushing 1.
Pushing 2.
Pushing 3.
Pushing 4.
Passed.
Test weird size...
Passed.
Test pop...
Popping 5.
Popping 4.
Popping 3.
Popping 2.
Popping 1.
Passed.
Test priorities...
Pushing 'hello' at priority 9.
Pushing 'how are you' at priority 4.
Pushing 'pretty good' at priority 100.
Pushing 'cosmic bro' at priority 4.
Pushing 'kthxbye' at priority 9.
Popped 'pretty good' at priority 100. Expected 'pretty good' at priority 100.
Popped 'hello' at priority 9. Expected 'hello' at priority 9.
=================================================================
==17078==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000000550bc6 at pc 0x0000004b3f6b bp 0x7ffd804c4c90 sp 0x7ffd804c4440
READ of size 8 at 0x000000550bc6 thread T0
    #0 0x4b3f6a in __interceptor_memcmp.part.283 (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Os_pthreads+0x4b3f6a)
    #1 0x51d718 in main /home/zyh/fprime/Os/Pthreads/test/ut/BufferQueueTest.cpp:126:5
    #2 0x7f976cdadbf6 in __libc_start_main /build/glibc-S9d2JN/glibc-2.27/csu/../csu/libc-start.c:310
    #3 0x41ab89 in _start (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Os_pthreads+0x41ab89)

0x000000550bc6 is located 58 bytes to the left of global variable '<string literal>' defined in '/home/zyh/fprime/Os/Pthreads/test/ut/BufferQueueTest.cpp:98:43' (0x550c00) of size 12
  '<string literal>' is ascii string 'how are you'
0x000000550bc6 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/zyh/fprime/Os/Pthreads/test/ut/BufferQueueTest.cpp:98:34' (0x550bc0) of size 6
  '<string literal>' is ascii string 'hello'
SUMMARY: AddressSanitizer: global-buffer-overflow (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Os_pthreads+0x4b3f6a) in __interceptor_memcmp.part.283
Shadow bytes around the buggy address:
  0x0000800a2120: f9 f9 f9 f9 00 00 00 00 00 00 00 01 f9 f9 f9 f9
  0x0000800a2130: 00 00 05 f9 f9 f9 f9 f9 00 01 f9 f9 f9 f9 f9 f9
  0x0000800a2140: 00 00 04 f9 f9 f9 f9 f9 00 05 f9 f9 f9 f9 f9 f9
  0x0000800a2150: 00 00 04 f9 f9 f9 f9 f9 00 05 f9 f9 f9 f9 f9 f9
  0x0000800a2160: 00 05 f9 f9 f9 f9 f9 f9 00 00 04 f9 f9 f9 f9 f9
=>0x0000800a2170: 00 00 04 f9 f9 f9 f9 f9[06]f9 f9 f9 f9 f9 f9 f9
  0x0000800a2180: 00 04 f9 f9 f9 f9 f9 f9 00 04 f9 f9 f9 f9 f9 f9
  0x0000800a2190: 00 03 f9 f9 f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9
  0x0000800a21a0: 00 00 00 06 f9 f9 f9 f9 00 00 04 f9 f9 f9 f9 f9
  0x0000800a21b0: 00 00 00 00 00 00 00 03 f9 f9 f9 f9 00 04 f9 f9
  0x0000800a21c0: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==17078==ABORTING
```

## How to Reproduce

1. Compile unit test with ASAN
2. Run build-fprime-automatic-native-ut/bin/Linux/Os_pthreads
3. Program abort

## Expected Behavior

Run normally with ASAN.
",bug,https://github.com/nasa/fprime/issues/431
toString doesn't display the last item in a struct,"| | |
|:---|:---|
|**F` version v3.1.1**| |
|****|   |
---
## Problem Description

Files generated by fpp tools doesn't produce the format string correctly and so the last member of a string doesn't show up as expected. For example 

The take the following struct defined in fpp:
```fpp
  enum CMD_STATUS : U16 {
    NA = 0,
    ACK = 0x5,
    NOT_ACK = 0x6,
    BUSY = 0x7,
    NCE = 0x8,
    STACK_FULL = 0x9,
    TEMP_NOT_ACC = 0x10
  };

  constant ESUP_HEADER_ID = 0x50555345

# NOTE that in byte form it will be represented with LE
  struct EsupPacketHeader {
    HeaderId: U32
    ModuleId: U16
    DataLength: U16
    CmdStatus: CMD_STATUS
  } default {HeaderId = ESUP_HEADER_ID, CmdStatus=CMD_STATUS.NA}


    struct EsupStatusGet {
        Header: EsupPacketHeader
        CmdId: EsupCmdId
        TypeId: U16
        SystemState: U8 @< 1,2,3,4 (1 byte unsigned char value)
        StatusFlags: U8 @< 1 byte unsigned char value
        Reserved: U16 @< 2 byte unsigned short value
        CpuTemperature: F32 @< -40 to 125 °C (4 byte float value)
        FirmwareVersion: U32 @< firmware version (4 byte unsigned int value)
    } default {CmdId = EsupCmdId.ConfGet, TypeId = EsupCmdType.StatusRep}

```

I then go to print out the contents like so:

```cpp
static bool receiveEsupStatusResponse(int serialPort, EsupCmdId cmdId, boost::span<BYTE, GET_PADDED_SIZE(EsupStatusGet::SERIALIZED_SIZE)> txBuff) {
        // Wait for a reply
        EsupStatusGet cmdResult;

        size_t bytesRead = read(serialPort, txBuff.data(), txBuff.size());
        if (bytesRead > 0) {
            FW_CHECK(bytesRead <= txBuff.size(), ""Error deserializing response"", return false; );
            LE_ExternalDeSerializeBuffer responseBuff(txBuff.data(), bytesRead);
            cmdResult.deserialize(responseBuff);
            Fw::String ackString;
            cmdResult.toString(ackString);
            std::cout << std::string(ackString.toChar()) << std::endl;
        } else {
            std::cout << ""No reply received."" << std::endl;
        }

        return true;
  }
```

I get the following:

```bash
(Header = (HeaderId = 1347769157, ModuleId = 8203, DataLength = 0, CmdStatus = ), CmdId = ConfGet, TypeId = 0, SystemState = 162, StatusFlags = 187, Reserved = 53517, CpuTemperature = 0, FirmwareVersion = )
```

Where I would normally expect to see something like this (the actual values don't matter for these purposes just that there is something to print):

```bash
(Header = (HeaderId = 1347769157, ModuleId = 8203, DataLength = 0, CmdStatus = ACK ), CmdId = ConfGet, TypeId = 0, SystemState = 162, StatusFlags = 187, Reserved = 53517, CpuTemperature = 0, FirmwareVersion = 102444)
```

I've found this is consistent across pretty much all the fpp serializable objects and it really comes down to the last member of the struct doesn't have a format string generated along with it

So for example we see with the header type the following gets generated:

```c++
void EsupPacketHeader::toString(Fw::StringBase& text) const {

    static const char * formatString =
       ""(""
       ""HeaderId = %u, ""
       ""ModuleId = %u, ""
       ""DataLength = %u, ""
       ""CmdStatus = ""
       "")"";

    // declare strings to hold any serializable toString() arguments


    Fw::String CmdStatusStr;
    this->m_CmdStatus.toString(CmdStatusStr);

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void)snprintf(outputString,FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,formatString
       ,this->m_HeaderId
       ,this->m_ModuleId
       ,this->m_DataLength
       ,CmdStatusStr.toChar()
    );
    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate

    text = outputString;
}
```

With the CmdStatus missing the ""```%s```"".

I'm not really sure what the source of the error is since the xml seems to be fine:

```xml
<serializable namespace=""FlightComputer"" name=""EsupPacketHeader"">
  <import_enum_type>FlightComputer/TransmitterInterface/CMD_STATUSEnumAi.xml</import_enum_type>
  <members>
    <member name=""HeaderId"" type=""U32"" format=""%u"">
      <default>1347769157</default>
    </member>
    <member name=""ModuleId"" type=""U16"" format=""%u"">
      <default>0</default>
    </member>
    <member name=""DataLength"" type=""U16"" format=""%u"">
      <default>0</default>
    </member>
    <member name=""CmdStatus"" type=""FlightComputer::CMD_STATUS"" format=""%s"">
      <default>FlightComputer::CMD_STATUS::NA</default>
    </member>
  </members>
</serializable>
```
I took a look in array_cpp.py and array_cpp.tmpl but couldn't make sense of the issue there.

If I can get some help on this that'd be much appreciated.",bug,https://github.com/nasa/fprime/issues/2748
Install Upgraded PIP in new Project,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Older versions of PIP may pull in non-native tools package.  We should upgrade PIP during the new project setup.  Note: users who don't want this can still decline venv setup entirely.",non-bug,https://github.com/nasa/fprime/issues/2427
Single quote in project parent folder causes installation errors,"| | |
|:---|:---|
|**_F´ Version_**| v3.4.3 |
|**_Affected Component_**|  Installation/Project Setup |
---
## Problem Description

If you name the parent directory of your project such that it has a single quote in it, you'll run into an error when you try to run 'fprime-util generate' during basic project setup. 

## Context / Environment

```
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35
Python version: 3.10.12
CMake version: 3.22.1
Pip version: 24.0
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

## How to Reproduce

1.  Create a parent directory containing a single quote (For instance, ""F'"")
2.  Follow the basic project setup guide located here: https://fprime-community.github.io/fprime-tutorial-hello-world/docs/NewProject.html 
3. Once you hit 'fprime-util generate', you should soon see an error about an unterminated quote from one of the fprime dependencies. 

## Expected Behavior

Ideally, you'd have a project set up properly in your virtual environment.
",bug,https://github.com/nasa/fprime/issues/2558
Failed to build component,"| | |
|:---|:---|
|**_F´ Version_**| 3.2.0 |
|**_Affected Component_**| n/a |
---
## Problem Description

During the deployment step in the tutorial, I got the following error:
```
/home/fox/fprime/MyProject/MyDeployment/Top/instances.fpp: 85.17
  instance fox: Components.MyComponent base id 0x0F00 \
                ^
error: undefined symbol Components
gmake[3]: *** [MyDeployment/Top/CMakeFiles/MyDeployment_Top.dir/build.make:112: MyDeployment/Top/MyDeploymentTopologyAppAi.xml]
Error 1
gmake[2]: *** [CMakeFiles/Makefile2:8240: MyDeployment/Top/CMakeFiles/MyDeployment_Top.dir/all] Error 2
gmake[1]: *** [CMakeFiles/Makefile2:2002: CMakeFiles/MyDeployment.dir/rule] Error 2
gmake: *** [Makefile:195: MyDeployment] Error 2
[ERROR] CMake erred with return code 2
```

However, the directory, `Components`, was presented in the project's root directory.

A workaround for this is to append the following to `CMakeLists.txt` in the deployment directory (`MyDeployment/` in my case):
```
add_fprime_subdirectory(""${CMAKE_CURRENT_LIST_DIR}/../Components/MyComponent"")
```

I guess command `fprime-util new --deployment` should populate the `CMakeLists.txt` properly, but for some reason it didn't. Any thoughts?

Thanks!

## How to Reproduce

Follow the [official tutorial](https://fprime-community.github.io/fprime-tutorial-hello-world).

## Expected Behavior

A Successful build.
",bug,https://github.com/nasa/fprime/issues/2156
fprime-gds: default file downlink directory can overwrite files,"| | |
|:---|:---|
|**_F´ Version_**|[v3.4.3](https://github.com/fprime-community/fprime-gds/releases/tag/v3.4.3) |
|**_Affected Component_**| n/a |
---
## Feature Description

Have GDS created a time-tag directory for file downlinks.

Make the default be `logs/<time tag>/fprime-downlink` to match telemetry and events.

Also, make a separate argument for uplink and downlink. It makes sense to automatically separate downlinked files, but uplink may wish to be in a common store.

## Rationale

The default `/tmp/username` (or even overridden with `--file-storage-directory`) directory for file downlinks can cause new instances to overwrite older files, or cause parallel instances to clobber each other.
",non-bug,https://github.com/nasa/fprime/issues/2657
Update FileDownlink to report file progress,"| | |
|:---|:---|
|**_F´ Version_**|v3.4.3 |
|**_Affected Component_**| `Svc/FileDownlink` |
---
## Feature Description

`Svc/FileDownlink` currently only reports completion status back to the sender only when the file is complete. This will make re-transmitting data products inefficient since the Data Catalog has no idea how far partial transmits made it before the link dropped or the system was powered down. 

This feature would report partial progress back to DP Catalog can restart transmits.

## Rationale

Make data product downlink management more efficient.
",non-bug,https://github.com/nasa/fprime/issues/2833
Add human-readable prompt to cookiecutter usages,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

I opened a feature request (https://github.com/cookiecutter/cookiecutter/issues/1835) to cookiecutter a while back to add prompts/descriptions to fields to have a better user experience. And apparently [they went with it](https://github.com/cookiecutter/cookiecutter/pull/1898)! 🎉 
Released in https://github.com/cookiecutter/cookiecutter/releases/tag/2.2.3 - we should try to upgrade and add better prompts.

Once we add that in, our tutorials should be updated to reflect those better prompts. Shouldn't be too much work.

## Rationale

Better user experience for `fprime-util new ...`
",non-bug,https://github.com/nasa/fprime/issues/2130
seq_gen : Error in example .seq file,"When using [seq_gen.py](https://github.com/nasa/fprime/blob/devel/Gds/src/fprime_gds/common/tools/seqgen.py) the [cmd_xml_loader](https://github.com/nasa/fprime/blob/devel/Gds/src/fprime_gds/common/loaders/cmd_xml_loader.py) returns ""components.mnemonic"". If mnemonic is given without component name in .seq file, it will fail ([here](https://github.com/nasa/fprime/blob/22a032e5f98bbe4c91a91b88ec756aa567db7588/Gds/src/fprime_gds/common/tools/seqgen.py#L79)) binary generation when trying to find command in xml dictonary.

https://github.com/nasa/fprime/blob/22a032e5f98bbe4c91a91b88ec756aa567db7588/Gds/examples/simple_sequence.seq#L9",bug,https://github.com/nasa/fprime/issues/273
Hardcoded buffer size in TcpClient/TcpDriver/Udp,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

See https://github.com/nasa/fprime/blob/da4b1daae77f46a940733fbb20a4be8efd3a89b8/Drv/TcpClient/TcpClientComponentImpl.cpp#L50-L51

We should do like UARTDriver (see [here](https://github.com/nasa/fprime/blob/da4b1daae77f46a940733fbb20a4be8efd3a89b8/Drv/LinuxUartDriver/LinuxUartDriver.cpp#L46-L47)) and configure the size at configure() time so that it can be configured for each instance in the topology. Set a default size of 1024 so that it doesn't break any existing code.",non-bug,https://github.com/nasa/fprime/issues/2074
version.hpp and Source Releases,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We should allow version to work on downloaded (not cloned) git releases.",non-bug,https://github.com/nasa/fprime/issues/1252
Command-line MathOp port creation in Math-Component tutorial fails,"| | |
|:---|:---|
|**_F´ Version_**|3.2.0 |
|**_Affected Component_**| CLI Port Creation  |
---
## Problem Description
Step 3.1 of the math component tutorial fails when using the command-line port creation tool.

## How to Reproduce

$ fprime-util new --port
Port Name [ExamplePort]: MathOp
Short Description [Example usage of port]: Port for math operations
Directory Name [.]: MathPorts
Port Namespace [Ref]:
Would you like to add an argument?: y
Argument name: val1
Argument type (Valid primitive types are: I8, I16, I32, U8, U16, U32, F32, F64, NATIVE_INT_TYPE, NATIVE_UNIT_TYPE, and POINTER_CAST. You may also use your own user-defined types): F32
Short description of argument: First operand
Would you like to add another argument?: y
Argument name: op
Argument type (Valid primitive types are: I8, I16, I32, U8, U16, U32, F32, F64, NATIVE_INT_TYPE, NATIVE_UNIT_TYPE, and POINTER_CAST. You may also use your own user-defined types): MathOp
Short description of argument: Operation
Would you like to add another argument?: y
Argument name: val2
Argument type (Valid primitive types are: I8, I16, I32, U8, U16, U32, F32, F64, NATIVE_INT_TYPE, NATIVE_UNIT_TYPE, and POINTER_CAST. You may also use your own user-defined types): F32
Short description of argument: Second operand
Would you like to add another argument?: n
...
[ERROR] Failed to create port. CMake erred with return code 2

## Expected Behavior

A successful port creation. 

## Note
The port does become operational when fpp-from-xml is used on the output
",bug,https://github.com/nasa/fprime/issues/2019
Improve path names of config headers,"@LeStarch and I have discussed the following issue with the path names of header files included from `config`:

* In a typical project, many headers in `config` exist in two versions: the default one in `[fprime root]/config` and the project-specific one in `[project-root]/config`.
* The build system includes only one of `[fprime root]/config` and `[project root]/config` in the list of include header paths. The idea is that for any header `H.hpp`, only one of `[fprime root]/config/H.hpp` and `[project root]/config/H.hpp` is included, and this choice is made consistently everywhere.
* However, if one writes `#include ""config/H.hpp""`, then there is a **danger** that the wrong header will be picked up, because `[fprime root]` and `[project root]` are both in the list of include paths.
* The current approach is to write `#include <H.hpp>` when `H.hpp` is a manually written file (so that there's a corresponding version in `[fprime root]/config`). For example, we write `#include <FpConfig.hpp>` and not `#include ""config/FpConfig.hpp""`. However, (1) this approach is brittle, because the compiler cannot enforce it; and (2) for auto-generated files like `FppConstantsAc.hpp` we need to write `#include ""config/FppConstantsAc.hpp""` to distinguish files in located in `config` from files located elsewhere.

A better solution would be to allow and require the spelling `#include ""config/H.hpp""` everywhere, and have the build system ensure that this spelling specifies an unambiguous location. We could do this by putting `config` in another directory, and having the build system place that directory, instead of `config`, in the list of include paths.

Here is the suggestion from @LeStarch:

>I would suggest for F´:
 >   default/config/….headers…
 >
>I would suggest for projects:
>    project/config/….headers…

",non-bug,https://github.com/nasa/fprime/issues/2640
"Clearer Terminal Messages for ""fprime-gds"" and ""nodemon [visualizer]"" Commands","| | |
|:---|:---|
|**_F´ Version_**| 3.2.0
|**_Affected Component_**|  GDS and visualizer activation
---
## Feature Description

Add a link to http://localhost:5000 as part of the message emitted in the terminal when `fprime-gds` is successfully run; add a note that the user can quit out using `Ctrl-C` as part of the message emitted when `nodemon [fprime-visual-path]/server/index.js ./.fpv-env` does the same.

## Rationale

I've noticed as I've worked with F' projects and tools more that `fprime-gds` tells the user that they can shut down the system by entering `Ctrl-C`, but that it doesn't give a link to the browser page where the GDS is running. I know that for some people it starts automatically; however, this has never happened for me personally, and I feel it would be a simple and worthwhile inclusion to the terminal message which accompanies a successful execution of the command.
Inversely, running the command to boot up the fprime visualizer gives a link to the browser page where it can be used, but does not inform the user of how to close out of said visualizer (using `Ctrl-C`). This isn't a huge deal, as `Ctrl-C` is a reasonably standard quit command from what I can tell, but it would help some newer users and make the two tools more consistent. 
I'll attach two screenshots below from the terminal--depicting a terminal in which I launched both the GDS and Visualizer earlier today in a recently-created project--for reference.

<img width=""840"" alt=""Screenshot 2023-07-21 101058"" src=""https://github.com/nasa/fprime/assets/116765885/cc25a328-073d-4411-9431-649cc704ba82"">

<img width=""850"" alt=""Screenshot 2023-07-21 101224"" src=""https://github.com/nasa/fprime/assets/116765885/c36e1ddc-c4a9-4ae5-a845-c43078bb1180"">",non-bug,https://github.com/nasa/fprime/issues/2151
GDS notification functionality,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| GDS |
---
## Feature Description

Add a functionality to display notifications in the F´ GDS. These could be displayed in the UI when specific events happen (e.g. failed to open Downlink storage directory, etc...).

## Rationale

Discussed when reviewing https://github.com/nasa/fprime/issues/1970. Instead of crashing the GDS when downlink is not possible, send a notification. 
",non-bug,https://github.com/nasa/fprime/issues/2373
Resolve Warnings for `-Wshadow`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Many bits of code in F´ produce warnings when compiling with `-Wshadow`.  We should fix these warnings.  The style guidelines inform us that recommended practice is to use `m_` prefixes for members to avoid this collision.

## Rationale

Code quality.",non-bug,https://github.com/nasa/fprime/issues/2491
Adding deregCommands option to CmdDispatcher,"| | |
|:---|:---|
|**_F´ Version_**| 2.0 |
|**_Affected Component_**|  Svc/CmdDispatcher |
---
## Feature Description

F Prime CommandDispacher currently does not have an option to deregister commands. This causes a duplicate command register segment fault crash when a client disconnects and reconnects back to the server.
To better understand the situation, let’s assume we have the following configuration:

![image](https://user-images.githubusercontent.com/35859004/116198539-e9ccc000-a6ea-11eb-83f2-39b343b505c6.png)

`Ref` loads before `Backplane` and listens on port `4555`. When `Backplane` loads, it connects to `Ref` as a client, and all `Backplane` CMDs get registered to `Ref` `CmdDispacher` table.
Now the issue is when `Backplane` drops, its CMDs still stay registered in the `Ref` `CmdDispacher` table. When `Backplane` tries to reconnect back to `Ref` since all its CMDs are still registered in `Ref`, it causes FW_ASSERT due to duplicate opcode, causing `Ref` to crash with segment fault error.

## Rationale

It might be a good idea to add `deregCommands` (an opposite of `regCommands`) that could be used to deregister all the CMDs when a client gracefully goes down. This will allow the client to reconnect back to the server without causing duplicate opcode registration issue.

These are two ways that come to my mind to resolve this issue:

1. Check for OpCode before registering it. This could be done by the following to `compCmdReg_handler` shown below:

https://github.com/nasa/fprime/blob/e165c914b0d0240eba8164c52f8856ce90bee3dc/Svc/CmdDispatcher/CommandDispatcherImpl.cpp#L34-L49

Add this to line 35 above
```c++
// search for opcode in dispatch table
        for (U32 entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); entry++) {
            if ((this->m_entryTable[entry].used) and (opCode == this->m_entryTable[entry].opcode)) {
                return;
            }
        }

```

2. Add `deregCommands()` to Svc/CmdDispatcher. This could be achieved by the following steps:

a) 
In 
https://github.com/nasa/fprime/blob/e165c914b0d0240eba8164c52f8856ce90bee3dc/Svc/CmdDispatcher/CommandDispatcherComponentAi.xml#L17-L21

Add `compCmdDereg` port and `OpCodeDeregistered` event:

```xml
        <port name=""compCmdDereg"" data_type=""Fw::CmdReg"" kind=""guarded_input"" max_number = ""$CmdDispatcherComponentCommandPorts"">
            <comment>
            Command Deregistration Port. max_number should match dispatch port.
            </comment>
        </port>

...

        <event id=""2"" name=""OpCodeDeregistered"" severity=""DIAGNOSTIC"" format_string = ""Opcode 0x%04X deregistered to port %d slot %d"" >
            <comment>
            Op code deregistered event
            </comment>
            <args>
                <arg name=""Opcode"" type=""U32"">
                    <comment>The opcode to deregister</comment>
                </arg>          
                <arg name=""port"" type=""I32"">
                    <comment>The deregister port</comment>
                </arg>          
                <arg name=""slot"" type=""I32"">
                    <comment>The dispatch slot it was freed</comment>
                </arg>          
            </args>
        </event>
```

b)
Update [CommandDispatcherImpl.cpp](https://github.com/nasa/fprime/blob/devel/Svc/CmdDispatcher/CommandDispatcherImpl.cpp) to handle the requests.

c)
Update [Component Autocoder](https://github.com/nasa/fprime/blob/devel/Autocoders/Python/src/fprime_ac/generators/templates/component/cpp.tmpl) template to autogenerate `deregCommnds` for each component.",non-bug,https://github.com/nasa/fprime/issues/502
Updates to support old-style parallel projects,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

1. in include of FPrime.cmake set FPRIME_CURRENT_MODULE to PROJECT_NAME
2. Consider adding combined deployment and project to fprime-util new
3. Add notes that in order to run `fprime-util new deployment`, a `CMakeLists.mk` must exist in the root of the repo",bug,https://github.com/nasa/fprime/issues/2680
ini-to-stdio.py Returns Real Paths,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`ini-to-stdio.py` returns real paths. However, this causes issues when building on symlinked paths as CMake does not deal in realpaths.",bug,https://github.com/nasa/fprime/issues/2450
Implement core Class 1 CFDP procedures without transaction closure,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Implement the CFDP Protocol for Class 1 file delivery from the CFDP Recommended Standard. This would introduce the core functionality for unreliable file transfers.

Recommended Standard:
https://public.ccsds.org/Pubs/727x0b5.pdf

## Rationale

Supports https://github.com/nasa/fprime/issues/2768.
",non-bug,https://github.com/nasa/fprime/issues/2798
Script to generate parameter commands,"| | |
|:---|:---|
|**_F´ Version_**|3.x |
|**_Affected Component_**| All |
---
## Feature Description

Add script to generate parameter setting sequence. The script can use default value where specified, and put error-causing argument in one where they are not to force the user to fill them in. The script can use the XML dictionary.

## Rationale

An automated way to intialize parameters without requiring the user to go component by component and manually build a list.
",non-bug,https://github.com/nasa/fprime/issues/1751
"UT Autocoder Requires Events, Channels, or Commands When using the Associated Role Ports","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Define role ports for commands, or telemetry, or events, or any combination therein....but fail to define commands or events or telemetry.  Then generate and build the UTs.  This results in a linking error.

**e.g.** just role port definitions.
```
    @ Port for receiving commands
    command recv port CmdDisp

    @ Port for sending command registration requests
    command reg port CmdReg

    @ Port for sending command response
    command resp port CmdResponseOut

    @ Port for emitting events
    event port Log

    @ Port for emitting text events
    text event port LogText

    @ Port for getting the time
    time get port Time

    @ Port for sending telemetry out
    telemetry port TlmOut
```",bug,https://github.com/nasa/fprime/issues/1206
Update Seqgen to support complex commanding,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Update GDS Seqgen to support complex types commanding




",non-bug,https://github.com/nasa/fprime/issues/2157
Refactor Os::IntervalTimer into CMake Selection,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description


- [ ] Is IntervalTimer needed as independent from Svc time code?  Do we need an Os::Time implementation too?
- [ ] Refactor Os::IntervalTimer into the Interface, Os::IntervalTimer, and Implementation classes (following pattern of Os::File)
- [ ] Implement Posix implementation
- [ ] Implement Stub implementation
- [ ] Implement Test stub implementation
- [ ] Build common rules-based tests
- [ ] Build specific posix tests
- [ ] Build stub interface tests
- [ ] Setup default posix implementation for Posix platforms
- [ ] Document
",non-bug,https://github.com/nasa/fprime/issues/2726
Improvement of NMEA message parsing on GPS tutorial,"| | |
|:---|:---|
|**_F´ Version_**| 2.0.0|
|**_Affected Component_**| gpscomponentimpl.cpp |
---
## Feature Description

Minor improvement can be added for nmea parsing message to include lat long data from GLONASS or other satellite. In other word, NMEA parsing part of the component's code should include message starting with ""$GLGGA"" and ""$GNGGA"" as well. 

## Rationale
I imagined this is probably going to be in a very low priority but Include this will ensure more data is received and processed.  
",non-bug,https://github.com/nasa/fprime/issues/950
Color-coding interlaced Events in the API Log,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
One feature that wasn't completed this summer was to color-code interlaced event logs based on severity. Presently, interlacing events are implemented by making the API a consumer of the event decoder in the GDS and then filtering events. Modifying the color of these log messages can be done [here](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/testing_fw/api.py#L1258).
",non-bug,https://github.com/nasa/fprime/issues/2649
"F´ GDS Error in Error ""TypeError: sequence item 0: expected str instance, PosixPath found"" ","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

When an error arises within the application running code, it triggers another error `TypeError: sequence item 0: expected str instance, PosixPath found` that is reported.

This is caused by not converting `PosixPath` to `str` in our error reporting code.",bug,https://github.com/nasa/fprime/issues/2669
Update Svc::BufferManager data structures to align with allocation,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0 |
|**_Affected Component_**| `Svc::BufferManager`` |
---
## Feature Description

Reorganize internal data structures to honor alignment.

## Rationale

The data structures tracking memory buffers in `Svc::BufferManager` look like this:

```c++
        struct AllocatedBuffer
        {
            Fw::Buffer buff; //!< Buffer class to give to user
            U8 *memory;      //!< pointer to memory buffer
            U32 size;        //!< size of the buffer
            bool allocated;  //!< this buffer has been allocated
        };
```

The issue is that if a user wants to get [aligned](https://github.com/nasa/fprime/pull/1348) buffers, the `memory` member is not aligned. 

The proposal would be to reorganize the data structures so that the memory pointers retain the alignment. This could be done by placing the `AllocatedBuffer` structs at the end of the overall allocated buffer.",non-bug,https://github.com/nasa/fprime/issues/1349
Fix Bad Settings.ini Overlay,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

This was implemented incorrectly
",bug,https://github.com/nasa/fprime/issues/1461
PWM manager ,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a PWM manager for the specific rotor that we are using in the system reference. The manager should allow the rotor control application to pass angle arguments.


",non-bug,https://github.com/nasa/fprime/issues/2117
Integration Test API: Adding CSV Logger to Test Logger,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
Recommendation for adding a csv logger to the TestLogger class:

1. Set up the csv log file in the constructor [here](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/logger/test_logger.py#L49).
2. Add a `_log_csv_row()` helper along similar lines to the `_get_ws_row()` helper [here](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/logger/test_logger.py#L159)
3. Log the start time at the top of the file like the excel output does [here](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/logger/test_logger.py#L85).
4. Log the column headers to csv like the excel does [here](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/logger/test_logger.py#L88).
5. Log messages in the lock block [here](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/logger/test_logger.py#L119).
",bug,https://github.com/nasa/fprime/issues/2644
FileUplink packet sequence repeat and CRC,"| | |
|:---|:---|
|**_F´ Version_**| 3.0 |
|**_Affected Component_**| Svc/FileUplink |
---
## Feature Description

Add duplicate packet detection based on sequence number and don't add to CRC computation

## Rationale

If the radio link is marginal, a radio can do a retry and send the same packet. In that case, you get the following warning:

```
FileUplink_PacketOutOfOrder: Received packet 342 after packet 342
```

The repeated packet still gets added to the CRC computation, so even with a successful retry, you get this warning at the end:

```
FileUplink_BadChecksum: Bad checksum value during receipt of file XXXXX: computed 0x6A4F6972, read 0x92A51AAA
```

The update would to be to not update the CRC only in the case of a repeated packet sequence number. This wouldn't be to try to track all cases of dropped and retried packets.",non-bug,https://github.com/nasa/fprime/issues/1378
`fprime-util` Has Erroneous Time Updates,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

There is an edge case bug in fprime-util's time type.  We hit this bug here:

https://github.com/fprime-community/fprime-gds/actions/runs/3491579460/jobs/5844385947

It has a 1/100000 change of failure.",bug,https://github.com/nasa/fprime/issues/1774
Cleanup System Reference Documentation,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Update documentation for cross compilation and integration
",non-bug,https://github.com/nasa/fprime/issues/2105
FIT Framework Assumes CommandDispatcher Name,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The FIT framework assumes that the command dispatcher name is `cmdDisp`.  This does not work in all cases.

## How to Reproduce

1. Name the `cmdDisp` component instance `cmdDisp2`
2. Use `send_and_assert_command`
3. Observe it will never confirm Events

## Expected Behavior

This should either detect command dispatchers, or allow overriding of the name.",bug,https://github.com/nasa/fprime/issues/2442
"`fprime-util` Crashes on ""Unknown Bytes""","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`fprime-util` will crash on unknown bytes.

```
[ERROR] 'utf-8' codec can't decode byte 0xb0 in position 127: invalid start byte
```

",bug,https://github.com/nasa/fprime/issues/2841
Errors in User Guide ,"| | |
|:---|:---|
|**_F´ Version_**| devel|
|**_Affected Component_**|  /docs/UserGuide/user/proj-dep.md |
---
## Problem Description

Found two sentences that are missing words. 

## How to Reproduce

1. Line 33:36 

> The Mars
Helicopter is the project, but has two deployments: one designated for the helicopter, and one designated for the base
station allowing the.

2. Line 60 and 61

> Projects contain one or more deployments that are closely related, as discussed above, while deployments contain a
> that represents the design of the system including, ports, and components needed for the specific use of F´.

## Expected Behavior

For the base station allowing the ??
...while deployments contain a ?? that represents the design...
",bug,https://github.com/nasa/fprime/issues/957
Update Schematron check for active components,"| | |
|:---|:---|
|**_F´ Version_**| v2.0.0 |
|**_Affected Component_**|   |
---
## Problem Description

The schematron check fails for the case where there is an active component with only a sync port but with async commands.

## How to Reproduce

1. Create an active component with 1 async command and one sync port
2. Compile XML

## Expected Behavior

This is a valid combination, so the schematron check should pass.
",bug,https://github.com/nasa/fprime/issues/764
Improved template for command handlers,"| | |
|:---|:---|
|**_F´ Version_**|3.4.3 |
|**_Affected Component_**| fprime-util |
---
## Feature Description

When ""fprime-util impl"" generates skeleton command-handling functions, the body of the function looks like this:

    // TODO
    this->cmdResponse_out(opCode, cmdSeq, Fw::CmdResponse::OK);

If it were me, I'd return an error response after generating an EVR with the function's name and a statement that it is not yet implemented.

## Rationale

This makes it easier not to overlook functions that have been generated and built into a large system but which have not yet been implemented. I've done this for years by hand for systems that I've written, and I find it helpful.

If adding an EVR/event is too difficult, at the very least I think you should change it to reporting an error response, not OK. After all, if it's not yet implemented, it can't be correct.",non-bug,https://github.com/nasa/fprime/issues/2828
Add Hello World Sample Deployment to CI,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a sample deployment for hello-world to CI.  May consider moving tutorial text to hello-world as was done with LED Blinker.

Depends on #2000 ",non-bug,https://github.com/nasa/fprime/issues/2001
FPP Model Check for passive components with commands,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Have model check and warn when a passive component has commands and ports that are not guarded.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/2867
F´ Builds Don't Detect Correctly,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

If a user does the following:

```
git clone https://github.com/nasa/fprime.git fprime-2
cd fprime-2
fprime-util generate
```

The system fails. 

https://github.com/nasa/fprime-tools/blob/c15253c98ffc816bcca24db43f24c4c070b7c5ff/src/fprime/fbuild/settings.py#L26-L38

That code makes the assumption that fprime is in a folder called ""fprime"" and fails otherwise.


## Context / Environment

Execute `fprime-util version-check` and share the output.

```
Operating System: Darwin
CPU Architecture: arm64
Platform: macOS-14.4.1-arm64-arm-64bit
Python version: 3.11.0
CMake version: 3.29.0
Pip version: 22.3
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.4a1
    fprime-fpp-*==2.1.0a5
```

## How to Reproduce

See description.

## Expected Behavior

This should work in the following cases:

1. `fprime` named something else
2. `fprime` parallel to another `fprime` checkout

Here is what it should do:

1. Check current directory for `cmake/FPrime.cmake`.  If this exists, then the current directory is ""fprime"" (e.g. framework_path)
2. Else:
  1. Glob match  `*/cmake/FPrime.cmake`
  2. If multiple hits: produce error.  Must manually specify `framework_path`
  3. If one match: this is ""fprime""
  4. If zero matches: cd to parent and recurse from 1 above

",bug,https://github.com/nasa/fprime/issues/2685
FPP Special Characters,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0 |
|**_Affected Component_**| FPP   |
---
## Problem Description

When putting a description comment in the fpp like ""@ \<TBD CMD HERE\>"", the translator doesn't handle the xml special characters and produces a somewhere cryptic error message (I removed my project specific paths from this error message)


```
Specification mandates value for attribute CMD, line 557, column 165 (.xml, line 557)
Traceback (most recent call last):
  File ""/fprime/Autocoders/Python/bin/codegen.py"", line 1332, in <module>
gmake[3]: *** build.make:74:Ac.hpp] Error 255
gmake[2]: *** [CMakeFiles/Makefile2:12385: /CMakeFiles/ .dir/all] Error 2
gmake[1]: *** [CMakeFiles/Makefile2:4386: CMakeFiles/.dir/rule] Error 2
gmake: *** [Makefile:196:] Error 2
    main()
  File ""/fprime/Autocoders/Python/bin/codegen.py"", line 1253, in main
    xml_type = XmlParser.XmlParser(xml_filename)()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/fprime/Autocoders/Python/src/fprime_ac/parsers/XmlParser.py"", line 45, in __init__
    element_tree = etree.parse(fd)
                   ^^^^^^^^^^^^^^^
  File ""src/lxml/etree.pyx"", line 3541, in lxml.etree.parse
  File ""src/lxml/parser.pxi"", line 1900, in lxml.etree._parseDocument
  File ""src/lxml/parser.pxi"", line 1920, in lxml.etree._parseFilelikeDocument
  File ""src/lxml/parser.pxi"", line 1814, in lxml.etree._parseDocFromFilelike
  File ""src/lxml/parser.pxi"", line 1204, in lxml.etree._BaseParser._parseDocFromFilelike
  File ""src/lxml/parser.pxi"", line 618, in lxml.etree._ParserContext._handleParseResultDoc
  File ""src/lxml/parser.pxi"", line 728, in lxml.etree._handleParseResult
  File ""src/lxml/parser.pxi"", line 657, in lxml.etree._raiseParseError
  File "".xml"", line 557
lxml.etree.XMLSyntaxError: Specification mandates value for attribute CMD, line 557, column 165
[ERROR] CMake erred with return code 2
```

## Context / Environment

Execute `fprime-util version-check` and share the output.

Well, my version of fprime doesn't even have that command :). But it's fprime 3.0.0-cadre

## How to Reproduce

1. Place a comment in an fpp with the < > special characters
2. Build something that includes that fpp

## Expected Behavior

No errors should occur due to a comment/description. 

Please let me know if this has been fixed in newer fprime and I'll close this issue. Or if this is expected behavior and needs to be escaped by the user
",bug,https://github.com/nasa/fprime/issues/2865
Settings.ini Change Detection,"| | |
|:---|:---|
|**_F´ Version_**| 1.5.3 |
|**_Affected Component_**|  fprime-util |
---
## Feature Description

The settings.ini file (should it change) should invalidate the CMAKE cache as its itmes are critical.

## Rationale

A settings.ini change is the only thing that should force a new `fprime-util generate` command.
",non-bug,https://github.com/nasa/fprime/issues/517
GDS won't pass an array as a value for a command,"| | |
|:---|:---|
|**_F´ Version_**| 3.3.2 |
|**_Affected Component_**|  fprime-gds |
---
## Problem Description

If a custom array type is defined (i.e. an array of 2 F32's) the gds won't accept the input. If a command is defined such that it only has one input, the array of 2 F32's, then the system is capable of building everything and starting the gds. When attempting to send that defined command, after pressing ""send command"" the gds simply displays ""unknown error"" under the ""mnemonic"" drop down menu. 

In the console of the web-browser developer tools, an error is sent with the message ""Failed to validate all arguments"" without any further context or information.

There are no issues with any other commands. 

## How to Reproduce

1. Create a custom data type (the one I did was `arrType = [4] F32`)
2. In a new component define an asynchronous command that takes the `arrType` as a value (what I did was `async command TEST_COMMAND(Vals: arrType @< just a test of the type)`
3. The command handler can be the simple auto coded one. It doesn't need to do anything (this was mine: 
`void <component> :: TEST_COMMAND_cmdHandler( const FwOpcodeType opCode, const U32 cmdSeq, Components::arrType vals ) {
    // Release Event about data being sent to process
    this->log_ACTIVITY_LO_JUST_ANNOUNCE_AN_EVENT();
    // TODO
    this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
  }`
4. Start the `fprime-gds` in the normal way
5. Click on the `<component>.TEST_COMMAND` option in the mnemonic drop down
6. Fill out the fields and send the command
7. The described error should appear

## Expected Behavior

The expected behavior is announces the given event. The event does nothing other than post an event to the event's tab that says ""it worked."" 

In the long term sense, it should provide the function with the data provided in the command array as a series of F32s so that the function can manipulate it at will. 
",bug,https://github.com/nasa/fprime/issues/2273
Arm Linux instructions Out-of-Date,Arm Linux instructions don't reflect the new `build-artifacts` structure (toolchain/deployment).,bug,https://github.com/nasa/fprime/issues/2248
Os unit tests fail with parallel build,"| | |
|:---|:---|
|**_F´ Version_**| Head of `devel`, commit 58c21418aac3162156299ad6e0153a1e94288b45|
|**_Affected Component_**| `Os`  |
|**_Platform_**| Mac OS X, Intel Mac |
---
## Problem Description

When running `fprime-util check --jobs 4`, one of the tests reports it can't find a file and fails.

## Example Output

```
test 4
    Start 4: StubFileTest
Could not find executable /Users/bocchino/JPL/Tools/FPrime/bocchino/fprime/build-fprime-automatic-native-ut/bin/Darwin/StubFileTest
```

## How to Reproduce

1. Run `fprime-util check --jobs 4` in the `Os` directory.
",bug,https://github.com/nasa/fprime/issues/2552
fprime-util generate fails with cmake 3.16.3,"| | |
|:---|:---|
|**_F´ Version_**| development |
|**_Affected Component_**| cmake |
---
## Problem Description

Fprime currently fails to generate with cmake version 3.16.3

It seems like it has been introduced with https://github.com/nasa/fprime/pull/2502

An option might be to change the minimum cmake version to a higher version, to revert the changes from the mentioned pull request or adapt the cmake file to be compatible with older versions.

```
root@9712ae2c742b:/home/fprime# fprime-util generate
[WARNING] /home/fprime/settings.ini does not exist
[INFO] Generating build directory at: /home/fprime/build-fprime-automatic-native
[INFO] Using toolchain file None for platform default
-- The C compiler identification is GNU 9.4.0
-- The CXX compiler identification is GNU 9.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- [WARNING] /home/fprime/settings.ini does not exist
[WARNING] /home/fprime/settings.ini does not exist
FPRIME_FRAMEWORK_PATH=/home/fprime
-- [python3] python3 found at: /usr/bin/python3
-- [fpp-tools] fpp-depend found at: /usr/local/bin/fpp-depend
-- [fpp-tools] fpp-to-xml found at: /usr/local/bin/fpp-to-xml
-- [fpp-tools] fpp-to-cpp found at: /usr/local/bin/fpp-to-cpp
-- [fpp-tools] fpp-locate-defs found at: /usr/local/bin/fpp-locate-defs
-- [FPRIME] Module locations: /home/fprime
-- [FPRIME] Configuration module: /home/fprime/config
-- [FPRIME] Installation directory: /home/fprime/build-artifacts
-- Target build toolchain/platform: Linux/Linux
-- Including /home/fprime/cmake/platform/Linux.cmake
-- Requiring thread library
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- [sub-build] Performing sub-build: info-cache
-- [sub-build] Generating: info-cache with target/fpp_locs;target/fpp_depend
CMake Error at cmake/utilities.cmake:586 (message):
  [sub-build] Failed to generate: info-cache:

  CMake Error at cmake/utilities.cmake:604 (get_property):

    INTERFACE_LIBRARY targets may only have whitelisted properties.  The
    property ""IMPLEMENTORS"" is not allowed.

  Call Stack (most recent call first):

    cmake/API.cmake:619 (append_list_property)
    Os/Stub/CMakeLists.txt:14 (register_fprime_implementation)

  

  

  CMake Error at cmake/FPrime.cmake:196 (add_subdirectory):

    INTERFACE_LIBRARY targets may only have whitelisted properties.  The
    property ""IMPLEMENTORS"" is not allowed.

  Call Stack (most recent call first):

    cmake/FPrime-Code.cmake:15 (fprime_setup_included_code)
    CMakeLists.txt:67 (include)

  

  

  CMake Error at cmake/utilities.cmake:604 (get_property):

    INTERFACE_LIBRARY targets may only have whitelisted properties.  The
    property ""IMPLEMENTORS"" is not allowed.

  Call Stack (most recent call first):

    cmake/API.cmake:619 (append_list_property)
    Os/Posix/CMakeLists.txt:19 (register_fprime_implementation)

-- Configuring incomplete, errors occurred!
  

  

  CMake Error at cmake/FPrime.cmake:196 (add_subdirectory):

    INTERFACE_LIBRARY targets may only have whitelisted properties.  The
    property ""IMPLEMENTORS"" is not allowed.

  Call Stack (most recent call first):

    cmake/FPrime-Code.cmake:15 (fprime_setup_included_code)
    CMakeLists.txt:67 (include)

  

  

  CMake Error at cmake/utilities.cmake:604 (get_property):

    INTERFACE_LIBRARY targets may only have whitelisted properties.  The
    property ""REQUESTERS"" is not allowed.

  Call Stack (most recent call first):

    cmake/API.cmake:601 (append_list_property)
    Os/CMakeLists.txt:103 (require_fprime_implementation)

  

  

  CMake Error at cmake/FPrime.cmake:196 (add_subdirectory):

    INTERFACE_LIBRARY targets may only have whitelisted properties.  The
    property ""REQUESTERS"" is not allowed.

  Call Stack (most recent call first):

    cmake/FPrime-Code.cmake:15 (fprime_setup_included_code)
    CMakeLists.txt:67 (include)
See also ""/home/fprime/build-fprime-automatic-native/CMakeFiles/CMakeOutput.log"".
Call Stack (most recent call first):
See also ""/home/fprime/build-fprime-automatic-native/CMakeFiles/CMakeError.log"".
  cmake/sub-build/sub-build.cmake:39 (execute_process_or_fail)
  cmake/FPrime.cmake:152 (run_sub_build)
  cmake/FPrime.cmake:221 (fprime_initialize_build_system)
  CMakeLists.txt:12 (include)


[ERROR] CMake erred with return code 1. Partial build cache remains. Run purge to clean-up.
```

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29
Python version: 3.8.10
CMake version: 3.16.3
Pip version: 20.0.2
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a5
```

## How to Reproduce

1. Create a docker image on Ubuntu 20.04
2. Install needed packages, including cmake (base version is 3.16.3)
3. Run `fprime-util generate`

## Expected Behavior

The project should be generated properly
",bug,https://github.com/nasa/fprime/issues/2602
F´ Arduino: Build System Revitalization,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

We need to revitalize F´ Arduino Build System as it is a good spring-board for ultra-small baremetal work.

",bug,https://github.com/nasa/fprime/issues/2009
Add a Code of Conduct,"| | |
|:---|:---|
|**_F´ Version_**|devel |
|**_Affected Component_**| Documentation |
---
## Feature Description

I haven't seen this feature proposed yet but to satisfy the GitHub Community Standards we should add a CODE_OF_CONDUCT.md to the repository. 

## Rationale

GitHub uses the [Contributor Covenant](https://www.contributor-covenant.org/version/2/1/code_of_conduct/) template by default and it is the same template that the [cFS](https://github.com/nasa/cFS/blob/main/CODE_OF_CONDUCT.md) project uses.

You can see an example for a CODE_OF_CONDUCT for FPrime here ➡️  https://github.com/astroesteban/fprime/blob/feature/add-code-of-conduct/CODE_OF_CONDUCT.md

The only change that would be needed is a [primary contact method](https://github.com/astroesteban/fprime/blob/d7531110d8a28ae6b37f4864b0551cd23ee2ea91/CODE_OF_CONDUCT.md?plain=1#L64).",non-bug,https://github.com/nasa/fprime/issues/1830
Split ByteStreamDriverModel into Async and Sync Versions,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Split ByteStreamDriverModel into Async (recv output) and Sync Versions (polled). 

## Rationale

Almost all drivers are either asynchronous or synchronous and the models should reflect that.",non-bug,https://github.com/nasa/fprime/issues/849
PRI* macros not defined for VxWorks,"| | |
|:---|:---|
|**_F´ Version_**| 55c199d4ddeffdce15c2d4e446c156954770aa3e|
|**_Affected Component_**|  VxWorks 7.0 |
---
## Problem Description

Receive several of these errors when compiling for VxWorks 7.0

```
~/fprime/Fw/Types/PolyType.cpp: In member function 'void Fw::PolyType::toString(Fw::StringBase&, bool) const':
~/fprime/Fw/Types/PolyType.cpp:617:66: error: expected ')' before 'PRIu8'
                 (void) snprintf(valString, sizeof(valString), ""%"" PRIu8 "" "", this->m_val.u8Val);
                                ~                                 ^~~~~~
                                                                  )
```

## How to Reproduce

1. Compile for VxWorks 7.0

## Expected Behavior

Compile without these errors.
",bug,https://github.com/nasa/fprime/issues/1433
`loadParameter` FATALs Without PrmDb,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`loadParamerter` on a component will FATAL without a parameter database.

Expected: this should check if connected and return default.",bug,https://github.com/nasa/fprime/issues/2805
Remove cookiecutter dependency for fprime-bootstrap,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| bootstrap |
---
## Feature Description

There isn't a lot to be templated in new projects. It might be worth having fprime-bootstrap not depend on cookiecutter at all, so that it's all native python and therefore doesn't risk breaking anything if installed system-wide.

## Rationale

Better portability etc...
",non-bug,https://github.com/nasa/fprime/issues/2528
Add enum and serializable type loaders in F-Prime Dictionary Object,"| | |
|:---|:---|
|**_F´ Version_**| 3.2.1|
|**_Affected Component_**|  |
---
## Feature Description
Adding enumeration and serializable loaders in the Dictionaries object used in F-Prime GDS. Currently, there exist loaders for commands, channels, events, and packets, but no definitions for the enum and serializable directly in the Dictionaries object. The Dictionaries object loads in the TopologyAppDictionary.xml file and converts it to a Dictionaries object in python. This object does not have the definitions for the serializable and enumeration types, even though they are present in the TopologyAppDictionary.xml file.

## Rationale

Loaders for enumerations and serializable types would allow the entire TopologyAppDictionary.xml to be encapsulated in the Dictionary object in F-Prime GDS. This would be useful in defining enumerations and serializable types externally to the F-Prime GDS, such as an OpenMCT to F-Prime GDS interface.",non-bug,https://github.com/nasa/fprime/issues/2160
Resolve Shadowed `public` Members,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

With the merge of #2482, shadowed public members were renamed with the `a_` prefix for ""argument"".  We should review these uses and decide how to proceed.  

## Rationale

Public members are discouraged but have a purpose. `a_` is not a long-term solution either, but effectively resolves the issue and makes it easy to find these problems for discussion.
",non-bug,https://github.com/nasa/fprime/issues/2492
LinuxSpiDriver bug,"| | |
|:---|:---|
|**_F´ Version_**| 3.0 |
|**_Affected Component_**|  LinuxSpiDriver |
---
## Problem Description

The `LinuxSpiDriver` had a bug introduced here:  https://github.com/nasa/fprime/commit/ec191ae52839ee9c4ca9ba2b2553a3ac662f77b1#diff-f26408567a783542946bca72183d884a11c52193b4f3e32afc579ece19c12a78

Issue is that the pointers to the buffers should be `unsigned long`, which is typically 32 bits, and it was casted to a `U64`.  Casting to a `unsigned long` is working for me on our platform.

## How to Reproduce

1. Run the driver and see a bad status returned from SPI read/writes
2.
3.

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/1767
Continuing CMake Improvements,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

A tracking list of items that need to be done in CMake for performance, stability, and better CMake practices. This isn't everything that can be done, but is near-term needed for the performance PR.

Cleaner Practices:
- [x] Refactor target and autocoder names to use non-conflicting names
- [x] Remove __PHONY__ target and better handle version compilation to prevent rebuilds
- [x] Fix `register_fprime_executable` to function like UTs, not scramble names on use
- [x] Ensure ""CMAKE_EXECUTABLE_SUFFIX"" works correctly.  It does, however; using target property ""SUFFIX"" is preferred to add suffixes.
- [x] Ensure CMAKE_BUILD_TYPE=XYZ triggers the proper defaults (problem with `Release` vs `RELEASE` and `Debug` vs `DEBUG`. https://github.com/fprime-community/fprime-tools/pull/46  Note: build types are all capatalized
- [x] Prevent rerunning autocoders on a module once it has run once
- [x] Refactor autocoders interface to supply 1 function `setup_autocode` and translate dependencies to property
- [x] Remove automatic tools installation

Performance (generate):
- [x] Dispatch by function name for targets and autocoders
- [x] Precache fpp-locs and fpp-depends inputs
- [x] Precalculate fpp-depends
- [x] Speed up initial prescan
- [x] Supply easy-install native compiled FPP tools

Performance (build):
~- [ ] Precompiled headers option investigation~
~- [ ] Single compilation unit option investigation~
~- [ ] Precache FPP to XML outputs per-deployment~
~- [ ] Ensure Ninja functions correctly as underlying make system~

Moved build performance to another ticket.",non-bug,https://github.com/nasa/fprime/issues/1260
Os unit test fails intermittently on Mac OS X,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**| N/A  |
---
## Problem Description

When I run the Os unit tests, on my Mac (MacBook Pro, Mac OS 10.15.1), I get this:
```
1: [ RUN      ] Nominal.IntervalTimerTest
1: /Users/bocchino/JPL/Tools/FPrime/bocchino/fprime/Os/test/ut/IntervalTimerTest.cpp:16: Failure
1: Expected: (timer.getDiffUsec()) < (1005000), actual: 9011207 vs 1005000
1: [  FAILED  ] Nominal.IntervalTimerTest (9011 ms)
```

## How to Reproduce

Run the Os unit tests. The behavior is intermittent; sometimes everything passes.

## Expected Behavior

The tests should pass.
",bug,https://github.com/nasa/fprime/issues/856
"MathModule - Failing TEST(Nominal, AddCommand)","| | |
|:---|:---|
|**_F´ Version_**|  v3.4.3 |
|**_Affected Component_**| MathSender  |
---
## Problem Description

I'm attempting to work through the MathModule, and can't seem to figure out why the TEST(Nominal, AddCommand) is failing. I've re-read the tutorial, and it seems like all the pieces are there, but I could be missing something. The test log is below.

## Context / Environment

Operating System: Darwin
CPU Architecture: x86_64
Platform: macOS-13.6.7-x86_64-i386-64bit
Python version: 3.12.3
CMake version: 3.29.2
Pip version: 24.0
[WARNING] Cannot import 'pkg_resources'. Will not check tool versions.

## How to Reproduce

1. Follow the MathModule Tutorial up to **Run Your Tests** section in _Writing Unit Tests Part 2: Completing the Stub & Running the Test_

2. Execute In: /MathSender
'fprime-util check'

## Expected Behavior

I'm assuming this test should pass, but it's failing for me. Here is the error log.

```
Start testing: Jun 14 12:18 MDT

1/1 Testing: Components_MathSender_ut_exe
1/1 Test: Components_MathSender_ut_exe
Command: ""/Users/nickbaret/fprime/fprime_demos-1/MathProject/build-fprime-automatic-native-ut/bin/Darwin/Components_MathSender_ut_exe""
Directory: /Users/nickbaret/fprime/fprime_demos-1/MathProject/build-fprime-automatic-native-ut/Components/MathSender
""Components_MathSender_ut_exe"" start time: Jun 14 12:18 MDT
Output:

[==========] Running 2 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 2 tests from Nominal
[ RUN      ] Nominal.toDo
[       OK ] Nominal.toDo (2 ms)
[ RUN      ] Nominal.AddCommand
/Users/nickbaret/fprime/fprime_demos-1/MathProject/build-fprime-automatic-native-ut/Components/MathSender/MathSenderGTestBase.cpp:42: Failure
Expected equality of these values:
  size
    Which is: 1
  this->fromPortHistorySize
    Which is: 0

/Users/nickbaret/fprime/fprime_demos-1/MathProject/Components/MathSender/test/ut/MathSenderTester.cpp:60
  Value:    Total size of all from port histories
  Expected: 1
  Actual:   0

/Users/nickbaret/fprime/fprime_demos-1/MathProject/build-fprime-automatic-native-ut/Components/MathSender/MathSenderGTestBase.cpp:57: Failure
Expected equality of these values:
  size
    Which is: 1
  this->fromPortHistory_mathOpOut->size()
    Which is: 0

/Users/nickbaret/fprime/fprime_demos-1/MathProject/Components/MathSender/test/ut/MathSenderTester.cpp:62
  Value:    Size of history for mathOpOut
  Expected: 1
  Actual:   0

/Users/nickbaret/fprime/fprime_demos-1/MathProject/Components/MathSender/test/ut/MathSenderTester.cpp:64: Failure
Expected: (this->fromPortHistory_mathOpOut->size()) > (static_cast<U32>(0)), actual: 0 vs 0

/Users/nickbaret/fprime/fprime_demos-1/MathProject/Components/MathSender/test/ut/MathSenderTester.cpp:64
  Value:    Index into history of mathOpOut
  Expected: Less than size of history (0)
  Actual:   0

[  FAILED  ] Nominal.AddCommand (4 ms)
[----------] 2 tests from Nominal (7 ms total)

[----------] Global test environment tear-down
[==========] 2 tests from 1 test suite ran. (8 ms total)
[  PASSED  ] 1 test.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] Nominal.AddCommand

 1 FAILED TEST
<end of output>
Test time =   1.35 sec

Test Failed.
""Components_MathSender_ut_exe"" end time: Jun 14 12:18 MDT
""Components_MathSender_ut_exe"" time elapsed: 00:00:01


End testing: Jun 14 12:18 MDT
```

",bug,https://github.com/nasa/fprime/issues/2781
Update `PolyDb` to use an FPP enum for the index,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**| `Svc/PolyDb` |
---
## Feature Description

Change the index for entry lookups to an FPP enum instead of a bare integer. Put that enum in a configuration file in the `config` directory so projects can customize it.

## Rationale

Using `PolyDb` internally in code can be error prone and more obscure if there are just integers as the index. This allows getting entries with a descriptive enum instead of an integer. 
",non-bug,https://github.com/nasa/fprime/issues/2590
Intermittent UT failure in Drv::TcpServer,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**|  Drv::TcpServer |
---
## Problem Description

Intermittent unit test failure in Drv::TcpServer when running `fprime-util  check native --all --jobs 24`

## How to Reproduce

1. `cd <deployment-directory>`
2. `fprime-util check native --all --jobs 24`

## Expected Behavior

I expect Drv::TcpServer's UTs to always pass.",bug,https://github.com/nasa/fprime/issues/1290
Drv/TcpClient unit tests intermittently fail on Mac OS,"| | |
|:---|:---|
|**_F´ Version_**| release/v3.0.0|
|**_Affected Component_**| Drv/TcpClient  |
---
## Problem Description

Intermittently, when running the unit tests for Drv/TcpClient, I see errors like this:
```
1: [ RUN      ] Nominal.BasicMessaging
1: /Users/bocchino/JPL/Tools/FPrime/fprime/Drv/TcpClient/test/ut/Tester.cpp:42: Failure
1: Expected equality of these values:
1:   serverStat
1:     Which is: -9
1:   SOCK_SUCCESS
1:     Which is: 0
1: [  FAILED  ] Nominal.BasicMessaging (3 ms)
1: [ RUN      ] Nominal.BasicReceiveThread
1: /Users/bocchino/JPL/Tools/FPrime/fprime/Drv/TcpClient/test/ut/Tester.cpp:42: Failure
1: Expected equality of these values:
1:   serverStat
1:     Which is: -9
1:   SOCK_SUCCESS
1:     Which is: 0
1: [  FAILED  ] Nominal.BasicReceiveThread (1 ms)
```
## How to Reproduce

Run the unit tests as described above. I am running on a MacBook Pro with Mac OS 10.15.17.

## Expected Behavior

Unit tests should pass.
",bug,https://github.com/nasa/fprime/issues/881
FPP Common Models,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

FPP can support using a common model (e.g. a model outside the current module), however; this leads to much duplication in the build system output as autocoding steps are reproduced.  If possible, we should autocode once and leverage these files.  

## Rationale

Work on the efficiency of the FPP system.

",non-bug,https://github.com/nasa/fprime/issues/1169
Create F´ Interfaces From Existing Concepts,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Many F´ concepts can be reworked as F´ interfaces. These are specialized `.fppi` files that define a set of ports.  An example would be: https://github.com/nasa/fprime/blob/devel/Drv/Interfaces/ByteStreamDriverInterface.fppi.

Interfaces are expected to live in a folder `Interfaces` under a given package (e.g. `Drv/Interfaces` or `Svc/Sinterfaces`).

> New interfaces should use the filename pattern `*.interface.fppi` and not just `.fppi`. This is a change since the example was created.

Here is a list of interfaces that should be created:
- [x] Event Ports: https://github.com/nasa/fprime/issues/2584
- [ ] Telemetry Ports: https://github.com/nasa/fprime/issues/2585
- [x] Command Ports: https://github.com/nasa/fprime/issues/2586
- [ ] `Svc::ComInterface`: https://github.com/nasa/fprime/issues/2257
- [ ] `Drv::I2cDriver`: https://github.com/nasa/fprime/issues/2580
- [ ] `Drv::GpioDriver`: https://github.com/nasa/fprime/issues/2581
- [ ] `Drv::SpiDriver`: https://github.com/nasa/fprime/issues/2582
- [x] `Drv::TickDriver`: https://github.com/nasa/fprime/issues/2583
- [x] UART and TCP Driver: https://github.com/nasa/fprime/issues/2255
- [x] Time: https://github.com/nasa/fprime/issues/2579, https://github.com/nasa/fprime/issues/2256

> I2c, Gpio, Spi, and ByteStreamDriver items should also have a `*UserInterface.fppi` for callers/managers using these inferaces.  These issues have not been created.  These are the same ports with the directions reversed.
",non-bug,https://github.com/nasa/fprime/issues/2578
add license option when generating project scaffold with `fprime-util new --project`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Option to add an [OSI](https://opensource.org/about) approved license when generating project scaffold with `fprime-util new --project` - perhaps with default to Apache 2.0 to match core fprime codebase.

## Rationale

As to allow for ease of integration and contributions as an fprime community project",non-bug,https://github.com/nasa/fprime/issues/2225
FileManager updates,"Change `FM_RemoveFile` command to not fail if the file doesn't exist. Just send WARNING event. This allows a deletion of a list of files without requiring that they all be present. Alternatively, add an argument to the command to ignore missing or not.",non-bug,https://github.com/nasa/fprime/issues/297
Add ERT to log files,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

ERT, or Earth Received Time, is vital metadata to any telemetered information (channel, EVR, file, etc.). AMPCS has two options for reporting/recording ERT:
1. For information that comes from an antenna, the antenna can report when the frame is received. In that case, AMPCS ingests the ERT received from a ground station.
2. For information that comes from another source, packets/frames are stamped with the local workstation clock. This information could come from the simulation (SSE), the testbed, or other local venue.

## Rationale

This is required for better interpreting telemetry. E.g. diagnosing clock issues, delays, latency problems. Also used in traditional time correlation processes.",non-bug,https://github.com/nasa/fprime/issues/2428
File Downlink Not Downlinking Files Correctly,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| FileDownlink  |
---
## Problem Description

FileDownlink isn't downlinking identical files. FileUplink seems to work.  An integration test should be added to test basic up/down behavior.

## How to Reproduce

1. Create a 1MB+ file
2. Use FileDownlink to downlink the file
3. `diff source downlinked`

## Expected Behavior

Identical files.
",bug,https://github.com/nasa/fprime/issues/448
fprime-util generate produces error in instances.fpp,"The following error occurs for me after entering the fprime-util generate command for the Ref example...

-- Generating FPP location index
fpp-locate-defs
/home/***/fprime/Ref/Top/instances.fpp: 231.5
    type ""Drv::TcpClient"" \
    ^
error: } expected
CMake Error at /home/***/fprime/cmake/target/fpp_locs.cmake:56 (message):
-- Configuring incomplete, errors occurred!
  Failed to run fpp-locate-deps

I had an adventure installing FPP for WSL2 Ubuntu 20.04 but I think it's properly installed but possibly the root of the problem.",bug,https://github.com/nasa/fprime/issues/1493
OSAL Refactor: Add Handle Size for each Type,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Handle sizes should be type specific, as the general use is two large for some handles.",bug,https://github.com/nasa/fprime/issues/2845
Add unlock() alias or rename unLock() to unlock() in Os::Mutex to support std::lock_guard,"[`std::lock_guard`](https://en.cppreference.com/w/cpp/thread/lock_guard) is a handy type to lock/unlock a mutex automatically according the lifetime of a `std::lock_guard` instance. It only requires that the provided mutex type satisfy [BasicLockable](https://en.cppreference.com/w/cpp/named_req/BasicLockable) which only requires the existence of a `lock()` and `unlock()` member function.

The least intrusive method is to add an alias function:

```diff
diff --git a/Os/Mutex.hpp b/Os/Mutex.hpp
index 94ebab234..31934015a 100644
--- a/Os/Mutex.hpp
+++ b/Os/Mutex.hpp
@@ -14,6 +14,14 @@ namespace Os {
             void lock(); //!<  lock the mutex
             void unLock(); //!<  unlock the mutex

+            /**
+             * An alias to @ref unLock() that allows the type to satisfy the
+             * BasicLockable requirements
+             * (https://en.cppreference.com/w/cpp/named_req/BasicLockable)
+             * needed to work with @ref std::lock_guard.
+             */
+            void unlock() { this->unLock(); }
+
         private:

             POINTER_CAST m_handle; //!<  Stored handle to mutex
```",non-bug,https://github.com/nasa/fprime/issues/1229
PrmDb enhancements,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| PrmDb |
---
## Feature Description

It would be beneficial to be able to update PrmDb to allow other components to be able to save parameters to non-volatile memory directly. This can be useful for fault protection and other state that needs to be stored non-volatile and done autonomously. There often state that should be stored in this manner as part of graceful shutdown. 

Other features to consider for robustness: 

Not storing all parameters in a single file; redundancy in parameter storage; checksums for validation; parameter versions; parameter value range checking (this is already planned according to M. Starch). Advanced features: Parameter groups
## Rationale

A rationale for why the feature should be implemented in F´.

See above",non-bug,https://github.com/nasa/fprime/issues/2208
Spelling Check Deprecated WARNINGs,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

From the spell check actions:

```
Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
```",bug,https://github.com/nasa/fprime/issues/1758
Refactor Os::Task into a CMake Selection,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

`Os::Task` should be refactored into a CMake Selection.  See #2457 ",non-bug,https://github.com/nasa/fprime/issues/2526
Add DP interface to PrmDb,"| | |
|:---|:---|
|**_F´ Version_**| 3.x |
|**_Affected Component_**| `Svc/PrmDb` |
---
## Feature Description

Add upcoming [Data Product](https://github.com/nasa/fprime/discussions/1154) interface and a command to create a DP to PrmDb.

## Rationale

This would allow the ground system to see what the current values for onboard parameters are.
",non-bug,https://github.com/nasa/fprime/issues/1988
Library CMake Builds are Not Folder-spaced,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Defining a folder in a library (`Svc` for example) causes a build failure because the folder is ""already used"".  Libraries should create separate subfolders within the fprime build.",bug,https://github.com/nasa/fprime/issues/2446
Log Dropdown Jumps About,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The log pane drop down jumps about once a second.  This makes selecting logs difficult.",bug,https://github.com/nasa/fprime/issues/2381
Segment Fault after FATAL in Ref/PingReceiver,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 > |
|**_Affected Component_**|  Ref/PingReceiver |
---
## Problem Description

When sending command pingRcvr.PR_StopPings from the GDS GUI, after a few second the FSW client exits with Segmentation fault: 11.

![image](https://user-images.githubusercontent.com/35859004/107449226-08fa7f00-6af8-11eb-8f7f-be8033a1b3be.png)

## How to Reproduce

1. cd fprime/Ref
2. frpime-util generate
3. frpime-util build
4. fprime-gds -n
5. ./build-artifacts/Darwin/bin/Ref -a 127.0.0.1 -p 50000
6. Send Command pingRcvr.PR_StopPings from GDS
![image](https://user-images.githubusercontent.com/35859004/107449050-b91bb800-6af7-11eb-8d83-e41232997578.png)

The Event should look like the following:
![image](https://user-images.githubusercontent.com/35859004/107449075-c20c8980-6af7-11eb-98ea-10db8acc9db6.png)
## Expected Behavior

FATA exit should not cause segment fault corruption. 
",bug,https://github.com/nasa/fprime/issues/356
Porting Fprime to FreeRTOS,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Our team is currently trying to port Fprime to FreeRTOS on an atmel board. We were unable to find a cmake toolchain to facilitate the process.

We were wondering if there is a way to gather all the source files generated by the Fprime autocoder in order to compile them through the compiler provided by Microchip. Which fprime-util command is responsible for running the autocoder and where could we find these resulting source files? 

## Rationale
",non-bug,https://github.com/nasa/fprime/issues/463
"""Ref_exe"" does not exist.","| | |
|:---|:---|
|**_Python Version_**|3.6.9|
|**_CMake Version_**|3.10.2|
|**_Commit_**|08b535c|
---
## Problem Description

I was attempting to run `fprime-util generate` but it generates this error

![image](https://user-images.githubusercontent.com/26328810/103731378-fa79ee80-4fb2-11eb-92c9-64839a2487b1.png)

![image](https://user-images.githubusercontent.com/26328810/103731393-0c5b9180-4fb3-11eb-89a5-bfe0880852fd.png)

I've tried purging and generating again but I get stuck on the same problem.

## How to Reproduce

The following is a script my friend made to setup the project. This will go up to the deployment of the gds for the Ref project.

```bash
#!/bin/bash

# Install prerequisites
echo
echo Installing dependencies ...
echo
sudo apt update
sudo apt-get -y install cmake
sudo apt install python3 python3-pip python3-venv
sudo apt install build-essential
sudo apt install git-all

# Create repository folder
echo
echo Where should the fprime repository be cloned? Specify a valid directory.
echo
read -r fprime_dir
mkdir -p ""$fprime_dir""

# Go to specified directory
cd ""$fprime_dir""
fprime_dir=$PWD

# Clone nasa/fprime repo into folder
echo
echo Cloning fprime repository ...
echo
git clone https://github.com/nasa/fprime ""$fprime_dir""
cd ""$fprime_dir/.."" || exit

# Create and launch python virtual environment
echo 
echo Launching Python3 virtual environment ...
echo 
python3 -m venv ./fprime-venv
source ./fprime-venv/bin/activate

# Install fprime python packages
echo 
echo Installing fprime python packages ... 
echo 
cd ""$fprime_dir"" || exit
pip install --upgrade wheel setuptools pip
pip install ./Fw/Python
pip install ./Gds

# Build fprime
echo 
echo Building fprime application ... 
echo 
cd Ref || exit
fprime-util generate
fprime-util build --jobs 32

# Run HTML GUI
echo 
echo Starting HTML GUI ... 
echo 
fprime-gds -g html -r ./build-artifacts
```

My error occurs with the `fprime-util generate` command. 

I'm trying to run this from Windows Subsystem for Linux (WSL). I know this works because my friend has successfully run the script multiple times on his computer.

I have also tried doing it without the script and doing it manually but I encounter the same issue.

## Expected Behavior

Being able to run the following lines of code successfully.

```bash
fprime-util generate
fprime-util build --jobs 32

fprime-gds -g html -r ./build-artifacts
```",bug,https://github.com/nasa/fprime/issues/323
CTest Fails When No Unit-Tests Found In a Deployment,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`ctest -R` with no arguments will fail when no unit tests are found in a deployment because this defaults to `ctest`  (ctest all) but the previous build likely did not build all the tests.  This causes a failure.

We should:
1. Define a no-op in the case on 0 uts per deployment
",bug,https://github.com/nasa/fprime/issues/2008
`fprime-util new` for project bootstrapping,"| | |
|:---|:---|
|**Issue Type**| Epic |
|**Affected Component(s)**| fprime-tools |
---
## Feature Description

Use `fprime-util new` as a means to bootstrap entirely a new project. That is, be able to do something like:
```
$ pip install fprime-tools
$ fprime-util new --project
$ fprime-util new --deployment
$ fprime-util new --component

# follow with build process
```

New features shall include:

- [x] `fprime-util new --project` https://github.com/fprime-community/fprime-tools/pull/124
- [x] `fprime-util new --deployment` https://github.com/fprime-community/fprime-tools/pull/123
- [x] `fprime-util new --component` (to be ported to FPP) https://github.com/fprime-community/fprime-tools/pull/125

## Rationale

Vastly improves user experience, for both new users (e.g. HelloWorld tutorials) and current developers. _Softly_ enforce a correct project structure (fprime as submodule, shared components at top level etc...)
",non-bug,https://github.com/nasa/fprime/issues/1961
Unit test implementation fails when FW_SERIALIZABLE_TO_STRING is set,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description
When FW_SERIALIZABLE_TO_STRING is not set, the PolyType class throws an error that no declaration matches: `void Fw::PolyType::toString(Fw::StringBase&) const`


## How to Reproduce

1. Set FW_SERIALIZABLE_TO_STRING to 0
2. Generate unit test build cache
3. Run fprime-util impl --ut from any component directory with a unit-test section in its CMakeLists.txt

## Expected Behavior

Tester.cpp and Tester.hpp files should be successfully generated. ",bug,https://github.com/nasa/fprime/issues/1766
CI: Integration Tests are Failing,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Integration tests are failing on ability to connect via TCP to TTS.  TTS seems to allocate port just fine.",bug,https://github.com/nasa/fprime/issues/1359
[ERROR] Dictionary version 3.0.1 is not in supported range: 0.0.0-3.0.0. Please upgrade fprime-gds.,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**|  |
---
## Problem Description

I'm encountering the following error while attempting to run `fprime-gds` to connect to my raspberry pi running a cross compiled binary for either **Ref** or **RPI**

```
[ERROR] Dictionary version 3.0.1 is not in supported range: 0.0.0-3.0.0. Please upgrade fprime-gds.
[ERROR] Failed to run application: **/fprime/venv/bin/python3 -u -m flask run --host 127.0.0.1 --port 5000. Error: **/fprime/venv/bin/python3 stopped with code 1 sooner than 2 seconds.
```

Here's a printout of `pip freeze` from my python virtual environment
```
aniso8601==9.0.1
argcomplete==1.12.3
arrow==1.2.2
attrs==21.4.0
binaryornot==0.4.4
certifi==2021.10.8
chardet==4.0.0
charset-normalizer==2.0.12
Cheetah3==3.2.6
click==8.1.3
cookiecutter==1.7.2
Flask==1.1.2
Flask-RESTful==0.3.8
fprime-fpp==1.0.1
fprime-gds==3.0.2
fprime-tools==3.0.1
idna==3.3
iniconfig==1.1.1
itsdangerous==2.0.1
Jinja2==2.11.3
jinja2-time==0.2.0
lxml==4.6.3
Markdown==3.3.4
MarkupSafe==1.1.1
packaging==21.3
pep517==0.12.0
pexpect==4.8.0
pip-tools==6.6.1
pluggy==0.13.1
poyo==0.5.0
ptyprocess==0.7.0
py==1.11.0
pyparsing==3.0.9
pytest==6.2.4
python-dateutil==2.8.2
python-slugify==6.1.2
pytz==2022.1
requests==2.27.1
setuptools-scm==6.0.1
six==1.16.0
text-unidecode==1.3
toml==0.10.2
tomli==2.0.1
urllib3==1.26.9
Werkzeug==2.0.1
```

## How to Reproduce

In a python virtual environment:
1. build **Ref** or **RPI** binary for raspberry pi, follow either [Cross Compilation tutorial](https://nasa.github.io/fprime/Tutorials/CrossCompilation/Tutorial.html) or [RPI Demo Tutorial](https://github.com/nasa/fprime/blob/master/RPI/README.md)
2. run `fprime-gds -n --dictionary build-artifacts/raspberrypi/dict/RefTopologyAppDictionary.xml` (for Ref) or `fprime-gds -n --dictionary build-artifacts/raspberrypi/dict/RPITopologyAppDictionary.xml` (for RPI)

## Expected Behavior

Should open ground station desktop UI",bug,https://github.com/nasa/fprime/issues/1456
Fix native-image builds,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

FPP, FPL etc... fails to build - investigate
https://github.com/fprime-community/native-images-action/tree/main
",bug,https://github.com/nasa/fprime/issues/2397
Resolve Static Analysis Warnings,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 |
|**_Affected Component_**| All  |
---
## Problem Description
There are 444 warnings after running CodeSonar on Ref deployment.
This ticket will be used to track series of PRs resolving these warnings.

Category and significance  of the warnings is listed below:

| significance | count |
| -- | -- |
|Security | 399 |
|Reliability | 10 |
|Redundancy | 35 |

Class | Count
| -- | -- |
Uninitialized Variable | 255
Cast Alters Value | 120
Unreachable Data Flow | 15
Redundant Condition | 11
No Space For Null Terminator | 9
File System Race Condition | 7
Useless Assignment | 7
Coercion Alters Value | 6
Ignored Return Value | 6
Null Pointer Dereference | 3
Integer Overflow of Allocation Size | 1
Dangerous Function Cast | 1
Tainted Buffer Access | 1
Unreachable Computation | 1
Unreachable Conditional | 1

## How to Reproduce

1. Run CodeSonar on Ref deployment

## Expected Behavior

Warnings should be either resolved or descoped with a rational.
",bug,https://github.com/nasa/fprime/issues/678
fprime-gds: file downlink removes leading directories,"| | |
|:---|:---|
|**_F´ Version_** | [v3.4.3](https://github.com/fprime-community/fprime-gds/releases/tag/v3.4.3) |
|**_Affected Component_**|  n/a |
---
## Problem Description

Add destination directory back in some form. Having raw names can cause overwrites.

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
(p3fprime) tcanham@MT-509434:~/source/fprime/Ref$ fprime-util version-check
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35
Python version: 3.10.12
CMake version: 3.22.1
Pip version: 22.0.2
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a5```
```

## How to Reproduce

1. Downlink a file with a destination with a directory path
2. Look at file name. Is something like `._Foo.bar`

## Expected Behavior

Normalize the file path and create the directory path to retain directory separation. If it's not desirable to create directories, perhaps use a notation like `dir_path_file` to preserve the separation.
",bug,https://github.com/nasa/fprime/issues/2658
"Python ""Install Certificates"" Fix Does Not Work For `brew` Users","In the install guide, we recommend `Install Certificates` to fix our installation problems with urllib3.  However, this breaks for `brew` users because the `brew` install does not ship that script.

Several options:
1. Declare no-support for brew installations
2. Remove dependency on `https` URLs
  1.  Publish FPP as a proper package
  2. Look for `https` usages in tools
3. Find a `brew` solution

Option 2 is possible with:  https://github.com/fprime-community/fpp/pull/305",bug,https://github.com/nasa/fprime/issues/2233
Instructions on How To Use an Existing Project,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Users have asked how to use an existing project as opposed to creating a new one.",non-bug,https://github.com/nasa/fprime/issues/2194
Deploy DevContainer (& GitHub CodeSpace) to improve UX with a browser-based development environment,"| | |
|:---|:---|
|**_F´ Version_**| latest |
|**_Affected Component_**| DevEnvironment / Training |
---

## Feature Description

We should add the functionality of browser-based development environments (devcontainer) based on [GitHub CodeSpace](https://github.com/features/codespaces).

This consists of creating a [.devcontainer](https://github.com/microsoft/vscode-dev-containers/tree/main/.devcontainer) folder at the root of the project that contains the files needed for `CodeSpace`.

There is for example `devcontainer.json` specifying parameters like:
- a `Dockerfile`
- `VSCode` extensions
- extensions, etc.

@astroesteban has already done 90% of the work on adding this feature https://github.com/astroesteban/fprime-devcontainer. It might be necessary to take it back and adapt it to better integrate it to the project.

If he has no more time, I can do the first PR on this feature.

Here is another project on which I saw that they were using `CodeSpace` in a rather elegant way: https://github.com/nanoframework/nf-interpreter for the embedded domain.

Here is an example of a C++ project from `Microsoft` to try devcontainers: https://github.com/microsoft/vscode-remote-try-cpp

## Rationale

I am convinced that the project will benefit greatly from this.

### It will gain contributors and popularity.

Indeed, independent developers who develop in their spare time may be reluctant to spend time on installation issues on their personal devices.

As for professional developers, some don't want to use their personal devices to do what they consider work. In this case, they are subject to installation issues because of their company's IT infrastructure (I've seen this recurring problem).

### It will make it easier to train professionals internally.

During a team initiation or training session on the framework, each member just needs a GitHub account and a web browser to explore and do the tutorials in real time.

### This will improve the knowledge of the framework at the level of surrounding tools (debugging tool, IDE, real-time linter).

With `CodeSpace`, we would offer a common reference development environment in addition to the framework.
Each person would start from the same base to explore and develop :

- the same IDE (`VSCode`): some people are lost at this level alone because they don't know which IDE to choose and only know Eclipse for example.
- the same environment: via a reference `Dockerfile` automating the installation steps (which put most people off)
- a set of `VSCode` extensions to improve the user experience: debugger, analyzer, formatter, Intellisense, [LiveShare](https://code.visualstudio.com/learn/collaboration/live-share) (real-time code collaboration tool).



In my opinion, it will be an essential tool in the years to come with the `Ready-To-Code` or `Pre-Silicon Development` (with [Renode](https://renode.io/about/)) trends.

And we can be confident that GitHub will make it even better. Back in June, the company [announced that `Atom` would be shutting down](https://github.blog/2022-06-08-sunsetting-atom/) and that the development teams would focus on `VSCode` and `CodeSpace`.
",non-bug,https://github.com/nasa/fprime/issues/1806
Proper error messaging when missing installation dependencies,"| | |
|:---|:---|
|**_F´ Version_**|  [v3.4.3](https://github.com/nasa/fprime/tree/v3.4.3)  |
|**_Affected Component_**|  `fprime-util generate` |
---
## Problem Description

When installing F', I was originally missing the `default-jre` dependency. This was difficult to determine since the only error message in response to missing `default-jre` was `-- [fpp-tools] fpp-depend appears corrupt` as shown below:

```
(fprime-venv) [root@dfkd83f:~/MyProject]
# fprime-util generate
[INFO] Generating build directory at: /root/MyProject/build-fprime-automatic-native
[INFO] Using toolchain file None for platform default
-- The C compiler identification is GNU 12.2.0
-- The CXX compiler identification is GNU 12.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- [fpp-tools] fpp-depend appears corrupt.
CMake Error at fprime/cmake/required.cmake:26 (message):
   fpp tools not found. Install with:
    'pip install -r ""/root/MyProject/fprime/requirements.txt""'
Call Stack (most recent call first):
  fprime/cmake/FPrime.cmake:13 (include)
  CMakeLists.txt:13 (include)
```

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
# fprime-util version-check
Operating System: Linux
CPU Architecture: riscv64
Platform: Linux-6.2.2-riscv64-with-glibc2.37
Python version: 3.11.8
CMake version: 3.28.3
Pip version: 24.0
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

## How to Reproduce

1. Don't install `default-jre` (I imagine this could happen with other dependencies as well) 
2. Issue the following commands:

```
cd <fprime_project>/
source fprime-venv
fprime-util generate
```


## Expected Behavior

Instead of having ""is corrupt"" mask dependency errors, print which dependencies are missing or propagate the error upwards to the user.
",bug,https://github.com/nasa/fprime/issues/2615
"Switch to ASAN, LSAN, UBSAN, and possibly MSAN and others","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Currently we are running valgrind to do sanitation of code.  However, the *SAN tools built into the compiler are better, faster, and will not work alongside valgrind.  It is recommended that we switch to running *SAN tools that are available.",non-bug,https://github.com/nasa/fprime/issues/1085
Add CMake UT To Test Symlinked Builds,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a CMake UT that ensures CMake works with Symlinked builds.",non-bug,https://github.com/nasa/fprime/issues/2624
fprime-util ignores executable name set by register_fprime_ut(),"| | |
|:---|:---|
|**_F´ Version_**| 1.5 < |
|**_Affected Component_**|  fprime-util |
---
## Problem Description

When running `fprime-util build --ut for Drv/Ip` unit test build fails with the following error:

```bash
-- Build files have been written to: fprime/build-fprime-automatic-native-ut
make: *** No rule to make target `Drv_Ip_ut_exe'.  Stop.
[ERROR] CMake erred with return code 2
```

But when directly run fprime-util check the Ut build and runs successfully. It seems like a bug in the fprime-util build, since it tries to look for the default Drv_Ip_ut_exe, but the Ip UT has two executables shown below:
```Cmake
### UTs ###
set(UT_SOURCE_FILES
                ""${CMAKE_CURRENT_LIST_DIR}/test/ut/TestTcp.cpp""
)
register_fprime_ut(""Drv_Ip_Tcp_test"") <--------
 
set(UT_SOURCE_FILES
                ""${CMAKE_CURRENT_LIST_DIR}/test/ut/TestUdp.cpp""
)
register_fprime_ut(""Drv_Ip_Udp_test"") <--------
```

This error was first found in PR https://github.com/nasa/fprime/pull/460
## How to Reproduce

1. cd fprime/Drv/Ip
2. fprime-util generate --ut
3. fprime-util build --ut

## Expected Behavior

Successfully build the UT
",bug,https://github.com/nasa/fprime/issues/466
Missed --ut option in the examples in `fprime-util build --help`,"| | |
|:---|:---|
|**_F´ Version_**| v3.1.0 |
|**_Affected Component_**| fprime-util build --help  |
---
## Problem Description

There's a typo in the help page of the `fprime-util build --help` regarding the examples. In the section `Build Reg/SignalGen UTs`, the corresponding commands should be:
```
cd Ref/SignalGen
fprime-util build --ut
```
but not:
```
cd Ref/SignalGen
fprime-util build
```
![Screenshot from 2022-08-17 10-04-54](https://user-images.githubusercontent.com/36995171/185057165-2c7b90dd-e9ca-454f-b608-c4e1c347c6bd.png)

## How to Reproduce

1. follow INSTALL.md: prepare the venv
2. Run `fprime-util build --help`

## Expected Behavior
See picture above

## Note
Note that this should probably be fixed from the `fprime-tools` pip utility since it is only contained in the automatically generated files in the venv environment.",bug,https://github.com/nasa/fprime/issues/1621
Clarify and improve documentation,"## Introduction
Greeting F' community. I'm a systems engineer at JPL working on CADRE, which is a tech demo under NASA's Game Changing Development program slated to send three shoebox-sized rovers to the moon in Q2 of 2024. The mission is using F' as it's core for its FSW. As a systems engineer, I'm not a developer, but a user that needs to understand how the code works to figure out how we're going to test and operate it. My C++ skills... let's just say are subject to improvement. So if something is evident in the source code, I might miss it. With that caveat fully stated, I'm starting to identify gaps, shortcomings, and inconsistencies in the documentation that would be great to clarify for the full F' user community. What I'll do is create this issue, then update, comment, or otherwise capture the documentation issues I identify. Anyone in charge, feel free to comment if you want a different approach.

## Relative-timing in command sequences
My confusion here is with relative-timed commands in sequences and if they start at an offset from command dispatch or command completion. (This is a big deal for commands that take longer than a sequence-cycle to execute.)

The sample sequence alludes to the relative-timer starting from the completion of the previous command:
https://github.com/fprime-community/fprime-gds/blob/7382c8c2c9cd14de7fb8998ba687d245022c6311/examples/simple_sequence.seq#L11-L17

Whereas the [documentation](https://nasa.github.io/fprime/UsersGuide/gds/seqgen.html#writing-an-f-sequence-file) does not specify if command timing is relative to the start of the command or end of the command.

This also highlights the need for more detailed timing description in command sequencing. How does sequence timing interact with the execution frequency of the sequence engine?

## File packet structure
The binary construction of file packets is ill-defined. I'm used to something a.la CCSDS specifications. For example, see Section 2.2 of the [CFDP Implementer's Guide, 720.2-G-4](https://public.ccsds.org/Pubs/720x2g4.pdf), copied below:
![image](https://user-images.githubusercontent.com/1389661/211634693-1c41037c-6342-460c-8ed7-a33614c64244.png)

F' should have similar bit-level packet definitions such that there is no confusion in what is being sent when and how it is to be decoded on the ground. Such documentation enables easy V&V, easy troubleshooting, and easy ground interface development.

## Absolute time sequence commands
What if an absolute timed command ""expires""? e.g. you have this:
```
A2010-001T12:00:00 CMD1
A2010-001T12:00:10 CMD2
```
Where `CMD1` takes 30s to complete. Does `CMD2` clock out at 12:00:10? Or does it clock out at 12:00:30? Or is it just dropped? Or does it trigger a fault and kill everything?

",non-bug,https://github.com/nasa/fprime/issues/1844
Add SLOC counters for various source files,"| | |
|:---|:---|
|**_F´ Version_**| 3.x |
|**_Affected Component_**| n/a |
---
## Feature Description

Add the ability to count the lines of code for each deployment. 

## Rationale

It will allow projects to tabulate lines of code based on what is actually built, rather the *.something.
",non-bug,https://github.com/nasa/fprime/issues/1941
F Prime GDS - problems scrolling through channel selection for custom view,"| | |
|:---|:---|
|**_F´ Version_**|v3.4.1, commit https://github.com/nasa/fprime/commit/8a1612c0dd1ec18ada8162d92d37ff7317835129 |
|**_Affected Component_**|  n/a |
---
## Problem Description

When editing the telemetry view, scrolling back through the list of channels for selection stops working at a certain point. 

## How to Reproduce

1. Go to telemetry tab (needs large number of channels defined)
2. Scroll through list of channels to select
3. At a certain point, the user cannot scroll any further, and the view will jump back to the previous block of channels.

## Expected Behavior

User should be able to scroll and select all the channels.
",bug,https://github.com/nasa/fprime/issues/2474
Implement CCSDS File Delivery Protocol,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

This feature introduces to F' the core file delivery capabilities from the latest CCSDS File Delivery Protocol (CFDP).

The goal is to implement CFDP in several stages. The recommend standard describes two service classes: Class 1 CFDP (unreliable transfer) and Class 2 CFDP (reliable transfer). The following subtasks only implement CFDP features required for core file delivery. Filestore requests, user operations, and other optional convenience features are not currently within the goals of this feature.

Recommended Standard:
https://public.ccsds.org/Pubs/727x0b5.pdf

Informational Reports:
https://public.ccsds.org/Pubs/720x1g4.pdf
https://public.ccsds.org/Pubs/720x2g4.pdf

For each subtask there is a corresponding task for implementing the change on the GDS side.

### Subtasks
- [ ] #2769 
- [ ] #2771 
- [ ] #2798 
- [ ] GDS - Implement core Class 1 CFDP procedures without transaction closure
- [ ] Implement transaction closure option
- [ ] GDS - Implement transaction closure option
- [ ] Refactor CFDP with CFDP checksum and CRC algorithms
- [ ] GDS - Refactor CFDP with CFDP checksum and CRC algorithms
- [ ] Create CFDP Class 2 file packets
- [ ] GDS - Create CFDP Class 2 file packets
- [ ] Implement core Class 2 CFDP procedures
- [ ] GDS - Implement core Class 2 CFDP procedures

## Rationale

This feature moves F' towards CCSDS compliance, allowing interoperability with other CCSDS compliant systems. By itself, Class 1 CFDP provides a base file transfer capability. Class 2 CFDP provides reliable file transfer over unreliable connections and simplifies operations through automated retransmission.",non-bug,https://github.com/nasa/fprime/issues/2768
The openpyxl library has thrown WorkbookAlreadySaved error,"While running unit tests on the API, there was an error thrown by openpyxl that caused the log to close early. The behavior wasn't able to be recreated, but the [Test Logger](https://github.com/fprime-community/fprime-gds/blob/devel/src/fprime_gds/common/logger/test_logger.py) was updated to [catch the exception](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/logger/test_logger.py#L124) to prevent tests from failing due to the logger.

~~~~
___________________________________ APITestCases.test_find_history_item _________________________________

self = <WriteOnlyWorksheet ""Sheet"">, row = [<Cell 'Sheet'.A1>, <Cell 'Sheet'.A1>, <Cell 'Sheet'.A1>, <Cell 'Sheet'.A1>]

    def append(self, row):
        """"""
        :param row: iterable containing values to append
        :type row: iterable
        """"""

        if (not isgenerator(row) and
            not isinstance(row, (list, tuple, range))
            ):
            self._invalid_row(row)

        self._max_row += 1

        if self.writer is None:
            self.writer = self._write_header()
            next(self.writer)

        try:
>           self.writer.send(row)
E           StopIteration

/usr/lib/python3/dist-packages/openpyxl/writer/write_only.py:241: StopIteration

During handling of the above exception, another exception occurred:

self = <api_unit_test.APITestCases testMethod=test_find_history_item>

    def setUp(self):
        for t in self.threads:
            if t.isAlive():
                t.join()
        self.threads.clear()
        count = len(self.case_list)
>       fprime_test_api.start_test_case(self._testMethodName, count)

test/fprime_gds/common/testing_fw/api_unit_test.py:102:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/fprime_gds/common/testing_fw/api.py:96: in start_test_case
    self.__log(msg, TestLogger.GRAY, TestLogger.BOLD, case_id=case_id)
src/fprime_gds/common/testing_fw/api.py:1214: in __log
    self.logger.log_message(message, sender, color, style, case_id)
src/fprime_gds/common/logger/test_logger.py:121: in log_message
    self.worksheet.append(row)
/usr/lib/python3/dist-packages/openpyxl/writer/write_only.py:243: in append
    self._already_saved()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <WriteOnlyWorksheet ""Sheet"">

    def _already_saved(self):
>       raise WorkbookAlreadySaved('Workbook has already been saved and cannot be modified or saved anymore.')
E       openpyxl.utils.exceptions.WorkbookAlreadySaved: Workbook has already been saved and cannot be modified or saved anymore.

/usr/lib/python3/dist-packages/openpyxl/writer/write_only.py:247: WorkbookAlreadySaved
------------------------------------------ Captured stdout call ---------------------------------
10:46:08.703826 [Test API] [STARTING CASE] test_find_history_item
~~~~

To fully resolve this would require being able to reproduce the issue and explain why the test log failed. However, the test logger should at least have a reliable csv format that won't stop logging if the xml logger fails.",bug,https://github.com/nasa/fprime/issues/2643
Resetting Systems not Displaying Channels,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Many systems, especially on boot, tend to regress in time (e.g. time resets to 1970).  This means the GDS will not display channels until a proper time is set. Additionally, testbeds needing finer control over time also see this issue.

This is caused by code in the GDS that looks for out-of-order packets and drops them to preserve the latest time stamp.  However, reordered packets is a rarer case.

We should add a settings option to the GDS to switch between receipt order and timestamp order for determining display with the default to receipt order.

",bug,https://github.com/nasa/fprime/issues/2218
Drop Python 2 support,"| | |
|:---|:---|
|**_F´ Version_**| current |
|**_Affected Component_**| Autocoder |
---
## Feature Description

Remove work-arounds in the code that are there to support Python 2.

## Rationale

There are some parts of the Autocoder that have work-arounds to support Python 2 and Python 3.  Since Python 2 reached end-of-life at the beginning of 2020, support should be dropped so these work-arounds can be removed.",non-bug,https://github.com/nasa/fprime/issues/422
Construct Hadware CI Framework ,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Construct a framework for hardware CI. Allow easy integration of new boards, toolchains, and example projects.",non-bug,https://github.com/nasa/fprime/issues/1684
Add serial ID to port definitions,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**| n/a |
---
## Feature Description

Have the FPP code generator add a SERIALIZED_TYPE_ID field to ports and structs.

## Rationale

This was an old feature idea to ""harden"" the port interfaces, especially when crossing through serialization interfaces like the [Hub Pattern](https://nasa.github.io/fprime/UsersGuide/best/hub-pattern.html). If different ports that coincidentally have the same serialization size are connected to either side of the hub, the receiving port will deserialize the data and attempt to invoke the interface with incorrect data. 

If a serialized ID that uniquely identifies the port type is added to the serialized data, the receiving port can check it to verify that it matches before invoking the component.

The original idea was to compute a 32-but hash based on the text contents of the XML (back before FPP). That should produce a value that would make it very unlikely that two different ports with the same serialization size would produce the same hash. A similar approach could be used for FPP port code generator files.

This same hash could be added to FPP generated structs so that users of those structs either onboard or in the ground system could confirm that the type matches.

This would add safety at the cost of some serialization data overhead. It could be a feature that is turned on or off in a project specific config file.
",non-bug,https://github.com/nasa/fprime/issues/2594
Style Guide,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Coding and style guide is necessary.",non-bug,https://github.com/nasa/fprime/issues/1175
Inconsistency in Modeler specification,"| | |
|:---|:---|
|**_F´ Version_**| all |
|**_Affected Component_**|  documentation  |
---
## Problem Description

I found the entry for `modeler` is inconsistent. This is low-impact but will be beneficial to get right.

https://github.com/nasa/fprime/blob/5dcbb5c322fa6f26e3d97826289d9aa47e2043ea/docs/UsersGuide/dev/xml-specification.md#components

",bug,https://github.com/nasa/fprime/issues/820
Add version flag to new --project,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a --version to select release version in fprime-util new --projet. The cookiecutter input was discontinued since we retrieve automatically latest release instead of `devel`, but we could add `--version` flag to select version. Allows for easy switch back if, say there's a bug in latest release.",non-bug,https://github.com/nasa/fprime/issues/2406
"Add ""F Prime"" To Main Page","| | |
|:---|:---|
|**_F´ Version_**| docs |
|**_Affected Component_**| docs  |
---
## Feature Description

Need to add ""F Prime"" as an alternate name for F´ to the main page.

## Rationale

F Prime is an acceptable alternate name and should be indicated on our landing page.
",non-bug,https://github.com/nasa/fprime/issues/526
"Adding a file to config directory causes FPP ""symbol not found error""","| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**| n/a  |
---
## Problem Description

Adding a new FPP config file to the config directory that defines an FPP type causes an FPP compile error in an FPP file elsewhere that uses the type. Regenerating (`fprime-util purge/generate`) solves the problem.

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
~/source/fprime/Svc/PolyDb$ fprime-util version-check
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35
Python version: 3.10.12
CMake version: 3.22.1
Pip version: 22.0.2
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a5

```

## How to Reproduce

1. Add a new FPP file to F Prime ```config``` directory and ```CMakeLists.txt``` that defines a new type.
2. Use that type elsewhere in the repo
3. Try to build, should get error complaining type is not defined.
4. `fprime-util purge`
5. `fprime-util generate`
6. Build again - works.

## Expected Behavior

The added file should trigger an automatic regeneration.
",bug,https://github.com/nasa/fprime/issues/2576
"Port with string arg fails if in namespace, works otherwise","| | |
|:---|:---|
|fprime-fpl-convert-xml |1.0.0|
|fprime-fpl-extract-xml |1.0.0|
|fprime-fpl-layout      |1.0.0|
|fprime-fpl-write-pic   |1.0.0|
|fprime-fpp             |1.3.0|
|fprime-gds             |3.3.0|
|fprime-tools           |3.4.4|
|fprime-visual          |1.0.0|
---
## Problem Description

I have a port:
```
module ports {
    port setIntVar(
        name: string
        value: I64
    )
}
```
I use it in a component:
```
        async input port setIntVar: ports.setIntVar
```
I get this error:
```
.../ComponentAc.hpp:408:17: error: ‘setIntVarPortStrings’ does not name a type
  408 |           const setIntVarPortStrings::StringSize80& name,
      |                 ^~~~~~~~~~~~~~~~~~~~
```

If I use any type other than `string`, it works (even a type with a string inside of it). If I specify the size of the string, it still doesn't work.

When I move the port out of the module like so:

```
port setIntVar(
    name: string
    value: I64
)
module ports {
    ...
}
```
And use it without the prefix like so:
```
        async input port setIntVar: setIntVar
```

The component compiles.
My guess is this is a bug in the autocoder, forgetting to add a `ports::` prefix to the `setIntVarPortStrings::StringSize80` type.

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.29
Python version: 3.8.10
CMake version: 3.16.3
Pip version: 21.2.4
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.3.0
[WARNING] The 'fprime-fpp-to-xml' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-to-json' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-to-cpp' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-syntax' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-locate-uses' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-locate-defs' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-from-xml' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-format' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-filenames' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-depend' distribution was not found and is required by the application
[WARNING] The 'fprime-fpp-check' distribution was not found and is required by the application
```",bug,https://github.com/nasa/fprime/issues/2550
Broken link 404 in sdd.md,"In https://github.com/nasa/fprime/blob/e165c914b0d0240eba8164c52f8856ce90bee3dc/Os/Pthreads/docs/sdd.md 
POSIX queues url leads to 404",bug,https://github.com/nasa/fprime/issues/832
Find a way to synchronize TimeBase between GDS and F PRime,"| | |
|:---|:---|
|**_F´ Version_**| 3.x |
|**_Affected Component_**|  |
---
## Feature Description

The time bases are used to time-tag data on the flight deployment and to decode to the right epoch on the ground.

The values are currently encoded in two places:

F-Prime:

https://github.com/nasa/fprime/blob/master/config/FpConfig.hpp#L324

F-Prime tools:

https://github.com/fprime-community/fprime-tools/blob/devel/src/fprime/common/models/serialize/time_type.py

If a project wishes to define a different set of time bases, it can't be done in the fprime-tools repo since that is read-only by the user. fprime-tools needs to add a ""config"" directory like F Prime so they can at least be synchronized. In the long term, there should be a common shared definition between flight and ground.

## Rationale

Make it possible for users to adapt time bases.
",non-bug,https://github.com/nasa/fprime/issues/1841
Throttle send frame EVR,"| | |
|:---|:---|
|**_F´ Version_**|commit d3fa31c |
|**_Affected Component_**| ?  |
---
## Problem Description

A description of the problem with sufficient detail to understand the issue.

If there is no ground system, the interface continuously sends this pair of EVRs:

```
0x201db690 (TV_TLM): [ERROR] Failed to send framed data: 0
0x201db690 (TV_TLM): [ERROR] Failed to send framed data: 0
0x201db690 (TV_TLM): [ERROR] Failed to send framed data: 0
0x201db690 (TV_TLM): [ERROR] Failed to send framed data: 0
0x201db690 (TV_TLM): [ERROR] Failed to send framed data: 0
0x201db690 (TV_TLM): [ERROR] Failed to send framed data: 0
0x202236f0 (TV_ReceiveTask): [WARNING] Failed to open port with status 61 and errno 0
```

## How to Reproduce

1. Run Ref without the ground system
2.
3.

## Expected Behavior

IMHO the EVR should throttle, and perhaps the throttle is reset when the connection is make.
",bug,https://github.com/nasa/fprime/issues/892
Autogenerate CLI Documentation (e.g. --help),"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Host the output of our CLI tools `--help` option, automatically, in our online API documentation.",non-bug,https://github.com/nasa/fprime/issues/2027
"fpp-check, fpp-to-cpp resulting in `error: undefined symbol`","| | |
|:---|:---|
|**_F´ Version_**|3.0.0 |
|**_Affected Component_**| fpp-tools  |
---
## Problem Description

Running fpp-check or fpp-to-cpp results in `error undefined symbol`. 

For example: 
```
<>:~/<my_path_to>/fprime/Ref/Top$ fpp-check topology.fpp
fpp-check
<my_path_to>/fprime/Ref/Top/topology.fpp: 24.14
    instance $health
             ^
error: undefined symbol health
```
## How to Reproduce

1. Run `fpp-check` or `fpp-to-cpp` with `/Ref/Top/topology.fpp`

## Expected Behavior

Behavior according to [fpp-check](https://github.com/fprime-community/fpp/wiki/fpp-check) and [fpp-to-cpp](https://github.com/fprime-community/fpp/wiki/fpp-to-cpp).

## 
I'm learning on how to use the fpp-tools to understand how to make a deployment from scratch by testing the fpp-tools on Ref to see how the tools behave. I'm following [this guide](https://fprime-community.github.io/fpp/fpp-users-guide.html#Writing-C-Plus-Plus-Implementations_Implementing-Deployments) on sections _Topology Definitions_ and _Implementing Deployments_. ",bug,https://github.com/nasa/fprime/issues/1295
AcConstants.ini exists but is not used,"## Issue

* AcConstants.ini exists in the repo but isn't used for anything: https://github.com/nasa/fprime/blob/devel/config/AcConstants.ini. It was used in the hand-coded XML, which no longer exists. It has been superseded by AcConstants.fpp. This is confusing because users may update AcConstants.ini by mistake, when they should update AcConstants.fpp.
* The docs still refer to AcConstants.ini. See https://github.com/nasa/fprime/blob/devel/docs/UsersGuide/dev/configuring-fprime.md#acconstantsini.

## Suggested Solution

1. Remove AcConstants.ini from the repo.
2. Update the docs.",bug,https://github.com/nasa/fprime/issues/1893
Command to push telemetry values,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Operators are blind to real-time telemetry channels that are configured to telemeter on-change where the change occurs when there was no communication (e.g. during radio boot, when no antenna coverage, etc.). Obviously, the channel values are present in the `ComLogger` files, but those are onerous to obtain in terms of the command to telemeter and the bandwidth they consume.

What would be awesome is a command (part of `TlmChan`?) to ""push"" the current value for all channelized telemetery. To conserve bandwidth, an argument to push only channels configured to telemeter on-change would be nice too.

## Rationale

Enables efficient operator visibility into the current spacecraft state.

Note there are comparable features on SMAP, a less-awesome version on M2020, and I think there's a comparable command on Clipper (but I can't get to their command dictionary tool).",non-bug,https://github.com/nasa/fprime/issues/2511
"`new --deployment` Offers to Add ""Component"" to `project.cmake`","Typo in `new --deployment` asks to add ""New component"" to `project.cmake` when in reality we are making a deployment.

Options:
1. Dynamic text
2. Use ""module"" instead",bug,https://github.com/nasa/fprime/issues/2237
Update led blinker workshop docs to link to new compilation docs,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Rather than owning two copies of the instructions, update the [fprime-workshop-led-blinker](https://github.com/fprime-community/fprime-workshop-led-blinker) docs so that they link to the new instructions https://github.com/nasa/fprime/tree/devel/docs/Tutorials/CrossCompilationSetup.

",non-bug,https://github.com/nasa/fprime/issues/2148
F Prime GDS - Commanding locks up when resending a command from the history.,"| | |
|:---|:---|
|**_F´ Version_**|v3.4.1, commit 8a1612c0d |
|**_Affected Component_**|  n/a |
---
## Problem Description

When trying to resend a command with a numerical argument from the history, the command send button no longer functions. Looking at the dev console, the following error is sent:

```
TypeError: argument.value.startsWith is not a function
    squashify_argument http://127.0.0.1:5000/addons/commanding/arguments.js:123
    serialize_arg http://127.0.0.1:5000/addons/commanding/command-input.js:56
    sendCommand http://127.0.0.1:5000/addons/commanding/command-input.js:161
```
Opening a new connection in another tab clears the problem, but only until a command with a numerical argument is resent from the history again.

## How to Reproduce

1. Find a command with a numerical argument
2. Send the command
3. Double click on the command from the history and see the behavior

## Expected Behavior

User should be able to always send a command from the history.
",bug,https://github.com/nasa/fprime/issues/2473
`manylinux_X_Y` Packages Don't Install With Older PIP Versions,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`manylinux_X_Y` packages require a newer pip version than older stock Pythons. These will then not install correctly.  We should switch to the oldest possible manylinux packages to ensure compatibility.",bug,https://github.com/nasa/fprime/issues/2423
F´ Terminology Documentation,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Write a guide for translating ""software engineering concepts""  to ""F´nomenclature"".  

e.g.

Queue -> Os::Queue or Async Port call
Map -> Table + for loop",non-bug,https://github.com/nasa/fprime/issues/1251
ComLogger fails unit test,"| | |
|:---|:---|
|**_F´ Version_**| 2.0|
|**_Affected Component_**|   |
---
## Problem Description
ComLogger fails unit test on laptop running Ubuntu 20.04 despite it being deployed and performed just fine on a native host machine and a raspberry pi.

## How to Reproduce

1. . ./fprime-venv/bin/activate
2. cd fprime/Svc/ComLogger
3. fprime-util check

## Expected Behavior

The following output shown in the terminal

```
1: Test command: /home/rawinza555/fprime/build-fprime-automatic-native-ut/bin/Linux/Svc_ComLogger_ut_exe
1: Test timeout computed to be: 10000000
1: [==========] Running 5 tests from 1 test suite.
1: [----------] Global test environment set-up.
1: [----------] 5 tests from Test
1: [ RUN      ] Test.testLogging
1: /home/rawinza555/fprime/Svc/ComLogger/test/ut/Tester.cpp:141: Failure
1: Expected equality of these values:
1:   fsStat
1:     Which is: 7
1:   Os::FileSystem::OP_OK
1:     Which is: 0
1: [  FAILED  ] Test.testLogging (2 ms)
1: [ RUN      ] Test.testLoggingNoLength
1: /home/rawinza555/fprime/Svc/ComLogger/test/ut/Tester.cpp:264: Failure
1: Expected equality of these values:
1:   fsStat
1:     Which is: 7
1:   Os::FileSystem::OP_OK
1:     Which is: 0
1: [  FAILED  ] Test.testLoggingNoLength (0 ms)
1: [ RUN      ] Test.openError
1: /home/rawinza555/fprime/build-fprime-automatic-native-ut/F-Prime/Svc/ComLogger/Autocode/GTestBase.cpp:183: Failure
1: Expected equality of these values:
1:   file
1:     Which is: ""illegal/fname?;\\*_0_4_9876543.com""
1:   e.file.toChar()
1:     Which is: ""illegal/fname?;\\*_0_4_9876543.dat""
1: 
1:   File:     /home/rawinza555/fprime/Svc/ComLogger/test/ut/Tester.cpp
1:   Line:     336
1:   Value:    Value of argument file at index 0 in history of event FileOpenError
1:   Expected: illegal/fname?;\*_0_4_9876543.com
1:   Actual:   illegal/fname?;\*_0_4_9876543.dat
1: 
1: [  FAILED  ] Test.openError (1 ms)
1: [ RUN      ] Test.writeError
1: /home/rawinza555/fprime/build-fprime-automatic-native-ut/F-Prime/Svc/ComLogger/Autocode/GTestBase.cpp:262: Failure
1: Expected equality of these values:
1:   file
1:     Which is: ""test_0_5_9876543.com""
1:   e.file.toChar()
1:     Which is: ""test_0_5_9876543.dat""
1: 
1:   File:     /home/rawinza555/fprime/Svc/ComLogger/test/ut/Tester.cpp
1:   Line:     429
1:   Value:    Value of argument file at index 0 in history of event FileWriteError
1:   Expected: test_0_5_9876543.com
1:   Actual:   test_0_5_9876543.dat
1: 
1: /home/rawinza555/fprime/build-fprime-automatic-native-ut/F-Prime/Svc/ComLogger/Autocode/GTestBase.cpp:262: Failure
1: Expected equality of these values:
1:   file
1:     Which is: ""test_0_5_9876543.com""
1:   e.file.toChar()
1:     Which is: ""test_0_5_9876543.dat""
1: 
1:   File:     /home/rawinza555/fprime/Svc/ComLogger/test/ut/Tester.cpp
1:   Line:     468
1:   Value:    Value of argument file at index 1 in history of event FileWriteError
1:   Expected: test_0_5_9876543.com
1:   Actual:   test_0_5_9876543.dat
1: 
1: [  FAILED  ] Test.writeError (0 ms)
1: [ RUN      ] Test.closeFileCommand
1: /home/rawinza555/fprime/build-fprime-automatic-native-ut/F-Prime/Svc/ComLogger/Autocode/GTestBase.cpp:380: Failure
1: Expected equality of these values:
1:   file
1:     Which is: ""test_0_6_9876543.com""
1:   e.file.toChar()
1:     Which is: ""test_0_6_9876543.dat""
1: 
1:   File:     /home/rawinza555/fprime/Svc/ComLogger/test/ut/Tester.cpp
1:   Line:     545
1:   Value:    Value of argument file at index 0 in history of event FileClosed
1:   Expected: test_0_6_9876543.com
1:   Actual:   test_0_6_9876543.dat
1: 
1: /home/rawinza555/fprime/Svc/ComLogger/test/ut/Tester.cpp:549: Failure
1: Expected equality of these values:
1:   Os::File::OP_OK
1:     Which is: 0
1:   ret
1:     Which is: 1
1: [  FAILED  ] Test.closeFileCommand (0 ms)
1: [----------] 5 tests from Test (6 ms total)
1: 
1: [----------] Global test environment tear-down
1: [==========] 5 tests from 1 test suite ran. (6 ms total)
1: [  PASSED  ] 0 tests.
1: [  FAILED  ] 5 tests, listed below:
1: [  FAILED  ] Test.testLogging
1: [  FAILED  ] Test.testLoggingNoLength
1: [  FAILED  ] Test.openError
1: [  FAILED  ] Test.writeError
1: [  FAILED  ] Test.closeFileCommand
1: 
1:  5 FAILED TESTS
1/1 Test #1: Svc_ComLogger_ut_exe .............***Failed    0.03 sec

0% tests passed, 1 tests failed out of 1

Total Test time (real) =   0.03 sec

The following tests FAILED:
	  1 - Svc_ComLogger_ut_exe (Failed)
Errors while running CTest
make[3]: *** [F-Prime/Svc/ComLogger/CMakeFiles/Svc_ComLogger_check.dir/build.make:58: F-Prime/Svc/ComLogger/CMakeFiles/Svc_ComLogger_check] Error 8
make[2]: *** [CMakeFiles/Makefile2:18997: F-Prime/Svc/ComLogger/CMakeFiles/Svc_ComLogger_check.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:19004: F-Prime/Svc/ComLogger/CMakeFiles/Svc_ComLogger_check.dir/rule] Error 2
make: *** [Makefile:6558: Svc_ComLogger_check] Error 2
[ERROR] CMake erred with return code 2
```


",bug,https://github.com/nasa/fprime/issues/951
Document Memory Management Setup,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Document MemAllocator, BufferManager, and StaticMemory memory allocators.",non-bug,https://github.com/nasa/fprime/issues/1688
Add OpenMCT Telemetry Viewer to F-Prime GDS,"| | |
|:---|:---|
|**_F´ Version_**| 3.2.1|
|**_Affected Component_**|  |
---
## Feature Description
An OpenMCT Telemetry viewer in F-Prime GDS would involve creating a plugin that would:

1. Take in the TopologyAppDictionary.xml and generate OpenMCT JSON Definitions
2. Poll the F-Prime GDS API for telemetry and publish the data to an OpenMCT server

Ideally, the user would just run the command ```fprime-gds``` and an OpenMCT server would start as a separate tab, along with the standard F-Prime GDS server. The user would get access to all the F-Prime telemetry channels in the OpenMCT server, which would display the channels in real time.

## Rationale

Currently, the way to view telemetry in F-Prime GDS is via the charts tab and the channels tab. The current telemetry views allow for raw timestamp viewing and individual plots of telemetry. OpenMCT allows for additional customizability with telemetry viewing. Users can create layouts with multiple telemetry channels, and visualize telemetry in a much more refined manner(stacked/overlay plots, gauges, tables).",non-bug,https://github.com/nasa/fprime/issues/2161
ld warnings when building unit tests,"**Issue:** Since updating to the latest Mac OS tools and updating to the latest fprime/devel, I'm seeing warnings like this when building unit tests on Mac OS:
```
ld: warning: ignoring duplicate libraries: '../../../lib/Darwin/libFw_Com.a', '../../../lib/Darwin/libFw_Types.a'
```
Everything seems to build and run fine, and the unit tests pass, but we should investigate these warnings to find the root cause.

**How to reproduce:** Run `fprime-util build --ut` in any build module that has unit tests. The warning occurs at the step where the build system links the unit test executable.",bug,https://github.com/nasa/fprime/issues/2285
Force on fprime-util purge command doesn't work,"# Issue
When using `fprime-util purge`, `--force` argument doesn't work

# Solution
Replace 
```python
if confirm() or parsed.force:
```
by 
```python
if parsed.force or confirm():
````
[here](https://github.com/nasa/fprime/blob/c486a0252651f3642968eacd99dbe8ff5fbb817f/Fw/Python/src/fprime/util/build_helper.py#L379) and [here ](https://github.com/nasa/fprime/blob/c486a0252651f3642968eacd99dbe8ff5fbb817f/Fw/Python/src/fprime/util/build_helper.py#L398) to ensure condition will pass if `--force` option is set. Otherwise `confirm()` function is called first and confirmation will always be asked to the user

",bug,https://github.com/nasa/fprime/issues/310
Unable to run HelloWorldDeployment with `fprime-gds`,"| | |
|:---|:---|
|**_F´ Version_**| 3.2.0 |
|**_Affected Component_**| HelloWorld |
---
## Problem Description

Encountered `[ERROR] Not in fprime deployment and no artifacts root provided, unable to find dictionary and/or app` while attempting to run `fprime-gds` after building HelloWorldDeployment from [fprime-tutorial-hello-world](https://github.com/fprime-community/fprime-tutorial-hello-world) as of https://github.com/fprime-community/fprime-tutorial-hello-world/commit/7958de6287ea7f88aa50a963a46937bccda3fe98

![Screenshot from 2023-07-18 10-12-52](https://github.com/nasa/fprime/assets/14095576/811cef74-29c0-42df-a0ce-22587ed3f403)

![Screenshot from 2023-07-18 10-13-35](https://github.com/nasa/fprime/assets/14095576/2282ece5-488e-40b5-a1f6-8bbb19f53681)

## How to Reproduce

### Setup dev environment
1. `git clone https://github.com/nasa/fprime.git`
2. `cd fprime`
3. `git checkout v3.2.0`
4. `pip install -r requirements.txt`

Note: Above steps are pre-installed/configured in [fprime-workspace-image](https://github.com/capsulecorplab/fprime-workspace-image)

### Build and attempt to run HelloWorldDeployment
1. `git clone --recurse-submodules https://github.com/fprime-community/fprime-tutorial-hello-world`
2. `cd fprime-tutorial-hello-world`
3. `git checkout 7958de6287ea7f88aa50a963a46937bccda3fe98`
4. `fprime-util generate`
5. `fprime-util build -j4`
6. `cd HelloWorldDeployment`
7. `fprime-util build -j4`
8. `fprime-gds`
9. See error

## Expected Behavior

Should be able to run deployment
",bug,https://github.com/nasa/fprime/issues/2139
`Fw::TimeInterval`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Current `Fw::Time` represents absolute time and is abused for relative time.  We should figure out how to represent time intervals.",non-bug,https://github.com/nasa/fprime/issues/2740
Image and diagram references are broken on Doxygen documentation,"| | |
|:---|:---|
|**_F´ Version_**| 8176bcd |
|**_Affected Component_**| Doxygen Documentation  |
---
## Problem Description

Generating Doxygen documentation does not modify image paths or bundle them locally, so all the image references are broken.

## How to Reproduce

1. Build Doxygen using generate_docs.bash
2. Run static file server in documentation output location (e.g. `python -m http.server`)
3. Open browser on given port and navigate to a component that is known to have an image or diagram in its markdown file
4. Alternatively, browse to the online [C++ documentation](https://nasa.github.io/fprime/UsersGuide/api/c++/html/index.html)

## Expected Behavior

Images and other diagrams should be shown on the site.
",bug,https://github.com/nasa/fprime/issues/1424
Fix grammar ,Fix grammar ,bug,https://github.com/nasa/fprime/issues/480
Improve error display on failure of fputil_action,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**| CI |
---
## Feature Description

The current CI does not display all the errors, neither the stdout stream. Right now, the log can be only seen in artefacts related to the related job.

## Rationale

The CI should directly display the stdout stream, as well as the whole stderr stream, in case of errors in order to make it easier to debug.

Related comment: https://github.com/nasa/fprime/pull/2606#issuecomment-2061757492
",non-bug,https://github.com/nasa/fprime/issues/2695
Tab related error message ,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Explicit error message for tabs used in fpp

## Rationale

Tabs are not allowed in fpp, but if a tab is included the resulting error message is not clear to inexperienced users. 
",non-bug,https://github.com/nasa/fprime/issues/1811
F Prime version with schema version in the GDS,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

fprime version with schema version in the GDS compatibility check",non-bug,https://github.com/nasa/fprime/issues/1546
Purge does not purge on a failed generate,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0|
|**_Affected Component_**| fprime-util  |
---
## Problem Description

When `fprime-util generate` fails, subsequent `fprime-util generate` fail with a `[ERROR] (...directory...) already exists.` message. `fprime-util purge` does not clean the generated build directory from the failed generate.

## How to Reproduce

1. Run `fprime-util generate`
2. Press Ctrl+C soon after running the command above
3. Run `fprime-util generate` and see the `[ERROR] (...directory...) already exists.` message
4. Run `fprime-util purge`
4. Run `fprime-util generate` and still see the `[ERROR] (...directory...) already exists.` message

## Expected Behavior

I expect `fprime-util generate` to attempt to generate after a failed generate.
I expect `fprime-util purge` to remove the generated build directory from the failed generate.

## Work Around

If your `fprime-util generate` fails, just use `rm -r` on the generated build directory from the failed generate.",bug,https://github.com/nasa/fprime/issues/1239
Fail to build UTs for PolyType when disabling FW_SERIALIZABLE_TO_STRING,"| | |
|:---|:---|
|**_F´ Version_**| e47cc1abc8e83f763861291919c9f6b63e8aeaa2|
|**_Affected Component_**|   |
---
## Problem Description

Fail to build UTs for PolyType when disabling FW_SERIALIZABLE_TO_STRING

## How to Reproduce

1. Disable FW_SERIALIZABLE_TO_STRING in config/FpConfig.hpp
2. Run fprime-util check --all -j 4

## Expected Behavior

I expect UTs to build correctly.
",bug,https://github.com/nasa/fprime/issues/1727
Integration of SEDS in F´,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**|  F´|
---
## Feature Description


Integrate the SEDS (SOIS-EDS - Spacecraft Onboard Interface Services Electronic Data Sheet) of the CCSDS (Consultative Committee for Spacecraft Data Systems) into the F´ framework.

An EDS [1] is an unambiguous XML representation of the functional interfaces offered by all protocols used to access data interfaces for hardware and software components.

To paraphrase @skliper [2], the main benefits of SEDS are:

- The exchange of unambiguous interface definitions in a standard format between organizations/partners

- Automatic generation of interface code, system models, system tests and mission operational databases

- Runtime support for plug-and-play systems.

## Rationale

According to the reports of the European working group SAVOIR-SAFI [3], the SW-ICDs in proprietary (company-specific) paper format of the unit suppliers will disappear and be homogenized/standardized in electronic format.

An integration of SEDS is still ongoing in the Goddard Space Flight Center cFS framework [4].
The integration of this feature in F´ would be very interesting to promote its use for primes but also for unit suppliers Flight Software.

According to @timcanham, in a discussion on the F' Community Group [5], the modification would not result from an XML change at the level of F´, but from the way we compose the packets that are sent to the Ground System.

## References

> [1] SPACECRAFT ONBOARD INTERFACE SERVICES — XML SPECIFICATION FOR ELECTRONIC DATA SHEETS https://public.ccsds.org/Pubs/876x0b1.pdf

> [2] https://github.com/nasa/cFE/issues/207

> [3] https://hal.archives-ouvertes.fr/hal-01261720/document (Official documents are archived in http://essr.esa.int for registered members.)

> [4] Continuation of EDS integration for CFE: https://github.com/nasa/cFE/issues/243

> [5] F´ Community Group / Integration of SOIS EDS for F´: https://groups.google.com/g/fprime-community/c/I9REPFl3egc

Other interesting links:

> EDS at ESA: Current Status and Roadmap: https://indico.esa.int/event/338/contributions/5707/attachments/4006/5911/1400%20-%20Electronic%20Data%20Sheets.pdf

> SOIS Electronic Data Sheets for Onboard Devices: https://indico.esa.int/event/22/contributions/1997/attachments/1658/1950/SOIS_EDS_ADCSS_2013_v1.0.pdf
",non-bug,https://github.com/nasa/fprime/issues/555
Adding New Target With Missing FPP Causes CMake Target To Not Exist,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Could be related to #1680 .  Could also be related to #1633 ",bug,https://github.com/nasa/fprime/issues/1687
Create Telemetry/Channel Interface,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make an interface out of the standard Channel ports. See #2255 for an example interface change set.

The following three ports should be put into an interface at `Fw/Interfaces/ChannelInterface.fppi` such that component implementers can quickly use them.

https://github.com/nasa/fprime/blob/a73bff28617b96736c0e3e222e4c6e1dea1c6f5e/Ref/SignalGen/SignalGen.fpp#L56-L57
",non-bug,https://github.com/nasa/fprime/issues/2585
Refactor Os::SystemResources into CMake Selection,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

- [ ] Refactor Os::Log into the Interface, Os::Log, and Implementation classes (following pattern of Os::File)
- [ ] Implement Posix implementation
- [ ] Implement Stub implementation
- [ ] Implement Test stub implementation
- [ ] Build common rules-based tests
- [ ] Build specific posix tests
- [ ] Build stub interface tests
- [ ] Setup default posix implementation for Posix platforms
- [ ] Document
",non-bug,https://github.com/nasa/fprime/issues/2727
Change variable in Autocoded functions to use _,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

PolyPortAc.cpp:144 serializes the status from the previous response because the variable status is shadowed.",bug,https://github.com/nasa/fprime/issues/1452
Component directory in tutorials,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The math component and hello world tutorials have users create a ""Components"" directory, but as of the newest F', a Components directory is autogenerated with F' util new --project. 


",bug,https://github.com/nasa/fprime/issues/2113
Add static assertions for dependent F Prime flags,"Copied from https://github.com/fprime-community/fpp/issues/303, since this is a framework issue.

Some combinations of settings of F Prime flags will cause the generated code to fail to compile. To assist the user, we should add static assertions that check for these conditions and provide clear error messages. 

Known dependencies:

- If `BUILD_UT` is on, `FW_SERIALIZABLE_TO_STRING` and `FW_ARRAY_TO_STRING` must also be on
-  `FW_SERIALIZABLE_TO_STRING` and `FW_ARRAY_TO_STRING` are dependent in the following cases:
   - If an array containing structs is defined and `FW_ARRAY_TO_STRING` is on, then `FW_SERIALIZABLE_TO_STRING` must also be on
   - If a struct containing arrays is defined and `FW_SERIALIZABLE_TO_STRING` is on, then `FW_ARRAY_TO_STRING` must also be on",non-bug,https://github.com/nasa/fprime/issues/2467
Segfault In AssertFatalAdapter,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The fprintf call to put the assert message into stderr segfaults on linux systems.  Switch back to printf.",bug,https://github.com/nasa/fprime/issues/1418
Using rules-based testing for the unit tests,"Originally posted by @bocchino in https://github.com/nasa/fprime/pull/283#pullrequestreview-542474363

I suggest using rules-based testing for the unit tests. I have a memory allocator that I wrote for the Autonomy research project that uses rules-based testing.

Consider using a more efficient algorithm for allocation. In the approach suggested below, the allocation time is worst-case linear in the number of bins. The deallocation time is constant.

Use a separate data structure for the bin metadata and for the allocated memory. For the bin metadata, you can have an array of bins. Each bin can store (1) an array of pointers to memory blocks and (2) a size, which is the number of buffers reserved from that bin (initially zero for each bin). The allocated memory can be an array of arrays of memory blocks. On setup, it can look something like this, assuming 2 bins with 6 pointers and 4 pointers:
buffer-manager-1
![image](https://user-images.githubusercontent.com/35859004/105430708-f67fda80-5c08-11eb-8ef2-e0861416277d.png)


To allocate, search the bins to find one that has big enough buffers and has an available buffer. You can use linear search for this. To reserve a buffer from a bin B, (1) use the buffer whose pointer is at the end of the array of pointers in B and (2) increment the number of reserved buffers for B. Here is an example after three allocations from the lower bin. Pointers marked with an X point to reserved buffers. The lower bin has three reserved buffers, so the next allocation from that bin will come from the buffer whose pointer is at index 3 in the bin. The allocation time is constant once a bin with available buffers is found.
![image](https://user-images.githubusercontent.com/35859004/105430725-00a1d900-5c09-11eb-91ba-ce9d3eacb43d.png)


To deallocate a buffer, if the buffer to be deallocated has its pointer at the end of its bin, just decrement the number of reserved buffers for that bin, like this:
buffer-manager-3
![image](https://user-images.githubusercontent.com/35859004/105430732-07305080-5c09-11eb-82a4-0875d9c306b6.png)


If the buffer to be deallocated does not have its pointer at the end of the bin, then swap its pointer with the pointer at the end before decrementing the number of reserved buffers, like this:
buffer-manager-4
![image](https://user-images.githubusercontent.com/35859004/105430737-0c8d9b00-5c09-11eb-9591-5c47ae4b51d9.png)


Another standard approach is to use two linked lists for each bin, an allocated list and a free list. This approach has the same algorithmic complexity as what I sketched above, but I find the code for this approach to be less elegant.

Originally posted by @bocchino in https://github.com/nasa/fprime/pull/283#issuecomment-737471143

Another variant is to use a bounded LIFO queue (stack) of indices for each bin. The max size of each queue is the number of buffers in the bin. The queue stores the array indices of buffers that are available. Initially, each queue is full (it contains one copy of each buffer index). Then allocation is by dequeuing an index and deallocation is by enqueuing an index. You can implement the bounded stack with an array and a size. A bin has buffers available if its size is greater than zero. I think this way is slightly easier than what I described above.",non-bug,https://github.com/nasa/fprime/issues/341
Remove unnecessary parsers arguments when applicable,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Parsers are architected in a way where they all inherit from a top level parser that defines a bunch of stuff which is supposedly shared. Only, some of this stuff if not used in some commands, bloating the help text with unnecessary and wrong information, because those options don't actually do anything.
E.g.: `fprime-util format --help` will print those options
```
  -d DEPLOY, --deploy DEPLOY
                        F prime deployment directory to use. May contain multiple build directories.
  -p PATH, --path PATH  F prime directory to operate on. Default: cwd, /Users/chammard/Work/fp/fprime-tools.
  --build-cache BUILD_CACHE
                        Overrides the build cache with a specific directory
  -v, --verbose         Turn on verbose output.
  --ut                  Run command against unit testing build type
```

We should find a way to remove those extra parsing options when they are not needed. Somehow, it isn't as straightforward as you'd think to remove an argument from a parser. **This may be a hint that our parser architecture is not adapted to the growing functionality of `fprime-util`**, which doesn't only revolve around builds anymore.

## Rationale

Un-bloat help texts.
",non-bug,https://github.com/nasa/fprime/issues/2226
GDS GUI is blank if there is no cmdDisp.CMD_NO_OP in the CMD dictionary,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 |
|**_Affected Component_**|   GDS |
---
## Problem Description
GDS GUI is blank if there is no cmdDisp.CMD_NO_OP in the CMD dictionary.
Vue complains for not finding `full_name` of undefined as shown in the chrome devTool below:

![image](https://user-images.githubusercontent.com/35859004/114261795-82480e00-9991-11eb-81f2-ddf51f2a498e.png)

## How to Reproduce

1. Use a dictionary without having `cmdDisp.CMD_NO_OP`

## Expected Behavior

GDS GUI should not break if user does not specify `cmdDisp.CMD_NO_OP`.",bug,https://github.com/nasa/fprime/issues/474
F´ GDS Issues,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Two minor bugs in GDS's IP comm plugin:

1. `OSError` is raised on ""port in use"" instead of `ValueError`
2. IP client checks for port availability",bug,https://github.com/nasa/fprime/issues/2654
large File Uplink fails due to PacketOutOfOrder,"| | |
|:---|:---|
|**_F´ Version_**| v2.0.0 and later |
|**_Affected Component_**| FileUplink  |
---
## Problem Description

When uplinking a big file(>1MB), f' throws PacketOutOfOrder.

Example Events:
022-02-08T03:58:03.286Z | 0x7ff | fileUplink.PacketOutOfOrder | WARNING_HI | Received packet 49 after packet 34
2022-02-08T03:58:03.304Z | 0x7ff | fileUplink.PacketOutOfOrder | WARNING_HI | Received packet 54 after packet 49



## How to Reproduce

1. Changed Topology.cpp QUEUE_SIZE so that f` can receive large files.
```
enum
{
  UPLINK_BUFFER_STORE_SIZE = 3000,
  UPLINK_BUFFER_QUEUE_SIZE = 25000,
  UPLINK_BUFFER_MGR_ID = 200
};
```
2. Try uplinking large files over the network.

## Expected Behavior

FileUplink should be able to upload files without losing packets. 
Maybe put a delay in GDS while sending files or make changes in fprime to request for missed packets or account for out of order packets.

Related to https://github.com/fprime-community/fprime-gds/issues/43
",bug,https://github.com/nasa/fprime/issues/1265
Docker Workflow,"| | |
|:---|:---|
|**_F´ Version_**|n/A |
|**_Affected Component_**|  docker and workflows|
---
## Feature Description

Since F` uses Docker, wouldn't a Docker Workflow make sense?

## Rationale

Above",non-bug,https://github.com/nasa/fprime/issues/592
Fprime-gds view update issue,"| | |
|:---|:---|
|**_F´ Version_**| 3.1.4 |
|**_Affected Component_**| GDS |
---
## Problem Description

When you update a telemetry tab with a new view file, the set of channels displayed is all channels until the first data is received.

## How to Reproduce

1. Create a view
2. Click done
3. Full set of channels is still displayed (sans data)
4. Start data flowing
5. Channel view is reduced to selected channels

## Expected Behavior

As soon as view selection is done, new set of channels should be displayed, even if no data for those channels has arrived.
",bug,https://github.com/nasa/fprime/issues/1757
The Earth Is Flat,,bug,https://github.com/nasa/fprime/issues/410
Add `Svc::ComQueue` and Real Time Driver To `fprime-util new --deployment`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

`Svc::ComQueue` and `Svc::ComStub` and a real implementation of a rate group driver clock source are all missing from the new deployments.",non-bug,https://github.com/nasa/fprime/issues/1982
"add/generate `requirements.txt` as a ""lockfile"" for python packages","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add or generate a `requirements.txt`, containing pinned versions for all python packages and dependencies. Such a `requirements.txt` can be generated from `setup.py` using a tool s.a., `pip-compile` from [pip-tools](https://github.com/jazzband/pip-tools/). `requirements.txt` files could also be generated for `fprime-tools`, `fprime-gds`, and/or `fprime-fpp`

## Rationale

A `requirements.txt`, containing pinned versions for all python packages and dependencies, would provide an optional means to ensure reproducible installation of the _working_ versions of all python packages and dependencies, using `pip install -r requirements.txt`, essentially functioning akin to a `package-lock.json` used in NodeJS projects managed with `npm`.",non-bug,https://github.com/nasa/fprime/issues/1455
Add visualization to math component tutorial ,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The math component tutorial completely leaves out all mentions of the F' visualizer. Please add the visualized to the math component tutorial. 


",non-bug,https://github.com/nasa/fprime/issues/2107
Unable to test F` GDS installation via running HTML GUI,"| | |
|:---|:---|
|**_F´ Version_**| 2.0.0|
|**_Affected Component_**|   docs, GDS|
---
## Problem Description

I am new to the F\`. I am trying to follow the installation guide [INSTALL.md](https://github.com/nasa/fprime/blob/devel/docs/INSTALL.md). Everything works fine until the **Testing F´ GDS Installation Via Running HTML GUI** step. When running the `fprime-gds -g html -r ./build-artifacts` from the Ref directory I experience the following error:
```
[ERROR] Dictionary version 2.0.0 is not in supported range: 0.0.0-1.5.4. Please upgrade fprime-gds.
[ERROR] Failed to run application: ****/fprime-venv/bin/python3 -u -m flask run --host 127.0.0.1 --port 5000. Error: ****/fprime-venv/bin/python3 stopped with code 1 sooner than 2 seconds.
```
<details>
<summary>Expand to view full log</summary>

```
» fprime-gds -g html -r ./build-artifacts
[INFO] Ensuring TCP Server is stable for at least 5 seconds
[INFO] Running Application: ****/fprime-venv/bin/python3
[INFO] Log File: ****/fprime/Ref/logs/2021_06_14-04_30_40/ThreadedTCP.log
[INFO] Ensuring comm[ip] Application is stable for at least 1 seconds
[INFO] Running Application: ****/fprime-venv/bin/python3
[INFO] Ensuring Ref Application is stable for at least 1 seconds
[INFO] Running Application: ****/fprime/Ref/build-artifacts/Linux/bin/Ref
[INFO] Log File: ****/fprime/Ref/logs/2021_06_14-04_30_40/Ref.log
[INFO] Ensuring HTML GUI is stable for at least 2 seconds
[INFO] Running Application: ****/fprime-venv/bin/python3
 * Serving Flask app ""fprime_gds.flask.app""
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
[ERROR] Dictionary version 2.0.0 is not in supported range: 0.0.0-1.5.4. Please upgrade fprime-gds.
[ERROR] Failed to run application: ****/fprime-venv/bin/python3 -u -m flask run --host 127.0.0.1 --port 5000. Error: ****/fprime-venv/bin/python3 stopped with code 1 sooner than 2 seconds.
[INFO] Shutting down F prime due to error. Failed to run HTML GUI
```
</details>

## How to Reproduce
I am following the [INSTALL.md](https://github.com/nasa/fprime/blob/devel/docs/INSTALL.md) verbatim:
```
python3 -m venv ./fprime-venv
./fprime-venv/bin/activate
git clone https://github.com/nasa/fprime
cd fprime
cd Ref
pip install --upgrade fprime-tools fprime-gds
fprime-util generate\nfprime-util build --jobs ""$(nproc || printf '%s\n' 1)""
fprime-gds -g html -r ./build-artifacts
```

## Expected Behavior

",bug,https://github.com/nasa/fprime/issues/709
Refactor Os::Mutex into CMake Selection,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

- [x] Refactor Os::Mutex into the Interface, Os::Mutex, and Implementation classes (following pattern of Os::File)
- [x] Implement Posix implementation
- [x] Implement Stub implementation
- [x] Implement Test stub implementation
- [x] Build common rules-based tests
- [x] Build specific posix tests
- [x] Build stub interface tests
- [x] Setup default posix implementation for Posix platforms
- [ ] Document
",non-bug,https://github.com/nasa/fprime/issues/2722
Responsive Layouts for Sphinx,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| Sphinx Python Documentation |
---
## Feature Description

We got a PR that would be overwritten when we generate the next set of release documentation.  Instead we should migrate the changes in from #496.

## Rationale

We auto generate documentation for our Python modules.  Thus changes to the style should be made in the configuration.
",non-bug,https://github.com/nasa/fprime/issues/499
error in fprime-util generate,"I have been trying to follow the tutorials to install fprime, but when I try to use the fprime-util to generate a build system I get this error.


-- Searching for F prime modules in: /run/media/root/Storage/fprime
-- Autocoder constants file: /run/media/root/Storage/fprime/config/AcConstants.ini
-- Configuration header directory: /run/media/root/Storage/fprime/config
-- [fpp-tools] /run/media/root/Storage/fpp/compiler/bin/fpp-depend version v1.0.1-5-g78d86ff3 not expected version v1.0.1
CMake Error at /run/media/root/Storage/fprime/cmake/required.cmake:21 (message):
  fpp tools were not found.  Please install the fpp tool suite.
Call Stack (most recent call first):
  /run/media/root/Storage/fprime/cmake/FPrime.cmake:25 (include)
  CMakeLists.txt:32 (include)

-- Configuring incomplete, errors occurred!

I tried installing fpp compiler by source but I still get the same error
",bug,https://github.com/nasa/fprime/issues/1411
Better reporting from comLogger of file names,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description


When starting / closing file / stopping record you never get an indication of what the file name is. Example:
![image](https://user-images.githubusercontent.com/2592986/128460016-dabc846a-40b4-45ee-b6bd-32a6886170f7.png)


Activity low EVRs should be produced at each step so its clear what the file name is during each of these operations.
",non-bug,https://github.com/nasa/fprime/issues/898
F´ Better Dictionary Handling,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

1. Watch and reload dictionary on rebuilds
2. Better finding of `dictionary` when running with `-n` as it is complicated to run deployment on HW and type out path to `--dictionary`
",non-bug,https://github.com/nasa/fprime/issues/2242
User Guide XML Specifications page does not mention Event throttling ,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 |
|**_Affected Component_**| User Guide  |
---
## Problem Description

The xml-specification pages does not list the ""Throttle"" Event tag for throttling events.

https://nasa.github.io/fprime/UsersGuide/dev/xml-specification.html

https://github.com/nasa/fprime/blob/9198c47adde61c38d7a6a47a0789f5fba4e3684a/Autocoders/Python/schema/default/event_schema.rng#L62

## How to Reproduce

N/A

## Expected Behavior

The throttle tag should be documented in the XML specifications
",non-bug,https://github.com/nasa/fprime/issues/413
Write an Adapter and Framer Plugin Setup,We should add an comm adapter and framer plugin setup for instantiating user's adaptations easily.,non-bug,https://github.com/nasa/fprime/issues/220
111,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

A description of the problem with sufficient detail to understand the issue.

## How to Reproduce

1. 
2.
3.

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/1413
fprime-util install not recognised,"| | |
|:---|:---|
|**F´ Release 1.5.3**| |
|**_Installation **|   |
---
## Problem Description

First f-prime installation on WSL2 Debian. Following instructions included at:
https://nasa.github.io/fprime/INSTALL.html

fprime-util install --jobs 32 is not recognised:

usage: fprime-util [-h]
                   {generate,purge,hash-to-file,info,build,impl,check} ...
fprime-util: error: argument command: invalid choice: 'install' (choose from 'generate', 'purge', 'hash-to-file', 'info', 'build', 'impl', 'check')


## How to Reproduce

Just follow instructions at https://nasa.github.io/fprime/INSTALL.html until ""Checking Your F´ Installation""

The order ""fprime-util install --jobs 32"" doesn't work

## Expected Behavior
Binary to execute Ref application
",bug,https://github.com/nasa/fprime/issues/428
Integration Test API:  Latest FSW Time Getter is incorrect,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---


Because it was demonstrated that data objects can come in a different receive order than they were created in FSW, the `get_latest_time()` method is not correct. When implemented, it was assumed that all history items would be enqueued in the same order that they were created. This is no longer a safe assumption. Effectively `get_latest_time()` is returns an approximation of the latest time.

I see two options to address this:

1. Replacing the Ram Histories in the GDS with Chronological Histories
2. Having the TestAPI be subscribed to all data objects and calculate latest time as items are enqueued.",bug,https://github.com/nasa/fprime/issues/2641
Separate Modules and Ports/Types,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Ports and types are defined within the same module as components.    The analysis is below, but the result of this analysis is that the `FileDownlink` component needs its types/ports split from its component definition.  The reason: these ports and types are used externally by other components and thus causes an inter-module dependency that is unnecessary.


Must split:
[Svc/FileDownlink/FileDownlink.fpp](https://github.com/nasa/fprime/blob/devel/Svc/FileDownlink/FileDownlink.fpp) : enum struct port component

",bug,https://github.com/nasa/fprime/issues/1165
`impl` and `impl --ut` Cannot detect Configured AcConstants.ini,The impl and testimpl AcConstants.ini targets do not pass in the location of custom AcConstants.ini.,bug,https://github.com/nasa/fprime/issues/217
NodeJS -> Flask Transition for FPP Visualizer,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Deploy Visualizer as Flask APP.",non-bug,https://github.com/nasa/fprime/issues/2060
Build F´ Targets Wrapper,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make a convience helper in fprime util for building targets directly.  E.g. Replace `cd <build>; make <target>` with `fprime-util build --target <target>`.


",non-bug,https://github.com/nasa/fprime/issues/2033
File Downlink File Names,"| | |
|:---|:---|
|**_F´ Version_**| 1.5.3 |
|**_Affected Component_**| FileDownlink  |
---
## Problem Description

Some file names reportedly break FileDownlink. 

## How to Reproduce

""e.g. a source file name of ""/tmp/Screen_Shot_2020-03-26_at_9.19.28_PM.png"" breaks it with format error.""",bug,https://github.com/nasa/fprime/issues/516
File descriptor closed twice,"| | |
|:---|:---|
|**_F´ Version_**| 3.3.2 |
|**_Affected Component_**| Os/FileManager  |
---
## Problem Description

When calling `Os::FileSystem::copyFile()` and `Os::FileSystem::appendFile()`, the source and destination file descriptors (FD) are attempted to be closed twice. This should be logged somewhere as error, but the return value of closing the FD is ignored in the implementation of `Os::File::close()`.

The root cause is described below.

In `Os/Linux/File.cpp`, there's a `File::close()` call from the destructor:
```c++
File::~File() {
    if (this->m_mode != OPEN_NO_MODE) {
        this->close();
    }
}
``` 
The `Os::FileSystem::copyFile()` and `Os::FileSystem::appendFile()` call helper function `copyFileData()` which takes source and destination files as value arguments. Therefore, when the function returns, the files are closed because of the destructor, while at the same time, they are closed again in the calling function.

```c++
Status copyFileData(File source, File destination, FwSizeType size) {
   // Copying logic...

   // At the end, `source` and `destination` destructor closes the files.
}

Status copyFile(const char* originPath, const char* destPath) {
    File source;
    File destination;
    File::Status file_status;

    fs_status = copyFileData(source, destination, fileSize);
   
    // Files are closed again because the `source.m_mode` and `destination.m_mode` are
    // not set to OPEN_NO_MODE in these instances. 
    (void)source.close();
    (void)destination.close();

    return fs_status;
}
```

In the actual `Os::File::close()` implementation, the return value of operating system's `close(FD)` is ignored, I presume in order to be able to call the routine in the destructor.

```c++
void File::close() {
    if ((this->m_fd != -1) and (this->m_mode != OPEN_NO_MODE)) {
        (void)::close(this->m_fd);
        this->m_fd = -1;
    }
    this->m_mode = OPEN_NO_MODE;
}
```

## How to Reproduce

For the Posix implementation, this doesn't lead to any big trouble, however, I ran into issues when implementing a port for Zephyr. I believe a nicer interface would be to either assert in the destructor that the file is closed and pass it always by reference, or make the destructor a noop.

## Expected Behavior

The files should only be closed once.
",bug,https://github.com/nasa/fprime/issues/2280
Add in MermaidJS Rendering to Docs,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We need to add jekyll-spaceship plugin to our plugins to render mermaidJS",non-bug,https://github.com/nasa/fprime/issues/1573
Baremetal Reference: MicroFS,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Blocking",non-bug,https://github.com/nasa/fprime/issues/2064
FPP Build With Latest Native Images,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Fix PR in FPP for native images.",non-bug,https://github.com/nasa/fprime/issues/2199
Unexpected version from fpp.cmake,"| | |
|:---|:---|
|**3.0.0**| |
|**fpp-tools**|   |
---
## Problem Description
""Not expected version"" error message after running _fprime-util generate_ (see picture below)

## How to Reproduce

1. Follow Latest Documentation for F Prime Installation.
2. Under _Ref_ enter_fprime-util generate_ command

## Expected Behavior
![Screenshot from 2022-02-08 15-26-57](https://user-images.githubusercontent.com/89213755/153076220-b0ebb8c1-c3d6-4a9d-8723-6f80fe7aa64d.png)
",bug,https://github.com/nasa/fprime/issues/1266
GDS can consume the full system memory if the GUI is not use,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| fprime-gds   |
---
## Problem Description

The history inside `fprime-gds` is cleaned only when the data are sent to the GUI. If for some reason the GUI is not opened(for example when using the option `-g none`) the history is never cleaned. If Fprime and gds is run for enough time they will eventually take all the memory available and crash. 

## How to Reproduce

1. Start fprime-gds with the option `-g none`
2. Start an Fprime executable(it would be better if the executable publish channel with a lot of data and/or very frequently)
3. Let it run for a while(like half an hour) and check the memory consumption of your device.

## Expected Behavior

Memory consumption should not grow without limits.

## Possible fixes

A fix I thought but I'm not sure it's acceptable is to add a maximum history size in `SelfCleaningRamHistory`. When the history reaches the maximum size, the first element added in the history can be removed avoiding unlimited growth.

I was also thinking of disabling the history when there is no GUI but from the structure of GDS I'm not sure is possible.",bug,https://github.com/nasa/fprime/issues/2337
Assert possible with particular bytes sent to Deframer,"| | |
|:---|:---|
|**_F´ Version_**| Current Master |
|**_Affected Component_**| FprimeProtocol, Deframer  |
---
## Problem Description

https://github.com/nasa/fprime/blob/8a64fb0e4ad44d4a9f7dfb99640e73d5961cf3d2/Svc/FramingProtocol/FprimeProtocol.cpp#L98
https://github.com/nasa/fprime/blob/8a64fb0e4ad44d4a9f7dfb99640e73d5961cf3d2/Svc/Deframer/DeframerComponentImpl.cpp#L125

If the bytes passed to FprimeProtocol in the size slot are such that when adding FP_FRAME_HEADER_SIZE and HASH_DIGEST_LENGTH to size cause a rollover and set needed = 0, then Deframer will do an assert.

## How to Reproduce

This happened when I was trying to modify deframer with larger buffers for ColdArm project's needs. I am not sure if it is due to my own random seed on the randomized unit tests for deframer. It could probably be reproduced by writing a quick script to write the troublesome bytes as input to a deployment's ground interface.


## Expected Behavior

Fprime protocol could check if `size` is > U32_MAX - (FP_FRAME_HEADER_SIZE + HASH_DIGEST_LENGTH) and fix `needed` appropriately, then return DeframingProtocol::DEFRAMING_INVALID_SIZE
",bug,https://github.com/nasa/fprime/issues/1296
Utilize and Statically Analyze JPL Coding Guidelines,"## Feature Description

[JPL's Institutional Coding Standards for C](https://yurichev.com/mirrors/C/JPL_Coding_Standard_C.pdf) is an institution wide standard for C code. While JPL has no C++ coding standard, many of the C coding standard requirements (no memory allocation outside of initialization, no recursion, etc) can be adapted to C++ projects like F'.

Requirements from the JPL C coding standard requirements that apply to C++ projects should be selected and F' should be audited for requirement compliance.

We should consider using static analysis to audit for and possible enforce compliance with the JPL C coding guidelines.

GitHub has open source CodeQL scripts for most JPL coding standard and power of ten rules available [here](https://github.com/github/codeql/tree/main/cpp/ql/src/). We could use these rules with github actions code scanning or custom LGTM analysis scripts. My first glance over the CodeQL scripts revealed that many of them are VxWorks specific and may require refactoring to work with F'",non-bug,https://github.com/nasa/fprime/issues/1072
Add Troubleshooting Guide With Example Errors,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Troubleshooting guide linked to install and tutorials covering:

1. What happens with old versions of python
2. What happens with old versions of cmake

Other errors?",non-bug,https://github.com/nasa/fprime/issues/2500
Publish an F´ Navigation Splash Page,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We should publish an F´ Navigation Splash Page.  It should have:
- [x] Links to four categories of F´  documentation
- [x] Links to upcoming events
- [x] Links to information
- [x] ARIA and alternative tags where appropriate
- [x] Site management information
",non-bug,https://github.com/nasa/fprime/issues/2296
Implement `fprime-util fpp-to-dict`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Run fpp-to-dict wrapper in fprime-util
",non-bug,https://github.com/nasa/fprime/issues/2701
Module Annotations do not Display as Doxy Comment in Generated .cpp Files,"| | |
|:---|:---|
|**_FPP Version_**| 2.0.2 |
|**_Affected Component_**| all |
---
## Problem Description

Modules are not annotable as claimed in the [FPP User's Guide](https://fprime-community.github.io/fpp/fpp-users-guide.html#Writing-Comments-and-Annotations). 

## How to Reproduce

1. Create a `file.fpp` with the following contents:
```bash
@ This is a module
module M {
  constant a = 1
}
```
3. Run the command `fpp-to-cpp file.fpp`
4. Inspect the generated file to spot the missing doxy comment.

## Expected Behavior

The output of the generated file should be:

```cpp
#! This is a module
namespace M {

  enum FppConstant_a {
    a = 1
  };

}
```",bug,https://github.com/nasa/fprime/issues/2660
Deployment (i.e. `Ref`) Log Not Showing in Logs Tab ,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The deployment logs aren't showing in `fprime-gds`",bug,https://github.com/nasa/fprime/issues/1885
ComQueue Does Not Deallocate Buffers on Overflow,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description


If a set Fw::Buffer overflows ComQueue it is potentially droped (internally and on queue) which would leak the memory.",bug,https://github.com/nasa/fprime/issues/2066
Autogenerate new deployments,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a `fprime-util new --deployment` command which generates an entire ""Hello World!"" deployment.

## Rationale

This has been requested a couple of times and would drastically improve the user experience when first trying out the framework. This would help in understanding what the best practice for creating a new deployment is, rather than adding things in the `Ref` app. \
It could also be a very good starting point for a new Tutorial that goes from 0 to hero.
",non-bug,https://github.com/nasa/fprime/issues/1926
Fpp constants available at compile-time,"| | |
|:---|:---|
|**_3.x**| |
|**All**|  |
---
## Feature Description

Make Fpp constants available at compile-time by auto-coding them as `constexpr` variables.

## Rationale

Fpp constants are auto coded as either `enum` member for integral constants or `extern const` for floating-point. 
`extern const` variables are not available at compile time. For example, `static_assert(FPP_F32_CONSTANT > 0);` will fail to compile because value of `FPP_F32_CONSTANT` is available only during linkage.

Also, it's cleaner to use `constexpr` for both integrals and floating-points instead of relying on enums. 

Current FppConstantAC.hpp:
```
namespace ModuleNamespace {
      enum FppConstant_CONSTANT_I32{
        CONSTANT_I32 = 5
      };
      extern const F32 CONSTANT_F32; // value assigned in .cpp file
}
```

with constexpr:
```
namespace ModuleNamespace {
      constexpr I32 CONSTANT_I32{5};
      constexpr F32 CONSTANT_F32{5.5F};
      // perhaps also a c-string?
      constexpr char const* CONSTANT_STRING = ""some compile-time string""; 
}

// This will also scale for member constants of structs or classes:
class SOME_STRUCT {
    static constexpr F32 MEMBER_CONSTANT{5.5F};
}
```
",non-bug,https://github.com/nasa/fprime/issues/1752
Random UT Failure: PosixFile,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

```
55/66 Test #55: PosixFileTest ....................***Failed    3.34 sec
[STest::Random] Generated seed 965653 from system time
[==========] Running 32 tests from 3 test suites.
[----------] Global test environment set-up.
[----------] 14 tests from Functionality
[ RUN      ] Functionality.OpenWithCreation
[       OK ] Functionality.OpenWithCreation (7 ms)
[ RUN      ] Functionality.Close
[       OK ] Functionality.Close (0 ms)
[ RUN      ] Functionality.AssignmentOperator
[       OK ] Functionality.AssignmentOperator (0 ms)
[ RUN      ] Functionality.CopyConstructor
[       OK ] Functionality.CopyConstructor (0 ms)
[ RUN      ] Functionality.OpenWithCreationOverwrite
[       OK ] Functionality.OpenWithCreationOverwrite (0 ms)
[ RUN      ] Functionality.OpenInvalidModes
[       OK ] Functionality.OpenInvalidModes (0 ms)
[ RUN      ] Functionality.PreallocateWithoutOpen
[       OK ] Functionality.PreallocateWithoutOpen (0 ms)
[ RUN      ] Functionality.SeekWithoutOpen
[       OK ] Functionality.SeekWithoutOpen (0 ms)
[ RUN      ] Functionality.FlushInvalidModes
[       OK ] Functionality.FlushInvalidModes (0 ms)
[ RUN      ] Functionality.ReadInvalidModes
[       OK ] Functionality.ReadInvalidModes (0 ms)
[ RUN      ] Functionality.WriteInvalidModes
[       OK ] Functionality.WriteInvalidModes (0 ms)
[ RUN      ] Functionality.RandomizedInterfaceTesting
Ran 100 steps.
[       OK ] Functionality.RandomizedInterfaceTesting (1245 ms)
[ RUN      ] Functionality.FullCrcInvalidMode
[       OK ] Functionality.FullCrcInvalidMode (0 ms)
[ RUN      ] Functionality.IncrementalCrcInvalidMode
[       OK ] Functionality.IncrementalCrcInvalidMode (0 ms)
[----------] 14 tests from Functionality (1256 ms total)

[----------] 9 tests from FunctionalIO
[ RUN      ] FunctionalIO.OpenWithCreationExists
[       OK ] FunctionalIO.OpenWithCreationExists (0 ms)
[ RUN      ] FunctionalIO.SeekInvalidSize
[       OK ] FunctionalIO.SeekInvalidSize (0 ms)
[ RUN      ] FunctionalIO.WriteReadBack
[       OK ] FunctionalIO.WriteReadBack (11 ms)
[ RUN      ] FunctionalIO.WriteReadSeek
[       OK ] FunctionalIO.WriteReadSeek (4 ms)
[ RUN      ] FunctionalIO.WriteFullCrc
[       OK ] FunctionalIO.WriteFullCrc (10 ms)
[ RUN      ] FunctionalIO.WritePartialCrc
[       OK ] FunctionalIO.WritePartialCrc (4 ms)
[ RUN      ] FunctionalIO.Flush
[       OK ] FunctionalIO.Flush (6 ms)
[ RUN      ] FunctionalIO.Preallocate
[       OK ] FunctionalIO.Preallocate (30 ms)
[ RUN      ] FunctionalIO.RandomizedTesting
/Users/runner/work/fprime/fprime/Os/test/ut/file/FileRules.cpp:1050: Failure
Expected equality of these values:
  crc
    Which is: 4294967295
  shadow_crc
    Which is: 2265461553
/Users/runner/work/fprime/fprime/Os/test/ut/file/FileRules.cpp:1050: Failure
Expected equality of these values:
  crc
    Which is: 4294967295
  shadow_crc
    Which is: 2552232243
Ran 1000 steps.
[  FAILED  ] FunctionalIO.RandomizedTesting (1621 ms)
[----------] 9 tests from FunctionalIO (1691 ms total)

[----------] 9 tests from InvalidArguments
[ RUN      ] InvalidArguments.OpenBadPath
[       OK ] InvalidArguments.OpenBadPath (39 ms)
[ RUN      ] InvalidArguments.OpenBadMode
[       OK ] InvalidArguments.OpenBadMode (26 ms)
[ RUN      ] InvalidArguments.PreallocateBadOffset
[       OK ] InvalidArguments.PreallocateBadOffset (19 ms)
[ RUN      ] InvalidArguments.PreallocateBadLength
[       OK ] InvalidArguments.PreallocateBadLength (37 ms)
[ RUN      ] InvalidArguments.SeekAbsoluteWithNegativeLength
[       OK ] InvalidArguments.SeekAbsoluteWithNegativeLength (48 ms)
[ RUN      ] InvalidArguments.ReadInvalidBuffer
[       OK ] InvalidArguments.ReadInvalidBuffer (35 ms)
[ RUN      ] InvalidArguments.ReadInvalidSize
[       OK ] InvalidArguments.ReadInvalidSize (34 ms)
[ RUN      ] InvalidArguments.WriteInvalidBuffer
[       OK ] InvalidArguments.WriteInvalidBuffer (19 ms)
[ RUN      ] InvalidArguments.WriteInvalidSize
[       OK ] InvalidArguments.WriteInvalidSize (19 ms)
[----------] 9 tests from InvalidArguments (282 ms total)

[----------] Global test environment tear-down
[==========] 32 tests from 3 test suites ran. (3230 ms total)
[  PASSED  ] 31 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] FunctionalIO.RandomizedTesting

 1 FAILED TEST

```",bug,https://github.com/nasa/fprime/issues/2835
HelloWorld Tutorial - Deployment Build Error,"| | |
|:---|:---|
|**V3.4.3**| |
|**Hello World**|   |
---
## Problem Description

After following the intro documentation pages up to this page https://fprime-community.github.io/fprime-tutorial-hello-world/docs/Deployments.html and then trying to execute this command:
```
# In: MyProject/HelloWorldDeployment
fprime-util build -j4
```

to try to set up and build the deployment i'm getting these errors:
```

make[3]: *** No rule to make target `HelloWorldDeployment/Top/HelloWorldDeploymentTopologyAppAi.xml', needed by `Components/HelloWorld/HelloWorldDeployment/Top/HelloWorldDeploymentPacketsAc.cpp'.  Stop.
make[2]: *** [Components/HelloWorld/HelloWorldDeployment/Top/CMakeFiles/Components_HelloWorld_HelloWorldDeployment_Top.dir/all] Error 2
make[1]: *** [Components/HelloWorld/HelloWorldDeployment/CMakeFiles/Components_HelloWorld_HelloWorldDeployment.dir/rule] Error 2
make: *** [Components_HelloWorld_HelloWorldDeployment] Error 2
[ 97%] Built target Svc_FileUplink
[ 97%] Built target Svc_Framer
[ERROR] CMake erred with return code 2
```
Would appreciate any insight on this!

## Context / Environment

```
Operating System: Darwin
CPU Architecture: x86_64
Platform: macOS-12.5.1-x86_64-i386-64bit
Python version: 3.12.3
CMake version: 3.29.2
Pip version: 24.0
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

## How to Reproduce

1. Start with the HelloWorld Tutorial on https://fprime-community.github.io/fprime-tutorial-hello-world/
2. Create the project following: [Creating an F´ Project](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/NewProject.html)
3. Then [Creating an F´ Hello World Component](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/HelloWorld.html)
4. In the ""Creating an F' Hello World Component, try the # In: MyProject/HelloWorldDeployment
fprime-util build -j4 command

## Expected Behavior

It should built without error.",bug,https://github.com/nasa/fprime/issues/2718
Remove duplicate component imports in Ref/Top/RefToplogyAppAi.xml,"| | |
|:---|:---|
|**_F´ Version_**| 2.0 |
|**_Affected Component_**| None  |
---
## Problem Description

There are duplicate xml imports of components.

## How to Reproduce

In `Ref/Top/RefTopologyAi.xml`, the following imports are duplicated:

```
    <import_component_type>Svc/ActiveRateGroup/ActiveRateGroupComponentAi.xml</import_component_type>
    <import_component_type>Ref/SignalGen/SignalGenComponentAi.xml</import_component_type>
    <import_component_type>Svc/BufferManager/BufferManagerComponentAi.xml</import_component_type>
```

## Expected Behavior

A single import of each.",bug,https://github.com/nasa/fprime/issues/909
Fail to build UTs when disabling FW_ENABLE_TEXT_LOGGING,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Get this error 
```
build-fprime-automatic-native-ut/F-Prime/Autocoders/Python/templates/TesterBase.cpp:1081:11: error: ���class ExampleComponents::ExampleTesterBase��� has no member named ���textLogHistory���

 1081 |     this->textLogHistory->clear();

      |           ^~~~~~~~~~~~~~
```
## How to Reproduce

1. Disable FW_ENABLE_TEXT_LOGGING in config/FpConfig.hpp
2. Run fprime-util check --all -j 4

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/1728
Alternate `fprime-util new --deployment`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Allow users to specify alternate base deployments.  

e.g. `fprime-util new --deployment https://github.com/fprime-community/fprime-baremetal-base-deployment.git` ",non-bug,https://github.com/nasa/fprime/issues/1981
CMake error encountered following *4.5.4. Exercise: Random Testing* in MathComponent Tutorial,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.1 |
|**_Affected Component_**| Ref/MathSender |
---
## Problem Description

Following steps in [4.5.4. Exercise: Random Testing](https://nasa.github.io/fprime/Tutorials/MathComponent/Tutorial.html#The-MathSender-Component_Write-and-Run-Unit-Tests_Exercise-Random-Testing), running `fprime-util check` encounters following CMake error,

```
/home/captainpike/repo/fork/fprime/Ref/MathSender/test/ut/main.cpp:2:10: error: #include expects ""FILENAME"" or <FILENAME>
    2 | #include STest/Random/Random.hpp
      |          ^~~~~
/home/captainpike/repo/fork/fprime/Ref/MathSender/test/ut/main.cpp: In function ‘int main(int, char**)’:
/home/captainpike/repo/fork/fprime/Ref/MathSender/test/ut/main.cpp:16:3: error: ‘STest’ has not been declared
   16 |   STest::Random::seed();
      |   ^~~~~
make[3]: *** [Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/build.make:106: Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/test/ut/main.cpp.o] Error 1
make[2]: *** [CMakeFiles/Makefile2:33363: Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:33370: Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/rule] Error 2
make: *** [Makefile:11940: Ref_MathSender_ut_exe] Error 2
[ERROR] CMake erred with return code 2
```

See https://github.com/capsulecorplab/fprime/commit/21e104b29677f5c402c3fe63852faaf706643279

## How to Reproduce

### Setup/configuration
On Ubuntu 20.04 with python3,
1. `git clone git@github.com:capsulecorplab/fprime.git`
2. `cd fprime`
3. `python3 -m venv fprime-venv`
4. `. ./fprime-venv/bin/activate`
5. `pip install --upgrade fprime-tools fprime-gds`
6. `git checkout 21e104b`

### Build steps
In fprime repo with virtual environment activated, 
1. `cd Ref`
2. `fprime-util generate --ut`
3. `cd MathSender`
4. `fprime-util build --ut`
5. `fprime-util check`

## Expected Behavior

Unit tests should build without errors.",bug,https://github.com/nasa/fprime/issues/1303
ActiveRateGroupImpl left in Fprime from previous versions,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

In `Svc/ActiveRateGroup` there is the file `ActiveRateGroupImpl.cpp` that is not used anywhere.  It seems that it's left from previous Fprime version and now it's substituted by `ActiveRateGroup.cpp`. 

## Rationale

If you agree with my analysis I'll proceed to remove it from the source. 
",non-bug,https://github.com/nasa/fprime/issues/1920
Running the RPI ground station Gds/bin/run_deployment.sh not found,"| | |
|:---|:---|
|**2.0**| |
|**RPI**|   |
---
## Problem Description

Follow the RPI instructions https://github.com/nasa/fprime/blob/devel/RPI/README.md ,  after building the project and trying to run the scripts run_rpi_cross.sh, I found that the Gds/bin folder is no where to be found in the project or fprime directory. Could this be an issue with how I installed gds? I followed the latest installation instructions.


./scripts/run_rpi_cross.sh: 15: ./scripts/run_rpi_cross.sh: ~/fprime/Gds/bin/run_deployment.sh: not found

## How to Reproduce

1. cd fprime/RPI
    fprime-util generate
2. cd fprime/RPI
   fprime-util build
3. ./scripts/run_rpi_cross.sh

## Expected Behavior
Run the ground station fprime/RPI to be used to connect to raspberrypi 
",bug,https://github.com/nasa/fprime/issues/928
TlmPacketizer: Allows users to individually turn on and off groups of packets,"| | |
|:---|:---|
|**_Affected Component_**| TlmPacketizer  |
---
## Feature Description

Users currently set an integer packet level in TlmPacketizer, and all telemetry packets with a level less than or equal to the current level will be sent.


Current Command Interface:
```
SET_LEVEL 3
# Packets with level 1, 2, and 3 will be sent
```

This proposal recommends removing packet levels in favor of packet groups. 

Allow users to enable and disable telemetry packet groups on a group by group basis. Allow users to specify in the packet list xml file if the packet group should default to enabled or disabled. Ideally packet group would be an enum rather than an integer, allowing users to name packet groups, but using the packet list xml file to generate a FPP enum may be challenging

Proposed Command Interface:
```
ENABLE_GROUP 4
# Packets of group 4 will now be sent
ENABLE_GROUP CDH_PACKETS
# Example using enum instead of integer for packet group id
ENABLE_ALL
# Send all telemetry groups
DISABLE_GROUP 1
# Packets of group 4 will no longer be sent
DISABLE_ALL
# Stop transmission of all vehicle telemetry
```

## Rationale

This allows spacecraft operators to carefully tune what telemetry is sent based on the operational mode, providing more flexibility than merely increasing the overall volume of telemetry sent. One example of a use case for this capability would be only sending rover mobility telemetry while actively driving.
",non-bug,https://github.com/nasa/fprime/issues/2372
"Fw:Logger API does not work for floating point or string args, or possibly large integers","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  Fw::Logger |
---
## Problem Description

Currently the Fw::Logger API takes up to 10 arguments which are all of type POINTER_CAST, an unsigned integer type equal to the platform pointer width, e.g. U64 on a 64 bit platform.

Also, the Fw::Logger API takes a printf style format string, and the current imlementation of Os::Log actually calls the platform's printf() implementation.

There are several issues with this setup, mainly for floating point argument types, but also for C-style strings, and possibly some of the wider integer types depending on the platform.

This is related to but not the same as #549.

Consider what currently happens when using the Os::Log implementation of Fw::Logger with a floating point argument:
1. The compiler implicitly converts the floating point value to a POINTER_CAST integer when the log() call is made.  The implementation of log() then calls printf() uses va_arg() to fetch the value to be formatted. va_arg() is opaque and implementation dependent, but apparently in many modern architectures, its behavior often differs for floating point types which are expected to be stored in a separate register bank than other types of arguments in many common circumstances. Thus va_arg() will typically fetch the value to be formatted from a floating point register, but that register will be uninitialized because the actual function call had only integer arguments.
1. passing a floating point value to Fw::Logger::log() would implictly coerce coerce the value to the POINTER_CAST integer type, dropping the fractional part (unless compiling with something like -Wconversion)
1. there is no provision for ensuring that the sizeof() the POINTER_CAST integer type used by Fw::Logger::log() is sufficiently large to pass all 4 bytes of an IEEE754 float (but on most modern architectures it probably would have been) or all 8 bytes of an IEEE754 double

The issue with string args is that the compiler won't implicitly convert `const char *` to POINTER_CAST, though that could be worked around with an explicit cast.

The issue with wide integers is that on some platforms the width of POINTER_CAST may be narrower than the width of some integer types, e.g. on a 32 bit platform POINTER_CAST might be 4 bytes which is insufficient to store e.g. int64_t.

Given that the varargs mechanism itself may be disallowed in some flight software rules, problem 1 with floating point arguments could be resolved by replacing the underlying call to printf() with a custom implementation of printf() style formatting that has a limited max number of args, without using va_arg().

The remainder of the issues could be resolved by not using POINTER_CAST as the log argument type, but rather something like a LogArg class that can hold a value of any of the POD types, with appropriate explicit (or implicit, where allowed by FSW rules) conversions from the POD types.",bug,https://github.com/nasa/fprime/issues/1055
F Prime GDS - Move Parameter commands out of default command list,"| | |
|:---|:---|
|**_F´ Version_**| N/A |
|**_Affected Component_**| GDS |
---
## Feature Description

Remove parameter commands out of the default command drop down list.

Move parameter commands to
- A new ""parameters"" tab
- A second drop down in the command tab
- Hide them behind a checkbox on the command tab
- Somewhere else?

## Rationale

When sending commands through the GDS standard FSW commands tend to get swamped by parameter commands. This is especially true for components with many parameters. By the nature of parameters, these parameter commands generally are not sent often and tend to end up as noise when trying to send other spacecraft commands.",non-bug,https://github.com/nasa/fprime/issues/2498
[VSCode Extension] Auto-detect locs.fpp file,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| VS Code |
---
## Feature Description

There is a really neat VSCode extension that was contributed by our community, for FPP language support: https://github.com/fprime-community/vscode-fpp

It requires to specify the `locs.fpp` file manually. 
The location of that file can be inferred pretty easily, basically under `build-fprime-*/locs.fpp`.
Maybe priority should be given to `build-fprime-automatic-native/locs.fpp` (and if fancy, the extension could have a setting that makes this priority configurable?). Then, any file matching `build-fprime-*/locs.fpp` would do.

Note, even just finding any `build-fprime-*/locs.fpp` file would do and would be very sufficient first pass at this!

## Rationale

Make the extension easier to use! 🎉 ",non-bug,https://github.com/nasa/fprime/issues/2776
"Fix System Reference ""USE_OPENCV"" cmake compile definition","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Currently, if the -DSYSTEM_REFERENCE_OPENCV_PATH flag is used when running fprime-util generate, then the -DUSE_OPENCV compile definition gets set. However, it doesn't appear to get set properly and results in the system reference ""hanging"" on startup.
",bug,https://github.com/nasa/fprime/issues/2104
Add equality operator for external enum enumerators.,"| | |
|:---|:---|
|**_F´ Version_**| 2.0 |
|**_Affected Component_**| None |
---
## Feature Description

Add an additional equality operator in the enum class for checking values.

They currently have:

```c++
    //! Equality operator
    bool operator==(
        const SomeEnum& other //!< The other object
        ) const;
```

This makes a test be:

```c++
SomeNamespace::SomeEnum x;

if (SomeNamespace::SomeEnum::SomeEnumerator == x.e) {
// do something
}
````

It would be simpler and more natural to do:

```c++
SomeNamespace::SomeEnum x;

if (SomeNamespace::SomeEnum::SomeEnumerator == x) {
// do something
}
````

Add an operator like this:

```c++
    //! Equality operator
    bool operator==(
        const SomeEnum::t& other //!< The other object
        ) const;
```



## Rationale

Coding would easier and more intuitive since the check is really for the enumeration.",non-bug,https://github.com/nasa/fprime/issues/933
Create a GitHub template `fprime-starter-project`,"| | |
|:---|:---|
|**_F´ Version_**| none |
|**_Affected Component_**| none |
---
## Feature Description

It would be interesting to create a boilerplate project with ""GitHub Template"": `fprime-starter-project`.

This project would follow best practices for rapid implementation with F' in a minimalist deployment.

The idea would be to have a project as empty as possible where main() does nothing (or increments a counter).

In terms of philosophy, this would be the same as the following projects:

- [cpp_starter_project](https://github.com/cpp-best-practices/gui_starter_template)
- [vscode_ros2_workspace](https://github.com/athackst/vscode_ros2_workspace).

## Rationale

1. This takes advantage of the [""Template""](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-repository-from-a-template) feature of GitHub.

From this GitHub template, anyone can start with it to build their own deployment little by little.

Implementation tutorials could start from it and the trainer could add features little by little.

2. There are several ways to implement F' :

- The [fprime-sphinx] method (https://github.com/fprime-community/fprime-sphinx)
- The [fprime-arduino] method (https://github.com/fprime-community/fprime-arduino)

Where the OS/Drv/... layers are either in the same folder or in separate repositories. It is not obvious which layout is better.

This would also serve as a reference for the [Setup Deployment](https://github.com/nasa/fprime/blob/devel/docs/UsersGuide/best/development-practice.md#setup-deployment) phase of the reference development practices.

3. When a project starts, the user logically starts from `Ref` and empties it, then adds his own components to be more in control of his topology.

",non-bug,https://github.com/nasa/fprime/issues/1529
Create Events Interface,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make an interface out of the standard Event ports. See #2255 for an example interface change set.

The following three ports should be put into an interface at `Fw/Interfaces/EventsInterface.fppi` such that component implementers can quickly use them.

https://github.com/nasa/fprime/blob/a73bff28617b96736c0e3e222e4c6e1dea1c6f5e/Ref/SignalGen/SignalGen.fpp#L50-L54
",non-bug,https://github.com/nasa/fprime/issues/2584
F' with FreeRTOS / Zephyr,"Deploy F' on hardware, or as a QEMU simulation, running FreeRTOS / Zephyr",non-bug,https://github.com/nasa/fprime/issues/2111
Cannot pass arrays by reference,"I would like to pass an array by reference through a port, like such:

`<arg name=""adcCounts"" type=""U16[8]"" pass_by=""reference""></arg>`

But the autocoder naively takes the `U16[8]` and turns this into `void invoke(U16[8] &adcCounts);` which fails to compile with this error:

`error: expected ',' or '...' before '&' token`

The proper format for such a function header is `void invoke(U16 (&adcCounts)[8]);`. It would be nice if the autocoder was extended to understand this special format used for arrays in function headers.",bug,https://github.com/nasa/fprime/issues/229
F Prime Gap Analysis Actions,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Capture some of the proposed upgrades from internal discussions.

## Rationale

",non-bug,https://github.com/nasa/fprime/issues/2810
Undef sanitizer kills unit tests,"The undefined behavior sanitizer kills tests that use undefined behavior to drive off-nominal cases. For example, synthesizing an invalid On/Off command argument with the value 2 causes the test to be aborted in the harness, before the command handler is run. There are a couple of issues here:

1. The test is aborted with a runtime error, but GTest still reports success. It seems that runtime errors should cause test failures.
2. The test abort causes tests not to be run. For example, the “invalid command argument” test becomes a no-op that doesn’t exercise any code and always passes.",bug,https://github.com/nasa/fprime/issues/2325
OS BareMetal implementation,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

When building an application using BareMetal, all the F' BareMetal capabilities are brought in including the stubbed capabilities like IntervalTimer.  This prevents an application from bringing in their own implementation specific capabilities. 

## How to Reproduce

1. In the Application cmake file, set the FPRIME_USE_BAREMETAL_SCHEDULER to ""ON""
2. Create a project specific IntervalTimer
3. Instantiate the IntervalTimer

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/1846
Incorrect arguments in seqCmdStatus port call in CmdDispatcher,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**|  CmdDispatcher |
---
## Problem Description

When the CmdDispatcher receives a CmdResponse, it looks up in its sequence tracker table whether that command was being run in a command sequence, and if it was, it forwards the cmd response to the cmd sequencer. It does this by calling the seqCmdStatus output port, which is a port of type Svc.CmdResponse. However, it calls it with the incorrect arguments.
![image](https://github.com/user-attachments/assets/e9f3fbf6-908b-474e-9727-d3018da335c8)
![image](https://github.com/user-attachments/assets/ee34b0a4-04c6-4516-8236-df8508b6a176)
Note in the first image, in CmdDispatcherImpl.cpp, it calls it with portToCall, opCode, context and response.
Note that in the second image, in CmdDispatcherComponentAc.cpp, the correct arguments are portToCall, opCode, cmdSeq and response.

Therefore, the call in CmdDispatcherImpl.cpp should be changed to provide cmdSeq instead of context. They just happen to be of the same type so it compiles. 

This was not detected because the CmdSequencer doesn't actually use the cmdSeq argument when it receives the status from the CmdDispatcher.
",bug,https://github.com/nasa/fprime/issues/2877
Warning of XML not valid according to schematron but code still compiles,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description
When running the 'fprime-util impl' on my component, I get the following warning but the code still compiles 100%.

WARNING: XML file CameraManagerComponentAi.xml is not valid according to schematron <path_hidden_by_me>/Autocoders/Python/schema/default/active_comp_schematron.rng.

## How to Reproduce


1. 
2.
3.

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/325
Deployments Without UTs Fail UTs,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Deployments defining no unit tests will fail the unit test check because the -R argument to ctest without additional arguments will run everything, but nothing was built.",bug,https://github.com/nasa/fprime/issues/2014
[ERROR: Port xml specification file Fw/Cmd/CmdPortAi.xml does not exist!] encountered while generating implementations following GPS tutorial,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**| Gps |
---
## Problem Description

Encountered following error while attempting to generate implementations with `fprime-util impl` in the `GpsApp/Gps` directory while following the **Coding Our Module** section of the [F´ GPS Tutorial](https://nasa.github.io/fprime/Tutorials/GpsTutorial/Tutorial.html)

```
[~/fprime/GpsApp/Gps]$ fprime-util impl
[WARNING] Failed to find settings file: /home/kasm-user/fprime/GpsApp/settings.ini
[100%] Built target codegen
[100%] Generating ../../../Gps/GpsComponentImpl.hpp-template, ../../../Gps/GpsComponentImpl.cpp-template
Parsing Component Gps
Reading external dictionary /home/kasm-user/fprime/GpsApp/Gps/Commands.xml
Reading external dictionary /home/kasm-user/fprime/GpsApp/Gps/Telemetry.xml
Reading external dictionary /home/kasm-user/fprime/GpsApp/Gps/Events.xml
ERROR: Port xml specification file Fw/Cmd/CmdPortAi.xml does not exist!
make[3]: *** [GpsApp/Gps/CMakeFiles/GpsApp_Gps_impl.dir/build.make:74: ../Gps/GpsComponentImpl.hpp-template] Error 255
make[2]: *** [CMakeFiles/Makefile2:7331: GpsApp/Gps/CMakeFiles/GpsApp_Gps_impl.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:7338: GpsApp/Gps/CMakeFiles/GpsApp_Gps_impl.dir/rule] Error 2
make: *** [Makefile:2152: GpsApp_Gps_impl] Error 2
[ERROR] CMake erred with return code 2
```

## How to Reproduce

(Optional): run following steps in [kasm-fprime-workspace](https://github.com/capsulecorplab/kasm-fprime-workspace)

1. clone and checkout https://github.com/capsulecorplab/fprime/commit/3fd0d6cdd887492c38a16f2beb40eccc078e8766
2. `cd` into `GpsApp/`
3. generate build cache with `fprime-util generate`
4. `cd` into `Gps/`
5. generate implementations with `fprime-util impl`

## Expected Behavior

Should generate `GpsComponentImpl.cpp-template` and `GpsComponentImpl.hpp-template`",bug,https://github.com/nasa/fprime/issues/1465
Revisit Python Packaging,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Some of our packages are in violation of PEP-517.  We should consider revising.  See:  https://github.com/fprime-community/fprime-workshop-led-blinker/issues/2",bug,https://github.com/nasa/fprime/issues/1995
Implement DataHandler plugin in GDS,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| GDS |
---
## Feature Description

A common use-case for the GDS is ""I want to do extra stuff with the downlinked data"" (e.g. send it to some other place, monitor for things etc.)
This is currently demonstrated with [fprime_gds_client_sample_script.py](https://github.com/fprime-community/fprime-gds-client-sample-script/blob/main/fprime_gds_client_sample_script.py), but could be made even simpler with the new plugin system

We should develop a plugin that lets you define a [DataHandler](https://github.com/nasa/fprime-gds/blob/9c5f4f5f2d5a9ba1e80efb7094514e799b6383e0/src/fprime_gds/common/handlers.py#L12), and hook it into the system

## Rationale

Extend GDS
",non-bug,https://github.com/nasa/fprime/issues/2715
"F´ Util Prints ""Error Not Found"" Before Regenerating","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

When building a new component, `generate` is triggered via `noop` build.  However, the ""not found"" error prints once, before this happens confusing users.",non-bug,https://github.com/nasa/fprime/issues/1992
Switch Unit Test Histories to Use Dynamic Memory,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Currently the unit test histories use fixed sized buffers. This causes issues when running as these buffers can overflow.

Given that unittests do allow some non-flight code, can we switch these histories to something that will just add memory if it would otherwise overflow?",non-bug,https://github.com/nasa/fprime/issues/1722
"FIFO Buffer Does Not Compile After ""Fix Shadow Variables""","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Just need to touch up member usages.",bug,https://github.com/nasa/fprime/issues/2523
Add in Driver Timeout Architecture,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| Drv |
---
## Feature Description

Currently there are no good ways to limit `send` and `recv` calls to a specific amount of time.  This can be done, but should be done in a generic way that works for all driver types that implement the `ByteStreamDriver` interface.

## Rationale

Calls to `send` and `recvPoll` should have a configurable timeout to prevent excessive time being spent in these calls.",non-bug,https://github.com/nasa/fprime/issues/511
Consider differentiating paths of autocoded files,"| | |
|:---|:---|
|**_F´ Version_**| 3.3 |
|**_Affected Component_**| Autocoded files |
---
## Feature Description

Autocoded files have historically been output in the build cache under a file structure that mirrors the source file structure. This is really convenient for browsing the build-cache, but also comes with some cost.
e.g. [here](https://github.com/fprime-community/fprime-workshop-led-blinker/blob/cc047ca3ba5dc941d18fd497533a71e011c2c89e/LedBlinker/Top/LedBlinkerTopology.cpp#L8C1-L9C51)
```
#include <LedBlinker/Top/LedBlinkerPacketsAc.hpp>
#include <LedBlinker/Top/LedBlinkerTopologyAc.hpp>
```
To an avid user, it naturally becomes pretty clear that those will be in the build cache (because of the `Ac` suffix), but this pattern can confuse less experimented users. And even for experimented developers, it takes an extra couple seconds to read each suffixes in logs etc... when issues arise. My point is, the differentiation between source and auto-coded files could be made clearer.

I am proposing we consider moving to a structure where file paths would be mirrored, but by some mean differentiated.
Examples could be:
```
#include <AC/LedBlinker/Top/LedBlinkerPacketsAc.hpp>
``` 
```
#include <Autocoded/LedBlinker/Top/LedBlinkerPacketsAc.hpp>
```
Or please make suggestions on how this should/could be achieved!

## Rationale

Differentiate between autocoded and source files more easily.
",non-bug,https://github.com/nasa/fprime/issues/2365
Clean-Up Failed To Send Messages.,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

See: https://github.com/fprime-community/fprime-gds/issues/29
See: https://github.com/nasa/fprime/discussions/1119",non-bug,https://github.com/nasa/fprime/issues/1129
GenericHub inconsistent type for size,"| | |
|:---|:---|
|**_F´ Version**|v3.2.0 |
|**_Affected Component_**|Svc/GenericHub   |
---
## Problem Description

Svc/GenericHub sendData() serializes the size of the buffer as U32, but in dataIn_handler() the size is deserialized as FwBuffSizeType which is a U16.

## How to Reproduce

1.  Connect the GenericHub to a component that pushes in a large data buffer to the buffersIn port (ie 80 000 bytes)
2.  The GenericHub should assert on line 92:  FW_ASSERT(rawSize == static_cast<U32>(size));

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/2173
Ability to Configure Udp Buffer Size,"### Discussed in https://github.com/nasa/fprime/discussions/2362

<div type='discussions-op-text'>

<sup>Originally posted by **noahrose18** November  9, 2023</sup>
On line 55 of fprime/Drv/Udp/UdpComponentImpl.cpp, there is a buffer that is allocated to a size of 1024 bytes. I am wondering if this could be pulled out and turned into a tunable parameter, so that I can for instance increase the size of this buffer without having to fork off of the fprime repo or autopatch everytime.</div>",non-bug,https://github.com/nasa/fprime/issues/2363
"`fprime-util` Fails to generate build: ""Failed to run fpp-locate-deps"" with no error message","| | |
|:---|:---|
|**_F´ Version_**| 3.1.1 |
|**_Affected Component_**| Ref |
|**_Python Version_**| 3.10.9 |
|**_Pip Version_**| 22.3.1 |
|**_CMake Version_**| 3.25.1 |
---

## Problem Description

From what I've determined so far, there seems to be an  initial installation issue with FPrime v3.1.1. Occasionally this issue goes away and the install works for my current environment but when I return the next day to continue my work, the same error occurs again as if the build-state is dirtied.

The only temporary fix I've found so far is to fully blow away the virtual environment and re-install everything again, but even this has had inconsistent results. (This is in reference of the suggestions in Issue #1493)

After a fresh download, and isolated Python Virtual Environment, the standard command: `fprime-util generate --ut` fails with the following logs:

```
[INFO] Generating build directory at: ~/Downloads/fprime-3.1.1/Ref/build-fprime-automatic-native
[INFO] Using toolchain file None for platform default
-- The C compiler identification is GNU 12.2.0
-- The CXX compiler identification is GNU 12.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Searching for F prime modules in: ~/Downloads/fprime-3.1.1
-- Autocoder constants file: ~/Downloads/fprime-3.1.1/config/AcConstants.ini
-- Configuration header directory: ~/Downloads/fprime-3.1.1/config
-- [python3] python3 found at: ~/Downloads/fprime-3.1.1/.venv/bin/python3
-- [fpp-tools] fpp-depend found at: ~/Downloads/fprime-3.1.1/.venv/bin/fpp-depend
-- [fpp-tools] fpp-to-xml found at: ~/Downloads/fprime-3.1.1/.venv/bin/fpp-to-xml
-- [fpp-tools] fpp-to-cpp found at: ~/Downloads/fprime-3.1.1/.venv/bin/fpp-to-cpp
-- [fpp-tools] fpp-locate-defs found at: ~/Downloads/fprime-3.1.1/.venv/bin/fpp-locate-defs
-- Target build toolchain/platform: Linux/Linux
-- Including ~/Downloads/fprime-3.1.1/cmake/platform/Linux.cmake
-- Requiring thread library
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Installation directory: ~/Downloads/fprime-3.1.1/Ref/build-artifacts
-- Performing CMake source prescan
-- Performing CMake source prescan - DONE
-- Generating FPP location index
CMake Error at ~/Downloads/fprime-3.1.1/cmake/target/fpp_locs.cmake:56 (message):
-- Configuring incomplete, errors occurred!
  Failed to run fpp-locate-deps
See also ""~/Downloads/fprime-3.1.1/Ref/build-fprime-automatic-native/CMakeFiles/CMakeOutput.log"".
Call Stack (most recent call first):
  ~/Downloads/fprime-3.1.1/cmake/target/fpp_locs.cmake:95 (generate_locations)
  ~/Downloads/fprime-3.1.1/cmake/target/target.cmake:67 (fpp_locs_add_global_target)
  ~/Downloads/fprime-3.1.1/cmake/target/target.cmake:67 (cmake_language)
  ~/Downloads/fprime-3.1.1/cmake/API.cmake:465 (setup_global_target)
  ~/Downloads/fprime-3.1.1/cmake/API.cmake:426 (register_fprime_target_helper)
  ~/Downloads/fprime-3.1.1/cmake/FPrime.cmake:72 (register_fprime_target)
  CMakeLists.txt:32 (include)
```

The primary failure appears to be that `fprime-util` is attepmting to exec the `fpp-locate-deps` script, and after peering into my `./.venv/bin` directory, it is infact non-existent. The contents of my VEnv binary dir are:

```
Activate.ps1
activate
activate-global-python-argcomplete
activate.csh
activate.fish
chardetect
cheetah
cheetah-analyze
cheetah-compile
cookiecutter
flask
fpp-check
fpp-depend
fpp-filenames
fpp-format
fpp-from-xml
fpp-locate-defs
fpp-locate-uses
fpp-syntax
fpp-to-cpp
fpp-to-xml
fprime-cli
fprime-gds
fprime-seqgen
fprime-util
fprime-version-check
gcovr
markdown_py
normalizer
pip
pip3
pip3.10
py.test
pygmentize
pytest
python -> /usr/bin/python
python-argcomplete-check-easy-install-script
python-argcomplete-tcsh
python3 -> python
python3.10 -> python
register-python-argcomplete
slugify
v1.0.2
```

## How to Reproduce

1.  Download, decompress, and change dirs into the v3.1.1 source-code tarball from the [releases page](https://github.com/nasa/fprime/releases)
2. Setup the virtual environment: `python3 -m venv ./.venv && source ./.venv/bin/activate`
3. Install non-project dependencies: `pip install -U setuptools setuptools_scm wheel pip`
4. Install project dependencies: `pip install -r requirements.txt`
5. Change to `./Ref` directory and generate the project: `fprime-util generate --ut`

## Expected Behavior

I expect the fprime repository to generate correctly without error and create a new `build-fprime-automatic-native-ut` folder.",bug,https://github.com/nasa/fprime/issues/1850
GDS shutdown `object has no attribute 'accept'`,"| | |
|:---|:---|
|**_F´ Version_**| 3.2.0 |
|**_Affected Component_**|  GDS |
---
## Problem Description
Happened during a workshop, still need to reproduce.
At shutdown, the GDS errors out with
```
Exception in thread TcpCommThread:
Traceback (most recent call last):
  File ""/usr/local/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/threading.py"", line 1038, in _bootstrap_inner
    self.run()
  File ""/usr/local/Cellar/python@3.11/3.11.2_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/threading.py"", line 975, in run
    self._target(*self._args, **self._kwargs)
  File ""/Users/joshuaa/p/fprime-gds/src/fprime_gds/common/communication/adapters/ip.py"", line 111, in th_handler
    self.data_chunks.put(handler.read())
                         ^^^^^^^^^^^^^^
  File ""/Users/joshuaa/p/fprime-gds/src/fprime_gds/common/communication/adapters/ip.py"", line 308, in read
    return self.read_impl()
           ^^^^^^^^^^^^^^^^
  File ""/Users/joshuaa/p/fprime-gds/src/fprime_gds/common/communication/adapters/ip.py"", line 414, in read_impl
    self.open_impl()
  File ""/Users/joshuaa/p/fprime-gds/src/fprime_gds/common/communication/adapters/ip.py"", line 391, in open_impl
    (self.client, self.client_address) = self.socket.accept()
                                         ^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'accept'
```

## How to Reproduce

Need to reproduce.

## Expected Behavior

Shutdown gracefully.
",bug,https://github.com/nasa/fprime/issues/1990
Build Functor Class for OS Task Entry Point,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

To avoid task function pointers not being compatible.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/2738
FPrime GDS does not gracefully handle files downlinks of the same filename,"Say an FPrime spacecraft downlinks `filename.bin`, then downlinks the same file a second time for redundancy. The current behavior of FPrime GDS would be to overwrite the first `filename.bin` with the second. If there were undetected corruption or other issues, those would be permanently imprinted on the final version of the file.

Let's explore another scenario. Say an FPrime spacecraft downlinks `image.bin`. Then deletes it, makes a new `image.bin` and downlinks that. FPrime GDS would do the same thing, it would overwrite the first version of `image.bin` with the second version if `image.bin`. 

Note that both of these operational scenarios are used all the time. I'm not talking once per mission, I'm talking multiple times per day.

I think FPrime GDS should be modified to ensure received files all have unique names. I've seen them appended with the Earth Received Time (ERT) with great success. It's easy to remove with a simple RegEx and ensures uniqueness.

See also #2458 for a mildly-related issue.",non-bug,https://github.com/nasa/fprime/issues/2730
Build A Frame Reassembler,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Build a component that can be used to reassemble communication frames given protocol information. This will break-off this functionality from the Deframer.

Basic requirements:
1. Accept incoming Fw::Buffers of any size
2. Accumulate buffers in-order
3. Call frame detector helper class
4. On ""NO_FRAME"" discard first byte and try again
5. On ""NEED DATA"" continue to accumulate data
6. On ""FRAME"" allocate buffer, copy-out frame

Helper class requirements:
1. Must implement `Enum detect_frame(const CircularBuffer& buffer, FwSizeType& size_output)` method
2. Cannot alter circular buffer (uses peeks)
3. Must set `size_output` when data is needed and when frame detected
 ",non-bug,https://github.com/nasa/fprime/issues/2764
Add floating point operators/conversions for Fw::Time,"| | |
|:---|:---|
|**_F´ Version_**| any |
|**_Affected Component_**| all |
---
## Feature Description

Add `F32`/`F64` time conversion and math operators.

## Rationale

Sometimes a user with do some time math in floating point and then switch top `Fw::Time`. It would be nice to add conversions and operators that include floating point.

For example:

```
Fw::Time myTime = 2.5;

myTime += 6.2;

F32 newTime = myTime;

```
",non-bug,https://github.com/nasa/fprime/issues/1088
CMake `settings.ini` Handling Poor,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

In the case of `settings.ini`, should values change, CMake will rescan....however; there is no mechanism to provide updated values as they are passed in with the original `cmake` run (e.g. fprime-util generate).  Thus there is nothing preventing a user from changing this file, and building with the old configuration.

## Possible Fixes

We could copy the settings.ini (and environment file) into the build cache and then:

1. Process `setting.ini` for needed settings internally to `CMake` while detecting and updating changes.
2. Detect changes in fprime-util and error with ""regenerate"" message.

Item 1 is more complex but makes running CMake outside `fprime-util` much easier (e.g. from within an IDE)
",bug,https://github.com/nasa/fprime/issues/1679
Receives ValueError: Can't mix absolute and relative paths when trying to run fprime-util impl,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 =< |
|**_Affected Component_**| All components with  SerializableAi.xml |
---
## Problem Description

Received the following error:
```
ValueError: Can't mix absolute and relative paths
```
When attempted to run fprime-util impl for Ref/SignalGen component.

## How to Reproduce

1. cd fprime/Ref/SignalGen
2. fprime-util generate
3. fprime-util impl

## Expected Behavior

The script should have generated the component implementation template files.
",bug,https://github.com/nasa/fprime/issues/329
Add Build Repository With Latest CI Action,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a reusable action for Github CI that will build a repository with a parameterized version, defaulting to `devel`.  That way running CI on a specific repo is straight forward.

Steps:
- [x] Clone repo (w/ submodule update)
- [x] Update fprime version to devel
- [x] Generate, build, unit-test, and integration test

",non-bug,https://github.com/nasa/fprime/issues/2000
Refactor F´new --deployment for #1994,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Refactor `fprime-util new --deployment` for use with structure in #1994.",non-bug,https://github.com/nasa/fprime/issues/2002
Create Interface from LinuxSpiDriver,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make an interface out of Drv/LinuxSpiDriver protocol. See #2255 for an example interface change set.

The following three ports should be pulled out of `Drv::LinuxSpiDriver` into `Svc/Interfaces/SpiInterface.fppi` such that other Spi implementations can use it.

https://github.com/nasa/fprime/blob/a73bff28617b96736c0e3e222e4c6e1dea1c6f5e/Drv/LinuxSpiDriver/LinuxSpiDriver.fpp#L9

Note: annotations should be added to explain what each port does.",non-bug,https://github.com/nasa/fprime/issues/2582
Unit Test code coverage fails,"| | |
|:---|:---|
|**_F´ Version_**| 65d960f11a39a4463c6396318602243440cd5846|
|**_Affected Component_**|  All |
---
## Problem Description

Running `fprime-util check --coverage` fails with the following error
```
100% tests passed, 0 tests failed out of 1

Total Test time (real) =   0.01 sec
[100%] Built target Abc_Svc_Time_check
CMakeFiles/Abc_Svc_Time.dir/Time.gcno:cannot open notes file
CMakeFiles/Abc_Svc_Time.dir/Time.gcda:cannot open data file, assuming not executed
CMakeFiles/Abc_Svc_Time.dir/TimeComponentAc.gcno:cannot open notes file
CMakeFiles/Abc_Svc_Time.dir/TimeComponentAc.gcda:cannot open data file, assuming not executed
'/home/ortega/abc/Abc/build-fprime-automatic-native-ut/Abc/Svc/Time/TimeComponentAc.cpp' file is already processed
Error copying file ""*.gcov"" to ""/home/ortega/abc/Abc/Svc/Time/coverage"".
make[3]: *** [Abc/Svc/Time/CMakeFiles/Abc_Svc_Time_coverage.dir/build.make:72: Abc/Svc/Time/CMakeFiles/Abc_Svc_Time_coverage] Error 1
make[2]: *** [CMakeFiles/Makefile2:33092: Abc/Svc/Time/CMakeFiles/Abc_Svc_Time_coverage.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:33099: Abc/Svc/Time/CMakeFiles/Abc_Svc_Time_coverage.dir/rule] Error 2
make: *** [Makefile:12491: Abc_Svc_Time_coverage] Error 2
[ERROR] CMake erred with return code 2

```
## How to Reproduce

1. cd into a component's directory
2. Run `fprime-util check --coverage`

## Expected Behavior

I expected gcov files in my component's directory.",bug,https://github.com/nasa/fprime/issues/1208
fpp-check Resulting in Error Message,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0 |
|**_Affected Component_**| Math Component Tutorial |
---
## Problem Description
Following the tutorial, at section 6.2, Checking for unconnected ports. Command:
```
fprime-util fpp-check -u unconnected.txt
```
is resulting in an error message:
```
[WARNING] Failed to find settings file: <path_to>/fprime/Ref/settings.ini
[INFO] Updating fpp locations file and build cache. This may take some time.
[ERROR] No fpp dependency memo found. Perhaps directory is outside build?
```
Did attempt with purging and generating, error message still shows. 

## How to Reproduce

1. Follow Math Component Tutorial
2. Get to section 6.2 Updating the Topology
3. do command: fprime-util fpp-check -u unconnected.txt


## Expected Behavior
No error message.
",bug,https://github.com/nasa/fprime/issues/1255
Recover Seed File for CI,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Randomized test seed-history files are not recovered making debugging and reproduction difficult or impossible.",bug,https://github.com/nasa/fprime/issues/1416
Update template code to match formatting tool.,"| | |
|:---|:---|
|**_F´ Version_**| [v3.4.3](https://github.com/nasa/fprime/releases/tag/v3.4.3) |
|**_Affected Component_**| n/a |
---
## Feature Description

Update the generated code to match the C++ formatter tool.

## Rationale

When we start editing the impl files or looking at the AC files, it doesn't match the supported formatter. For impl code, we have to run the formatter to ""clean up"" the code. This makes diffing against the generated impl code harder if we add new FPP and re-run the impl generator.
",non-bug,https://github.com/nasa/fprime/issues/2840
External enums have junk values in text log,"| | |
|:---|:---|
|**_F´ Version_**| 2.0.0 |
|**_Affected Component_**| All  |
---
## Problem Description

When an external enum is an argument to an EVR, the value in the GUI log is correct (the name of the element), but the text log prints out a large number.

## How to Reproduce

1. Define an enum in EVR
2. Emit the EVR
3. Look at the text log of the same EVR

## Expected Behavior

The text log should print the integer value of the enumeration.
",bug,https://github.com/nasa/fprime/issues/903
Running `fprime-util visualize` With Sub Topologies Fails With Error,"| | |
|:---|:---|
|**_F´ Version_**| `devel` |
|**_Affected Component_**| `fprime-util visualize`  |
---
## Problem Description

Multiple topologies are extracted when running `fprime-util visualize` when the topology imports a subtopology.  Fix it such that the project-driven topology (composite) is perferred.
",bug,https://github.com/nasa/fprime/issues/2354
FPRIME_PROJECT_ROOT/cmake Not Added to CMake Path,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

FPRIME_PROJECT_ROOT/cmake  is expected to be added to the CMAKE_MODULE_PATH just like fprime libraries are.  However, it is not.
",bug,https://github.com/nasa/fprime/issues/2443
PolyType F64 #ifdef error,"| | |
|:---|:---|
|**_F´ Version_**| v3.2.0 |
|**_Affected Component_**| PolyType |
---
## Problem Description

Located [here](https://github.com/nasa/fprime/blob/devel/Fw/Types/PolyType.cpp#L405), should be `FW_HAS_F64` for the `TYPE_F64` case instead of `FW_HAS_64_BIT`.
",bug,https://github.com/nasa/fprime/issues/2146
CMake Should Convert to Canonical Path When Handing Arguments to FPP,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

FPP is implemented in Java, where CWD is a conical path.  Thus to be consistent, paths passed in and out of FPP should canonical having resolved symlinks.",bug,https://github.com/nasa/fprime/issues/2455
A stack-buffer-overflow error in Serializable.cpp line 55,"| | |
|:---|:---|
|**_F´ Version_**|1.5 |
|**_Affected Component_**| Fw  |
---
## Problem Description

A stack-buffer-overflow error in [Serializable.cpp line 55](https://github.com/nasa/fprime/blob/ada6e424b813e6434284bbde9f785656a61c8539/Fw/Types/Serializable.cpp#L55)

```
zyh@virtual:~/fprime$ ./build-fprime-automatic-native-ut/bin/Linux/Fw_Buffer_ut_exe 
[==========] Running 3 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 3 tests from Nominal
[ RUN      ] Nominal.BasicBuffer
[       OK ] Nominal.BasicBuffer (2 ms)
[ RUN      ] Nominal.Representations
=================================================================
==14450==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe10428264 at pc 0x0000004e1742 bp 0x7ffe10428020 sp 0x7ffe104277d0
READ of size 101 at 0x7ffe10428264 thread T0
    #0 0x4e1741 in __asan_memcpy (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Fw_Buffer_ut_exe+0x4e1741)
    #1 0x564c7e in Fw::SerializeBufferBase::copyFrom(Fw::SerializeBufferBase const&) /home/zyh/fprime/Fw/Types/Serializable.cpp:55:16
    #2 0x564e93 in Fw::SerializeBufferBase::operator=(Fw::SerializeBufferBase const&) /home/zyh/fprime/Fw/Types/Serializable.cpp:61:15
    #3 0x530b41 in test_representations() /home/zyh/fprime/Fw/Buffer/test/ut/TestBuffer.cpp:82:9
    #4 0x536cdf in Nominal_Representations_Test::TestBody() /home/zyh/fprime/Fw/Buffer/test/ut/TestBuffer.cpp:125:5
    #5 0x6750d0 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2433:10
    #6 0x63d3b9 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2469:14
    #7 0x5a6899 in testing::Test::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2508:5
    #8 0x5a8824 in testing::TestInfo::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2684:11
    #9 0x5a9654 in testing::TestSuite::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2816:28
    #10 0x5c826a in testing::internal::UnitTestImpl::RunAllTests() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:5338:44
    #11 0x67cfc0 in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2433:10
    #12 0x643419 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2469:14
    #13 0x5c7886 in testing::UnitTest::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:4925:10
    #14 0x54349e in RUN_ALL_TESTS() /home/zyh/fprime/gtest/googletest-src/googletest/include/gtest/gtest.h:2473:46
    #15 0x53702f in main /home/zyh/fprime/Fw/Buffer/test/ut/TestBuffer.cpp:135:12
    #16 0x7f8a988bebf6 in __libc_start_main /build/glibc-S9d2JN/glibc-2.27/csu/../csu/libc-start.c:310
    #17 0x4229c9 in _start (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Fw_Buffer_ut_exe+0x4229c9)

Address 0x7ffe10428264 is located in stack of thread T0 at offset 132 in frame
    #0 0x52ee0f in test_representations() /home/zyh/fprime/Fw/Buffer/test/ut/TestBuffer.cpp:66

  This frame has 41 object(s):
    [32, 132) 'data' (line 67)
    [176, 232) 'buffer' (line 68) <== Memory access at offset 132 partially underflows this variable
    [272, 288) 'gtest_ar' (line 77)
    [304, 308) 'ref.tmp' (line 77)
    [320, 324) 'ref.tmp2' (line 77)
    [336, 344) 'ref.tmp4' (line 77)
    [368, 376) 'temp.lvalue'
    [400, 404) 'stat' (line 79)
    [416, 432) 'gtest_ar8' (line 80)
    [448, 452) 'ref.tmp9' (line 80)
    [464, 472) 'ref.tmp11' (line 80)
    [496, 504) 'temp.lvalue12'
    [528, 544) 'gtest_ar17' (line 84)
    [560, 564) 'ref.tmp18' (line 84)
    [576, 580) 'ref.tmp20' (line 84)
    [592, 600) 'ref.tmp22' (line 84)
    [624, 632) 'temp.lvalue23'
    [656, 660) 'out' (line 87)
    [672, 676) 'i30' (line 90)
    [688, 704) 'gtest_ar33' (line 91)
    [720, 724) 'ref.tmp34' (line 91)
    [736, 740) 'ref.tmp36' (line 91)
    [752, 760) 'ref.tmp38' (line 91)
    [784, 792) 'temp.lvalue39'
    [816, 832) 'gtest_ar42' (line 92)
    [848, 856) 'ref.tmp44' (line 92)
    [880, 888) 'temp.lvalue45'
    [912, 928) 'gtest_ar50' (line 94)
    [944, 948) 'ref.tmp51' (line 94)
    [960, 964) 'ref.tmp53' (line 94)
    [976, 984) 'ref.tmp55' (line 94)
    [1008, 1016) 'temp.lvalue56'
    [1040, 1056) 'gtest_ar63' (line 97)
    [1072, 1076) 'ref.tmp64' (line 97)
    [1088, 1092) 'ref.tmp66' (line 97)
    [1104, 1112) 'ref.tmp68' (line 97)
    [1136, 1144) 'temp.lvalue69'
    [1168, 1184) 'gtest_ar72' (line 98)
    [1200, 1204) 'ref.tmp73' (line 98)
    [1216, 1224) 'ref.tmp75' (line 98)
    [1248, 1256) 'temp.lvalue76'
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Fw_Buffer_ut_exe+0x4e1741) in __asan_memcpy
Shadow bytes around the buggy address:
  0x10004207cff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10004207d000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10004207d010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10004207d020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10004207d030: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
=>0x10004207d040: 00 00 00 00 00 00 00 00 00 00 00 00[04]f2 f2 f2
  0x10004207d050: f2 f2 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 f8 f8
  0x10004207d060: f2 f2 f8 f2 f8 f2 f8 f2 f2 f2 00 f2 f2 f2 04 f2
  0x10004207d070: f8 f8 f2 f2 f8 f2 f8 f2 f2 f2 00 f2 f2 f2 f8 f8
  0x10004207d080: f2 f2 f8 f2 f8 f2 f8 f2 f2 f2 00 f2 f2 f2 f8 f2
  0x10004207d090: f8 f2 f8 f8 f2 f2 f8 f2 f8 f2 f8 f2 f2 f2 00 f2
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14450==ABORTING
```

## How to Reproduce

1. Compile unit test with ASAN
2. Run build-fprime-automatic-native-ut/bin/Linux/Fw_Buffer_ut_exe
3. Program abort

## Expected Behavior

Run normally with ASAN.
",bug,https://github.com/nasa/fprime/issues/429
Adding more detail on cross compiling for math component tutorial. ,"| | |
|:---|:---|
|**_F´ Version_**|devel |
|**_Affected Component_**|Math Components Tutorials  |
---
## Feature Description

Expand the math components more on the deploying to RPI or any other board. Basically, have something similar to cross compile section in R Pi tutorial but for math components.

## Rationale

From a newbie perspective, it's easier to understand how to run a GDS on host machine to interact with R Pi with more simple example like math components. It's more likely for people to have a R Pi or other SBC lying around than having that and a GPS module. A GPS module tutorial can then be focused for learning on hardware interaction. 
",non-bug,https://github.com/nasa/fprime/issues/667
Fix GTest Usage,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Downloading GTest during the generate phase is problematic:

1. It puts build and code in the source tree
2. Multiple deployments fight over it
3. It requires internet",bug,https://github.com/nasa/fprime/issues/1998
Improve Svc/CmdSequencer alignment,"| | |
|:---|:---|
|**_F´ Version_**| 1.5.3 |
|**_Affected Component_**| Svc/CmdSequencer |
---
## Feature Description

Revisit time alignment on relative commands. 

## Rationale

A `R00:00:0X` typically delays `X+1` seconds if the sequencer is called at 1Hz, so the `R` is not accurate.

",non-bug,https://github.com/nasa/fprime/issues/484
Remove `flask_uploads.py` from the GDS,"| | |
|:---|:---|
|**_F´ Version_**| 3.3.x |
|**_Affected Component_**|  |
---
## Feature Description

[flask_uploads.py](https://github.com/fprime-community/fprime-gds/blob/devel/src/fprime_gds/flask/flask_uploads.py) is an old script that was forked from Flask, allowing to upload files. It shouldn't be necessary to keep it anymore. 
We should remove it, and keep only the minimal set of functionality that fits the use case.
Preliminary work has been done here: https://github.com/fprime-community/fprime-gds/tree/discard-flask-uploads
I believe this is working - just need to confirm, test and polish the branch before opening a PR.


",non-bug,https://github.com/nasa/fprime/issues/2352
[Feature Request] Report number of EVRs dropped by ActiveLogger,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| ActiveLogger |
---
## Feature Description

Report the number of messages dropped by ActiveLogger (available via [QueuedComponentBase::getNumMsgsDropped()](https://github.com/nasa/fprime/blob/8314f71086d3cb17f9bb9e95398611003bd03125/Fw/Comp/QueuedComponentBase.hpp#L42) ) either by telemetry channel (would be nicer, but may be undesirable as ActiveLogger does not have any tlm channels as of yet) or command-triggered event (This is how ActiveLogger reports filter state. An extra event could be added to that command).


## Rationale

The ActiveLogger drops events if they overflow the [internal queue](https://github.com/nasa/fprime/blob/8314f71086d3cb17f9bb9e95398611003bd03125/Svc/ActiveLogger/ActiveLogger.fpp#L34). This can easily happen if a lot of events happen at once, such as during command registration. Would be good for users to know if they are dropping events and diagnose the issue.


",non-bug,https://github.com/nasa/fprime/issues/1277
Ninja support for fprime-tools,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

There are a couple places in fprime-tools where things would break if Ninja was used instead of Make. We need to fix that, as Ninja is usually much faster.
e.g. [this](https://github.com/fprime-community/fprime-tools/blob/0a9fdf58ce4b428d407ab264f7266041808237c8/src/fprime/fbuild/cmake.py#L133) is Make-specific output, Ninja formats it differently

## Expected Behavior

Support Ninja with fprime-tools. Add a convenient option to chose which one to use.
",bug,https://github.com/nasa/fprime/issues/2376
Tutorials should explain telemetry and magical event functions,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Please explain magical creation of log_ACTIVITY_HI_BlinkIntervalSet in tutorials.


## Rationale

Help new users understand how some commands are created.
",non-bug,https://github.com/nasa/fprime/issues/2801
Implement ComBuffer DataProduct writer,"| | |
|:---|:---|
|**_F´ Version_**|3.x |
|**_Affected Component_**| New Component |
---
## Feature Description

This component would be an alternative to `Svc/ComLogger`. It would allow `Fw/Com/ComBuffer` data to be stored as [Data Products](https://github.com/nasa/fprime/discussions/1154) as opposed to raw named files. This allows telemetry to be written to storage for the times there is not radio coverage and allows subsequent downloads to get the data products to the ground.

## Rationale

`Svc/ComLogger` works just fine, but requires managing files by name, which can complicate operations. The new [Data Product](https://github.com/nasa/fprime/discussions/1154) approach will allow the `ComBuffer` histories to be downloaded as part of a prioritized data product management approach that doesn't require explicit file names.
",non-bug,https://github.com/nasa/fprime/issues/1986
Fatal error with `fprime-util build --ut`,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0|
|**_Affected Component_**| MathSender |
---
## Problem Description

Fatal error encountered when running `fprime-util build --ut`, following [4.5.1. Set Up the Unit Test Environment](https://nasa.github.io/fprime/Tutorials/MathComponent/Tutorial.html#The-MathSender-Component_Write-and-Run-Unit-Tests_Set-Up-the-Unit-Test-Environment) in [Math Components Tutorial](https://nasa.github.io/fprime/Tutorials/MathComponent/Tutorial.html), as of https://github.com/capsulecorplab/fprime/commit/ce8836c122715a4e79b989e18320e058b40702d3

```
In file included from /home/captainpike/repo/fork/fprime/Ref/MathSender/test/ut/Tester.cpp:13:
/home/captainpike/repo/fork/fprime/Ref/MathSender/test/ut/Tester.hpp:17:10: fatal error: Ref/MathSender/MathSenderComponentImpl.hpp: No such file or directory
   17 | #include ""Ref/MathSender/MathSenderComponentImpl.hpp""
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
make[3]: *** [Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/build.make:93: Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/test/ut/Tester.cpp.o] Error 1
make[2]: *** [CMakeFiles/Makefile2:33363: Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:33370: Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/rule] Error 2
make: *** [Makefile:11940: Ref_MathSender_ut_exe] Error 2
[ERROR] CMake erred with return code 2
```

## How to Reproduce

### Setup/configuration
On Ubuntu 20.04 with python3,
1. `git clone git@github.com:capsulecorplab/fprime.git`
2. `cd fprime`
3. `git checkout math-tutorial`
4. `python3 -m venv fprime-venv`
5. `. ./fprime-venv/bin/activate`
6. `pip install --upgrade fprime-tools fprime-gds`

### Build steps
In fprime repo with virtual environment activated, 
1. `cd Ref`
2. `fprime-util generate --ut`
2. `cd MathSender`
3. `fprime-util impl --ut`
4. `fprime-util build --ut`

## Expected Behavior

Unit tests should build without errors.",bug,https://github.com/nasa/fprime/issues/1258
fprime-venv uses hardcoded full path to project folder instead of building a full path at time of call,"| | |
|:---|:---|
|**_F´ Version_**| latest|
|**_Affected Component_**| virtual env |
---
## Feature Description
Let's say you initially create a project at the following location: /folder1/category1/MyProject
Then you decide to move the project to a different location: /someOtherFolder/MyProject

The call to `fprime-venv/bin/activate` runs successfully in the new location but it uses old information from when the project was first created (i.e. it has a full path to the original /folder1/ location).  The `activate` and `fprime-util` scripts contain full path references. The result is that the user is presented with an error message that states `fprime-util: command not found`.

It would be nice to have the pathing information use relative paths or dynamically created full paths. This way, it doesn't matter where the project is placed - the project continues to work.  

Alternatively, the Troubleshooting FAQ should be updated to include the relocation scenario under the [fprime-util: Command not found](https://nasa.github.io/fprime/troubleshooting.html#fprime-util-command-not-found) section.

## Rationale

Folder reorganization is a common task. Scripts need handle this more effectively. 

If this information is already available, then a link to info could be added to the new user tutorial in the place where the user is [first told to use `activate`](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/NewProject.html) (in addition also updating the FAQ).
",non-bug,https://github.com/nasa/fprime/issues/2837
F´ Util Produces Bad Warning,"When a new component is first build, F´ util produces a WARNING saying the target does not exist....while it scans for new targets.

Capture and mute this warning.  Let the second one come out if it really does not exist.",bug,https://github.com/nasa/fprime/issues/2241
Finalize Packet Autocoder,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description


We need to finalize the telemetry packet autocoder.",bug,https://github.com/nasa/fprime/issues/1696
Record packet headers,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

AMPCS has a system that records packet headers. One can do `chill_get_packets` and get a list of all packets received. FPrime-GDS records the raw received data in `recv.bin`, which is nice, but to suck out the packet headers, one has to read this in binary, which is just cruel.

## Rationale

Make my life easier when it comes to monitoring/watching/debugging the downlink.
",non-bug,https://github.com/nasa/fprime/issues/2429
`fprime-util new --project` doesn't prompt for fprime branch/tag and creates an fprime submodule checked out at `devel` as of `fprime-tools` v3.4.0,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.0 |
|**_Affected Component_**|  |
---
## Problem Description

Haven't tested to see if the same behavior exists in fprime-tools v3.4.1, but at least in v3.4.0, `fprime-util new --project` creates an `fprime` submodule checked out at a grafted `HEAD` commit at `devel` without prompting for fprime branch/tag as described in [Creating a New F' Project](https://github.com/fprime-community/fprime-tutorial-hello-world/blob/main/docs/NewProject.md#creating-a-new-f-project); I'd have to manually `cd` into the `fprime` submodule, run `git fetch --tags` followed by `git checkout v3.4.0`

![Screenshot from 2024-01-15 16-14-13](https://github.com/nasa/fprime/assets/14095576/9a0d1a39-8397-49e4-88b1-15bef4d0a3e1)

![Screenshot from 2024-01-15 16-14-49](https://github.com/nasa/fprime/assets/14095576/ba6aa3fd-300f-44b1-8c1c-ec1009b88288)

## How to Reproduce

1. `pip install fprime-tools==3.4.0`
2. `fprime-util new --project` # enter `MyFPrimeProject` for project name
3. `cd MyFPrimeProject/fprime`
4. `git show HEAD`

## Expected Behavior

`fprime-util new --project` should prompt for fprime branch/tag as to be able to pin fprime submodule to a version, s.a., `v3.4.0`",bug,https://github.com/nasa/fprime/issues/2484
Improved Sequencer,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

There is an improved form of the sequencer that we could pull in from one of our projects. 

## Rationale

This sequencer adds in BLOCK/NON_BLOCK options.",non-bug,https://github.com/nasa/fprime/issues/696
CMake errors encountered while attempting to build Ref with MathComponent,"| | |
|:---|:---|
|**_F´ Version_**| 3.1.1|
|**_Affected Component_**|   Ref and MathComponent|
---
## Problem Description


Encountered following CMake errors when attempting to build Ref with MathComponent
```
In file included from /home/kasm-user/fprime/Ref/build-fprime-automatic-native/Ref/Top/RefTopologyAc.cpp:7:
/home/kasm-user/fprime/Ref/build-fprime-automatic-native/Ref/Top/RefTopologyAc.hpp:271:15: error: ‘ByteStreamDriverModel’ in namespace ‘Drv’ does not name a type
  271 |   extern Drv::ByteStreamDriverModel comm;
      |               ^~~~~~~~~~~~~~~~~~~~~
/home/kasm-user/fprime/Ref/build-fprime-automatic-native/Ref/Top/RefTopologyAc.hpp:301:15: error: ‘Time’ in namespace ‘Svc’ does not name a type
  301 |   extern Svc::Time linuxTime;
      |               ^~~~
make[3]: *** [Ref/Top/CMakeFiles/Ref_Top.dir/build.make:302: Ref/Top/CMakeFiles/Ref_Top.dir/RefTopologyAc.cpp.o] Error 1
make[2]: *** [CMakeFiles/Makefile2:8390: Ref/Top/CMakeFiles/Ref_Top.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:2045: CMakeFiles/Ref.dir/rule] Error 2
make: *** [Makefile:195: Ref] Error 2
[ERROR] CMake erred with return code 2
```


## How to Reproduce

1. Checkout v3.1.1
2. Copy MathComponent contents to Ref
3. Generate stubs using `fprime-util generate` in Ref directory
4. Build using `fprime-util build`

See https://github.com/ODU-CGA-CubeSat/fprime/commit/87b8851a398a02540df996491955d80ed424b354

## Expected Behavior

Compile without errors
",bug,https://github.com/nasa/fprime/issues/1732
Baremetal LedBlinker Deployment,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Setup LedBlinker reference repository that builds for baremetal.  Teensy41 is a good target for this system.",non-bug,https://github.com/nasa/fprime/issues/2028
Math Tutorial Unit Test Object Is of Wrong Class,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The object ""component"" of the unit test is of wrong type.  It should be of type ""MathSender"", but the autogenerating code writes it as ""MathSendorComponentImpl"".

## How to Reproduce

1. Create unit test implementation for the ""MathSender""
2.  Open ""Test.hpp"", got to line 92 where the object ""component"" is defined.
3.  Note the type of the object.  It should be of type ""MathSender"" and not ""MathSenderComponentImpl""

## Expected Behavior

The object should be type ""MathSender"" and not ""MathSenderComponentImpl""
A description of the expected behavior.

<img width=""456"" alt=""image"" src=""https://user-images.githubusercontent.com/51178479/174635413-6e927b04-92eb-4f10-905e-b266f1072214.png"">

",bug,https://github.com/nasa/fprime/issues/1516
Booleans as drop-down in GDS,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Booleans are a pain.  These should be a drop down like enums.",non-bug,https://github.com/nasa/fprime/issues/2320
Add F´GDS w/ OpenMCT to tutorials,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

A quick description of the requested feature.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/2162
Dictionary versions with just a Git Commit SHA produce a confusing error message,"From @nbering

| | |
|:---|:---|
|**_F´ Version_**| 3.1.0 |
|**_Affected Component_**| Ref Application |
---
## Problem Description

GDS suggests upgrading when builds from a Git checkout - without tags - produce a dictionary with just a commit SHA as version, like this:

```xml
<dictionary topology=""Ref"" framework_version=""7cb9feed0"" project_version=""7cb9feed0"">
```

```
[ERROR] Dictionary version  is not in supported range: 0.0.0-9.9.9. Please upgrade fprime-gds.
```

## How to Reproduce

1. Build the Ref app from an F´ checkout that doesn't have Git Tags in the local history
2. Run `fprime-gds` as documented in the [Install guide](https://nasa.github.io/fprime/INSTALL.html#checking-your-f-installation)

I have a longer-form description of the problem and how I encountered it [in this blog post](https://nicholasbering.ca/fprime/2022/08/10/fprime-git-tags/).

## Expected Behaviour

Suggested solutions:
- An error about version format instead of version range, possibly suggesting that release tags are missing
- Run with a warning instead of an error when the version number can't be evaluated
- Fix `fprime-util` so it doesn't produce invalid versions",bug,https://github.com/nasa/fprime/issues/2231
microFS Implementation on Baremetal,Implement microFS into the Baremetal Reference,non-bug,https://github.com/nasa/fprime/issues/2109
F´  GDS Complex Types Fails on Validation,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

When a bad value is input into the ""complex commanding"" box, focus is yanked to the first input box.  This is annoying and dangerous.

## How to Reproduce

1.  SEND_SCALAR and type in a non-valid character into F32


## Expected Behavior

Does not yank focus
",bug,https://github.com/nasa/fprime/issues/2312
`register_fprime_executable(NAME)` Fails,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`register_fprime_executable` fails when an executable name is supplied.  It adds a """" executable instead.",bug,https://github.com/nasa/fprime/issues/2413
Publish aarch64/linux FPP Packages,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Users running on arm hardware need aarch64 compilations of the FPP tools. This is critical for running in a VM on macOS with the new arm hardware.",non-bug,https://github.com/nasa/fprime/issues/1996
No available buffers of size X,"| | |
|:---|:---|
|**_F´ Version_**|3.1.1 |
|**_Affected Component_**|  FileUplink |
---
Sending files from GDS to RPI Zero W

I'm trying to send files that are less than 3 MB to a RPI Zero W and there may happen 3 cases:
1. Send successfully one small file at a time
2. Send multiple files and if they are small enough send successfully or get: ```fileUplinkBufferManager.NoBuffsAvailable,17408,EventSeverity.WARNING_HI,No available buffers of size 271```
```fatalAdapter.AF_ASSERT_0,16896,EventSeverity.FATAL,Assert in file fprime/Svc/FramingProtocol/FprimeProtocol.cpp, line 127 ```
```FATAL 17152 handled.```
```Exiting with abort signal and core dump file.```
```Aborted```
3. Send a bigger file with same error

Same behavior happens in Ref and RPI tutorials. Haven't found same behavior in Downlink
Similar issues that i found [#1255](https://github.com/nasa/fprime/issues/1265) or [#789](https://github.com/nasa/fprime/discussions/789)

## How to Reproduce

1. Install master branch
2. Connect successfully RPI with GDS
3. Go to Uplink tab
5. Send files in any Directory

## Expected Behavior
Send file with no errors
",bug,https://github.com/nasa/fprime/issues/1953
Even Better/Faster CMake,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Building on top of #1260, this is the set of changes that is lower priority after the faster install setup. These (lower priority) items are:

Performance (build):
- [ ] Precompiled headers option investigation
- [ ] Single compilation unit option investigation
- [ ] Precache FPP to XML outputs per-deployment
- [x] Ensure Ninja functions correctly as underlying make system",non-bug,https://github.com/nasa/fprime/issues/1339
Svc::Time Interface,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make `Svc::Time` and interface.  See #2255. ",non-bug,https://github.com/nasa/fprime/issues/2256
Consideration of complex types by the GDS,"| | |
|:---|:---|
|**_F´ Version_**|**devel**|
|**_Affected Component_**|**GDS**|
---
## Feature Description

According to @lestarch [[1]](https://groups.google.com/g/fprime-community/c/yf6NMXk0NKM) actually the GDS does not support complex types such as arrays or serializables

The GDS shall be able to take into account these different types.


## Rationale

This feature shall be implemented as it could facilitate the sending of vector or linked data set.

In case the implementation of this feature would take too much time at the moment, I think at least the bug associated with this feature quotes in issue [#322](https://github.com/nasa/fprime/issues/322) and [#602](https://github.com/nasa/fprime/issues/602) should be solved
",non-bug,https://github.com/nasa/fprime/issues/607
Fw::ZERO_TIME is a repeated static constant per translation unit,"Something I noticed when checking symbols on our deployment:

```
$ nm --demangle ../CadreSimDeployment/build-artifacts/x86_64-linux-ubuntu/bin/CadreSimDeployment | grep Fw::ZERO_TIME
00000000000c8090 b Fw::ZERO_TIME
00000000000c8620 b Fw::ZERO_TIME
00000000000c8640 b Fw::ZERO_TIME
00000000000dee70 b Fw::ZERO_TIME
00000000000dee90 b Fw::ZERO_TIME
00000000000deeb0 b Fw::ZERO_TIME
00000000000deed0 b Fw::ZERO_TIME
00000000000deef0 b Fw::ZERO_TIME
00000000000def10 b Fw::ZERO_TIME
00000000000def30 b Fw::ZERO_TIME
00000000000def50 b Fw::ZERO_TIME
00000000000def70 b Fw::ZERO_TIME
00000000000def90 b Fw::ZERO_TIME
00000000000defb0 b Fw::ZERO_TIME
00000000000defd0 b Fw::ZERO_TIME
00000000000deff0 b Fw::ZERO_TIME
00000000000df010 b Fw::ZERO_TIME
00000000000df030 b Fw::ZERO_TIME
00000000000df050 b Fw::ZERO_TIME
00000000000df070 b Fw::ZERO_TIME
00000000000df090 b Fw::ZERO_TIME
00000000000df0b0 b Fw::ZERO_TIME
00000000000df0d0 b Fw::ZERO_TIME
00000000000df0f0 b Fw::ZERO_TIME
00000000000df110 b Fw::ZERO_TIME
00000000000df130 b Fw::ZERO_TIME
00000000000df150 b Fw::ZERO_TIME
00000000000df170 b Fw::ZERO_TIME
00000000000df190 b Fw::ZERO_TIME
00000000000df1b0 b Fw::ZERO_TIME
00000000000df1d0 b Fw::ZERO_TIME
00000000000df1f0 b Fw::ZERO_TIME
00000000000df210 b Fw::ZERO_TIME
00000000000df230 b Fw::ZERO_TIME
00000000000df250 b Fw::ZERO_TIME
00000000000df270 b Fw::ZERO_TIME
00000000000df290 b Fw::ZERO_TIME
00000000000df2b0 b Fw::ZERO_TIME
00000000000df2d0 b Fw::ZERO_TIME
00000000000df2f0 b Fw::ZERO_TIME
00000000000df310 b Fw::ZERO_TIME
00000000000df330 b Fw::ZERO_TIME
00000000000df350 b Fw::ZERO_TIME
00000000000df370 b Fw::ZERO_TIME
00000000000df390 b Fw::ZERO_TIME
00000000000df3b0 b Fw::ZERO_TIME
00000000000df3d0 b Fw::ZERO_TIME
00000000000df3f0 b Fw::ZERO_TIME
00000000000df410 b Fw::ZERO_TIME
00000000000df430 b Fw::ZERO_TIME
00000000000e04a0 b Fw::ZERO_TIME
00000000000e04c0 b Fw::ZERO_TIME
00000000000e04e0 b Fw::ZERO_TIME
00000000000e0500 b Fw::ZERO_TIME
00000000000e0520 b Fw::ZERO_TIME
00000000000e0540 b Fw::ZERO_TIME
00000000000e0560 b Fw::ZERO_TIME
00000000000e0580 b Fw::ZERO_TIME
```

The definition is here: https://github.com/nasa/fprime/blob/cc795f7c00a096d7c69146e745365cf3d55ae299/Fw/Time/Time.hpp#L89.

It could be changed to an extern with it defined in `Time.cpp`.",bug,https://github.com/nasa/fprime/issues/1410
Svc/BufferLogger tests,"| | |
|:---|:---|
|**_F´ Version_**| Last |
|**_Affected Component_**|  Svc::BufferLogger |
---
## Tests in Svc/Bufferlogger don't pass (specifically (TestErrors, LogFileValidation))

There are errors in the BufferLogger Errors.cpp file. Maybe access permissions on buf.

![image](https://user-images.githubusercontent.com/35371910/116982512-2ab76c80-acc9-11eb-886a-dd14da6d22da.png)


## How to Reproduce

1. fprime-util generate --ut
2. cd Svc/BufferLogger/
3. fprime-util check

## Expected Behavior

The tests must pass
",bug,https://github.com/nasa/fprime/issues/509
Clickable Assert Messages (FSW),"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make FW_ASSERT messages clickable (e.g. `<file>:<line>`).

## Rationale

This worked well for UT asserts.  ",non-bug,https://github.com/nasa/fprime/issues/1847
Establish FPP Interfaces for ByteSteamDriverModel,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

ByteSteamDriverModel is used as a key feature in F´ in that it drives the communication layer.  Instead of using the model and different implementers, it should be made into an interface.

This has the primary advantage that this interface can be augmented while still fitting correctly into the topology.
",non-bug,https://github.com/nasa/fprime/issues/2255
Svc::FileManager MoveFile command does not work across partitions,"This command invokes the native OS rename interface. This doesn't work on a file system when the source and destination are on different file system partitions. It does work to a different directory on the same file system. Is there a different underlying call that more mimics the system ""mv"" command?",bug,https://github.com/nasa/fprime/issues/303
Release v3.4.0,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Do the release!",non-bug,https://github.com/nasa/fprime/issues/2394
Allow Users to Select Various `comDriver` Implementations in `fprime-util new --deployment`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

F´ ships with 3 Linux drivers that could be used for the `comDriver`.  Users should be given a choice on which to use.",non-bug,https://github.com/nasa/fprime/issues/2191
Switch Framer and Deframer to use Mallocator Pattern,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Mallocator pattern is preferred over member-allocated buffers.",non-bug,https://github.com/nasa/fprime/issues/2075
Math Component F' Tutorial,"After we have connected the components in section 3 of this tutorial we are told to run:
`fprime-util build`
from 
`Ref/Top`
If run from that location this error is thrown:
make: *** No rule to make target `Ref_Top'.  Stop.
[ERROR] CMake erred with return code 2.

I believe we should actually be running that command from 
`Ref`",non-bug,https://github.com/nasa/fprime/issues/171
Purge Fails Silently,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0 |
|**_Affected Component_**| fprime-util purge  |
---
## Problem Description

`fprime-util purge` fails silently when it doesn't have permissions to modify a file.

## How to Reproduce

1. Create a F' build using `fprime-util build`
2. Change the permission of a file to not allow editing
3. Run `fprime-util purge`

Or 

1. Create a F' build using `sudo fprime-util build`
2. Run `fprime-util purge`

## Expected Behavior

`fprime-util purge` should instead output an error notifying the user that it doesn't have permission to modify the file.
",bug,https://github.com/nasa/fprime/issues/2463
F' running on RISC-V architecture,Deploy F' on RISC-V. This can use the Zephyr OS layer,non-bug,https://github.com/nasa/fprime/issues/2120
GDS does not show units when telemetry formatted as struct is expanded,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**| fprime-gds |
---
## Feature Description

Format strings can be specified within an FPP structure:

```
        struct compTlm_t {
            B1TestOvr: bool
            B1ArrV: U16 format ""{} mV""
            B1ArrI: U16 format ""{} mA""
            B1MpptV: U16 format ""{} mV""
            B1BattI: U16 format ""{} mA""
```

The channels view shows that format string when it is collapsed:

![image](https://github.com/user-attachments/assets/f814e19d-6bb4-4acd-86ca-8b84fee17086)

But those same units are not shown when it is expanded:

![image](https://github.com/user-attachments/assets/29ae358e-247b-4f7a-9627-62ff703c6514)

The units provided by a user should be shown in both views.

## Rationale

Units are important no matter what view a user chooses to inspect telemetry in. Some telemetry structures can be large, and they must be expanded for quick and easy readability.",bug,https://github.com/nasa/fprime/issues/2827
Update Drv::BlockDriverImpl to add telemetry in Sched port,"| | |
|:---|:---|
|**_F´ Version_**| 3.x |
|**_Affected Component_**| `Drv/BlockDriver` |
---
## Feature Description

Add some telemetry channels that count bytes sent/received (the same for this trivial example) and add more comments describing the pattern.

## Rationale

This makes the example clearer to readers. Sometimes there is confusion like in issue #1805.
",non-bug,https://github.com/nasa/fprime/issues/1807
Remove versions from System Resources and fix Versions component,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description
As the title suggests, this ticket is in fact capturing two separate issues

- [ ]  Remove versions from System Resources 
- [ ]  Fix versions component so commanding to get custom versions will not need enable to be left on.See [here](https://github.com/nasa/fprime/pull/2747#discussion_r1671183951) for details. 

",non-bug,https://github.com/nasa/fprime/issues/2826
Revive Small Platform Support,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

AVR and small ARM compilations are failing since v2.1.  We should revive support.",non-bug,https://github.com/nasa/fprime/issues/1182
Is there a golang language,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

A quick description of the requested feature.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/387
Fix Doxygen Documentation,Fix Doxygen documentation.  It is generating `_` files that are then ignored.,non-bug,https://github.com/nasa/fprime/issues/238
Packet Autocoder Generates Bad Includes on Symlinked Paths,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

```
In file included from /tmp/fprime/Ref/build/Ref/Top/RefTopologyAc.cpp:7:
.../fprime/Ref/build/Ref/Top/RefTopologyAc.hpp:10:10: fatal error: '.../fprime/Ref/build/Ref/Top/RefTopologyDefs.hpp' file not found
#include "".../fprime/Ref/build/Ref/Top/RefTopologyDefs.hpp""
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/fprime/Ref/Top/RefTopology.cpp:12:
/tmp/fprime/Ref/build/Ref/Top/RefTopologyAc.hpp:10:10: fatal error: .../fprime/Ref/build/Ref/Top/RefTopologyDefs.hpp' file not found
#include "".../fprime/Ref/build/Ref/Top/RefTopologyDefs.hpp""
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/tmp/fprime/Ref/build/Ref/Top/RefPacketsAc.cpp:4:10: fatal error: '../../../../../../../../../tmp/fprime/Ref/Top/RefPacketsAc.hpp' file not found
#include <../../../../../../../../../tmp/fprime/Ref/Top/RefPacketsAc.hpp>
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.

```",bug,https://github.com/nasa/fprime/issues/2453
Adding CMAKE_SYSTEM_PROCESSOR to output directory names,"### Discussed in https://github.com/nasa/fprime/discussions/2323

<div type='discussions-op-text'>

<sup>Originally posted by **JackNWhite** October 18, 2023</sup>
We are building our deployment on CI for both x64 Linux and aarch64 Linux, but we are finding that because both binaries are output to `build-artifacts/Linux/Topology/bin/Topology`, the binary built second overwrites the one built first.

Is anyone else having this problem?

Would anyone be against changing the output directory to `build-artifacts/${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}`?</div>",non-bug,https://github.com/nasa/fprime/issues/2334
GDS GUI blank after custom type used in port,"## Problem Description

I am working on a project which requires an array to be used as the input to a component. We are currently making modification to the MathComponent created in the Math Tutorial to accommodate our project. We attempted to follow the specifications shown at this link to create our .xml files. We are running into issues when trying to run the GDS GUI. We just receive a blank page. We figured out that this issue is caused when changing the port type in the math sender to our custom array. The .xml files are shown below.

```
<component name=""MathSender"" kind=""active"" namespace=""Ref"">
    <import_array_type>Ref/MathTypes/TestArrayAi.xml</import_array_type>
    <import_port_type>Ref/MathPorts/MathOpPortAi.xml</import_port_type>
    <import_port_type>Ref/MathPorts/MathResultPortAi.xml</import_port_type>
    <comment>Component sending a math operation</comment>
    <ports>
        <port name=""mathOut"" data_type=""Ref::MathOp"" kind=""output"">
            <comment>
            Port for sending the math operation
            </comment>
        </port>
        <port name=""mathIn"" data_type=""Ref::MathResult"" kind=""async_input"">
            <comment>
            Port for returning the math result
            </comment>
        </port>
    </ports>
    <commands>
        <command kind=""async"" opcode=""0"" mnemonic=""MS_DO_MATH""> 
            <comment>
            Do a math operation
            </comment>
            <args>
                <arg name=""val1"" type=""Ref::Test"">
                    <comment>The first value</comment>
                </arg>          
                <arg name=""val2"" type=""F32"">
                    <comment>The second value</comment>
                </arg>          
                <arg name=""operation"" type=""ENUM"">
                    <enum name=""MathOp"">
                        <item name=""ADD""/>
                        <item name=""SUBTRACT""/>
                        <item name=""MULTIPLY""/>           
                        <item name=""DIVIDE""/>           
                    </enum>
                    <comment>The operation to perform</comment>
                </arg>
             </args>
        </command>
    </commands>
    <telemetry>
        <channel id=""0"" name=""MS_VAL1"" data_type=""Ref::Test"">
            <comment>
            The first value
            </comment>
        </channel>
        <channel id=""1"" name=""MS_VAL2"" data_type=""F32"">
            <comment>
            The second value
            </comment>
        </channel>
        <channel id=""2"" name=""MS_OP"" data_type=""ENUM"">
            <enum name=""MathOpTlm"">
                <item name=""ADD_TLM""/>
                <item name=""SUB_TLM""/>
                <item name=""MULT_TLM""/>           
                <item name=""DIV_TLM""/>           
            </enum>
            <comment>
            The operation
            </comment>
        </channel>
        <channel id=""3"" name=""MS_RES"" data_type=""Ref::Test"">
            <comment>
            The result
            </comment>
        </channel>
    </telemetry>
    <events>
        <event id=""0"" name=""MS_COMMAND_RECV"" severity=""ACTIVITY_LO"" format_string=""Math Cmd Recvd: %f %f %d"">
            <comment>
            Math command received
            </comment>
            <args>
                <arg name=""val1"" type=""Ref::Test"">
                    <comment>The val1 argument</comment>
                </arg>          
                <arg name=""val2"" type=""F32"">
                    <comment>The val2 argument</comment>
                </arg>          
                <arg name=""op"" type=""ENUM"">
                    <comment>The requested operation</comment>
                <enum name=""MathOpEv"">
                    <item name=""ADD_EV""/>
                    <item name=""SUB_EV""/>
                    <item name=""MULT_EV""/>           
                    <item name=""DIV_EV""/>           
                </enum>
                </arg>          
            </args>
        </event>
        <event id=""1"" name=""MS_RESULT"" severity=""ACTIVITY_HI"" format_string = ""Math result is %f"" >
            <comment>
            Received math result
            </comment>
            <args>
                <arg name=""result"" type=""Ref::Test"">
                    <comment>The math result</comment>
                </arg>          
            </args>
        </event>
    </events>
</component>
```

Array definition

```
<array name=""Test"" namespace=""Ref"">
  <type>F32</type>
  <size>3</size>
  <format>%f</format>
  <default>
    <value>0.0f</value>
    <value>0.0f</value>
    <value>0.0f</value>
  </default>
</array>
```

When running the GDS we see the following.

![localhost](https://user-images.githubusercontent.com/9275528/103468528-b1097500-4d0e-11eb-8391-c9340ffd58e2.PNG)

We were wondering if anybody else had run into this problem and if so, what a potential solution might be. Any advice is appreciated. Than you.",bug,https://github.com/nasa/fprime/issues/322
Create standalone bootstrap tool,"| | |
|:---|:---|
|**_F´ Version_**| v3.4.0 |
|**_Affected Component_**|  |
---
## Feature Description

Task list:

- [x] Create tool and repo : https://github.com/fprime-community/fprime-bootstrap
- [x] Publish to PyPi
- [x] Rewrite Install Guide : https://github.com/nasa/fprime/pull/2512
- [x] Double check docs for other references of installs
- [x] Rewrite tutorials to make sure they only reference install guide  https://github.com/fprime-community/fprime-tutorial-math-component/pull/25 https://github.com/fprime-community/fprime-workshop-led-blinker/pull/57 https://github.com/fprime-community/fprime-tutorial-hello-world/pull/17

Standalone tool shall:
- same functionality as `fprime-util new --project`
- create a venv within the newly created project, so that package management is similar to how npm does it (everything is within the project)

## Rationale

Make the whole install process more clear, and better venv management
",non-bug,https://github.com/nasa/fprime/issues/2477
No error message for conflicting event IDs,"| | |
|:---|:---|
|**_F´ Version_**| Devel |
|**_Affected Component_**| fprime-util |
---
## Feature Description

Currently, if two events are created with the same ID, there is no description of this error provided to the developer. It would be helpful to create an error message to guide the developer in the direction of this error when attempting to run fprime-util build.

## Rationale

This bug can be difficult to locate right now because the message in the terminal provides no description as to where the error is or what is causing the error.
",non-bug,https://github.com/nasa/fprime/issues/684
Incorrect references to non-existent MagicDraw files,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0 |
|**_Affected Component_**| Documentation |
---
## Problem Description

The next two issues, #1166 #974, required a project purge to remove the now obsolete files, including the mdxml.

Since the @LeStarch commit https://github.com/nasa/fprime/pull/1167/commits/97de3c264553a5348ecf6c26d9e30cdc95aa2567, the last traces of MagicDraw support have been ""officially"" effective, including the removal of the mdxml files.

However, some component ``README`` files still contain references to MagicDraw project files.

Exemple:
https://github.com/nasa/fprime/blob/313ef0556baec4a981f03e66de64d9193a84b867/Fw/Cmd/README#L7

## How to Reproduce

1. Launch ``grep -nr 'mdxml'`` inside fprime folder
2. See the following output:

```ps
fprime$ grep -nr 'mdxml' 
.dockerignore:4:**.mdxml
Binary file .git/objects/pack/pack-ba5f57e658c47e79b316f15efb42028e0016b801.pack matches
.github/actions/spelling/excludes.txt:21:\.mdxml$
.github/actions/spelling/expect.txt:935:mdxml
.gitignore:36:*.mdxml.bak
docs/UsersGuide/dev/magicdraw.md:18:or examples will work.  Open up the `Ref/Top/REFApplication.mdxml` file to begin. If import errors arise, the user will
Fw/Cmd/README:7:CmdModule.mdxml - MagicDraw project file describing command interface
Fw/Com/README:4:ComModule.mdxml - A MagicDraw project file describing a communication buffer port
Fw/Log/README:8:LogModule.mdxml - MagicDraw project file describing event interface
Fw/Prm/README:7:PrmModule.mdxml - MagicDraw project file that describes the parameter interface
Fw/Time/README:5:TimeModule.mdxml - MagicDraw project file describing time interface
Fw/Tlm/README:7:TlmModule.mdxml - MagicDraw project file for telemetry interface
Svc/ActiveLogger/README:7:ActiveLoggerModule.mdxml - MagicDraw project file describing the active logger
Svc/ActiveRateGroup/README:7:ActiveRateGroupModule.mdxml - The MagicDraw project file describing the component
Svc/CmdDispatcher/README:7:CmdDispatcherModule.mdxml - MagicDraw project file describing component
Svc/PassiveConsoleTextLogger/README:5:PassiveTextLoggerModule.mdxml - MagicDraw project file that describes the component
Svc/PolyDb/README:7:PolyDbModule.mdxml - MagicDraw project file that describes the PolyDb component
Svc/PolyIf/README:5:PolyIfModule.mdxml - MagicDraw project file that describes the interface
Svc/PrmDb/README:10:PrmDbModule.mdxml - MagicDraw project file that describes the parameter database component
Svc/RateGroupDriver/README:7:RateGroupDriverModule.mdxml - MagicDraw project file that describes rate group driver component
Svc/Sched/README:4:SchedModule.mdxml - MagicDraw project file that describes scheduler port
Svc/Time/README:4:TimeCompModule.mdxml - The MagicDraw project file that describes the time component.

```

## Expected Behavior

Do not provide misleading or incorrect information about non-existent files to the user when browsing the repository or reading the component documentation.

---

🏷️ Advised issue label: ``Documentation``  ``Easy First Issue``.",non-bug,https://github.com/nasa/fprime/issues/1215
fprime-util impl autocoder does not use return type,"The return type used in the interface definition is ignored when using `fprime-util impl`, the autocoder return type is hard coded to always be `void`

![image](https://user-images.githubusercontent.com/2592986/109230394-a6e97d00-7779-11eb-9b3a-55a77334fc37.png)

After manually replacing `void` with `Backplane::CardConfigReturn` I could get this to compile. 

Here is my interface definition:
```
<interface name=""CardConfig"" namespace=""Backplane"">
    <comment>
        Port to grab card configuration details used by the backplane manager at initialization
    </comment>
    <import_serializable_type>Backplane/Common/CardConfigReturnSerializableAi.xml</import_serializable_type>
    <args>
        <!-- No args only the return is important -->
    </args>
    <return type=""Backplane::CardConfigReturn"" pass_by=""value""> </return>
</interface>
```
 
",bug,https://github.com/nasa/fprime/issues/419
Rename Time Interface File,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`Svc/Interfaces/Time.fppi` should be renamed to `Svc/Interfaces/TimeInterface.fppi` to match modern standards.",bug,https://github.com/nasa/fprime/issues/2579
Add directory listing to `Svc/FileManager`,"| | |
|:---|:---|
|**_F´ Version_**| 3.x |
|**_Affected Component_**| `Svc/FileManager` |
---
## Feature Description

Add a command that will list the files in a directory with file sizes.

## Rationale

See what files are currently on the deployment.",non-bug,https://github.com/nasa/fprime/issues/1918
Fix Broken RPI Documentation,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Fix the RPI cross-compile documentqation.",bug,https://github.com/nasa/fprime/issues/2065
Add Parameter dump feature to autocoder.,"| | |
|:---|:---|
|**_F´ Version_**| 3.X|
|**_Affected Component_**| All |
---
## Feature Description

Add events for all parameters that dump the parameter value.

## Rationale

It allows inspection of actual values set, which currently requires user-written code.
",non-bug,https://github.com/nasa/fprime/issues/1753
add support for building documentation locally,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

As per discussion in https://github.com/nasa/fprime/discussions/2364#discussioncomment-7527518 and attempts to build documentation locally as part of the fprime-workspace-image in https://github.com/capsulecorplab/fprime-workspace-image/pull/35, it appears the current fprime/docs codebase isn't suited for a local build of the docs, s.a., the tutorials. This feature/issue is for capturing the need to refactor the current docs codebase to support a local build of the docs.

## Rationale

I'm currently part of an upcoming Mars analog astronaut mission where we're exploring the possible usage of fprime for collecting various telemetry data (s.a., for monitoring vitals in EVA's or plants in a GreenHab). A local build of the documentation is necessary, as it would be considered ""breaking sim"" if we were to depend on an internet connection to read the fprime documentation.",non-bug,https://github.com/nasa/fprime/issues/2404
Upgrade Tutorials to Reference FPP,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Update GPS and other tutorials to reference FPP.",non-bug,https://github.com/nasa/fprime/issues/1186
Add tests to `fprime-bootstrap` repo,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| `fprime-bootstrap` |
---
## Feature Description

We have a new tool, https://github.com/fprime-community/fprime-bootstrap . In my haste to make it available, I skipped writing simple tests to make sure things don't break down the line. It would be nice to write some simple tests that run the module and check that files are generated. Two things I'd like to see tested is:
- no file in the generated directory are named `*-template`
- no file in the generated directory contain the string `{{FPRIME_PROJECT_NAME}}`

As either of these would indicate something happened during the generation.

Bonus: these tests should be ran in CI, just like we do for example here https://github.com/fprime-community/fprime-tools/blob/devel/.github/workflows/fprime-tools-ci.yml (probably can reuse the exact same workflow definition)
",non-bug,https://github.com/nasa/fprime/issues/2551
fprime-util visualize does not work,"Fprime version: 3.3.2
fprime-tools: 3.3.3

When I run fprime-util visualize I get the following error: 
[ERROR] fpl-layout is not installed. Please install with `pip install fprime-fpp>1.2.0`
Note that I have fprime-fpl-layout==1.0.0 installed (as confirmed in my fprime/requirements.txt file). I am using F prime in linux-based parallels with arm64. My parallels is running on my MacOS with M1 chip.",bug,https://github.com/nasa/fprime/issues/2328
Validate that Events can fit within a ComBuffer,"## Feature Description

The autocoder should warn when defining events larger than can be serialized into an event buffer.
Right now if a user defines an event larger than can into a log buffer, F' will assert at runtime during serialization.

## Rationale

Similar to telemetry packetization, F' should prevent definition of impossible to serialize events. This is particularly dangerous for events using strings, since they could successfully serialize in some cases but assert if the strings were too long.

FPP could perform this check, but it will likely require moving the combuffer size definition (which typically drives the size of the logbuffer) from a definition in FpConfig.hpp to FPP so it is available at the autocoding step.
",non-bug,https://github.com/nasa/fprime/issues/1626
CI All Things!,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

More improvements that can be made to CI!

- [ ] Various FW_CONFIG options
- [ ] Baremetal support
- [x] RPI CI reboot on failure:  the RPI CI setup often fails for reasons unknown that a reboot of the pi fixes.  It could auto reboot on failure and require less hand-holding.
- [ ] Configuration flags (FpConfig.hpp)
...more will be added",non-bug,https://github.com/nasa/fprime/issues/1385
Clear Individual Windows in fprime-gds,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0 ish |
|**_Affected Component_**| fprime-gds |
---
## Feature Description

Clear content in individual tabs from fprime-gds without having to do a reload which clears all the tabs.


## Rationale

I am running a test and I restarted fsw. I would like to clear the events, but keep the command log so I can easily resend the commands from the last run of fsw. 
",non-bug,https://github.com/nasa/fprime/issues/2541
Add Hotfix CI Branches,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add specific branches (`release/*`) in addition to devel in CI.  This allows us to create hotfixs that don't merge with devel before they are released.
",non-bug,https://github.com/nasa/fprime/issues/2411
Create reference sub-repo for testing,"| | |
|:---|:---|
|**_F´ Version_**| V3.0 |
|**_Affected Component_**| all |
---
## Feature Description

Create a reference deployment (probably in https://github.com/fprime-community) that includes fprime as a sub-repo. That could help detect issues like https://github.com/nasa/fprime/pull/1220. This repo would be built and tested for each release of F Prime. Suggestion would be to reproduce the `Ref` app with another name. It could include all the components from the F Prime subrepo.

## Rationale

Help find errors when using F Prime as a subrepo.
",non-bug,https://github.com/nasa/fprime/issues/1221
Adoption of a time-based Release Process,"| | |
|:---|:---|
|**_F´ Version_**| latest |
|**_Affected Component_**| Release Process |
---
## Feature Description

The project does not currently release versions regularly, despite the changes that have been made, which can lead to inconsistencies for users and contributors.

For example, this can cause coordination and planning problems, as they do not know when the changes they have made will be released, and so cannot plan their work effectively. It can also lead to conflicts between the different changes made, as they are not integrated on a regular basis.

I suggest adopting a [release process similar to Zephyr's](https://docs.zephyrproject.org/latest/project/release_process.html#release-process), based on a time cycle that balances the latest technologies and features with the overall quality of the release.

This process is based on the Linux kernel release model, with a development phase, followed by a stabilisation phase, and a release candidate tag for analysis and approval of the version before release.

## Rationale

This time-based release process will provide users with a stable and reliable version with the latest features.

It will also allow contributors to better plan their work and ensure that changes are released regularly.

Finally, using a release process similar to that of other large open source projects such as Zephyr will demonstrate that our project is in line with industry best practice.
",non-bug,https://github.com/nasa/fprime/issues/1860
Write Intergration Tests for Baremetal Reference,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

In order to have a solid CI test of the [Baremetal System Reference](https://github.com/fprime-community/fprime-baremetal-reference), a set of basic functional integration tests should be written for the Baremetal reference deployment.  These tests should ensure the following functions work correctly:

1. Connectivity and flowing telemetry
2. Commanding
3. Events
4. If the developer identifies other critical functions, these may be tested too

These tests should be written with the [Integration and Test API](https://nasa.github.io/fprime/UsersGuide/dev/testAPI/user_guide.html).  However, the modern fixture-driver approach shown in [Ref](https://github.com/nasa/fprime/blob/devel/Ref/test/int/ref_integration_test.py) should be used as that guide uses old boilerplate code.

## Rationale

A set of integration tests for the baremetal reference is an essential first step for making this system something that may be run in CI.",non-bug,https://github.com/nasa/fprime/issues/2611
Interfaces for All Drv Drivers,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make an interface for each of: I2C, GPIO, SPI, BlockDriver.. See #2255 ",non-bug,https://github.com/nasa/fprime/issues/2258
Add Event Filtering to Text Logger,"| | |
|:---|:---|
|**_F´ Version_**| |
v3.2
|**_Affected Component_**|   |
Svc.PassiveTextLogger
---
## Problem Description

I've setup my ```ActiveLoggerImplCfg.hpp``` like so:
```cpp
/*
 * ActiveLoggerImplCfg.hpp
 *
 *  Created on: Apr 16, 2015
 *      Author: tcanham
 */

#ifndef ACTIVELOGGER_ACTIVELOGGERIMPLCFG_HPP_
#define ACTIVELOGGER_ACTIVELOGGERIMPLCFG_HPP_

#include <Svc/ActiveLogger/ActiveLoggerImpl.hpp>

// set default filters

enum {
    FILTER_WARNING_HI_DEFAULT = true, //!< WARNING HI events are filtered at input
    FILTER_WARNING_LO_DEFAULT = true, //!< WARNING LO events are filtered at input
    FILTER_COMMAND_DEFAULT = true, //!< COMMAND events are filtered at input
    FILTER_ACTIVITY_HI_DEFAULT = true, //!< ACTIVITY HI events are filtered at input
    FILTER_ACTIVITY_LO_DEFAULT = true, //!< ACTIVITY LO  events are filtered at input
    FILTER_DIAGNOSTIC_DEFAULT = false, //!< DIAGNOSTIC events are filtered at input
};


enum {
    TELEM_ID_FILTER_SIZE = 25, //!< Size of telemetry ID filter
};

#endif /* ACTIVELOGGER_ACTIVELOGGERIMPLCFG_HPP_ */

```
## Context / Environment/Expected Behavior
When running a flight software build using this version of fprime I find that the stdout contains logs associated with a severity level that should otherwise be filtered out, e.g.:
```bash
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: Hit Ctrl-C to quit
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: Starting init
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: Failed to initialize esup connection
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: Failed initialization
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: Component failure detected. Terminating now.
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422237) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2100 registered to port 0 slot 0
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422265) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2101 registered to port 0 slot 1
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422278) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2102 registered to port 0 slot 2
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422291) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2200 registered to port 1 slot 3
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422302) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2201 registered to port 1 slot 4
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422314) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2202 registered to port 1 slot 5
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422327) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2300 registered to port 2 slot 6
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422339) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2301 registered to port 2 slot 7
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422351) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2302 registered to port 2 slot 8
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422362) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2400 registered to port 3 slot 9
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422374) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2401 registered to port 3 slot 10
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422389) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2402 registered to port 3 slot 11
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422402) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2500 registered to port 4 slot 12
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422414) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2501 registered to port 4 slot 13
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422426) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2502 registered to port 4 slot 14
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422438) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x500 registered to port 5 slot 15
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422449) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x501 registered to port 5 slot 16
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422462) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x502 registered to port 5 slot 17
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422475) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x503 registered to port 5 slot 18
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422487) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x600 registered to port 6 slot 19
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422499) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x601 registered to port 6 slot 20
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422511) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x602 registered to port 6 slot 21
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422522) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x603 registered to port 6 slot 22
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422534) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x604 registered to port 6 slot 23
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422546) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x605 registered to port 6 slot 24
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422557) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x606 registered to port 6 slot 25
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422569) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x607 registered to port 6 slot 26
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422581) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xb00 registered to port 7 slot 27
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422593) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xb02 registered to port 7 slot 28
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422604) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xb03 registered to port 7 slot 29
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422618) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x700 registered to port 8 slot 30
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422632) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x701 registered to port 8 slot 31
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422644) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x702 registered to port 8 slot 32
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422656) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x800 registered to port 9 slot 33
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422668) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x801 registered to port 9 slot 34
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422680) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x802 registered to port 9 slot 35
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422692) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x803 registered to port 9 slot 36
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422704) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x804 registered to port 9 slot 37
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422715) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x805 registered to port 9 slot 38
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422728) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x806 registered to port 9 slot 39
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422740) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2000 registered to port 10 slot 40
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422753) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2001 registered to port 10 slot 41
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422766) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2002 registered to port 10 slot 42
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422779) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa00 registered to port 11 slot 43
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422791) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xd00 registered to port 12 slot 44
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422804) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x4700 registered to port 13 slot 45
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422816) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x4701 registered to port 13 slot 46
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422828) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x4702 registered to port 13 slot 47
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422842) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x4703 registered to port 13 slot 48
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422854) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2600 registered to port 14 slot 49
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422867) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2601 registered to port 14 slot 50
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422878) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2602 registered to port 14 slot 51
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422890) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2603 registered to port 14 slot 52
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422902) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x260a registered to port 14 slot 53
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422915) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x260b registered to port 14 slot 54
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422926) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x260c registered to port 14 slot 55
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422938) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x260d registered to port 14 slot 56
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422951) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x4b00 registered to port 15 slot 57
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422963) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x4b01 registered to port 15 slot 58
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422976) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf06 registered to port 16 slot 59
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422987) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf07 registered to port 16 slot 60
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,422999) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf08 registered to port 16 slot 61
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423010) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf09 registered to port 16 slot 62
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423023) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf0a registered to port 16 slot 63
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423035) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf0b registered to port 16 slot 64
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423047) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf0c registered to port 16 slot 65
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423059) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf00 registered to port 16 slot 66
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423070) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf01 registered to port 16 slot 67
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423083) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf02 registered to port 16 slot 68
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423096) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf03 registered to port 16 slot 69
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423108) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf04 registered to port 16 slot 70
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1280) (2:1722032802,423119) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xf05 registered to port 16 slot 71
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (3334) (2:1722032802,423144) WARNING_HI: (prmDb) PrmFileReadError : Parameter file read failed in stage OPEN (0) with record 0 and error 1
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (3328) (2:1722032802,423175) WARNING_LO: (prmDb) PrmIdNotFound : Parameter ID 0x4700 not found
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (3328) (2:1722032802,423190) WARNING_LO: (prmDb) PrmIdNotFound : Parameter ID 0x4701 not found
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (3328) (2:1722032802,423204) WARNING_LO: (prmDb) PrmIdNotFound : Parameter ID 0x2600 not found
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (3328) (2:1722032802,423217) WARNING_LO: (prmDb) PrmIdNotFound : Parameter ID 0x2601 not found
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (3328) (2:1722032802,423232) WARNING_LO: (prmDb) PrmIdNotFound : Parameter ID 0xf00 not found
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [WARNING] High task priority of 100 being clamped to 99
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [ERROR] Failed to send framed data: 2
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [ERROR] Failed to send framed data: 2
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [ERROR] Failed to send framed data: 2
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [ERROR] Failed to send framed data: 2
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [ERROR] Failed to send framed data: 2
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [ERROR] Failed to send framed data: 2
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: [WARNING] Failed to open port with status -4 and errno 111
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (512) (2:1722032802,424554) DIAGNOSTIC: (rateGroup1Comp) RateGroupStarted : Rate group started.
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (768) (2:1722032802,424612) DIAGNOSTIC: (rateGroup2Comp) RateGroupStarted : Rate group started.
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: EVENT: (1024) (2:1722032802,424649) DIAGNOSTIC: (rateGroup3Comp) RateGroupStarted : Rate group started.
Jul 26 18:26:42 rdx-PX1-C441 FlightComputer[39862]: Starting downlink UDP connection with ip 10.10.0.246 and port 50000nSetup to send udp to 10.10.0.246:50000
Jul 26 18:26:44 rdx-PX1-C441 FlightComputer[39862]: Waiting for threads...

```

I'm using an instances.fpp and topology.fpp that just uses the ref example as a guide so for example I have this:
```cpp
  instance textLogger: Svc.PassiveTextLogger base id 0x4900
  instance eventLogger: Svc.ActiveLogger base id 0x0B00 \
    queue size Default.queueSize \
    stack size Default.stackSize \
    priority 57
```

and this:
```cpp
    # ----------------------------------------------------------------------
    # Pattern graph specifiers
    # ----------------------------------------------------------------------

    command connections instance cmdDisp

    event connections instance eventLogger

    param connections instance prmDb

    telemetry connections instance tlmSplitter

    text event connections instance textLogger
```

What am I missing here? It seems like the filter applied to the ActiveLogger should prevent these logs from appearing in stdout but once I dug into things it became unclear about how to enforce this.

Let me know if there's something I can config to fix this or if this is fixed on a newer version of F'",non-bug,https://github.com/nasa/fprime/issues/2817
Add Spacecraft Id to Command Sequences,"| | |
|:---|:---|
|**_F´ Version_**| v3.3 |
|**_Affected Component_**| CmdSequencer, seqgen, dictionary |
---

## Feature Description

Add the concept of an integer (U32/U64) spacecraft id to F', which would then be included in the generated dictionary and as a C++ constant.

This spacecraft id would then be added to the header of compiled command sequences.
The command sequencer would reject command sequences that with a spacecraft id mismatching the deployment.

## Rationale

Executing command sequences compiled with incorrect dictionary can cause unintended spacecraft behavior. Since the F' sequence format is standardized, there's nothing preventing executing a sequence intended for one fprime deployment on another deployment.

A U64/U32 spacecraft id a large enough identifier space to hopefully protect against unintentional execution of sequences intended for different deployments.

The spacecraft id can also be updated as desired when making backwards incompatible command changes, preventing execution of sequences compiled for an old FSW version.

Because this identifier will go in binary command sequences a string identifier unfortunately seems too large, so I'm suggesting making spacecraft id an integer. ",non-bug,https://github.com/nasa/fprime/issues/2190
GDS Log Scrolling,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add in GDS log pane scrolling as it will make life better when reviewing logs.",non-bug,https://github.com/nasa/fprime/issues/2379
Refactor Os::Queue into CMake Selection,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

- [ ] Refactor Os::Queue into the Interface, Os::Queue, and Implementation classes (following pattern of Os::File)
- [ ] Implement Posix implementation
- [ ] Implement Stub implementation
- [ ] Clean up multiple queue implementations that already exist
- [ ] Implement Test stub implementation
- [ ] Build common rules-based tests
- [ ] Build specific posix tests
- [ ] Build stub interface tests
- [ ] Setup default posix implementation for Posix platforms
- [ ] Document
",non-bug,https://github.com/nasa/fprime/issues/2725
Break Apart Deframer,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The Deframer is performing several peices:

1. It reassembles frames
2. It calls custom deframing via a subclass
3. It routes data to F´ components.

On modern projects, we have seen the following needs that the deframer cannot support. 

1. Custom deframing needs to use custom port calls (e.g. call out to a helper component, database component, etc)
2. Routing to F´ components often needs to be customized
3. Reassembly is optional (e.g. a packet radio is already produces complete frames)

Thus we will break the deframer into 3 F´ items:

1. An optional accumulator that takes in byte streams and outputs complete frames in Fw::Buffer: https://github.com/nasa/fprime/issues/2764
2. A deframer interface that allows custom deframing to a standard component ""drop in"":
3. A router implementation for basic F´ constructs:



### EPIC Subtasks
- [ ] https://github.com/nasa/fprime/issues/2764
- [ ] https://github.com/nasa/fprime/issues/2765",non-bug,https://github.com/nasa/fprime/issues/2763
"The only command boolean argument value GDS interprets as false is False (not 0, false, etc)","| | |
|:---|:---|
|**devel as of 2021-01**| |
|**GDS**|   |
---
## Problem Description


https://groups.google.com/g/fprime-community/c/wdzHHbBXKfU

When I make an F' command with a bool arg, the only value that GDS seems to interpret as false is:

False

(no quotes, capitalized)

0, false, ""false"", 'false' all get interpreted as true. 

![Screenshot from 2021-01-27 12-55-20](https://user-images.githubusercontent.com/2354310/106071183-bd3ce400-60ba-11eb-959c-e7da6daec360.png)

## How to Reproduce

1. Create a command with an arg of type ""bool"", add it to a deployment.
2. Try sending the command to the deployment with many of the values one might reasonably assume GDS might interpret as false (0, false, ""false"", 'false')
3. Look at the GDS command history and see that the arguments got interpreted as true.

## Expected Behavior

GDS would ideally give a true/false dropdown for bool arguments, or interpret entries of 0, false, etc as false.

Thanks!",bug,https://github.com/nasa/fprime/issues/343
"Build error: ""Input object has no document: lxml.etree._XSLTResultTree""","| | |
|:---|:---|
|**_F´ Version_**|  master |
|**_Affected Component_**|   |
---
## Problem Description

I'm following the installation instructions, but when I try the build step (`fprime-util build --jobs 10`), I get the following error. 

```
[ 53%] Generating AssertFatalAdapterComponentAc.hpp, AssertFatalAdapterComponentAc.cpp
Input object has no document: lxml.etree._XSLTResultTree
Traceback (most recent call last):
  File ""/Users/cmauceri/My Drive/Workspace/FPrime/fprime/Autocoders/Python/bin/codegen.py"", line 1334, in <module>
    main()
  File ""/Users/cmauceri/My Drive/Workspace/FPrime/fprime/Autocoders/Python/bin/codegen.py"", line 1259, in main
    the_parsed_component_xml = XmlComponentParser.XmlComponentParser(
  File ""/Users/cmauceri/My Drive/Workspace/FPrime/fprime/Autocoders/Python/src/fprime_ac/parsers/XmlComponentParser.py"", line 113, in __init__
    self.validate_xml(xml_file, element_tree, ""schematron"", ""active_comp"")
  File ""/Users/cmauceri/My Drive/Workspace/FPrime/fprime/Autocoders/Python/src/fprime_ac/parsers/XmlComponentParser.py"", line 1218, in validate_xml
    validator_compiled = isoschematron.Schematron(validator_parsed)
  File ""/Users/cmauceri/My Drive/Workspace/FPrime/fprime-venv/lib/python3.9/site-packages/lxml/isoschematron/__init__.py"", line 275, in __init__
    schematron = self._expand(schematron, **expand_params)
  File ""src/lxml/xslt.pxi"", line 515, in lxml.etree.XSLT.__call__
  File ""src/lxml/apihelpers.pxi"", line 43, in lxml.etree._documentOrRaise
ValueError: Input object has no document: lxml.etree._XSLTResultTree
make[3]: *** [F-Prime/Svc/AssertFatalAdapter/AssertFatalAdapterComponentAc.hpp] Error 255
make[2]: *** [F-Prime/Svc/AssertFatalAdapter/CMakeFiles/Svc_AssertFatalAdapter.dir/all] Error 2
make[1]: *** [CMakeFiles/Ref.dir/rule] Error 2
make: *** [Ref] Error 2
[ERROR] CMake erred with return code 2
```
## Details

I'm on a Mac with an M1 chip running Monteray. 

I used `fprime-util build --jobs 10` instead of `fprime-util build --jobs ""$(nproc || printf '%s\n' 1)""` because nproc is not available on mac. 

## How to Reproduce

1. Follow [Installation Instructions](https://github.com/nasa/fprime/blob/master/docs/INSTALL.md) 
2. Error occurs when I run `fprime-util build --jobs ""$(nproc || printf '%s\n' 1)""`

## Expected Behavior

I expect the build to execute successfully. 
",bug,https://github.com/nasa/fprime/issues/1738
_check Targets Miss-Named,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`fprime-util check` fails on modules because the `_check` target is miss-named. ",bug,https://github.com/nasa/fprime/issues/2424
Side-Effect Free Assetion Code,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

FW_NO_ASSERT reduces the FW_ASSERT macro to """", that is, it is compiled-out.  However, this breaks assertions with side-effect inducing code (see example below).

We need to fix several things:
1. Clean up the fprime framework code to not depend on side-effects in FW_ASSERT calls
2. Make the default FW_NO_ASSERT option maintain side-effects
3. Add an option for power-users to return FW_NO_ASSERT to the completely removed case.
4. Update style guidelines to call this coding flaw out

Example offending code:

https://github.com/nasa/fprime/blob/6641547e7ea8ec7593f7055cd2d5ff1e4acea990/Svc/GenericHub/GenericHubComponentImpl.cpp#L169


",bug,https://github.com/nasa/fprime/issues/2447
Invalid CMake warning message,"| | |
|:---|:---|
|**_F´ Version_**|[v3.4.3](https://github.com/nasa/fprime/tree/v3.4.3)|
|**_Affected Component_**| `fprime-util generate` |
---
## Problem Description

When I create my own cmake toolchain and specify `set(CMAKE_SYSTEM_NAME Linux)` at the top and I run `fprime-util generate <custom_arch>` , things work correctly, but I get this warning:

```
.
.
.
-- [fpp-tools] fpp-locate-defs found at: /workspace/MyProject/fprime-venv/bin/fpp-locate-defs
-- [FPRIME] Module locations: /workspace/MyProject/fprime;/workspace/MyProject
CMake Warning at fprime/cmake/platform/platform.cmake:25 (message):
  Toolchain '<custom_arch>' should set CMAKE_SYSTEM_NAME to 'Generic' and set
  FPRIME_PLATFORM
Call Stack (most recent call first):
-- [FPRIME] Configuration module: /workspace/MyProject/fprime/config
  fprime/cmake/FPrime.cmake:29 (include)
-- [FPRIME] Installation directory: /workspace/MyProject/build-artifacts
  CMakeLists.txt:13 (include)
-- Target build toolchain/platform: <custom_arch>/Linux


-- Including /workspace/MyProject/fprime/cmake/platform/Linux.cmake
-- Requiring thread library
-- Looking for pthread.h
-- Looking for pthread.h - found
.
.
.
```


However, when I do what the warning asks me to do (i.e. specify CMAKE_SYSTEM_NAME  as Generic and set FPRIME_PLATFORM to Linux), it throws an error doesn't generate the cache.

When running `fprime-util generate <custom_arch>`
```
# In ./cmake/toolchain/<custom_arch>.cmake file

.
.
.
-- Adding Library: Drv_ByteStreamDriverModel
-- Adding Library: Drv_LinuxUartDriver
-- Adding Library: Drv_StreamCrossover
-- Cannot use IP sockets with platform Generic. Skipping.
-- Adding Library: CFDP_Checksum
-- Adding Library: Utils
-- Adding Library: Utils_Hash
-- Adding Library: Utils_Types
-- [LIBRARY] Adding modules from F´ framework - DONE
-- Adding Library: Components_HelloWorld
-- Adding Library: HelloWorldDeployment_Top
-- Adding Deployment: HelloWorldDeployment
-- Configuring done
CMake Error at fprime/cmake/target/build.cmake:83 (add_dependencies):
  The dependency target ""Drv_TcpClient"" of target ""HelloWorldDeployment_Top""
  does not exist.
Call Stack (most recent call first):
  fprime/cmake/target/build.cmake:141 (build_setup_build_module)
  fprime/cmake/target/target.cmake:116 (build_add_module_target)
  fprime/cmake/target/target.cmake:116 (cmake_language)
  fprime/cmake/target/target.cmake:155 (setup_single_target)
  fprime/cmake/module.cmake:48 (setup_module_targets)
  fprime/cmake/module.cmake:88 (generate_base_module_properties)
  fprime/cmake/API.cmake:228 (generate_library)
  HelloWorldDeployment/Top/CMakeLists.txt:22 (register_fprime_module)


CMake Error at fprime/cmake/target/build.cmake:83 (add_dependencies):
  The dependency target ""Drv_Udp"" of target ""HelloWorldDeployment_Top"" does
  not exist.
Call Stack (most recent call first):
  fprime/cmake/target/build.cmake:141 (build_setup_build_module)
  fprime/cmake/target/target.cmake:116 (build_add_module_target)
  fprime/cmake/target/target.cmake:116 (cmake_language)
  fprime/cmake/target/target.cmake:155 (setup_single_target)
  fprime/cmake/module.cmake:48 (setup_module_targets)
  fprime/cmake/module.cmake:88 (generate_base_module_properties)
  fprime/cmake/API.cmake:228 (generate_library)
  HelloWorldDeployment/Top/CMakeLists.txt:22 (register_fprime_module)


CMake Error at fprime/cmake/target/build.cmake:83 (add_dependencies):
  The dependency target ""Svc_PosixTime"" of target ""HelloWorldDeployment_Top""
  does not exist.
Call Stack (most recent call first):
  fprime/cmake/target/build.cmake:141 (build_setup_build_module)
  fprime/cmake/target/target.cmake:116 (build_add_module_target)
-- Generating done
  fprime/cmake/target/target.cmake:116 (cmake_language)
  fprime/cmake/target/target.cmake:155 (setup_single_target)
  fprime/cmake/module.cmake:48 (setup_module_targets)
  fprime/cmake/module.cmake:88 (generate_base_module_properties)
  fprime/cmake/API.cmake:228 (generate_library)
  HelloWorldDeployment/Top/CMakeLists.txt:22 (register_fprime_module)


CMake Generate step failed.  Build files cannot be regenerated correctly.
[ERROR] CMake erred with return code 1. Partial build cache remains. Run purge to clean-up.
```

Should I not be using `Linux` as the `FPRIME_PLATFORM`?

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
# fprime-util version-check
Operating System: Linux
CPU Architecture: riscv64
Platform: Linux-6.2.2-riscv64-with-glibc2.37
Python version: 3.11.8
CMake version: 3.28.3
Pip version: 24.0
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

## How to Reproduce

1. Define a ./cmake/toolchain/<custom_arch>.cmake file and place the following at the top:
```
set(CMAKE_SYSTEM_NAME Generic)
set(FPRIME_PLATFORM Linux)
```
2. `fprime-util generate <custom_arch>`

## Expected Behavior

`fprime-util generate <custom_arch>` should complete successfully. 
",bug,https://github.com/nasa/fprime/issues/2636
rpiDemo.RD_SetLed command not working,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**| RPI demo |
---
## Problem Description

`rpiDemo.RD_SetLed` command mnemonic with value `BLINKING` or `OFF` yields `[ERROR] Deframing checksum validation failed` on Raspberry Pi 3B v1.2. LED on GPIO21 continuously blinks, regardless of command sent to raspberry pi.

```
pi@raspberrypi:~ $ ./RPI -a 192.168.0.76 -p 50000
Hit Ctrl-C to quit
EVENT: (500) (2:1641339260,548779) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f4 registered to port 0 slot 0
EVENT: (500) (2:1641339260,548864) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f5 registered to port 0 slot 1
EVENT: (500) (2:1641339260,548903) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f6 registered to port 0 slot 2
EVENT: (500) (2:1641339260,548940) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f7 registered to port 0 slot 3
EVENT: (500) (2:1641339260,548977) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2bc registered to port 1 slot 4
EVENT: (500) (2:1641339260,549014) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2bd registered to port 1 slot 5
EVENT: (500) (2:1641339260,549050) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2be registered to port 1 slot 6
EVENT: (500) (2:1641339260,549086) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2bf registered to port 1 slot 7
EVENT: (500) (2:1641339260,549122) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c0 registered to port 1 slot 8
EVENT: (500) (2:1641339260,549158) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c1 registered to port 1 slot 9
EVENT: (500) (2:1641339260,549194) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c2 registered to port 1 slot 10
EVENT: (500) (2:1641339260,549230) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c3 registered to port 1 slot 11
EVENT: (500) (2:1641339260,549266) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x578 registered to port 2 slot 12
EVENT: (500) (2:1641339260,549303) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x57a registered to port 2 slot 13
EVENT: (500) (2:1641339260,549339) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x57b registered to port 2 slot 14
EVENT: (500) (2:1641339260,549375) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x708 registered to port 3 slot 15
EVENT: (500) (2:1641339260,549411) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x709 registered to port 3 slot 16
EVENT: (500) (2:1641339260,549447) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x70a registered to port 3 slot 17
EVENT: (500) (2:1641339260,549483) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x44c registered to port 4 slot 18
EVENT: (500) (2:1641339260,549518) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x44d registered to port 4 slot 19
EVENT: (500) (2:1641339260,549554) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x44e registered to port 4 slot 20
EVENT: (500) (2:1641339260,549591) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x258 registered to port 5 slot 21
EVENT: (500) (2:1641339260,549627) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8c registered to port 6 slot 22
EVENT: (500) (2:1641339260,549663) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8d registered to port 6 slot 23
EVENT: (500) (2:1641339260,549699) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8e registered to port 6 slot 24
EVENT: (500) (2:1641339260,549735) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8f registered to port 6 slot 25
EVENT: (500) (2:1641339260,549771) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa90 registered to port 6 slot 26
EVENT: (500) (2:1641339260,549807) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa91 registered to port 6 slot 27
EVENT: (500) (2:1641339260,549843) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa96 registered to port 6 slot 28
EVENT: (500) (2:1641339260,549878) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa97 registered to port 6 slot 29
EVENT: (606) (2:1641339260,549933) WARNING_HI: (prmDb) PrmFileReadError : Parameter file read failed in stage OPEN with record 0 and error 1
EVENT: (600) (2:1641339260,549993) WARNING_LO: (prmDb) PrmIdNotFound : Parameter ID 0xa8c not found
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_chanTlm. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_cmdDisp. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_cmdSeq. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
[WARNING] High task priority of 16384 being clamped to 99
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_ReceiveTask. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_eventLogger. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
[ERROR] Failed to send framed data: 1
[ERROR] Failed to send framed data: 1
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_fileDownlink. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_fileUplink. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_prmDb. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_rateGroup10HzComp. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
EVENT: (200) (2:1641339260,554821) DIAGNOSTIC: (rateGroup10HzComp) RateGroupStarted : Rate group started.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_rateGroup1HzComp. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
EVENT: (300) (2:1641339260,555263) DIAGNOSTIC: (rateGroup1HzComp) RateGroupStarted : Rate group started.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_rpiDemo. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions 

[WARNING] Task priority set and permissions unavailable. Discarding priority.
[ERROR] Failed to send framed data: 1
EVENT: (2707) (2:1641339260,555827) ACTIVITY_HI: (rpiDemo) RD_LedBlinkState : LED blink state set to BLINKING
Connected to 192.168.0.76:50000 as a tcp client
[ERROR] Deframing checksum validation failed
```
prepended with `sudo`:
```
pi@raspberrypi:~ $ sudo ./RPI -a 192.168.0.76 -p 50000
Hit Ctrl-C to quit
EVENT: (500) (2:1641339012,556248) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f4 registered to port 0 slot 0
EVENT: (500) (2:1641339012,556335) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f5 registered to port 0 slot 1
EVENT: (500) (2:1641339012,556378) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f6 registered to port 0 slot 2
EVENT: (500) (2:1641339012,556418) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x1f7 registered to port 0 slot 3
EVENT: (500) (2:1641339012,556460) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2bc registered to port 1 slot 4
EVENT: (500) (2:1641339012,556500) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2bd registered to port 1 slot 5
EVENT: (500) (2:1641339012,556539) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2be registered to port 1 slot 6
EVENT: (500) (2:1641339012,556578) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2bf registered to port 1 slot 7
EVENT: (500) (2:1641339012,556620) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c0 registered to port 1 slot 8
EVENT: (500) (2:1641339012,556660) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c1 registered to port 1 slot 9
EVENT: (500) (2:1641339012,556699) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c2 registered to port 1 slot 10
EVENT: (500) (2:1641339012,556737) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x2c3 registered to port 1 slot 11
EVENT: (500) (2:1641339012,556774) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x578 registered to port 2 slot 12
EVENT: (500) (2:1641339012,556810) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x57a registered to port 2 slot 13
EVENT: (500) (2:1641339012,556847) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x57b registered to port 2 slot 14
EVENT: (500) (2:1641339012,556939) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x708 registered to port 3 slot 15
EVENT: (500) (2:1641339012,556997) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x709 registered to port 3 slot 16
EVENT: (500) (2:1641339012,557038) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x70a registered to port 3 slot 17
EVENT: (500) (2:1641339012,557079) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x44c registered to port 4 slot 18
EVENT: (500) (2:1641339012,557119) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x44d registered to port 4 slot 19
EVENT: (500) (2:1641339012,557159) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x44e registered to port 4 slot 20
EVENT: (500) (2:1641339012,557201) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0x258 registered to port 5 slot 21
EVENT: (500) (2:1641339012,557242) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8c registered to port 6 slot 22
EVENT: (500) (2:1641339012,557281) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8d registered to port 6 slot 23
EVENT: (500) (2:1641339012,557319) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8e registered to port 6 slot 24
EVENT: (500) (2:1641339012,557359) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa8f registered to port 6 slot 25
EVENT: (500) (2:1641339012,557398) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa90 registered to port 6 slot 26
EVENT: (500) (2:1641339012,557438) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa91 registered to port 6 slot 27
EVENT: (500) (2:1641339012,557477) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa96 registered to port 6 slot 28
EVENT: (500) (2:1641339012,557517) DIAGNOSTIC: (cmdDisp) OpCodeRegistered : Opcode 0xa97 registered to port 6 slot 29
EVENT: (606) (2:1641339012,557586) WARNING_HI: (prmDb) PrmFileReadError : Parameter file read failed in stage OPEN with record 0 and error 1
EVENT: (600) (2:1641339012,557654) WARNING_LO: (prmDb) PrmIdNotFound : Parameter ID 0xa8c not found
[WARNING] High task priority of 16384 being clamped to 99
[ERROR] Failed to send framed data: 1
[ERROR] Failed to send framed data: 1
EVENT: (200) (2:1641339012,559116) DIAGNOSTIC: (rateGroup10HzComp) RateGroupStarted : Rate group started.
EVENT: (300) (2:1641339012,559233) DIAGNOSTIC: (rateGroup1HzComp) RateGroupStarted : Rate group started.
EVENT: (2707) (2:1641339012,559359) ACTIVITY_HI: (rpiDemo) RD_LedBlinkState : LED blink state set to BLINKING
[ERROR] Failed to send framed data: 1
Connected to 192.168.0.76:50000 as a tcp client
[ERROR] Deframing checksum validation failed
```

## How to Reproduce

1. Flash [Raspberry Pi OS (Buster) 2021-12-02 Release](https://downloads.raspberrypi.org/raspios_oldstable_armhf/images/raspios_oldstable_armhf-2021-12-02/2021-12-02-raspios-buster-armhf.zip) using [dd](https://www.raspberrypi.com/documentation/computers/getting-started.html#installing-images-on-linux) to sd card.
2. Boot up and configure raspberry pi to connect to home WiFi network.
3. Enable SPI and serial interface via raspberry configuration menu, as per [board preparations](https://github.com/nasa/fprime/tree/devel/RPI#board-preparation). Disable serial console on raspberry pi, as per [disabling the linux serial console](https://www.raspberrypi.com/documentation/computers/configuration.html#disabling-the-linux-serial-console).
4. Connect LED to GPIO21.
3. Build & deploy `RPI` binary to raspberry pi, as per [build the software](https://github.com/nasa/fprime/tree/devel/RPI#build-the-software).
4. Run `fprime-gds -n --dictionary ./build-artifacts/raspberrypi/dict/RPITopologyAppDictionary.xml` on Ubuntu desktop.
5. Run `./RPI -a <ground computer's IP> -p 50000` on raspberry pi connected to same network as Ubuntu desktop.
6. Wait for tcp client to connect to server.
6. Send command `rpiDemo.RD_SetLed` with value `""BLINKING""` via ground station running on `localhost:5000`.

## Expected Behavior

Sending command mnemonic, `rpiDemo.RD_SetLed`, with value `OFF`, should turn off LED on GPIO21
",bug,https://github.com/nasa/fprime/issues/1203
Attempting to Downlink Zero-Length File Results in Poor Warning,"| | |
|:---|:---|
|**_F´ Version_**| v3.4.3 |
|**_Affected Component_**| FileDownlink |
---
## Problem Description

Attempting to downlink a zero length file using FileDownlink results in the following warning

fileDownlink.DownlinkPartialFail | WARNING_HI | Error occurred during partial downlink of file badfile to file badfile. Offset 0 greater than or equal to source filesize 0.
-- | -- | --

## How to Reproduce

Send `fileDownlink.SendFile, ""badfile"", ""badfile""`, where badfile is zero length

## Expected Behavior

Send a specific warning EVR instead of telling a user they had an incorrect file partial command.

I would propose

fileDownlink.DownlinkEmptyFile | WARNING_HI | Cannot downlink empty file %s. 
-- | -- | --
",bug,https://github.com/nasa/fprime/issues/2756
Integrate FPP-Layout Tools into FPP PIP Package,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

",non-bug,https://github.com/nasa/fprime/issues/2084
Enum type in nested namespace generates malformed include guard and C++17 nested namespace definition,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**| Autocoder |
---
## Problem Description

Nesting an enum type in FPP in more than one module produces a malformed include guard in the autocode output. It also produces a nested namespace definition which is valid only in the C++17 standard and later.

## How to Reproduce

```
module Cadre {
module Fprime {
  enum MotorNames : I32 {
    FRONT_LEFT = 0,
    FRONT_RIGHT = 1,
    BACK_LEFT = 2,
    BACK_RIGHT = 3
  } default FRONT_LEFT
}
}
```

Produces...

```cpp
...
#ifndef Cadre::Fprime_MotorNames_HPP
#define Cadre::Fprime_MotorNames_HPP

#include ""Fw/Types/String.hpp""
#include ""Fw/Types/BasicTypes.hpp""
#include ""Fw/Types/Serializable.hpp""

namespace Cadre::Fprime {
  class MotorNames : public Fw::Serializable
  {
...
```

## Expected Behavior

```cpp
...
#ifndef CADRE_FPRIME_MOTORNAMES_HPP_
#define CADRE_FPRIME_MOTORNAMES_HPP_

#include ""Fw/Types/String.hpp""
#include ""Fw/Types/BasicTypes.hpp""
#include ""Fw/Types/Serializable.hpp""

namespace Cadre {
namespace Fprime {
  class MotorNames : public Fw::Serializable
  {
...
```",bug,https://github.com/nasa/fprime/issues/1217
identical condition,"[/Drv/SocketIpDriver/SocketHelper.cpp line 231

Code:
  // Error is EINTR, just try again
            if (sent == -1 && errno == EINTR) { // <-- identical
                continue;
            }
            // Error bad file descriptor is a close
            else if (sent == -1 && errno == EBADF) {
                Fw::Logger::logMsg(""[ERROR] Server disconnected\n"");
                this->close();
                this->m_socketOutFd = -1;
                break;
            }
            // Error returned, and it wasn't an interrupt
            else if (sent == -1 && errno == EINTR)  {   // <-- identical
                Fw::Logger::logMsg(""[ERROR] IP send failed ERRNO: %d UDP: %d\n"", errno, m_sendUdp);
                break;
            }
",bug,https://github.com/nasa/fprime/issues/497
Slim Down CI,"CI runs many superfluous things like pylama.  We should slim it down, as the primary checks are run by Semmel and a nightly run could do more in-depth analysis.",non-bug,https://github.com/nasa/fprime/issues/252
`Svc/FileUplink` - Update file uplink file path handling,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**| `Svc/FileUplink` |
---
## Feature Description

Change the file path handling for `Svc/FileUplink` to make it relative to a supplied path.

## Rationale

The current implementation is a security/safety risk, since it uses the pathname as is, including root `/` paths. This can make the vehicle vulnerable to invalid/nefarious pathnames. Change the implementation to:

1) Take a base pathname as part of a `configure()` function.
2) Normalize the file paths for uplinked files to avoid `../` tricks.
3) Write files to path relative to provided base, creating directories as needed.
",non-bug,https://github.com/nasa/fprime/issues/2601
OSAL Refactor: Delete Watchdog,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The watchdog concept in the OSAL layer is not generic.  Remove it until more use cases are understood.",non-bug,https://github.com/nasa/fprime/issues/2692
Return FILE_EXISTS error when File::open fails due to include_excl=true,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

As described PR #666 the introduced change (defaulting `include_excl=true`) could silently break components using file `OPEN_CREATE` mode.
This happened in one of the custom ComLoggers with resetOnMax option. The open file was breaking with error `OTHER_ERROR` which was not clear. 

To reduce the ambiguity of the file open returned error on file exist we should add error `EEXIST   17   /* File exists */` 
to the following:

https://github.com/nasa/fprime/blob/0d717b0ec3c4c9c5a70de7d5f5bcfcdff48c35b3/Os/Linux/File.cpp#L87-L105

```c++
...
case EEXIST:
    stat = FILE_EXISTS;
    break; 
...
```
## Rationale

Returning general error `OTHER_ERROR` might be ambiguous when a file exist. Adding a more specific error type such as `FILE_EXISTS` might help reduce the ambiguity of the file open issue.
",non-bug,https://github.com/nasa/fprime/issues/698
F' documentation lists multiple latest versions,"## Problem Description

The [F' website](https://nasa.github.io/fprime/) lists several releases.

![image](https://user-images.githubusercontent.com/53410876/210735518-cada2a5d-ad68-42e3-88af-b042c54d2694.png)

However, all versions after v1.5 note that they are the latest F' framework.

![image](https://user-images.githubusercontent.com/53410876/210735612-81593cbe-404f-4abe-881c-040351d39e46.png)

I've resolved this with #1833 to update the documentation for these versions aside from 3.1.0 to include a link to documentation home, similar to v1.5.

![image](https://user-images.githubusercontent.com/53410876/210736614-5fd63543-25c4-4e3d-9c0b-6aa9c4dd0e13.png)",bug,https://github.com/nasa/fprime/issues/1835
"`fprime-util format` requires build cache, but doesn't use it","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

When running `fprime-util format` without a valid build cache, the system errors....but the format command does not require a build cache.
",bug,https://github.com/nasa/fprime/issues/1890
Svc::ComQueue fails to compile,"| | |
|:---|:---|
|**_F´ Version_**|547197194acff1f99d86e6e441fa9b5b5bd2d60b |
|**_Affected Component_**|  `Svc::ComQueue`  |
---
## Problem Description

When compiling for bare metal, I get this error

```
~/myproject/fprime/Svc/ComQueue/ComQueue.cpp: In member function 'void Svc::ComQueue::configure(Svc::ComQueue::QueueConfigurationTable, NATIVE_UINT_TYPE, Fw::MemAllocator&)':
~/myproject/fprime/Svc/ComQueue/ComQueue.cpp:94:76: error: cannot bind non-const lvalue reference of type 'NATIVE_UINT_TYPE&' {aka 'short unsigned int&'} to an rvalue of type 'NATIVE_UINT_TYPE' {aka 'short unsigned int'}
   94 |     this->m_allocation = this->m_allocator->allocate(this->m_allocationId, totalAllocation, recoverable);
      |                                                                            ^~~~~~~~~~~~~~~
In file included from ~/myproject/fprime/Svc/ComQueue/ComQueue.hpp:14,
                 from ~/myproject/fprime/Svc/ComQueue/ComQueue.cpp:8:
~/myproject/fprime/Fw/Types/MemAllocator.hpp:57:39: note:   initializing argument 2 of 'virtual void* Fw::MemAllocator::allocate(NATIVE_UINT_TYPE, NATIVE_UINT_TYPE&, bool&)'
   57 |                     NATIVE_UINT_TYPE &size,
      |                     ~~~~~~~~~~~~~~~~~~^~~~
make[2]: *** [F-Prime/Svc/ComQueue/CMakeFiles/Svc_ComQueue.dir/build.make:132: F-Prime/Svc/ComQueue/CMakeFiles/Svc_ComQueue.dir/ComQueue.cpp.obj] Error 1
```


## How to Reproduce

1. Compile with a bare metal compiler
2.
3.

## Expected Behavior

I can compile for bare metal.
",bug,https://github.com/nasa/fprime/issues/1791
Add Condition Variables to OS Layer,"| | |
|:---|:---|
|**_F´ Version_**| N/A |
|**_Affected Component_**| Os |
---
## Feature Description

Add a condition variable class to the Os layer, analogus to the current Os::Mutex class.

## Rationale

Condition variables are a necessary for certain types of multi-threaded workloads and do not have a generic implementation in the F Prime Os layer
",non-bug,https://github.com/nasa/fprime/issues/2503
Video Tutorials,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Videos!!!!",non-bug,https://github.com/nasa/fprime/issues/2202
Clean Up Os CMake,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Clean up the OS CMake setup for micro-fs (separate libraries).",non-bug,https://github.com/nasa/fprime/issues/2012
Asserting Application Does Not Produce Output,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

When running a program that asserts at start-up the output does not get captured by CI.",bug,https://github.com/nasa/fprime/issues/1864
A stack-buffer-overflow error in FileDownlink.cpp line 248,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 |
|**_Affected Component_**|  Svc/FileDownlink |
---
## Problem Description

A stack-buffer-overflow error in [FileDownlink.cpp line 248](https://github.com/nasa/fprime/blob/ada6e424b813e6434284bbde9f785656a61c8539/Svc/FileDownlink/FileDownlink.cpp#L248)

```
zyh@virtual:~/fprime$ ./build-fprime-automatic-native-ut/bin/Linux/Svc_FileDownlink_ut_exe 
[==========] Running 7 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 7 tests from FileDownlink
[ RUN      ] FileDownlink.Downlink
=================================================================
==16373==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcbb2f32d0 at pc 0x0000004ea412 bp 0x7ffcbb2f2c30 sp 0x7ffcbb2f23e0
READ of size 101 at 0x7ffcbb2f32d0 thread T0
    #0 0x4ea411 in __asan_memcpy (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Svc_FileDownlink_ut_exe+0x4ea411)
    #1 0x62b297 in Svc::FileDownlink::SendFile_cmdHandler(unsigned int, unsigned int, Fw::CmdStringArg const&, Fw::CmdStringArg const&) /home/zyh/fprime/Svc/FileDownlink/FileDownlink.cpp:248:5
    #2 0x677a82 in Svc::FileDownlinkComponentBase::doDispatch() /home/zyh/fprime/build-fprime-automatic-native-ut/F-Prime/Svc/FileDownlink/FileDownlinkComponentAc.cpp:2811:15
    #3 0x52c79b in Svc::Tester::sendFile(char const*, char const*, Fw::CommandResponse) /home/zyh/fprime/Svc/FileDownlink/test/ut/Tester.cpp:529:21
    #4 0x52a126 in Svc::Tester::downlink() /home/zyh/fprime/Svc/FileDownlink/test/ut/Tester.cpp:68:11
    #5 0x56f302 in FileDownlink_Downlink_Test::TestBody() /home/zyh/fprime/Svc/FileDownlink/test/ut/Main.cpp:9:10
    #6 0x833db0 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2433:10
    #7 0x7fc5d9 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2469:14
    #8 0x766039 in testing::Test::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2508:5
    #9 0x767fc4 in testing::TestInfo::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2684:11
    #10 0x768df4 in testing::TestSuite::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2816:28
    #11 0x787a0a in testing::internal::UnitTestImpl::RunAllTests() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:5338:44
    #12 0x83bca0 in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2433:10
    #13 0x8025b9 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:2469:14
    #14 0x787026 in testing::UnitTest::Run() /home/zyh/fprime/gtest/googletest-src/googletest/src/gtest.cc:4925:10
    #15 0x57627e in RUN_ALL_TESTS() /home/zyh/fprime/gtest/googletest-src/googletest/include/gtest/gtest.h:2473:46
    #16 0x571eaf in main /home/zyh/fprime/Svc/FileDownlink/test/ut/Main.cpp:44:10
    #17 0x7ff0c0f95bf6 in __libc_start_main /build/glibc-S9d2JN/glibc-2.27/csu/../csu/libc-start.c:310
    #18 0x42b699 in _start (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Svc_FileDownlink_ut_exe+0x42b699)

Address 0x7ffcbb2f32d0 is located in stack of thread T0 at offset 720 in frame
    #0 0x6743ef in Svc::FileDownlinkComponentBase::doDispatch() /home/zyh/fprime/build-fprime-automatic-native-ut/F-Prime/Svc/FileDownlink/FileDownlinkComponentAc.cpp:2642

  This frame has 22 object(s):
    [32, 192) 'msg' (line 2643)
    [256, 260) 'priority' (line 2644)
    [272, 276) 'desMsg' (line 2655)
    [288, 292) 'portNum' (line 2668)
    [304, 308) 'context' (line 2681)
    [320, 376) 'fwBuffer' (line 2702)
    [416, 420) 'key' (line 2723)
    [432, 436) 'opCode' (line 2743)
    [448, 452) 'cmdSeq' (line 2751)
    [464, 600) 'args' (line 2759)
    [672, 720) 'sourceFileName' (line 2770)
    [752, 800) 'destFileName' (line 2785) <== Memory access at offset 720 partially underflows this variable
    [832, 836) 'opCode55' (line 2824)
    [848, 852) 'cmdSeq60' (line 2832)
    [864, 1000) 'args65' (line 2840)
    [1072, 1076) 'opCode77' (line 2871)
    [1088, 1092) 'cmdSeq82' (line 2879)
    [1104, 1240) 'args87' (line 2887)
    [1312, 1360) 'sourceFileName92' (line 2898)
    [1392, 1440) 'destFileName98' (line 2913)
    [1472, 1476) 'startOffset' (line 2928)
    [1488, 1492) 'length' (line 2943)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow (/home/zyh/fprime/build-fprime-automatic-native-ut/bin/Linux/Svc_FileDownlink_ut_exe+0x4ea411) in __asan_memcpy
Shadow bytes around the buggy address:
  0x100017656600: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
  0x100017656610: 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 f2 f2 f2
  0x100017656620: 04 f2 04 f2 04 f2 f8 f2 f8 f8 f8 f8 f8 f8 f8 f2
  0x100017656630: f2 f2 f2 f2 f8 f2 04 f2 04 f2 00 00 00 00 00 00
  0x100017656640: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2
=>0x100017656650: f2 f2 f2 f2 00 00 00 00 00 00[f2]f2 f2 f2 00 00
  0x100017656660: 00 00 00 00 f2 f2 f2 f2 f8 f2 f8 f2 f8 f8 f8 f8
  0x100017656670: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f2 f2 f2
  0x100017656680: f2 f2 f2 f2 f2 f2 f8 f2 f8 f2 f8 f8 f8 f8 f8 f8
  0x100017656690: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f2 f2 f2 f2 f2
  0x1000176566a0: f2 f2 f2 f2 f8 f8 f8 f8 f8 f8 f2 f2 f2 f2 f8 f8
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==16373==ABORTING
```

## How to Reproduce

1. Compile unit test with ASAN
2. Run build-fprime-automatic-native-ut/bin/Linux/Svc_FileDownlink_ut_exe
3. Program abort

## Expected Behavior

Run normally with ASAN.
",bug,https://github.com/nasa/fprime/issues/430
`fprime-util check` For Deployments,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`fprime-util check` doesn't run UTs of a deployment when in a deployment directory.

## How to Reproduce

1. `cd CustomDeployment`
2. `fprime-util check`
3. Error

## Expected Behavior

Run UTs instead of error.",bug,https://github.com/nasa/fprime/issues/361
RPI Topology.cpp is Dead Code,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

This is historical code that needs to be removed.",bug,https://github.com/nasa/fprime/issues/2819
OSAL Refactor: Os::FileSystem and Os::Directory,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Refactor the above OSAL pieces.  Some quick thoughts:

1. Directory should be merged into FileSystem
2. For namespace-bucked functions, do the following:
  1. Delegate  structure as normal
  2. static methods of class can delegate to singleton implementation.",non-bug,https://github.com/nasa/fprime/issues/2687
F Prime GDS channel selection usability suggestion,"| | |
|:---|:---|
|**_F´ Version_**|v3.4.1, commit https://github.com/nasa/fprime/commit/8a1612c0dd1ec18ada8162d92d37ff7317835129 |
|**_Affected Component_**|   |
---
## Problem Description

When selecting a set of channels in the ""edit view"" mode using a filter, when the user presses ""done"" the filter stays when going back to the normal channel view. The normal channel view shows only the most recently selected channels. This can be confusing as it appears that only the last set of channels selected via the filter where the ones added to the custom view.

## How to Reproduce

1. Add some channels using one filter
2. Add a different set of channels using a different filter
3. Click ""done""
4. Only the channels in 2\. are shown
5. Clear the filter
6. See all the channels selected

## Expected Behavior

As usability suggestion would be to clear the filter field when the ""done"" button is clicked to populate all the selected channels.
",bug,https://github.com/nasa/fprime/issues/2476
TlmPacketizer Enhancements,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  TlmPacketizer  |
---
## Feature Description

1. TSRs- These are files that specify rules to determine which EHA to packetize for downlink and at what rate. Much more sophisticated than what currently exists in TlmPacketizer (i.e. simple priority or on demand).  Tim indicated this is already part of the plan for Prime.
2. Configurable EHA packet production rate 
3. EHA groups 
4. EHA OPs Cats (operational categories)

## Rationale

These features have been very valuable on large flagship missions in both testing and OPs.
",non-bug,https://github.com/nasa/fprime/issues/2210
'sprintf' Depricated on MacOs,"| | |
|:---|:---|
|**_F´ Version_**| Devel |
|**_Affected Component_**| Health Component Unit Tests |
---
## Problem Description

When checking all unit tests on the top level directory on a MacOs machine, a build error occurs. The compiler complains that `sprintf` is deprecated and should not be used. This error prevents the build from continuing.

## How to Reproduce

1. `fprime-util generate --ut`
2. `fprime-util check --all`

## Expected Behavior

Here is the expected error:

```
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:263:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",port);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:297:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",port);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:319:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",port);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:349:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",entry);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:409:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",entry);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:438:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",entry);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:498:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",entry);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:659:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(name,""task%d"",port);
          ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
/Users/lsoares/Documents/fprime/Svc/Health/test/ut/Tester.cpp:751:7: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
      sprintf(name,""task%d"",Svc::HealthComponentBase::NUM_PINGSEND_OUTPUT_PORTS-1);
      ^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Library/Developer/CommandLineTools/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))
                                                      ^
9 errors generated.
make[3]: *** [F-Prime/Svc/Health/CMakeFiles/Svc_Health_ut_exe.dir/test/ut/Tester.cpp.o] Error 1
```
",bug,https://github.com/nasa/fprime/issues/1821
MVP: Baremetal System Reference,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Minimal viable product:
- Runs on feather
- CMD NO_OP, Events, Telemetry
- RG cycles at 1000Hz
- Has config to fit feather sized boards",non-bug,https://github.com/nasa/fprime/issues/2029
RPI as Linux,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| RPI CMake |
---
## Feature Description

RPI ""is"" linux but is handled specifically for each device/driver/linux specific compile.  We should unify this.

## Rationale

RPI ""is"" linux.",non-bug,https://github.com/nasa/fprime/issues/542
Update PIP Requirements in INSTALL.md,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

PIP version requirements are not properly specified in `INSTALL.md`

Here are the new things to add to INSTALL.md requirements:

1. Python 3.12
2. Recommended Requirements:
  1. pip >= 21.0.1 (macOS 10.9+ systems)
  2. pip >= 19.3 (x86_64 systems)
  3. pip >= 20.3 (aarch64 systems), 
4. A note: systems not recommended or pip versions less than recommended will require `java` and run slower versions of FPP tools.

This data is derived from: https://github.com/pypa/manylinux, where we build manylinux2014 packages for x86_64 systems, and manylinux_2_28 for aarch systems. macOS versions determined from: https://github.com/pypa/pip/issues/9506 where the 10_9_universal2 bug was fixed.  Note: these choices are limited to build host availability.",bug,https://github.com/nasa/fprime/issues/2426
Revisit Svc::TlmChan for coding style guidelines,"| | |
|:---|:---|
|**_F´ Version_**| 3.x|
|**_Affected Component_**| Svc/TlmChan |
---
## Feature Description

A quick description of the requested feature.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/1875
Seeding STest::Random causes a failure in Deframer unit tests,"Steps to reproduce:

1. In `Svc/Deframer/test/ut-unified/TestMain.cpp`, add the line `STest::Random::seed();` just before `return RUN_ALL_TESTS();`
2. In `Svc/Deframer`, run `fprime-util build --ut`
3. In `build-fprime-automatic-native-ut/bin/[native os name]`
    1. Run `echo 545994 > seed`. This step captures the random seed that causes the issue to appear.
    2. Run `./Svc_Deframer_with_fprime`. You should see the failure output.
",bug,https://github.com/nasa/fprime/issues/1366
Add plug-in approach for packet descriptors,"| | |
|:---|:---|
|**_F´ Version_**|>= 3.x |
|**_Affected Component_**| n/a |
---
## Feature Description

Provide a simple method (like a directory) for users to supply handlers for non-standard F Prime packet descriptors.

## Rationale

A user might wish to generate their own packet descriptor for special handling.
",non-bug,https://github.com/nasa/fprime/issues/2478
Hitting Ctrl+C don't frees socket in Ref app,"| | |
|:---|:---|
|**F' 2.0**| |
|**Ref application**|   |
---
## Problem Description

Seems like compiled Ref app don't stops when hitting Ctrl+C on MacOS and Raspberry. As a result when I'm starting Ref app again it fails with error:
[ERROR] Failed to send framed data: 1

Manually killing app that uses 50000 port helps

## How to Reproduce

1. Start fprime-gds
2. Start Ref app
3. Kill Ref app
4. Start Ref app again
5. See an error: [ERROR] Failed to send framed data: 1

## Expected Behavior

Ref app should clean all resources on kill. Restarted Ref app should work.
",bug,https://github.com/nasa/fprime/issues/846
Turning off `FW_ARRAY_TO_STRING` causes compile errors,"| | |
|:---|:---|
|**_F´ Version_**| 3.1.1 |
|**_Affected Component_**| All  |
---
## Problem Description

Setting the `FW_ARRAY_TO_STRING` to 0 to eliminate the string function causes a build failure like:

```
[ 98%] Building CXX object CMakeFiles/Ref.dir/Top/Main.cpp.o
In file included from /home/tcanham/source/fprime/Ref/build-fprime-automatic-native/Ref/SignalGen/SignalGenComponentAc.hpp:37,
                 from /home/tcanham/source/fprime/Ref/SignalGen/SignalGen.hpp:20,
                 from /home/tcanham/source/fprime/Ref/build-fprime-automatic-native/Ref/Top/RefTopologyAc.hpp:15,
                 from /home/tcanham/source/fprime/Ref/Top/Main.cpp:6:
/home/tcanham/source/fprime/Ref/build-fprime-automatic-native/Ref/SignalGen/SignalPairSetArrayAc.hpp:132:27: error: ""BUILD_UT"" is not defined, evaluates to 0 [-Werror=undef]
  132 | #if FW_ARRAY_TO_STRING || BUILD_UT
      |                           ^~~~~~~~
In file included from /home/tcanham/source/fprime/Ref/build-fprime-automatic-native/Ref/SignalGen/SignalGenComponentAc.hpp:38,
                 from /home/tcanham/source/fprime/Ref/SignalGen/SignalGen.hpp:20,
                 from /home/tcanham/source/fprime/Ref/build-fprime-automatic-native/Ref/Top/RefTopologyAc.hpp:15,
                 from /home/tcanham/source/fprime/Ref/Top/Main.cpp:6:
/home/tcanham/source/fprime/Ref/build-fprime-automatic-native/Ref/SignalGen/SignalSetArrayAc.hpp:131:27: error: ""BUILD_UT"" is not defined, evaluates to 0 [-Werror=undef]
  131 | #if FW_ARRAY_TO_STRING || BUILD_UT
      |                           ^~~~~~~~
```

## How to Reproduce

1. Edit `config/FpConfig.hpp`
2. Change `FW_ARRAY_TO_STRING` to `0'
3. Compile

## Expected Behavior

The code should compile without errors or warnings.
",bug,https://github.com/nasa/fprime/issues/1705
Migrate CI Docker Container from Docker Hub to Quay,"| | |
|:---|:---|
|**_F´ Version_**| n/a |
|**_Affected Component_**| infrastructure  |
---
## Feature Description

Move hosting of fprime ci docker container from docker hub to quay.io

## Rationale

Docker Hub added rate limiting for container pulls, causing risk that CI could get rate limited while attempting pulling the image. Quay also provides free hosting for public images but container pulls are not rate limited.
",non-bug,https://github.com/nasa/fprime/issues/312
System Reference - Add CMake switch to choose com method,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description
Allow for user to run a switch with cmake like `-d usewifi` or `-d useradio`.

## Rationale

Improves versatility for testing with system reference
",non-bug,https://github.com/nasa/fprime/issues/2091
Update raspberrypi toolchain to account for arm-none-linux-gnueabihf-* files,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

After downloading the GNU ARM toolchain from https://developer.arm.com/downloads/-/gnu I noticed that the file names located in the /bin directory were slightly different — for example: arm-none-linux-gnueabihf-gcc instead of arm-linux-gnueabihf-gcc

",non-bug,https://github.com/nasa/fprime/issues/2054
Build uplink router,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| `Router` |
---
## Feature Description

Following https://github.com/nasa/fprime/issues/2763, build a router that sits after the Deframer and routes F´ packets to either FileUplink or CommandDispatcher

",non-bug,https://github.com/nasa/fprime/issues/2765
Refactor System Reference Camera component to use libcamera,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We'd like to migrate the camera component from OpenCV to the libcamera library.
For more info on libcamera: 
- https://www.raspberrypi.com/documentation/computers/camera_software.html
- https://github.com/raspberrypi/libcamera
",non-bug,https://github.com/nasa/fprime/issues/2106
FPP v2.0 Integration: Update CMAke to Run UT Autocoders,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

#2181 ",non-bug,https://github.com/nasa/fprime/issues/2198
Improve Error Message with FPP Check,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

See error message discussion in #1801",non-bug,https://github.com/nasa/fprime/issues/1888
Add multiple FileDownlink/FileUplink streams,"| | |
|:---|:---|
|**_F´ Version_**| 3.x |
|**_Affected Component_**| Svc/FileDownlink |
---
## Feature Description

Currently file downlink and uplink can only handle one file at a time. Update both components' File packet header data to identify a file stream, i.e. a unique file to be sent. That way more than one file can be sent in parallel.

## Rationale

This would enable multiple manual downloads alongside automated download like the upcoming data management feature.
",non-bug,https://github.com/nasa/fprime/issues/1876
Bring Back Stubbed Serial Driver,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

A quick description of the requested feature.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/932
CPU affinity of active components,"| Ubuntu 20.04 |
| F´ 1.5             | 
| FW/Comp      |   
---
## CPU affinity does not work on linux



## How to Reproduce

1. Using the Ref example  
2. Adding the Thread CPU affinity in the task start, in this example I set the cpuAffinity to 1 for all threads in  
 `/Ref/Top/topolocy.cpp`:
```
// start(NATIVE_INT_TYPE identifier, NATIVE_INT_TYPE priority, 
//         NATIVE_INT_TYPE stackSize, NATIVE_INT_TYPE cpuAffinity)
    rateGroup1Comp.start(0, 120,10 * 1024,1); 
    rateGroup2Comp.start(0, 119,10 * 1024,1);
    rateGroup3Comp.start(0, 118,10 * 1024,1);
    // start driver
    blockDrv.start(0,140,10*1024,1);
    // start dispatcher
    cmdDisp.start(0,101,10*1024,1);
    // start sequencer
    cmdSeq.start(0,100,10*1024,1);
    // start telemetry
    eventLogger.start(0,98,10*1024,1);
    chanTlm.start(0,97,10*1024,1);
    prmDb.start(0,96,10*1024,1);

    fileDownlink.start(0, 100, 10*1024,1);
    fileUplink.start(0, 100, 10*1024,1);
    fileManager.start(0, 100, 10*1024,1);

    pingRcvr.start(0, 100, 10*1024,1);
```
3. Build the app (`fprime-util generate`, `fprime-util build`)  
4. Execute the app `./build-fprime-automatic-native/bin/Linux/Ref`  
5. Verify thread CPUs with either htop or   
    `ps -all | grep Ref` -> get process ID  
    `taskset -cp --all-tasks -p PROCESS_ID`  

## Expected Behavior
All threads are associated to CPU 1. 
However, currently threads are associated randomly to all CPUS. 

Looking at the base class implementation `FW/Comp/Task.cpp`   

```
Task::start(const Fw::StringBase &name, NATIVE_INT_TYPE identifier, NATIVE_INT_TYPE priority, NATIVE_INT_TYPE stackSize, taskRoutine routine, void* arg, NATIVE_INT_TYPE cpuAffinity)
```
the cpu affinity does not appear to be implement. 
I tried to add the affinity as thread attribute in line 52:

```
#ifdef TGT_OS_TYPE_LINUX
        cpu_set_t cpus; // Needed for CPU affinity
        //Setting CPU affinity
        CPU_ZERO(&cpus);
        CPU_SET(cpuAffinity, &cpus);
        if (stat != 0) {
            stat = pthread_attr_setaffinity_np(&att, sizeof(cpu_set_t), &cpus);
            return TASK_INVALID_PARAMS;
        }
#endif
```
but got the same result.
Any suggestions why the threads are not following the given CPU affinity?
Thanks!",bug,https://github.com/nasa/fprime/issues/510
Add an Fw::ObjectName implementation of Fw::StringBase,"This way we can replace the char array here

https://github.com/nasa/fprime/blob/20d3a6a7327c83c07c15ea3b1b42b77dc5046a79/Fw/Obj/ObjBase.hpp#L82

with an `Fw::ObjectName` object. That will have the following benefits:

1. Avoid direct use of bare string arrays and `snprintf`. 
2. Avoid creating temporary string buffers on the stack to copy strings into the object name.
3. Avoid compiler string truncation warnings. See https://github.com/fprime-community/fpp/pull/383.",non-bug,https://github.com/nasa/fprime/issues/2493
Using different environment files in setting.ini,"| | |
|:---|:---|
|**_F´ Version_**|v3.0.0 |
|**_Affected Component_**| settings.ini |
---
## Feature Description

I would like to specify different environment_files in my setting.ini based on the platform I'm building.

## Rationale

I would like to generate and build for various different platforms. Each platform may need their own environment_file defined in the settings.ini file. However, I can only define one -- which may cause conflicts when building different platforms.
",non-bug,https://github.com/nasa/fprime/issues/1267
Implement MicroFS,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Build an Os implementation for File and FileSystem that is in-RAM and requires no real storage (non-volatile).  ",non-bug,https://github.com/nasa/fprime/issues/2011
Remove pull port from ByteStreamModel ,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a sched() port if you wish to poll

A quick description of the requested feature.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/1813
Collect Terminal Mirroring Code,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The code to run CMake in the terminal w/ code highlighting and capturing is fairly sophisticated.  The code to run FPP in terminal with capture and mirroring is also sophisticated. 

We should collect this code into one library that supports both as it is two solutions to the same problem.

1. FPP uses FD `select` to prevent blocking when capturing output
2. CMake uses pseudo-terminals to maintain the colorization in the output from CMake

Final code features:
1. Maintain colors
2. Maintain efficiency of `select`
3. Allow for mirroring output to terminal and a capture
4. Allow ""no terminal"" to turn off mirroring
5. Return captured lines as (stderr, stdout)

",non-bug,https://github.com/nasa/fprime/issues/2228
LED Blinker: Add param read to run function,The `run` function now occurs after the `parameter` section.  We can include the read and avoid the `//TODO`,bug,https://github.com/nasa/fprime/issues/2247
Missing Brace,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

In docs/Tutorials/HelloWorld/HelloWorld.md on line 178 there is a missing ""}"". The missing brace causes an error when building and may confuse F' beginners.
",bug,https://github.com/nasa/fprime/issues/2080
Format specifier warning ,"| | |
|:---|:---|
|**v3.1.1**| |
|**auto coder**|   |
---
## Problem Description

Build warning: for format specifier %d

## How to Reproduce

fprime-util build

## Expected Behavior

No format specifier warnings
",bug,https://github.com/nasa/fprime/issues/1798
Drv/Ip/TcpClientSocket.cpp prints errors when intentionally not connected.,"| | |
|:---|:---|
|**_F´ Version_**|3.0.0 |
|**_Affected Component_**|  `Drv/Ip/TcpClientSocket.cpp |
---
## Problem Description

A description of the problem with sufficient detail to understand the issue.

## How to Reproduce

1. Start deployment with no host/port
2. Look at stdout
3. You will see endlessly repeated:

```
[ERROR] Failed to send framed data: 0
[ERROR] Failed to send framed data: 0
[ERROR] Failed to send framed data: 0
```

## Expected Behavior

If the socket has not been configured, this call should return `SEND_OK`:

```c++
Drv::SendStatus TcpClientComponentImpl::send_handler(const NATIVE_INT_TYPE portNum, Fw::Buffer& fwBuffer) {
    Drv::SocketIpStatus status = m_socket.send(fwBuffer.getData(), fwBuffer.getSize());
    // Always return the buffer
    deallocate_out(0, fwBuffer);
    if ((status == SOCK_DISCONNECTED) || (status == SOCK_INTERRUPTED_TRY_AGAIN)) {
        return SendStatus::SEND_RETRY;
    } else if (status != SOCK_SUCCESS) {
        return SendStatus::SEND_ERROR;
    }
    return SendStatus::SEND_OK;
}
```

Specifically, this call is printing the message based on the above error code:

```c++
void FramerComponentImpl ::send(Fw::Buffer& outgoing) {
    Drv::SendStatus sendStatus = framedOut_out(0, outgoing);
    if (sendStatus.e != Drv::SendStatus::SEND_OK) {
        // Note: if there is a data sending problem, an EVR likely wouldn't make it down. Log the issue in hopes that
        // someone will see it.
        Fw::Logger::logMsg(""[ERROR] Failed to send framed data: %d\n"", sendStatus.e);
    }
}
```
",non-bug,https://github.com/nasa/fprime/issues/1442
UTs From F´ Libraries Do Not Import Correctly,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

UTs defined in F´  libraries are not included by default, and the flag to enable them is logically reversed.

Expected: UTs enabled by default.  Flag is not inverted.",bug,https://github.com/nasa/fprime/issues/2392
Add Tracing to Fw,"| | |
|:---|:---|
|**_F´ Version_**| |
|**Fw**|  |
---
## Feature Description

Tracing allows an on-board log to be built of software execution where various points in the software a sample point can be saved with a time tag.

## Rationale

Tracing (a.k.a autopsy) would provide a report of activities done in software before, say a reset. It would help identify/debug the causes of an issue in software. 


## Scope of Work
*  Fw : Defining a trace port -- Done
* Svc : 
    * Implement a trace file logger component to input traces and log to files -- Done
    * Create UTs -- Work in progress
    
",non-bug,https://github.com/nasa/fprime/issues/2784
Time::getContext() limited to returning U8,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| Fw::Time  |
---
## Problem Description

The Time class declares getContext() as returning FwTimeContextStoreType in the [hpp](https://github.com/nasa/fprime/blob/8db8e4f22255eb5c9359043dab70f9442a63f82c/Fw/Time/Time.hpp#L33) , but defines getContext() as returning U8 in the [cpp](https://github.com/nasa/fprime/blob/8db8e4f22255eb5c9359043dab70f9442a63f82c/Fw/Time/Time.cpp#L146) .

This limits the definition of FwTimeContextStoreType to U8. We'd like to use the Context to store a boot count, but 0-254 is a bit constraining in terms of number of boots. 

## How to Reproduce

1. Define FwTimeContextStoreType as something other than U8
2. Build a Topology

I got

```
/home/abcouwer/Dev/fprime-fwca/Fw/Time/Time.cpp:146:8: error: no declaration matches ‘U8 Fw::Time::getContext() const’
  146 |     U8 Time::getContext(void) const {
      |        ^~~~
In file included from /home/abcouwer/Dev/fprime-fwca/Fw/Time/Time.cpp:1:
/home/abcouwer/Dev/fprime-fwca/Fw/Time/Time.hpp:33:36: note: candidate is: ‘U16 Fw::Time::getContext() const’
   33 |             FwTimeContextStoreType getContext(void) const; // !< get the context value
      |                                    ^~~~~~~~~~
In file included from /home/abcouwer/Dev/fprime-fwca/Fw/Time/Time.cpp:1:
/home/abcouwer/Dev/fprime-fwca/Fw/Time/Time.hpp:10:11: note: ‘class Fw::Time’ defined here
   10 |     class Time: public Serializable {
      |           ^~~~
```


## Expected Behavior

Would be nice to have flexibility here. If it has never been tweaked before, I forsee issues with GDS or other parts of the framework. I haven't tried changing the Fw yet and seeing how that goes in Topology and GDS. I can update this issue and PR if I make one.
",bug,https://github.com/nasa/fprime/issues/1230
Fix or rework autodocs pipeline,"| | |
|:---|:---|
|**_F´ Version_**| `devel` |
|**_Affected Component_**|  docs  |
---
## Problem Description

The autodocs pipeline is broken because of merge conflicts, as a commit has been introduced in the `release/docs` branch without passing through devel first. 
An attempt at fixing the merge conflicts manually was done in https://github.com/nasa/fprime/pull/2154, which worked on the docs branch, but PRs keep failing. ",bug,https://github.com/nasa/fprime/issues/2169
Enums generate unnecessary python serializable code. ,"Enums, and possibly other generated types, seem to generate a `DefaultDict/serializable/<name>.py` file.
This was intended for the GDS, but the GDS now parses enum types from the deployment dictionary, so these files are unnecessary and no longer need to be generated.",bug,https://github.com/nasa/fprime/issues/240
Diagnose Strange Text,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Why does the following message occur when generating on core?

```
-- [WARNING] /Users/mstarch/code/fprime-infrastructure/fprime/settings.ini does not exist
[WARNING] /Users/mstarch/code/fprime-infrastructure/fprime/settings.ini does not exist
FPRIME_FRAMEWORK_PATH=/Users/mstarch/code/fprime-infrastructure/fprime
```",bug,https://github.com/nasa/fprime/issues/2630
GDS does not support display of complex type as argument,"| | |
|:---|:---|
|**_F´ Version_**|**devel**|
|**_Affected Component_**|**GDS**|
---
## Problem Description

According to @lestarch [[1]](https://groups.google.com/g/fprime-community/c/yf6NMXk0NKM) actually the GDS does not support complex types such as arrays or serializables, however no error is detected and so the GDS is launched which causes a white screen.

The GDS shall be able to take into account these different types.

## How to Reproduce

1. Define a complex type

```xml
<array name=""Quaternion"" namespace=""Ref"">
    <type>F64</type>
    <size>4</size>
    <format>%f</format>
    <default>
        <value>0</value>
        <value>0</value>
        <value>0</value>
        <value>0</value>
    </default>
</array>
```

2. Define a component command using this complex type in argument

```xml
<import_array_type>Ref/TCModule/QuaternionArrayAi.xml</import_array_type>
<command kind=""async"" opcode=""1"" mnemonic=""TC_Tracking"">
    <comment>
        Command to switch in Tracking Mode
    </comment>
    <args>
        <arg name=""arg1"" type=""Ref::Quaternion""/>
    </args>
</command>
```

3. Launch fprime build, everything nominal

4. Launch GDS

GDS does not display anymore: white screen and we this error in the console:

``TypeError: command.args is undefined``

## Expected Behavior

This feature shall be implemented as it could facilitate the sending of vector or linked data set.

While waiting for this bug to be solved from our point of view there are three temporary solutions to notify the developer of this bug:

1. Notify the error in the fprime-util generate command
2. Notify the error when launching fprime-gds
3. Notify the error in the web browser via a pop-up",bug,https://github.com/nasa/fprime/issues/602
General CMake Template updates,"| | |
|:---|:---|
|**_F´ Version_**| Release 1.5.3|
|**_Affected Component_**| all |
---
## Feature Description

**Enhancement 1:**

Since impl is mostly used during development add Verbose flag to /Users/janamian/Documents/workstation_3x/fprime/cmake/target/impl.cmake

${FPRIME_FRAMEWORK_PATH}/Autocoders/Python/bin/implgen.py ${AI_XML} -v

**Enhancement 2:**

include EXPORT files for sourcetrail:
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

**Enhancement 3:**

Generated UT template file names do not match to CMakeList.txt files in each component
UT templates are currently named:
Tester.cpp
Tester.hpp
MainTester.cpp
Also the ComponentAi.xml file is by default ""Svc/BufferManager/BufferManagerComponentAi.xml"" instead of actual component Ai.xml

The auto generated CMakeList.txt is the following:
```
#### UTS ###
#set(UT_SOURCE_FILES
#  ""${FPRIME_FRAMEWORK_PATH}/Svc/BufferManager/BufferManagerComponentAi.xml""
#  ""${CMAKE_CURRENT_LIST_DIR}/test/ut/Tester.cpp""
#  ""${CMAKE_CURRENT_LIST_DIR}/test/ut/Main.cpp""
#)
#register_fprime_ut()
```

**Enhancement 4:**

fprime-util impl --ut automatically put generated UT files into test/ut folder
instead of component root folder

**Enhancement 5:**

In the auto generated header comment the copyright still shows 2015 as the last day.





",non-bug,https://github.com/nasa/fprime/issues/331
"Use of the ""Conventional Commit"" standard for project commits","| | |
|:---|:---|
|**_F´ Version_**| latest |
|**_Affected Component_**|  |
---
## Feature Description

Adding the [Conventional Commit](https://www.conventionalcommits.org/en/v1.0.0/) standard to all commits made to the project will allow for better readability and understanding of the changes made to the code.

Commits should be formatted as follows: `<type>(<scope>): <subject>`.

For example: `feat(module): added trajectory calculation functionality` or `fix(module): fixed a bug in satellite communication management`.

To help the adoption of this standard, a series of steps can be implemented:

- Setting up a pre-commit tool to check that contributors comply with the standard before they can commit.
- Add a section in the project documentation explaining the standard and the types of commits expected.
- Organize a training session for team members to help them understand the usefulness of the standard and how to use it.

Using the Conventional Commit standard, it is also possible to automatically generate detailed changelogs using tools such as [conventional-changelog](https://www.npmjs.com/package/conventional-changelog) or [commitlint-config-conventional](https://www.npmjs.com/package/@commitlint/config-conventional).
This makes it easier for end users and contributors to write release notes, providing a clear overview of the changes made to the project.

## Rationale

The ""Conventional Commit"" standard has become an industry standard for software commits. It allows :

- a better understanding of the modifications made to the code by specifying the type of commit (new functionality, bug fix, documentation, ...)
- a better traceability by allowing to follow the history of the commits and to understand the motivations behind the modifications.
- a better collaboration between team members by allowing to quickly understand the modifications made by the different contributors.

Automatic generation of detailed changelogs to facilitate communication of changes to the project.

The implementation of this standard can however take some time and may seem restrictive for contributors in the short term, but in the long term it brings gains in productivity, quality and maintainability that are worth the effort.

",non-bug,https://github.com/nasa/fprime/issues/1853
Build failure when including a `-` in a component's name,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.4 |
|**_Affected Component_**| NA |
---
## Problem Description

When creating a new component, you can name it as you please, but if the name contains a `-` it will fail to build. The component name should be given parameters of acceptable names to prevent this issue from occurring.

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.15.0-113-generic-x86_64-with-glibc2.29
Python version: 3.8.10
CMake version: 3.16.3
Pip version: 24.0
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

## How to Reproduce

1. Run `fprime-util new --component`
2. Give the component a name containing a dash, for example: `test-component-with-dashes`
3. `cd test-component-with-dashes`, then attempt to build using `fprime-util build`
4. View error:
```
CMake Error at fprime/cmake/utilities.cmake:586 (message):
-- Configuring incomplete, errors occurred!
  [sub-build] Failed to execute: info-cache/fpp_locs:

  fpp-locate-defs

  
  /home/username/project/Components/test-component-with-dashes/test-component-with-dashes.fpp:3.26


      active component test-component-with-dashes {
                           ^

  error: { expected
```
## Expected Behavior

Either a warning or an error when attempting to create a component with an invalid name.
",bug,https://github.com/nasa/fprime/issues/2802
Test FPP packages on M1 Mac with VM,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description
Using the packages generated in #1996, try running the packages on a VM on macOS that has an M1 chip.

",non-bug,https://github.com/nasa/fprime/issues/2056
Rework the Reference Example For FPP Refactors,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

FPP Is reworking to not require phasing.  We need to rework the reference example.",bug,https://github.com/nasa/fprime/issues/1460
Decoding errors in GDS not printed to GDS log,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

If there is an issue decoding a particular channel (for this case, it was an enumeration value out of range), the log message is never printed.

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
(p3srh) tcanham@srh-avs-gse-06A:~/source/srh-fsw-base/logs/2024_04_22-20_34_05$ fprime-util version-check
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-4.18.0-477.15.1.el8_8.x86_64-x86_64-with-glibc2.28
Python version: 3.10.11
CMake version: 3.20.2
Pip version: 23.0.1
Pip packages:
    fprime-tools==3.4.3
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

## How to Reproduce

1. 
2.
3.

## Expected Behavior

Throw an error.
",bug,https://github.com/nasa/fprime/issues/2699
Check Leak in CI,"| | |
|:---|:---|
|**_F´ Version_**| CI |
|**_Affected Component_**|  1.5.3/devel |
---
## Feature Description

We should run check --leak on UTs to look for memory leaks

## Rationale

CI should catch memeory leaks.",non-bug,https://github.com/nasa/fprime/issues/518
`refresh_cache` Is a UTIL target and should be labeled as such,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`refresh_cache` is a utility target and should be put into that category.",bug,https://github.com/nasa/fprime/issues/2421
Fix FPP Regression Around Native Images,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

1. `odroid` build run outside release
2. Image testing is not performed",bug,https://github.com/nasa/fprime/issues/2262
interface1 is active but does not have async_input port,"| | |
|:---|:---|
|**_F´ Version_**| current |
|**_Affected Component_**| Autocoder |
---
## Problem Description

interface1 component is of `kind=""active""`:
https://github.com/nasa/fprime/blob/devel/Autocoders/Python/test/interface1/TestComponentAi.xml

However, it does not have an `async_input` port as required by the schematron spec.  In fact it has no ports at all.
https://github.com/nasa/fprime/blob/devel/Autocoders/Python/schema/default/active_comp_schematron.rng

## How to Reproduce

Found by enabling exceptions for schematron validation failures (see #325).

## Expected Behavior

Component should pass schematron validation an gtests.
",bug,https://github.com/nasa/fprime/issues/452
Support passing by const reference ,"| | |
|:---|:---|
|**_F´ Version_**| latest |
|**_Affected Component_**|  autocoder |
---
## Feature Description

Right now, there is no option in the autocoder to pass by const reference. This makes it impossible to use const references as arguments to port calls. This can be worked around by using const casts to remove the constness of the reference, but this defeats the point of const correctness throughout F'. ",non-bug,https://github.com/nasa/fprime/issues/722
strnlen is not standard C++11 and not implemented in fprime,"| | |
|:---|:---|
|**_F´ Version_**| 47afb72e1f2cb79c1ab475458b0ed3faca5d317c|
|**_Affected Component_**|  Any function using strnlen |
---
## Problem Description

strnlen is not part of the C++11 standard.
When compiling with C++11 (without any extensions e.g. gnu++11), the compiler complains that strnlen is not defined.

## How to Reproduce

1.  Use only -std=c++11 without any extensions when compiling
2.
3.

## Expected Behavior

strnlen should be defined.


Note: @bocchino would like to review.",bug,https://github.com/nasa/fprime/issues/1342
Scrolling over Certain Events Causes GDS Crash,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Scrolling over certain Events causes an untraceable Vue.js crash.",bug,https://github.com/nasa/fprime/issues/1686
Creation of a new deployment includes trailing white space in name,"| | |
|:---|:---|
|**_F´ Tools Version_**| 3.3.3 | 
|**_Affected Component_**| -- |
---
## Problem Description
Creation of a new deployment using the following fprime-tools command: ""fprime-util new --deployment "" , allows the deployment name to include trailing white space without any warning to the user. A trailing white space in the deployment name breaks the deployment build CMake process. 

## How to Reproduce
1. Create a new deployment using fprime tools command:  fprime-util new --deployment
2. Provide a deployment name with a trailing white space 
3. Attempt to build this deployment using fprime-util build in the associated deployment directory. 

## Expected Behavior
User should be informed of trailing white space in the deployment name with a warning, given a white space in the deployment name breaks the deployment build. 
",bug,https://github.com/nasa/fprime/issues/2322
Cleaning up Unit Test folders,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 |
|**_Affected Component_**| All  |
---
## Problem Description

Unit test folders currently contain old binary executable UT files, old R&D checklists, and Google test suite files, gcov files, and old make files.
This ticket will be used to track the subsequent PRs cleaning up UT folders.

## How to Reproduce
To list binary files run `find . -type f -name runtest_*`
To list gcov files run `find . -type f -name *.gcov`
etc.

## Expected Behavior
With the new fprime-util tool there is no need to keep the old executable files or include Google test suite files.

",bug,https://github.com/nasa/fprime/issues/689
Create fpp-to-dict FPP utility,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description
Once bullets 1 and 2 in #2263 are complete, we want to create a utility in FPP tools that does the fpp-to-dict.
",non-bug,https://github.com/nasa/fprime/issues/2276
GDS Crashes without [fprime] Section,"If [fprime] section not defined in settings.ini, the GDS crashes on startup.",bug,https://github.com/nasa/fprime/issues/271
add documentation for Rate Groups,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**|  |
---
## Feature Description

Documentation on [Rate Groups and Timeliness](https://nasa.github.io/fprime/UsersGuide/best/rate-group.html), with examples.

## Rationale

Would be useful for developing components that handle scheduling and/or execution of scheduled events.",non-bug,https://github.com/nasa/fprime/issues/1291
BufferLogger CRC calculations are inefficient,"| | |
|:---|:---|
|**_F´ Version_**| v3.1.1 |
|**_Affected Component_**| BufferLogger,Os/ValidateFileCommon.cpp |
---
## Feature Description

Update BufferLogger to calculate CRC32 as the file is being written to disk.

## Rationale

Currently, when BufferLogger closes a file it goes on to create a validation file. On Linux, this re-opens the file and reads it 256 bytes at a time. For larger files, say 10 MB, this results in around 40,000 syscalls when closing a file. This can impact the performance of other threads running on the same core, regardless of the priority.

This 256 byte size is hidden in a header file and is not configurable without forking fprime.
https://github.com/nasa/fprime/blob/91c578ee37c01ba92e556dbca0287d82f9f18b95/Os/ValidateFile.hpp#L16

Increasing this value would partially alleviate the issue but I want to propose another solution. Calculate the CRC at the same time as the buffers are being written to disk. This would not require any read syscalls or any additional processing when closing a file. However, it would mean that the `ValidateFile` abstraction could not be used within BufferLogger
",non-bug,https://github.com/nasa/fprime/issues/1842
Add F´ Subprojects to `fprime-util new`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add subprojects (see #2004 ) to `fprime-uitl new`.  Might be a special flag for deployments.  Might be a new top-level item.",non-bug,https://github.com/nasa/fprime/issues/2005
Add fixed-length frames to `FrameAccumulator` helper,"| | |
|:---|:---|
|**_F´ Version_**|[v3.4.3](https://github.com/nasa/fprime/releases/tag/v3.4.3) |
|**_Affected Component_**| `Svc/FrameAccumulator` |
---
## Feature Description

The `Svc/FrameAccumulator` supports a configurable frame pattern that includes a token, a size, and CRC checksums. This is a request to add an option whereby the frame size is known and fixed, so there is no size field.

## Rationale

Support this type of frame.
",non-bug,https://github.com/nasa/fprime/issues/2861
Add an ENUM_LENGTH constant to FPrime enums,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| Autocoder |
---
## Automatically add an ENUM_LENGTH constant to F' enums.

Have the autocoder add a constant with the name ENUM_LENGTH to F' enums, similar to how SERIALIZABLE_SIZE works.

## Rationale

Needing to know the length of an enum list is a common need. Now is it up to developers to add a final member to the enum and expect that any maintaining developers would not accidentally add another member after that one.
",non-bug,https://github.com/nasa/fprime/issues/471
"Command Sequence UTs ""Close Invalid FD""","| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**|  Svc/CmdSequencer |
---
## Problem Description

An invalid FD is closed in CMD Sequencer.  From Valgrind:

```
Warning: invalid file descriptor -1 in syscall close()
```

Full output:

```
==18291== Warning: invalid file descriptor -1 in syscall close()
==18291==    at 0x4E4F511: close (close.c:27)
==18291==    by 0x2878FD: Os::File::close() (FileStub.cpp:415)
==18291==    by 0x26DA94: Svc::AMPCSSequence::readCRCFile(Fw::CmdStringArg&) (AMPCSSequence.cpp:74)
==18291==    by 0x26D62A: Svc::AMPCSSequence::loadFile(Fw::CmdStringArg const&) (AMPCSSequence.cpp:41)
==18291==    by 0x268743: Svc::CmdSequencerComponentImpl::loadFile(Fw::CmdStringArg const&) (CmdSequencerImpl.cpp:207)
==18291==    by 0x267F45: Svc::CmdSequencerComponentImpl::CS_RUN_cmdHandler(unsigned int, unsigned int, Fw::CmdStringArg const&) (CmdSequencerImpl.cpp:105)
==18291==    by 0x284042: Svc::CmdSequencerComponentBase::doDispatch() (CmdSequencerComponentAc.cpp:4661)
==18291==    by 0x21734B: Svc::Tester::clearAndDispatch() (Tester.cpp:606)
==18291==    by 0x1A80C5: Svc::AMPCS::Tester::MissingCRC() (AMPCS.cpp:44)
==18291==    by 0x1F22D7: AMPCS_MissingCRC_Test::TestBody() (Main.cpp:23)
==18291==    by 0x3138F4: void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2433)
==18291==    by 0x306C32: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2469)
--18291-- REDIR: 0x5695a30 (libc.so.6:free) redirected to 0x4c32cd0 (free)
==18291== Warning: invalid file descriptor -1 in syscall close()
==18291==    at 0x4E4F511: close (close.c:27)
==18291==    by 0x2878FD: Os::File::close() (FileStub.cpp:415)
==18291==    by 0x26ACB6: Svc::CmdSequencerComponentImpl::FPrimeSequence::readFile() (FPrimeSequence.cpp:135)
==18291==    by 0x26A92D: Svc::CmdSequencerComponentImpl::FPrimeSequence::loadFile(Fw::CmdStringArg const&) (FPrimeSequence.cpp:80)
==18291==    by 0x268743: Svc::CmdSequencerComponentImpl::loadFile(Fw::CmdStringArg const&) (CmdSequencerImpl.cpp:207)
==18291==    by 0x267F45: Svc::CmdSequencerComponentImpl::CS_RUN_cmdHandler(unsigned int, unsigned int, Fw::CmdStringArg const&) (CmdSequencerImpl.cpp:105)
==18291==    by 0x284042: Svc::CmdSequencerComponentBase::doDispatch() (CmdSequencerComponentAc.cpp:4661)
==18291==    by 0x21734B: Svc::Tester::clearAndDispatch() (Tester.cpp:606)
==18291==    by 0x1CECA7: Svc::InvalidFiles::Tester::MissingFile() (InvalidFiles.cpp:364)
==18291==    by 0x1F5BCA: InvalidFiles_MissingFile_Test::TestBody() (Main.cpp:297)
==18291==    by 0x3138F4: void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2433)
==18291==    by 0x306C32: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2469)

```

## How to Reproduce

1.   Run the UT in valgrind

## Expected Behavior

No warnings",bug,https://github.com/nasa/fprime/issues/528
Constants Across Platforms,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| F´ |
---
## Feature Description

Constants (max lengths, framing tokens) etc should be available across the GDS, Autocoder and FSW such that missmatches are properly handles. 

",non-bug,https://github.com/nasa/fprime/issues/530
(Re)introduce the MBSE methodology in F´,"| | |
|:---|:---|
|**_F´ Version_**| 4.x |
|**_Affected Component_**| Topology Design/Assembly |
---
## Feature Description

It would be great to be able to perform the [""High Level Design""](https://github.com/nasa/fprime/blob/devel/docs/UsersGuide/best/development-practice.md#high-level-design) step of F' by a graphical tool inspired by the MBSE methodology, or even to fully reintroduce the MBSE methodology in F'.

## Rationale

Currently, the topology is visualized once it has been assembled in the [""Assemble Topology""](https://github.com/nasa/fprime/blob/devel/docs/UsersGuide/best/development-practice.md#assemble-topology) step with the [FPL/FPV](https://github.com/nasa/fprime/blob/devel/docs/Tutorials/MathComponent/Tutorial.md#64-visualizing-the-ref-topology) tools.

Therefore, this does not allow all stakeholders to have a good idea of the overall topology of the software system and to see potential design flaws (not to mention the fact that some system engineers do not want to write lines of code and learn a new language).

On the EU/France side, the [MBSE Eclipse Capella](https://www.eclipse.org/capella/) tool is becoming more and more popular for creating a software system using the MBSE methodology in the space domain.

Maybe there are elements to analyze to introduce them in the framework?

There is also the [RAFCON](https://github.com/DLR-RM/RAFCON) framework from DLR, and [TASTE](https://taste.tools/) from ESA/ESTEC that might be interesting to look at briefly.",non-bug,https://github.com/nasa/fprime/issues/1536
Resolve POINTER_CAST and Pointer Serialization,"POINTER_CAST may be used for serialization, but it is machine dependent.  We should investigate.",bug,https://github.com/nasa/fprime/issues/251
Clean Out Non-Standard OSAL Layer Items,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

- [x] Remove `Os::Watchdog` as it is VxWorks specific without clear pattern for other OSes.
- [x] Remove `Os::InterruptLock` as it belongs more generally in a HAL layer
- [x] Remove `Os/Mem.hpp` and associated code as it belongs specifically to VxWorks implementations
- [x] Remove `Os::TaskLock` as it is VxWorks specific",non-bug,https://github.com/nasa/fprime/issues/2724
Clean Up seqgen,"We should clean-up tiny seqgen to:

1. Register a CLI script in the py package
2. Add documentation
3. Resolve issue: #273

@timcanham do you have any unsubmitted changes to this, or can we start modifying this.",bug,https://github.com/nasa/fprime/issues/280
.pydevproject mentions python2.7,"| | |
|:---|:---|
|**_F´ Version_**|Current master |
|**_Affected Component_**| _.pydevproject_  |
---
## Problem Description

A description of the problem with sufficient detail to understand the issue.

.pydevproject still mentions python2.7:

https://github.com/nasa/fprime/blob/20a7f7737158afe96a09681f23705e0277ceb8c9/.pydevproject#L4

## Expected Behavior

A description of the expected behaviour.

This should either be changed to at least python3.6 or the file be removed completely if PyDev is not used anymore.",bug,https://github.com/nasa/fprime/issues/536
missing break or mark fall through,"fprime-devel/Os/Stubs/Linux/FileStub.cpp  line 116
code:
    case OPEN_SYNC_DIRECT_WRITE:
                flags = O_WRONLY | O_CREAT | O_DSYNC
#ifdef __linux__
                        | O_DIRECT;
#else
                ;
#endif
            // <-- missing break or fall through
            case OPEN_CREATE:
                flags = O_WRONLY | O_CREAT | O_TRUNC;
                break;
            default:
                FW_ASSERT(0,(NATIVE_INT_TYPE)mode);
                break;",bug,https://github.com/nasa/fprime/issues/490
Remove in-source build of codegen templates,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| Autocoder, build |
---
## Feature Description

Currently, the `codegen` templates are build in-source under `Autocoders/Python/src/fprime_ac/generators/templates/**/**.py`. Although, since there's a plan to ditch Autocoder in favor of F', maybe this becomes obsolete soon.

## Rationale

It's bad to mix sources with builds...",non-bug,https://github.com/nasa/fprime/issues/2043
Add OpenSSF Scorecard & Best Practices badges,"| | |
|:---|:---|
|**_F´ Version_**| latest |
|**_Affected Component_**|  |
---
## Feature Description

Added the OpenSSF [Scorecard](https://github.com/ossf/scorecard) and [Best Practices](https://github.com/coreinfrastructure/best-practices-badge)  badge to the repository to indicate to users and contributors the project's level of compliance with OpenSSF security best practices.

## Rationale

The OpenSSF Scorecard & Best Practices badges are a way for open source projects to show their level of compliance with OpenSSF security best practices.

This can help promote trust in the project and encourage contributions from the community. In addition, adding the OpenSSF badges can benefit the project itself, helping it to identify and correct potential security issues and achieve a higher level of compliance.

Extract from the Scorecard GitHub page

> Scorecards is an automated tool that evaluates a number of important heuristics (""controls"") associated with software security and assigns each control a score from 0 to 10. You can use these scores to understand specific areas for improvement to strengthen your project's security posture.


Some links for more information on how to set them up:

- Scorecard GitHub Action: https://github.com/ossf/scorecard-action
- https://openssf.org/blog/2022/09/08/show-off-your-security-score-announcing-scorecards-badges/
- https://securityscorecards.dev/
- https://bssw.io/items/openssf-best-practices-badge-program

",non-bug,https://github.com/nasa/fprime/issues/1838
LinuxGPIODriver Crashes on Failed To Open,"Several fixes:

1. `unexport` on shutdown
2. Fix crash when the pin is not opened correctly.",bug,https://github.com/nasa/fprime/issues/2249
`fprime-util impl` should generate fully qualified header guards ,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

While working on a custom `Framer.fpp` I am hand-editing the autogenerated `Framer.hpp-template` header guards to be fully-qualified to avoid accidentally `#ifndef`'ing too liberally. If there exists a `Foo.Framer` and `Bar.Framer` there will be a collision if the autogenerated header guards are taken as-is. 

For example, my `Framer.fpp` within `module Foo` generates the same guards as `Framer.fpp` within `module Bar`:
```cpp
#ifndef Framer_HPP
#define Framer_HPP
...
#endif 
```

It may be best to instead generate:
```cpp
#ifndef Foo_Framer_HPP
#define Foo_Framer_HPP
...
#endif 
```

## Rationale

This is a bit of a mix between a feature request / bug report. It's somewhat reasonable to expect hand-editing these `#ifndef` guards but if this can be autogenerated safely to begin with that would be nice to have.",non-bug,https://github.com/nasa/fprime/issues/1943
"Refactor Os::File, Directory, and FileSystem into a CMake Selection","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Os::File -> CMake selection

1. Break into front-end and back-end.
2. Register as selection
3. Select as selection in platform
",non-bug,https://github.com/nasa/fprime/issues/2457
Write script to run flight sequences through ground test API,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

1) Send command
2) Wait for completion EVR
3) Use delays as specified in time prefixes to command
4) Conditionals, etc (limited, doesn't know flight values for variables)
5) Next command

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/1866
GDS command argument type-checking edge cases,"| | |
|:---|:---|
|**_F´ Version_**| 3.3.2 |
|**_Affected Component_**|  GDS |
---
## Problem Description

There is an issue when type-checking an argument in the GDS (see [here](https://github.com/fprime-community/fprime-gds/blob/0604b543ccfbb0faa2c5560c6598e4e54572a3a5/src/fprime_gds/flask/static/addons/commanding/arguments.js#L242-L251))
If the argument of your command is a enum or struct, type.name will carry the value of the C++ type, which will be ModuleName::EnumName. Now say the name of the module is Foo, that gets you Foo::MyEnum, so the argument.type.name[0] == 'F' condition will be true. So this kind of restricts the usage of module names that start with U, I or F.

## How to Reproduce

1. Create a module/deployment with a name that starts with an F, I or U
2. Create a custom type (say an enum) in said module, and a command that uses that type as an argument
3. Sending a command will fail to validate the argument

## Expected Behavior

Should validate the argument successfully.

## Proposed solution

Abstract away the logic of type checking in a function, which will actually check whether the type name matches U8, U16, U32 etc...
",bug,https://github.com/nasa/fprime/issues/2282
BufferManager: Make Refactor More Efficient,"_Originally posted by @bocchino in https://github.com/nasa/fprime/pull/283#discussion_r533862652_

This code is using more memory than it needs to. The `bufferMem` pointer is stored twice. The other information in the `Fw::Buffer` can be computed when the buffer is allocated. It doesn't need to be stored in the reserved memory area.

_Originally posted by @bocchino in https://github.com/nasa/fprime/pull/283#discussion_r533887917_

Also, it's a good idea to assert that `currStruct` is in bounds before using it to access `m_buffers`.",non-bug,https://github.com/nasa/fprime/issues/340
Add A Verify F´  Tools Version at Install,"Users following tutorials get confused when the prompts do not match the tool output.  We should add a step to verify tool versions.

In the write-up for the tutorial, add a step to run:

```
fprime-util --help
```

And verify the version matches the expected version of the tutorial write-up.  If not, add a note saying some prompts may differ.",non-bug,https://github.com/nasa/fprime/issues/2234
`Components` folder doesn't exist in newly created project folder,"| | |
|:---|:---|
|**_F´ Version_**| v3.2.0 |
|**_Affected Component_**|   |
---
## Problem Description

After following [Hello World: Creating an F´ Project](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/NewProject.html) and starting on [Creating the Hello World Component](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/HelloWorld.html#creating-the-hello-world-component), tutorial states ""The project contains a Components/ directory to create components in."", but no such Components directory exists

## How to Reproduce

1. generate F' Project as per [Hello World: Creating an F´ Project](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/NewProject.html)

## Expected Behavior

`MyProject` should contain a `Components/` directory
",bug,https://github.com/nasa/fprime/issues/2132
Multi-Com Component,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We are soon to get a com stub and com queue component.  However, when testing it can be nice to have a multi-com component.  This would allow a `com stub + ipv4` for testing, `radio + radio driver` for com testing without needing to edit or change the topology.

This component should:
1. Allow for multiple ""Com Adapter Interface"" outputs to multiple Com Adapters
2. Support commands to enable/disable each interface
3. Detect which interfaces are ready
4. Only send to a ""ready"" interface that is also enabled
5. Serial send buffer to each interface, using the deallocation to signal the next
6. Responsibly deallocate buffer after final send.",non-bug,https://github.com/nasa/fprime/issues/1695
`TcpServer` Retry Is Broken,"`TcpServer` retries the wrong thing on port unavailable failure.

If the `TcpServer` call to `bind` fails for port unavailable fails, the system repeats a retry on `accept` on a dead file descriptor.  In short the process is:

1. In `startup`:
  1. `bind` 
  2. `listen`
2. In `openProtocol`
  1. `accept` <-- retry is here

Instead that should be:
1.`startup`:
  1. `bind` 
  2. `listen`
2. `openProtocol`
  1. (call startup) <-- retry when not started up
  2. `accept` <-- retry after successful startup ",bug,https://github.com/nasa/fprime/issues/2244
Add CMake formatter,"| | |
|:---|:---|
|**_F´ Version_**| latest | 
|**_Affected Component_**| None |
---
## Feature Description

Add [cmake-format](https://github.com/cheshirekow/cmake_format) to the project. See https://github.com/nasa/fprime/pull/1820 for more information.

## Rationale

To homogenize all CMake files according to the policy dictated in a `.cmake-format.yml` file.
",non-bug,https://github.com/nasa/fprime/issues/1826
STest produces warnings when cross compiling for bare metal,"| | |
|:---|:---|
|**_F´ Version_**| e289647d89454cd1fa0e2ee1e06e2873885932b4|
|**_Affected Component_**|  STest  |
---
## Problem Description

I receive the following compiler errors when I cross compile with my bare metal compiler.

```
fprime/STest/STest/Random/Random.cpp:81:44: warning: format '%u' expects argument of type 'unsigned int', but argument 2 has type 'U32' {aka 'long unsigned int'} [-Wformat=]
   81 |         printf(""[STest::Random] Read seed %u from file\n"", seedValue);
      |                                           ~^               ~~~~~~~~~
      |                                            |               |
      |                                            unsigned int    U32 {aka long unsigned int}
      |                                           %lu
fprime/STest/STest/Random/Random.cpp:85:49: warning: format '%u' expects argument of type 'unsigned int', but argument 2 has type 'U32' {aka 'long unsigned int'} [-Wformat=]
   85 |         printf(""[STest::Random] Generated seed %u from system time\n"", seedValue);
      |                                                ~^                      ~~~~~~~~~
      |                                                 |                      |
      |                                                 unsigned int           U32 {aka long unsigned int}
      |                                                %lu
fprime/STest/STest/Random/bsd_random.c:287:36: error: format '%ld' expects argument of type 'long int', but argument 3 has type 'size_t' {aka 'unsigned int'} [-Werror=format=]
  287 |       ""random: not enough state (%ld bytes); ignored.\n"", n);
      |                                  ~~^                      ~
      |                                    |                      |
      |                                    long int               size_t {aka unsigned int}
      |                                  %d
```
## How to Reproduce

1. Include STest into one of your components.
2. Add an STest dependency in your CMakeLists.txt file.
3. Cross compile with bare metal compiler.

## Expected Behavior

I do not expect these warnings to occur.",bug,https://github.com/nasa/fprime/issues/1780
Sanitizer Disable Does Not Work,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Generating with `-DENABLE_SANITIZER_ADDRESS=OFF` does not work.  Only the `--disable-sanitizer` to disable everything.  The culprit is:

https://github.com/fprime-community/fprime-tools/blob/c15253c98ffc816bcca24db43f24c4c070b7c5ff/src/fprime/fbuild/cli.py#L55-L59

> Notice how the sanitizers are forced-on. 

The fix is in several stages:
1. In CMake default to sanitizers should be == `BUILD_TESTING` (default ""ON"" when testing).
2. Above code should read ""if disable"" set the ENABLES ""OFF""
3. Take no action on disable sanitizers not set

This way the sanitizers are explicitly turned off, or left to defaults.
",bug,https://github.com/nasa/fprime/issues/2678
[ImportError: libxslt.so.1: cannot open shared object file: No such file or directory] while building unit tests for raspberrypi,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**| Ref/SignalGen |
---
## Problem Description

Encountered the following traceback error while attempting to build the `Ref/SignalGen` unit tests for raspberry pi
```
(fprime-venv) pi@raspberrypi:~/fprime/Ref/SignalGen$ fprime-util build raspberrypi --ut
[WARNING] Failed to find settings file: /home/pi/fprime/Ref/settings.ini
[ 10%] Built target Fw_Cfg
[ 20%] Built target codegen
[ 20%] Generating DeserialStatusEnumAc.hpp, DeserialStatusEnumAc.cpp
Traceback (most recent call last):
  File ""/home/pi/fprime/Autocoders/Python/bin/codegen.py"", line 17, in <module>
    from lxml import etree
ImportError: libxslt.so.1: cannot open shared object file: No such file or directory
make[3]: *** [F-Prime/Fw/Types/CMakeFiles/Fw_Types.dir/build.make:74: F-Prime/Fw/Types/DeserialStatusEnumAc.hpp] Error 1
make[2]: *** [CMakeFiles/Makefile2:18649: F-Prime/Fw/Types/CMakeFiles/Fw_Types.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:31314: Ref/SignalGen/CMakeFiles/Ref_SignalGen_ut_exe.dir/rule] Error 2
make: *** [Makefile:11736: Ref_SignalGen_ut_exe] Error 2
[ERROR] CMake erred with return code 2

```

## How to Reproduce

On Ubuntu:
1. checkout https://github.com/capsulecorplab/fprime/commit/6f864e0a73f8372cfcc851306bbc96b18ae88b84
2. `cd` into `fprime/Ref/`
3. generate unit tests for raspberrypi, using `fprime-util generate raspberrypi --ut`
4. copy `fprime` directory to raspberrypi

On raspberry pi:
5. `cd` into `fprime/Ref/SignalGen`
6. build unit tests with `fprime-util build raspberrypi --ut`

## Expected Behavior

Should build unit tests
",bug,https://github.com/nasa/fprime/issues/1446
`docs/Tutorials/GettingStarted/Tutorial.md` refers to removed `install` command,"| | |
|:---|:---|
|**_F' Version_**|3.0|
|**_Affected Component_**| docs/Tutorials/GettingStarted/Tutorial.md |
---
## Problem Description

The [tutorial](https://github.com/nasa/fprime/blob/master/docs/Tutorials/GettingStarted/Tutorial.md) refers to the `""install""` command in the 'Build Ref Deployment' section (bold mine to highlight the issue):

> Note: the user almost always wants to run the ""**install**"" command on deployments. This builds the binary like ""build"" but also copies the binary to the deployments ""bin"" directory, i.e. fprime/Ref/bin. **Install is described below.**
> 
> This process also built the Dictionaries for the project and places the dictionary in the ""Top"" folder of the deployment. This happens any time the ""**install**"" or ""build"" command are run on a deployment.
> 
> The user can also build a component or deployment for a cross-compile by specifying the toolchain. A previous generate for that toolchain should have been run. Again for deployments, **the user typically should run ""install"", see below**. These steps require the setup described here: [RPI](https://github.com/nasa/fprime/blob/master/RPI/README.md)

The `install` command was removed in 20b5f2950c5f264a1be3d47e0e94a69518d7aeca. The first tagged version that includes this commit is v2.0.0~193^2. 

## How to Reproduce

1. Running the `install` command as implied by the text in docs/Tutorials/GettingStarted/Tutorial.md results in an error message (output of intermediate tools hidden for clarity):
```
$ git clone https://github.com/nasa/fprime
$ pip install -r fprime/requirements.txt
$ cd fprime/Ref
$ fprime-util generate
$ fprime-util build
$ fprime-util install
usage: fprime-util [-h]
                   {build,impl,check,generate,purge,fpp-check,hash-to-file,info,new}
                   ...
fprime-util: error: argument command: invalid choice: 'install' (choose from 'build', 'impl', 'check', 'generate', 'purge', 'fpp-check', 'hash-to-file', 'info', 'new')
```

## Expected Behavior

The tutorial should only refer to the build command, not the install command. Any capabilities in the install command that are now present in the build command should be rephrased to indicate so.",non-bug,https://github.com/nasa/fprime/issues/1877
Fw::Buffer deserialize does not update m_serialize_repr buffer pointers and size,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0 |
|**_Affected Component_**| n/a  |
---
## Problem Description

When deserializing an instance of Fw::Buffer, the member function does not update `Fw::ExternalSerializeBuffer m_serialize_repr`.

## How to Reproduce

1. Create Fw::Buffer instance
2. serialize it
3. deserialize it
4. Try to use `m_serialize_repr` via `getSerializeRepr()` method. All operations fail because it doesn't see the buffer.
5. Can be seen by inspection of `deserialize()` member function

## Expected Behavior

The `deserialize()` method should update `m_serialize_repr`.
",bug,https://github.com/nasa/fprime/issues/1332
Segmentation fault for Parameter.xml of passive component,"| | |
|:---|:---|
|**_NASA-v1.5.3_**| |
|** Passive Component **|   |
---
## Problem Description

I have build a Passive component of ""MyModule"" with instance myModuleInstance and a Parameter.
The application is building as expected, however I receive following error when executing the binary:
```
Fprime/Fw/Obj/SimpleObjRegistry.cpp"": Line: 63 
Segmentation fault (core dumped)
```

It appears that this segmentation fault is related to the registration of the Parameter interface. 
The parameter is given as Parameters.xml file as shown below)


## Problem Trace
Cal hierarchy bottom up 

I traced the error to the `Fprime/Fw/Obj/SimpleObjRegistry.cpp`  
```
    void SimpleObjRegistry::regObject(ObjBase* obj) {
        FW_ASSERT(this->m_numEntries < FW_OBJ_SIMPLE_REG_ENTRIES);
        this->m_objPtrArray[this->m_numEntries++] = obj; // THIS ASSIGNMENT FAILS
    }
```
where  
`m_numEntries` == 1432687193 and therefore appears to be unitialized.   

regObject is called in build-fprime-automatic-native/MyModule/MyModuleComponentAc.cpp:  
```
  NATIVE_INT_TYPE MyModuleComponentBase ::
    getNum_ParamGet_OutputPorts(void)
  {
    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        this->m_ParamGet_OutputPort
    );
  }
```

getNum_ParamGet_OutputPorts is called in build-fprime-automatic-native/MyModule/MyModuleComponentAc.cpp (`voidMyModuleComponentBase ::
    init(NATIVE_INT_TYPE instance)`):  
```
    // Initialize output port ParamGet
    for (
        NATIVE_INT_TYPE port = 0;
        port < this->getNum_ParamGet_OutputPorts();
        port++
    ) {
      this->m_ParamGet_OutputPort[port].init();
```
`voidMyModuleComponentBase :: init` is called in `controllerManipulator.init(0)` which is called in `constructApp()`  

## Related File Content

Topology/Topology.cpp
```
MyModule::MyModuleComponentImpl myModuleInstance(FW_OPTIONAL_NAME(""myModuleInstance""));
...
myModuleInstance.init(0); 
```



MyModuleComponentAi.xml: (the Cmd ports are remainders as it was originally an active component)

```
<component name=""MyModule"" kind=""passive"" namespace=""MyModule"" modeler=""true"">
    <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
    <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
    <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
    <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
    <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
    <import_dictionary>MyModule/Parameters.xml</import_dictionary>
    <ports>
        <port name=""CmdStatus"" data_type=""Fw::CmdResponse""  kind=""output"" role=""CmdResponse""    max_number=""1"">
        </port>
        <port name=""Time"" data_type=""Fw::Time""  kind=""output"" role=""TimeGet""    max_number=""1"">
        </port>
        <port name=""Tlm"" data_type=""Fw::Tlm""  kind=""output"" role=""Telemetry""    max_number=""1"">
        </port>
        <port name=""CmdReg"" data_type=""Fw::CmdReg""  kind=""output"" role=""CmdRegistration""    max_number=""1"">
        </port>
        <port name=""CmdDisp"" data_type=""Fw::Cmd""  kind=""input"" role=""Cmd""    max_number=""1"">
        </port>
    </ports>
</component>
```

Parameters.xml
```
<parameters>
    <parameter id=""0x00"" set_opcode=""0x001"" save_opcode=""0x002"" name=""NOOP_ENUM"" data_type=""ENUM"" default = ""MEM2"">
        <enum name=""SomeEnum"">
            <item name=""MEM1""/>
            <item name=""MEM2"" value=""7"" comment=""A comment""/>
            <item name=""MEM3"" value=""15""/>
        </enum>
    	<comment>
    	A test parameter
    	</comment>
    </parameter>
</parameters>   
```



## Expected Behavior

no segmentation fault",bug,https://github.com/nasa/fprime/issues/1062
FPP v2.0.0: Impl Template Integration,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Depends on #2198 ",non-bug,https://github.com/nasa/fprime/issues/2204
Update F´ For FPP Versions Post v2.0.1,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

FPP versions past v2.0.1 require `record` -> `$record` and `send` -> `$send`",bug,https://github.com/nasa/fprime/issues/2452
Remove local_time from ActiveTextLogger,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`ActiveTextLogger` makes a Posix system call to convert time to a local workstation time.

This code should be removed so it can be run on non-posix platforms:

https://github.com/nasa/fprime/blob/devel/Svc/ActiveTextLogger/ActiveTextLogger.cpp#L84

## Expected Behavior

`ActiveTextLogger` should just print the seconds/subseconds field.
",non-bug,https://github.com/nasa/fprime/issues/2815
Better test identifiers using decorators,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
When a new test case [is started](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/testing_fw/api.py#L85), the API user can specify a `case_id` that will be used in the logs to identify the current test case without scrolling to the test case header. Future uses of the API should investigate using decorators to specify an ID to put in this column. Present tests just use a counter and assign a number to each test case.",non-bug,https://github.com/nasa/fprime/issues/2648
Any Recommendations for Radiation Tolerant Programming or applications,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Does any part of this software do anything specific to provide radiation tolerant configuration or error checking?

## Rationale

Would like to know if such coding is needed or what the effects would be. Was radiation protection a concern in this code base, or is it not a concern of missions as short as Ingenuity.
",non-bug,https://github.com/nasa/fprime/issues/438
Migrate FPP issues to F´ core repo,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Migrate issues from https://github.com/fprime-community/fpp to https://github.com/nasa/fprime, add appropriate labels, come up with a scheme to open new issues with correct labels (also for GDS and Tools)

## Rationale

Centralize issues.
",non-bug,https://github.com/nasa/fprime/issues/2510
Update serialization and deserialization of enum types,"The enum type is always serialized and deserialized to a single type (the Python ‘i’ type):
 
https://github.com/fprime-community/fprime-tools/blob/a65f0140e0e1f0ba40522767839059a78eaa3067/src/fprime/common/models/serialize/enum_type.py#L72-L100
 
We need to revise this code as follows:
 
1. Store the integer width in the Python enum (fprime-tools).
2. Represent the integer width in the AppDictionary.xml (nasa/fprime).
3. Get the integer width from the AppDictionary.xml when creating the Python enum (fprime-gds).
4. Use the stored integer width to serialize and deserialize the enum (fprime-tools).

Logging the issue here, but three repos are involved (fprime-tools, fprime-gds, and fprime).


See: https://github.com/fprime-community/fprime-tools/issues/17",non-bug,https://github.com/nasa/fprime/issues/2229
U8* Items Aren't Handled Well,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**|  U8* autocoded output  |
---
## Problem Description

Using a U8* as an argument to a port causes bad autocoding in UTs.  Using a U8* in a complex type breaks.  We should have a consistent approach to U8*.
",bug,https://github.com/nasa/fprime/issues/520
fprime-util fpp-check interaction issue,"| | |
|:---|:---|
|**_F´ Version_**|master & devel|
|**_Affected Component_**|fprime-util |
---
## Problem Description

When following the math component tutorial, section 6.2, running the command `fprime-util fpp-check -u unconnected.txt` causes an error:

``` bash
fpp-check
/Users/lsoares/fprime/Drv/BlockDriver/Tlm.fppi: 2.1
telemetry BD_Cycles: U32 id 0
^
error: module member expected
```

## How to Reproduce

1. Build master or devel branch of fprime as described by the math component tutorial
2. `cd Ref/Top`
3. `fprime-util fpp-check -u unconnected.txt`

## Expected Behavior

The `unconnected.txt` should be populated with the unconnected ports of the project.
",bug,https://github.com/nasa/fprime/issues/1801
FPRIME_PLATFORM Not Used in `restrict_platforms`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`FPRIME_PLATFORM` not `CMAKE_SYSTEM_NAME` should be used in `restrict_platforms` as `platform.cmake` sets that virable as expected and toolchains may be listed by the standard CMake ""Generic"" name.",bug,https://github.com/nasa/fprime/issues/2414
F´ CLI Does Not Work,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The F´ CLI does not work.  It crashes loading the dictionary. Need to:

1. Fix crash
2. Load default dictionary
3. Consolidate CLI processing with `fprime-gds`
4. Add an automatic test to esnure `fprime-cli` continues to function

",bug,https://github.com/nasa/fprime/issues/1443
Fix Svc::Deframer,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**|   |
---
## Problem Description

The deframer component has several short-comings:

1. Deframing Protocol doesn't expect nor allow consuming of data.  It should leave the protocol to deframe data.
2. Asserts for ""properly working"" 
3. Unit test is insufficient for properly testing the deframer
4. Unit test is incorrect, violates expectations of class
5. ""Needed"" is an unnecessary output given the status ""more needed""
6. Error cases are force rotate-1 and restart, which may not be needed for some protocols.
7. The interface needs to be more cleanly defined too:
  1. It is dangerous to let users call allocate and route as memory leaks can occur if done improperly
  2. Consumption vs peaking is unclear
  3. Is it one call to N or one call to 1 
",bug,https://github.com/nasa/fprime/issues/845
fprime-util generate hides FPP error reports,"If an FPP error occurs during `fprime-util generate`, sometimes the F Prime tools don't fully report the error information provided by the FPP tools. For example, here is a manufactured error (introducing a duplicate port Fw.Time in Fw/Cmd/Cmd.fpp) that causes a failure during the generation step:
```
[I] bocchino@MT-306179 ~/J/T/F/fprime (devel)> echo 'module Fw { port Time }' >> Fw/Cmd/Cmd.fpp
```
Here is what happens when I run `fprime-util generate` after injecting this error:
```
[I] bocchino@MT-306179 ~/J/T/F/fprime (devel)> fprime-util generate
...
-- Performing CMake source prescan
-- Performing CMake source prescan - DONE
-- Generating FPP location index
-- Generating FPP location index - DONE
-- Generating FPP dependency caches
[ERROR] Failed to run '/Users/bocchino/JPL/Tools/FPrime/fprime/fprime-venv/bin/fpp-depend /Users/bocchino/JPL/Tools/FPrime/fprime/build-fprime-automatic-native/locs.fpp /Users/bocchino/JPL/Tools/FPrime/fprime/Fw/Buffer/Buffer.fpp -d direct.txt -m missing.txt -f framework.txt -g generated.txt -i include.txt'
CMake Error at cmake/target/fpp_locs.cmake:64 (message):
-- Configuring incomplete, errors occurred!
  Failed to run fpp-depend in parallel mode
See also ""/Users/bocchino/JPL/Tools/FPrime/fprime/build-fprime-automatic-native/CMakeFiles/CMakeOutput.log"".
Call Stack (most recent call first):
See also ""/Users/bocchino/JPL/Tools/FPrime/fprime/build-fprime-automatic-native/CMakeFiles/CMakeError.log"".
  cmake/target/fpp_locs.cmake:82 (fpp_depend_in_parallel)
  cmake/target/fpp_locs.cmake:96 (generate_dependencies)
  cmake/target/target.cmake:67 (fpp_locs_add_global_target)
  cmake/target/target.cmake:67 (cmake_language)
  cmake/API.cmake:428 (setup_global_target)
  cmake/FPrime.cmake:73 (register_fprime_target)
  CMakeLists.txt:12 (include)


[ERROR] CMake erred with return code 1. Partial build cache remains. Run purge to clean-up.
```
It does tell me what FPP command failed. However, I have to rerun that command to see the actual error:
```
[I] bocchino@MT-306179 ~/J/T/F/fprime (devel) [1]> /Users/bocchino/JPL/Tools/FPrime/fprime/fprime-venv/bin/fpp-depend /Users/bocchino/JPL/Tools/FPrime/fprime/build-fprime-automatic-native/locs.fpp /Users/bocchino/JPL/Tools/FPrime/fprime/Fw/Buffer/Buffer.fpp -d direct.txt -m missing.txt -f framework.txt -g generated.txt -i include.txt
fpp-depend
/Users/bocchino/JPL/Tools/FPrime/fprime/build-fprime-automatic-native/locs.fpp: 70.24
locate port Fw.Time at ""../Fw/Time/Time.fpp""
                       ^
error: inconsistent location path /Users/bocchino/JPL/Tools/FPrime/fprime/Fw/Time/Time.fpp
/Users/bocchino/JPL/Tools/FPrime/fprime/build-fprime-automatic-native/locs.fpp: 69.24
locate port Fw.Time at ""../Fw/Cmd/Cmd.fpp""
                       ^
previous path is /Users/bocchino/JPL/Tools/FPrime/fprime/Fw/Cmd/Cmd.fpp
```
It would be better if this error were reported in the initial error report.",bug,https://github.com/nasa/fprime/issues/1633
Add more accurate error handling for the `SystemResources` component,"| | |
|:---|:---|
|**_F´ Version_**| latest |
|**_Affected Component_**| Os/SystemResources |
---
## Feature Description

It is necessary to add more fine-grained error handling for the SystemResources component.
Currently, there are only two return codes:

```cpp
enum SystemResourcesStatus {
    SYSTEM_RESOURCES_OK,     //!< Call was successful
    SYSTEM_RESOURCES_ERROR,  //!< Call failed
};
```

## Rationale

It is more useful to define separate enumeration values for each possible type of error.
Otherwise, if an error occurs, we don't know exactly where it came from.
",non-bug,https://github.com/nasa/fprime/issues/1837
Insufficient permissions to set task priority warning,"| | |
|:---|:---|
|**_F´ Version_**| [91c578e](https://github.com/nasa/fprime/commit/91c578ee37c01ba92e556dbca0287d82f9f18b95) (latest `devel` commit) |
|**_Affected Component_**|  Task thread priorities |
---
## Problem Description

When running the F' system reference deployment on stable (Bullseye) Debian there are ""Insufficient Permissions"" warnings related to task threads. There's also an F'-specific message warning developers that future releases will fail under these conditions.

`uname -a` reports:
```
Linux e29ca9579ba8 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64 GNU/Linux
```

Upon starting a deployment each thread reports the following warning:
```
[WARNING] High task priority of 140 being clamped to 99
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_blockDrv. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions

[WARNING] Task priority set and permissions unavailable. Discarding priority.
[WARNING] High task priority of 100 being clamped to 99
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_camera. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions

[WARNING] Task priority set and permissions unavailable. Discarding priority.
pthread_create: Insufficient permissions to create thread. May not set thread priority without permission. Operation not permitted
[WARNING] Insufficient Permissions:
[WARNING] Insufficient permissions to set task priority or set task CPU affinity on task TP_chanTlm. Creating task without priority nor affinity.
[WARNING] Please use no-argument <component>.start() calls, set priority/affinity to TASK_DEFAULT or ensure user has correct permissions for operating system.
[WARNING]      Note: future releases of fprime will fail when setting priority/affinity without sufficient permissions

...
```

While these are currently just warnings it sounds like this will eventually be fatal. I am curious if it is possible to properly set these ""permissions"" when running on Debian?

## How to Reproduce

This can be reproduced by compiling and running the F' system reference with the following steps:
1. `fprime-util generate`
2. `fprime-util build`
3. `build-artifacts/Linux/bin/Ref`
4. See warnings above

## Expected Behavior

Maybe this is expected under Debian but if so then I think the `Note: future releases of fprime will fail ...` note should likely be changed?
",bug,https://github.com/nasa/fprime/issues/1936
Upgrade Ref to Use IPv4 Drivers and Framer/Deframer,"| | |
|:---|:---|
|**_F´ Version_**| 1.5.3 |
|**_Affected Component_**| Ref |
---
## Feature Description

Update Ref to use the latest components for the ground interface chain. This was dependent on PRs that have now finally been merged.

## Rationale

We want to baseline these components and the unit-PRs have been merged.
",non-bug,https://github.com/nasa/fprime/issues/515
GDS Config,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| Gds |
---
## Feature Description

GDS doesn't have a clean way of configuring.  This should be improved.

## Rationale

Right now certain settings are hard to make in the GDS.
",non-bug,https://github.com/nasa/fprime/issues/537
Add CI workflow to validate cookiecutter templates,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add CI workflow to https://github.com/nasa/fprime-tools to validate the cookiecutter templates. Something in the likes of

```
fprime-util new --project
cd project
fprime-util new --deployment
cd deployment
fprime-util generate
fprime-util build
```

And probably something for component as well. We probably want to
```
cd project/fprime
git checkout devel
```
too.

## Rationale

Make sure cookiecutter templates don't go out of date without needing to test locally for each release.
",non-bug,https://github.com/nasa/fprime/issues/2387
Write loaders for new dictionary,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

A description of the problem with sufficient detail to understand the issue.

## How to Reproduce

1. 
2.
3.

## Expected Behavior

A description of the expected behavior.
",non-bug,https://github.com/nasa/fprime/issues/2399
Documentation: Rewrite Integration and Test Guide,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The integration and test API guide is incorrect. We need to rewrite large parts of it to follow modern practices.",non-bug,https://github.com/nasa/fprime/issues/1902
F´  Project Tool,"Add a tool to `fprime-util` to work with shared project:

1. Clone and install tool
2. `requirements.txt` to project
3. Update tool (may be part of 1)",non-bug,https://github.com/nasa/fprime/issues/2251
Cross compile defaults to an incorrect toolchain,"| | |
|:---|:---|
|**_F´ Version_**| v3.4.3| 
|**_Affected Component_**| n/a |
---
## Problem Description

F' is failing to find the cross compile toolchain and defaults to /usr/bin/cc. This should show an error.

## Context / Environment

Executed `fprime-util version-check`

```
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.4.0-172-generic-x86_64-with-glibc2.29
Python version: 3.8.10
CMake version: 3.16.3
Pip version: 24.0
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

Executed `fprime-util generate aarch64-linux -DCMAKE_DEBUG_OUTPUT=ON`

```
-- [arm-linux] Assembler:    CMAKE_ASM_COMPILER-NOTFOUND
-- [arm-linux] C   Compiler: CMAKE_C_COMPILER-NOTFOUND
-- [arm-linux] CXX Compiler: CMAKE_CXX_COMPILER-NOTFOUND
-- [arm-linux] Assembler:    CMAKE_ASM_COMPILER-NOTFOUND
-- [arm-linux] C   Compiler: CMAKE_C_COMPILER-NOTFOUND
-- [arm-linux] CXX Compiler: CMAKE_CXX_COMPILER-NOTFOUND
-- The C compiler identification is GNU 9.4.0
-- The CXX compiler identification is GNU 9.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
```

## How to Reproduce

1. Attempt to cross compile a project on this platform. (led-blinker was used in this case)
",bug,https://github.com/nasa/fprime/issues/2563
It may be a good idea to toggle these telemetry reports on/off via commands.,"_Originally posted by @cruise2coast in https://github.com/nasa/fprime/pull/283#discussion_r533802384_

It may be a good idea to toggle these telemetry reports on/off via commands. By default, these telemetry channels could be turned off and not reported to avoid constantly generating telemetry packets. When needed, these channels can be turned on for reporting via a command. This would help control telemetry packet generation/output especially in radio RF bandwidth constrained environments.

_Originally posted by @bocchino in https://github.com/nasa/fprime/pull/283#discussion_r533863034_

A related issue is that the previous version had a mechanism for suppressing out-of-memory warnings, so repeated requests wouldn't cause spam. I don't think that mechanism has been incorporated here. Maybe add event throttling to that event?",non-bug,https://github.com/nasa/fprime/issues/342
FPrime ground system bool parsing,"| | |
|:---|:---|
|**_F´ Version_**| 3.x |
|**_Affected Component_**| n/a  |
---
## Problem Description

If a command argument is specified as boolean and an integer is sent, the GDS gives a cryptic ""unknown error"" message.

## How to Reproduce

1. Specify a command argument as `bool`
2. Fill in the argument with an non-boolean (can be integer, float, character...)
3. Red Text `Unknown Error` appears beneath command field.

## Expected Behavior

Should give an error saying it wasn't `true` or `false`.
",bug,https://github.com/nasa/fprime/issues/2086
fprime-util ignores user requested CMAKE_BUILD_TYPE,"| | |
|:---|:---|
|**_F´ Version_**| 2.0 |
|**_Affected Component_**| CMake, fprime-tools  |
---
## Problem Description

## Issue:
Currently it is not possible to export symbols for the sake of debugging when building a deployment (not ut) using fprime-util generate.

## Root cause:
Conflicting logic

The following lines in the fprime-tools builder assign `BUILD_NORMAL` or `BUILD_TESTING` as the build type without checking  the CMAKE_BUILD_TYPE flag provided by the user:

https://github.com/fprime-community/fprime-tools/blob/b8c910283479b7948e4b34c8ed4046da0c4f1d51/src/fprime/util/build_helper.py#L317-L325
```c++
def utility_entry(args):
    """"""Main interface to F prime utility""""""
    parsed, cmake_args, make_args, parser = parse_args(args)
    cwd = Path(parsed.path)

    build_type = BuildType.BUILD_NORMAL
    if parsed.ut:
        build_type = BuildType.BUILD_TESTING
```

Therefore the `CMAKE_BUILD_TYPE` will be always either `Release` or `Testing`.

Since the `CMAKE_BUILD_TYPE` is always set by the fprime-util builder the following CMake lines will ignore user provided build type flag:
https://github.com/nasa/fprime/blob/46e71784484f773682bd32c2d25e482d5c4ff5bb/cmake/Options.cmake#L110-L115


## How to Reproduce

From the Ref deployment folder run:
1. fprime-util generate -DCMAKE_BUILD_TYPE=Testing
or 
2. fprime-util generate -DCMAKE_BUILD_TYPE=Debug

## Expected Behavior

User should be able to export Debug symbols on deployments using fprime-util and `CMAKE_BUILD_TYPE` flag.
",bug,https://github.com/nasa/fprime/issues/838
fpp-* Functions of `fprime-util` Do Not Function,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| fprime-util/fpp integration  |
---
## Problem Description

A change in the FPP memoization cut `fprime-util` from the data needed to run fpp tools

## Expected Behavior

```
fprime-util fpp-check
```

Should run with no errors.",bug,https://github.com/nasa/fprime/issues/1335
Prescan Doesn't Pass in Arbitrary -D flags,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Prescan stage doesn't pass-in arbitrary -D flags to underlying run.",bug,https://github.com/nasa/fprime/issues/1642
Update Tutorials For #1994,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The tutorials can be simplified based on number #1994.   Also, this would effect #2001 and #1999 and influence #2000.",non-bug,https://github.com/nasa/fprime/issues/2003
EightyCharString to FixedLengthString,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

As part of the C++ improvements we should take instances of EightyCharString and replace them with the configurable FixedLengthString.",bug,https://github.com/nasa/fprime/issues/801
`fprime-bootstrap` Does Not Contain Phase Configuration Code,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Ref does not contain the phase configuration code and as such, nor does `fprime-bootstrap new --project`
",bug,https://github.com/nasa/fprime/issues/2820
JSON code generation for dictionary,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Generate JSON from the dictionary data structure. The code generation should follow the specification given here: https://github.com/nasa/fprime/blob/devel/docs/Design/fpp-json-dict.md.

Copied from https://github.com/fprime-community/fpp/issues/377

",non-bug,https://github.com/nasa/fprime/issues/2479
Revive ZeroMQ middleware layer,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Get rid of the ThreadedTcpServer middleware layer and replace it with the ZeroMQ implementation. This would get rid of some overhead and old code, as well as solve some issues (e.g. https://github.com/nasa/fprime/issues/2520)
",non-bug,https://github.com/nasa/fprime/issues/2529
`fprime-util build` fails to regenerate binary if only linker script changes,"| | |
|:---|:---|
|**_F´ Version_**| 3.1.1 |
|**_Affected Component_**| Linker |
---
## Problem Description

If only the linker script is updated, `fprime-util build` will not generate a new binary. A source file must be changed.

## How to Reproduce

1. Edit `cmake/ldscripts/lscript.ld`
2. Run `fprime-util build`
3. Observe that the binary is stale. For example, you can move a section like `.special_user_data` to a different memory region (e.g. from SRAM to Flash) using the linker script and then check its location with `mb-objdump -tC </path/to/binary>`

## Expected Behavior

Changes to the linker script are important and can fundamentally alter the binary. The binary should be regenerated when changes are made.
",non-bug,https://github.com/nasa/fprime/issues/1789
Unanticipated Regenerations,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Ref occasionally regenerates the build-cache between the build and the installation step.  Why?

Reports of regeneration of AC files if they are touched.  Why?
",bug,https://github.com/nasa/fprime/issues/1431
fprime-util purge function for build file that is not from a default.,"| | |
|:---|:---|
|**_F´ Version_**| 1.5|
|**_Affected Component_**| fprime-util purge |
---
## Feature Description

When `fprime-util purge` is executed, it should also ask us if we want to delete the build file that is not from a default setting. Let's say if I have `build-fprime-automatic-native` and `build-fprime-automatic-Raspberrypi`, by running `fprime-util purge`, it should also try to delete `build-fprime-automatic-Raspberrypi` as well. The current version would just delete the native one.

## Rationale

It would make deleting and building new version of the app/project easier. 
",non-bug,https://github.com/nasa/fprime/issues/767
GDS typo,"Spelling error in file downlink tab:

![image](https://user-images.githubusercontent.com/8086374/100573983-dcbbba00-328d-11eb-9fa4-636706037cba.png)

""Start Timne""",bug,https://github.com/nasa/fprime/issues/275
Add offset option for rate groups allowing different trigger patterns,"| | |
|:---|:---|
|**_F´ Version_**| baremetal |
|**_Affected Component_**| RateGroupDriver  |
---
## Feature Description

Addition of an offset option when specifying rate group dividers. The offsets would be used to stagger RG firings, this is useful when a thread scheduler is not present

## Rationale

This was used on the LFPS firmware and cut our rate group times almost in half preventing major rate group slipping. The image below shows an example of how the current rate group would fire off vs how the proposed change could be used to fire them off.
This is an example of how the rate groups fired before and after adding the offsets. 
![image](https://github.com/nasa/fprime/assets/63731123/1557ace3-9b48-4e20-b3de-5b25f325947c)

It was implemented [here](https://github.com/nasa/fprime/pull/818) for fprime 3.0.0, but should have used a struct for the rate group divider and offset. However, the logic changes are there and can be used pretty much as is. [Here](https://github.com/nasa/fprime/pull/818#pullrequestreview-706694500) are the relevant requested changes by @LeStarch 

@ethancheez 

",non-bug,https://github.com/nasa/fprime/issues/2135
MacOS CI repeated fails,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

MacOS CI has been failing repeatedly for no apparent reason, timing out after 6 hours. See for example 
https://github.com/nasa/fprime/actions/runs/7302456221/job/19901093748?pr=2454
https://github.com/nasa/fprime/actions/runs/7294730948/job/19901273821?pr=2451
",bug,https://github.com/nasa/fprime/issues/2462
Parameter Readback Command,"| | |
|:---|:---|
|**_F´ Version_**| x.x.x |
|**_Affected Component_**| Parameters  |
---
## Feature Description

Currently, when a parameter is added a parameter set and save command is autocoded. I would like to be able to read back my parameter after setting it if I forget or its something safety critical without saving and downlinking polyDb. 

## Rationale

In some deployments I have had coded this command in, but just sending out an evr with the value would be great. 
",non-bug,https://github.com/nasa/fprime/issues/2783
Topology File generates even with missing imports and instances,"| | |
|:---|:---|
|**_F´ Version_**|2.0.0 |
|**_Affected Component_**| n/a  |
---
## Problem Description

A component instance can be used in a topology without an import statement or an instance declared.

## How to Reproduce

For example, in `Ref/Top/RefTopologyAi.xml`:

1\. Remove:

```xml
    <import_component_type>Svc/BufferManager/BufferManagerComponentAi.xml</import_component_type>
```

2\. Remove:

```xml
    <instance namespace=""Svc"" name=""fileUplinkBufferManager"" type=""BufferManager"" base_id=""301""  base_id_window=""20"" />

```

3\. Build deployment. No errors are emitted. The `fileUplinkBufferManager` connections are there and it compiles correctly. Sometimes it can cause cmake to fail to detect the component type as a dependency and you get compiler errors due to missing generated headers.

## Expected Behavior

I would expect an error from the autocoder for missing import statements or instance declarations. There is no `setIdBase()` call made, which would cause issues if the component had ground system items. For `BufferManager` this isn't an issue.
",bug,https://github.com/nasa/fprime/issues/802
Broken unit tests,"| | |
|:---|:---|
|**_F´ Version_**| 2.0 |
|**_Affected Component_**|  Various |
---
## Problem Description

Several unit tests are broken:

```
fprime (devel)> grep -r --include CMakeLists.txt BROKEN *
Os/CMakeLists.txt:## TODO: **BROKEN UT**, validation of File fails
Svc/Health/CMakeLists.txt:## **BROKEN UT**
Svc/AssertFatalAdapter/CMakeLists.txt:## **BROKEN UT**
```

## How to Reproduce

1. Remove the comments disabling the tests from the CMakeLists.txt files. 
2. Run `fprime-util check` to build and run the tests.
3. Observe that the tests fail as indicated.

## Expected Behavior

These unit tests should pass.
",bug,https://github.com/nasa/fprime/issues/710
Impl Templates Might Be More Descriptibe,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Implementation templates should include section headers for ""Class Members"" and a comment on the end brace `}` of the class.",non-bug,https://github.com/nasa/fprime/issues/2240
fprime-util purge native does not purge native,"Please see this https://github.com/fprime-community/fprime-tools/issues/47
",bug,https://github.com/nasa/fprime/issues/1417
Add option to frpime-gds to set flask host ip and port,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 |
|**_Affected Component_**| GDS |
---
## Feature Description

fprime-gds currently does not have an option to set the Flask server host and ip.

As shown below in [run_deployment.py](https://github.com/nasa/fprime/blob/aa663303327587146390dde67b83b9bf4e916d54/Gds/src/fprime_gds/executables/run_deployment.py) fprime-gds just executes flask with default host and port defined in origin Flask api.
https://github.com/nasa/fprime/blob/aa663303327587146390dde67b83b9bf4e916d54/Gds/src/fprime_gds/executables/run_deployment.py#L280

To further better understand current GDS set up the following diagram is provided:
![image](https://user-images.githubusercontent.com/35859004/115358216-47ed2680-a172-11eb-9d92-43ea8ee017aa.png)


A user can run each of these services individually using the following separate commands:

```
# tcp_server
python3 -u -m fprime_gds.executables.tcpserver --host 0.0.0.0 --port 50050

# fw_client
python3 -u -m fprime_gds.executables.comm --tts-addr 0.0.0.0 --tts-port 50050 -l /opt/logs/ --log-directly --comm-adapter ip

# gui_client
python3 -u -m flask run --host 0.0.0.0 --port 5000
```

[run_deployment.py](https://github.com/nasa/fprime/blob/aa663303327587146390dde67b83b9bf4e916d54/Gds/src/fprime_gds/executables/run_deployment.py) bundles all these commands into a single command `fprime-gds`. One can use --tts-port option to set the tcpserver port, and --ip-port to set client communication client port to any arbitrary port as shown below:

```
fprime-gds -n --tts-port 60050 --ip-port 60000
```

![image](https://user-images.githubusercontent.com/35859004/115357659-ba113b80-a171-11eb-9d35-4978ec6a8ad8.png)

But there is no option to change the Flask server (GUI) ip and port.

## Rationale

Changing Flask IP is needed when there is a plan to run GDS from a containerized environment such as docker. Running Flask in `localhost` will force the user to use `host` network (which might not be desired) to be able to access GDS GUI.
",non-bug,https://github.com/nasa/fprime/issues/487
BufferManager Race Condition,"| | |
|:---|:---|
|**_F´ Version_**| 1.5 |
|**_Affected Component_**|  Svc::BufferManager |
---
## Problem Description

Svc::BufferManager is a passive component with the following guarded input ports: bufferSendIn and bufferGetCallee. While using this component in a topology, such as F' Ref, the 2 guarded input ports can be connected to separate active components, such as groundIf and fileUplink: https://github.com/nasa/fprime/blob/devel/Ref/Top/RefTopologyAppAi.xml#L860-L867. This results in some member variables of Svc::BufferManager, such as padSize, allocatedSize and freeIndex, being written to from both contexts without any lock/guard protection when writing to these member variables. This can lead to a race condition if bufferSendIn and bufferGetCallee ports are invoked from 2 separate contexts simultaneously. 

## How to Reproduce

1. Theoretically there could be 2 active components where component A invokes bufferSendIn and component B invokes bufferGetCallee port respectively. If both components A and B continue invoking the ports simultaneously in a loop, then it should eventually result in the race condition realizing itself and corrupting a data value within the BufferManager component instance.

## Expected Behavior

FSW assertion on a corrupted value resulting from race condition described above
",bug,https://github.com/nasa/fprime/issues/464
EPIC: Walk Through Documentation and Do an Editorial Pass,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Documentation version-2!",non-bug,https://github.com/nasa/fprime/issues/2030
Add Comments To Dictionary,"### Discussed in https://github.com/nasa/fprime/discussions/1128

<div type='discussions-op-text'>

<sup>Originally posted by **LeStarch** November 30, 2021</sup>
Dictionary elements (command, command arguments, etc) support comments. However, when writing out the Ai.xml dictionary, these comments get stripped out.  It would be nice to carry these through into the dictionary.xml such that they can be used when reading just the dictionary.

Possible uses:
1. Contextualized help for commands and command arguments
2. Building documentation with expanded information

With the comments being stripped out, it is much harder to access this information should it be needed.
</div>",bug,https://github.com/nasa/fprime/issues/1131
create_pthread() crashes if pthread_create() failed,"Look here:

https://github.com/nasa/fprime/blob/91c578ee37c01ba92e556dbca0287d82f9f18b95/Os/Posix/Task.cpp#L161

If `pthread_create()` fails, fprime checks for failure. But if it did fail, it tries to `pthread_join()`. THIS causes a segfault. There is no valid thread (because we couldn't create it), so any operation on it will crash.",bug,https://github.com/nasa/fprime/issues/1955
F´ FPP Module and CMake Module Should be kept In-Sync,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

It is entirely possible to define a project in CMake (e.g. Ref) that is inconsistent with the FPP module name in `topology.fpp`. We should check this and WARN when inconsistent.

Dictionary file generation must use the FPP module not the CMake module.",bug,https://github.com/nasa/fprime/issues/1444
`fprime-util impl --ut` command not generating Tester.cpp and Tester.hpp in Ref/MathSender,"| | |
|:---|:---|
|**_F´ Version_**| v3.0.0 |
|**_Affected Component_**| MathSender |
---
## Problem Description

Following steps in [4.5.1. Set Up the Unit Test Environment](https://nasa.github.io/fprime/Tutorials/MathComponent/Tutorial.html#The-MathSender-Component_Write-and-Run-Unit-Tests_Set-Up-the-Unit-Test-Environment), `fprime-util impl --ut` command not generating `Tester.cpp` and `Tester.hpp` files. 

See last commit on forked repo at https://github.com/capsulecorplab/fprime/commit/1c27e65de9d2f83c0e9c9ad236eb59a98386e398 

## How to Reproduce

1. Follow [MathComponent tutorial](https://nasa.github.io/fprime/Tutorials/MathComponent/Tutorial.html) 
2. Run `fprime-util impl --ut` in `Ref/MathSender` directory as per [4.5.1. Set Up the Unit Test Environment](https://nasa.github.io/fprime/Tutorials/MathComponent/Tutorial.html#The-MathSender-Component_Write-and-Run-Unit-Tests_Set-Up-the-Unit-Test-Environment)

## Expected Behavior

`fprime-util impl --ut` should generate `Tester.cpp` and `Tester.hpp` files.",bug,https://github.com/nasa/fprime/issues/1238
Clickable UT Assert Messages,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Currently F´ unittest assert messages look like the following:

```
File: <file>
Line: ###
```

However, IDEs typically make messages automatically clickable if they are of the form:
```
<file>:###
```
GoogleTest asserts follow this form, and we should switch.
",non-bug,https://github.com/nasa/fprime/issues/1724
Create Interface from LinuxGpioDriver,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make an interface out of Drv/LinuxGpioDriver protocol. See #2255 for an example interface change set.

The following three ports should be pulled out of `Drv::LinuxGpioDriver` into `Svc/Interfaces/GpioInterface.fppi` such that other GPIO implementations can use it.

https://github.com/nasa/fprime/blob/a73bff28617b96736c0e3e222e4c6e1dea1c6f5e/Drv/LinuxGpioDriver/LinuxGpioDriver.fpp#L9

https://github.com/nasa/fprime/blob/a73bff28617b96736c0e3e222e4c6e1dea1c6f5e/Drv/LinuxGpioDriver/LinuxGpioDriver.fpp#L21

https://github.com/nasa/fprime/blob/a73bff28617b96736c0e3e222e4c6e1dea1c6f5e/Drv/LinuxGpioDriver/LinuxGpioDriver.fpp#L11

Note: annotations should be added to explain what each port does.",non-bug,https://github.com/nasa/fprime/issues/2581
Show what version of FPRIME is in the branch from the README,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

A quick description of the requested feature.

I would be great that at the top of the README it would state what version of FPRIME I would be checking out from this branch, especially the ""devel"" branch.  If its there, it was not quickly visible to me.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/1506
command_multi_inst is active but does not have async_input port,"| | |
|:---|:---|
|**_F´ Version_**| current |
|**_Affected Component_**| Autocoder |
---
## Problem Description

command_multi_inst is `kind=""active""`:
https://github.com/nasa/fprime/blob/devel/Autocoders/Python/test/command_multi_inst/Test1ComponentAi.xml

However, it does not have an `async_input` port as required by the schematron spec:
https://github.com/nasa/fprime/blob/devel/Autocoders/Python/schema/default/active_comp_schematron.rng

## How to Reproduce

This was found by enabling exceptions for schematron validation failures (see #325).

## Expected Behavior

Change component so it passes validation and passes gtests.",bug,https://github.com/nasa/fprime/issues/450
Unittest Autocoder Fails on Namespace,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

`TestMain.cpp` is created with a stub unit test that hardcodes the namespace `Ref` rather than detecting it from the model.",bug,https://github.com/nasa/fprime/issues/1725
ENUM Schematron issue,"| | |
|:---|:---|
|**_F´ Version_**| 2.0 |
|**_Affected Component_**| all  |
---
## Problem Description

Ported from: https://github.com/fprime-community/fprime-tools/issues/8

The schematron rule checker for enums crashes if no enum values are specified.

```
/fprime/Autocoders/Python/schema/default/enum_value_schematron.rng
```

## How to Reproduce

1. Create an enum without values
2. Compile

## Expected Behavior

I would expect:

1) It would give me an error telling me about a missing value field.

Problem is that the rule has the following comment:

```
Either all enum items should have a value or none should
```

or, 2) based on the comment, it would allow the enum with no values.


The schematron error produces an exception that should be handled cleanly:

```
WARNING: XML file XXXXEnumAi.xml is not valid according to schematron x/fprime/Autocoders/Python/src/fprime_ac/parsers/../../../../../Autocoders/Python/schema/default/enum_value_schematron.rng.
Parsing Enum XXXX
'value'
Traceback (most recent call last):
  File ""x/fprime/Autocoders/Python/bin/codegen.py"", line 1338, in <module>
    main()
  File ""x/fprime/Autocoders/Python/bin/codegen.py"", line 1294, in main
    if EnumGenerator.generate_enum(xml_filename):
  File ""x/fprime/Autocoders/Python/src/fprime_ac/utils/EnumGenerator.py"", line 64, in generate_enum
    enum_xml = XmlEnumParser.XmlEnumParser(xml_file)
  File ""x/fprime/Autocoders/Python/src/fprime_ac/parsers/XmlEnumParser.py"", line 115, in __init__
    self.__items.append((item[""name""], item[""value""], item[""comment""]))
  File ""src/lxml/etree.pyx"", line 2479, in lxml.etree._Attrib.__getitem__
KeyError: 'value'
```

(Directory names were edited out)",bug,https://github.com/nasa/fprime/issues/1133
"Improve TcpClient, TcpServer, and Udp for Reconnections","| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| TcpClient, TcpServer |
---
## Feature Description

Update the TcpClient, TcpServer, Udp to allow reconnection on `send` as it does already on the recv loop.  Add in a `close` port to these components such that other components may close the connection.

- [ ] Add a mutex as member to components
- [ ] Expose mutex (or lock/unlock) through the `getHandler()` inteface
- [ ] Lock/unlock mutex on `recv` thread reconnect
- [ ] Add lock, reconnect, unlock to the send call
- [ ] Add a close port to each component that will call close

## Rationale

Allows better interaction with sockets.",non-bug,https://github.com/nasa/fprime/issues/2553
Sanitization Caused Unit Test Segfault on Mac OS ,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**|  build system |
---
## Problem Description

On the development version of `fprime-util`, sanitization is enabled in unit tests builds by default.

On Mac OS with sanitization enabled, unit tests were crashing with a SEGFAULT (EXC_BAD_ACCESS) on initalization.

## How to Reproduce

1. On MacOS: Build and execute until tests with sanitizers enabled - unit test executables segfault

## Expected Behavior

Sanitization shouldn't crash unit tests.
",bug,https://github.com/nasa/fprime/issues/1964
Modules With No Dependencies are Stuck With No Dependencies,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Autocoder models producing no `MODULE_DEPENDENCIES` in the autocoder/cmake system result in modules that are never scanned to look for new `MODULE_DEPENDENCIES`.

In order to work properly, the autocoder implementer needs to tell us if a file will result in the above change (i.e. that file needs to be watched) or not.  There is no way to automatically detect if a file needs to be watched.",bug,https://github.com/nasa/fprime/issues/1681
This is not even pre-modern C++,"And that it is perfectly understandable. Of course. I had time for 15 min fly over. Software is clear, simple and (I believe) resilient. All good things.

I also understand this was ready-made, running (before) on VxWorks, mature etc. I assume somebody has measured Benefits vs Risks ... 

But here is the elephant in the room: Why not C99?
",non-bug,https://github.com/nasa/fprime/issues/479
SLOC Reporting Tool,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The base info for this tool was supplied with [#1941](https://github.com/nasa/fprime/issues/1941).

We need to:
1. Build a SLOC tool to use this info and generate SLOC
2. Document the SOURCE_HEADERS and UT_SOURCE_HEADERS functions.
",non-bug,https://github.com/nasa/fprime/issues/2369
Empty Models Break CMake,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

If a file results in no generated files.  It will break the CMake build. Empty files should be allowed as a placeholder and at no point is the autocoder required generate files for every module.",bug,https://github.com/nasa/fprime/issues/1680
Integrate JSON dictionary in the GDS,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

JSON Dictionary is here: https://github.com/nasa/fprime/issues/2263

In the GDS, we have a whole system to ingest the XML dictionary and make that data available through data types. We need to ingest the JSON dictionary instead. 
Retiring the old data types and using the JSON data structure itself sounds like a reasonable design... will need to look into

",non-bug,https://github.com/nasa/fprime/issues/2592
Errors in `fprime-util new --project` venv install are non obvious ,"When an error occurs when installing into the virtual environment created by `fprime-util new --project` there are several issues:

1. Error is buried in sea of text
2. Script continues without an error

There are several changes that might help:
1. Report error and fail
2. Run `pip install -U pip wheel setuptools` as this substantially reduces errors",bug,https://github.com/nasa/fprime/issues/2236
fprime-util Format Fails to Recoginze `PRIVATE :`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

I tried to run `fprime-util format -f *.cpp` with a header that had:

```
// Notice the space below
PRIVATE : 
```
And this failed to be properly handled by the formatter.

Switching to `PRIVATE:` directly fixed the issue.

",bug,https://github.com/nasa/fprime/issues/1939
Build Documention Splash Page for Website,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

So that the fprime website is not out of date.",non-bug,https://github.com/nasa/fprime/issues/2201
Filter Down Test Targets For Deployments,"| | |
|:---|:---|
|**_F´ Version_**| All |
|**_Affected Component_**|  CMake/UTs  |
---
## Problem Description

F´ framework tests and code show up in all `check` targets adding cluttering the space, and preventing the focus on project specific UTs.  We should add an option to not run framework tests.

## How to Reproduce

`fprime-util check --all`



## Expected Behavior

Not run 60+ UTs from F´ framework layer unless desired.
",bug,https://github.com/nasa/fprime/issues/360
Out of source build - cmake autocodegenerator fails due to duplicate cmake targets,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

I am trying to build an f' application out of source with an infrastructure where all proprietary code modules are in the root. 
However, I get errors of duplicate cmake targets from the fprime cmake stack. 
We assume that the definition of the install directories for code modules does not allow out of source architecture builds with this topology. Do you have any suggestions?
Test is the application that contains the topology: 

```
build
root_repo  
├──Fprime  
│   ├── Autocoders
│   └── ...
└── Test  
│   ├── CMakeLists.txt  
│   ├── settings.ini  
│   └── Topology  
│       ├── CMakeLists.txt  
│       └── TestTopologyAppAi.xml  
│
    .... in the future ...
│
├── Module1 
├── Module2
...
```

### settings.ini  
```
[fprime]  
project_root: ./..  
framework_path: ./../Fprime  
library_locations: ./..  
default_toolchain: native  
environment_file:  
ac_constants:  
config_directory:  
```

### CMakeLists.txt (in Test folder)
```
project(Test C CXX)
cmake_minimum_required(VERSION 3.13)

set(FPRIME_PROJECT_ROOT   ${CMAKE_CURRENT_SOURCE_DIR}/..)
set(FPRIME_FRAMEWORK_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../Fprime)
include(""${FPRIME_FRAMEWORK_PATH}/cmake/FPrime.cmake"")
include(""${FPRIME_FRAMEWORK_PATH}/cmake/FPrime-Code.cmake"")

add_fprime_subdirectory(""${CMAKE_CURRENT_LIST_DIR}/Topology/"")
add_fprime_subdirectory(""${FPRIME_PROJECT_ROOT}/Fprime/"")
```
### CMakeLists.txt (in Topology)
```
set(SOURCE_FILES
  ""${CMAKE_CURRENT_LIST_DIR}/TestTopologyAppAi.xml""
)
set(MOD_DEPS
  Fw/Logger
  Svc/LinuxTime
)
register_fprime_executable()
```

## Expected Behavior

Auto generation of .h .c files from Ai.xmls

## Actual Behavior: Error when building the project

The fprime cmake does appear to create multiple cmake targets (same goes for `fprime-util generate`): 

```
cmake ../root_repo/Test/
-- The C compiler identification is GNU 9.3.0
-- The CXX compiler identification is GNU 9.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Searching for F prime modules in: /home/root_repo/Fprime;/home/root_repo
-- Autocoder constants file: /home/root_repo/Fprime/config/AcConstants.ini
-- Configuration header directory: /home/root_repo/Fprime/config
-- Target build toolchain/platform: Linux/Linux
-- Including /home/root_repo/Fprime/cmake/platform/Linux.cmake
-- Requiring thread library
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- [VALIDATION] Running: python3;/home/root_repo/Fprime/cmake/support/validation/pipsetup.py
-- Installation directory: /home/root_repo/Test
-- Adding library: Fw_Buffer
-- 	Found port: BufferGet in /home/root_repo/Fprime/Fw/Buffer/BufferGetPortAi.xml
-- 	Found port: BufferSend in /home/root_repo/Fprime/Fw/Buffer/BufferSendPortAi.xml

  ...

-- Adding library: Drv_SocketIpDriver
-- 	Found component: SocketIpDriver in /home/root_repo/Fprime/Drv/SocketIpDriver/SocketIpDriverComponentAi.xml
-- Adding library: CFDP_Checksum
-- Adding library: Utils
-- Adding library: Utils_Hash
-- Adding library: Utils_Types
-- Adding executable: Test_exe
-- 	Found topologyapp: Test in /home/root_repo/Test/Topology/TestTopologyAppAi.xml
-- Searching for F prime modules in: /home/root_repo/Fprime
-- Autocoder constants file: /home/root_repo/Fprime/config/AcConstants.ini
-- Configuration header directory: /home/root_repo/Fprime/config
-- Target build toolchain/platform: Linux/Linux
-- Including /home/root_repo/Fprime/cmake/platform/Linux.cmake
-- Requiring thread library
-- [VALIDATION] Running: python3;/home/root_repo/Fprime/cmake/support/validation/pipsetup.py
-- Installation directory: /home/root_repo/Fprime
CMake Error at /home/root_repo/Fprime/cmake/target/dict.cmake:63 (add_custom_target):
  add_custom_target cannot create target ""dict"" because another target with
  the same name already exists.  The existing target is a custom target
  created in source directory ""/home/root_repo/Test"".
  See documentation for policy CMP0002 for more details.
Call Stack (most recent call first):
  /home/root_repo/Fprime/cmake/support/Target.cmake:74 (add_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:486 (setup_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:466 (register_fprime_target_generic)
  /home/root_repo/Fprime/cmake/FPrime.cmake:52 (register_fprime_target)
  /home/root_repo/Fprime/CMakeLists.txt:28 (include)


CMake Error at /home/root_repo/Fprime/cmake/target/dict.cmake:63 (add_custom_target):
  add_custom_target cannot create target ""impl"" because another target with
  the same name already exists.  The existing target is a custom target
  created in source directory ""/home/root_repo/Test"".
  See documentation for policy CMP0002 for more details.
Call Stack (most recent call first):
  /home/root_repo/Fprime/cmake/support/Target.cmake:74 (add_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:486 (setup_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:466 (register_fprime_target_generic)
  /home/root_repo/Fprime/cmake/FPrime.cmake:53 (register_fprime_target)
  /home/root_repo/Fprime/CMakeLists.txt:28 (include)


CMake Error at /home/root_repo/Fprime/cmake/target/dict.cmake:63 (add_custom_target):
  add_custom_target cannot create target ""testimpl"" because another target
  with the same name already exists.  The existing target is a custom target
  created in source directory ""/home/root_repo/Test"".
  See documentation for policy CMP0002 for more details.
Call Stack (most recent call first):
  /home/root_repo/Fprime/cmake/support/Target.cmake:74 (add_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:486 (setup_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:466 (register_fprime_target_generic)
  /home/root_repo/Fprime/cmake/FPrime.cmake:54 (register_fprime_target)
  /home/root_repo/Fprime/CMakeLists.txt:28 (include)


CMake Error at /home/root_repo/Fprime/cmake/target/package_gen.cmake:25 (add_custom_target):
  add_custom_target cannot create target ""package_gen"" because another target
  with the same name already exists.  The existing target is a custom target
  created in source directory ""/home/root_repo/Test"".
  See documentation for policy CMP0002 for more details.
Call Stack (most recent call first):
  /home/root_repo/Fprime/cmake/support/Target.cmake:74 (add_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:486 (setup_global_target)
  /home/root_repo/Fprime/cmake/API.cmake:466 (register_fprime_target_generic)
  /home/root_repo/Fprime/cmake/FPrime.cmake:55 (register_fprime_target)
  /home/root_repo/Fprime/CMakeLists.txt:28 (include)


CMake Error at /home/root_repo/Fprime/cmake/FPrime-Code.cmake:22 (add_subdirectory):
  The binary directory

    /home/build/F-Prime/Autocoders

  is already used to build a source directory.  It cannot be used to build
  source directory

    /home/root_repo/Fprime/Autocoders

  Specify a unique binary directory name.
Call Stack (most recent call first):
  /home/root_repo/Fprime/CMakeLists.txt:29 (include)


CMake Error at /home/root_repo/Fprime/cmake/FPrime-Code.cmake:27 (add_subdirectory):
  The binary directory

    /home/build/F-Prime/Fw

  is already used to build a source directory.  It cannot be used to build
  source directory

    /home/root_repo/Fprime/Fw

  Specify a unique binary directory name.
Call Stack (most recent call first):
  /home/root_repo/Fprime/CMakeLists.txt:29 (include)


CMake Error at /home/root_repo/Fprime/cmake/FPrime-Code.cmake:28 (add_subdirectory):
  The binary directory

    /home/build/F-Prime/Svc

  is already used to build a source directory.  It cannot be used to build
  source directory

    /home/root_repo/Fprime/Svc

  Specify a unique binary directory name.
Call Stack (most recent call first):
  /home/root_repo/Fprime/CMakeLists.txt:29 (include)


CMake Error at /home/root_repo/Fprime/cmake/FPrime-Code.cmake:29 (add_subdirectory):
  The binary directory

    /home/build/F-Prime/Os

  is already used to build a source directory.  It cannot be used to build
  source directory

    /home/root_repo/Fprime/Os

  Specify a unique binary directory name.
Call Stack (most recent call first):
  /home/root_repo/Fprime/CMakeLists.txt:29 (include)


CMake Error at /home/root_repo/Fprime/cmake/FPrime-Code.cmake:30 (add_subdirectory):
  The binary directory

    /home/build/F-Prime/Drv

  is already used to build a source directory.  It cannot be used to build
  source directory

    /home/root_repo/Fprime/Drv

  Specify a unique binary directory name.
Call Stack (most recent call first):
  /home/root_repo/Fprime/CMakeLists.txt:29 (include)


CMake Error at /home/root_repo/Fprime/cmake/FPrime-Code.cmake:31 (add_subdirectory):
  The binary directory

    /home/build/F-Prime/CFDP

  is already used to build a source directory.  It cannot be used to build
  source directory

    /home/root_repo/Fprime/CFDP

  Specify a unique binary directory name.
Call Stack (most recent call first):
  /home/root_repo/Fprime/CMakeLists.txt:29 (include)


CMake Error at /home/root_repo/Fprime/cmake/FPrime-Code.cmake:32 (add_subdirectory):
  The binary directory

    /home/build/F-Prime/Utils

  is already used to build a source directory.  It cannot be used to build
  source directory

    /home/root_repo/Fprime/Utils

  Specify a unique binary directory name.
Call Stack (most recent call first):
  /home/root_repo/Fprime/CMakeLists.txt:29 (include)


-- Configuring incomplete, errors occurred!
```",bug,https://github.com/nasa/fprime/issues/930
"Ref, nproc, deployment directory - Autocoder Install MacOS","| | |
|:---|:---|
|**_F´ Version_**| 3.1 |
|**_Affected Component_**| Ref, nproc, deployment directory, Autocoder install MacOS  |
---
## Problem Description
Hello, I am downloading F' for a CubeSat project and need some help with installation. I am not a software person by-trade, so if someone can guide me through these steps/where I misstepped, that would help me out a lot. Thanks!

Operating System:
MacOS Catalina 10.15.7 

Installation Programs Installed:
Python 3.10.7 with command line certificates
CMake  3.24.2
XCode 12.4 with command line tools

## How to Reproduce
SEE PHOTOS AT THE BOTTOM

1. Run Install Code In MacOS Terminal:
python3 -m venv $HOME/fprime-venv
. $HOME/fprime-venv/bin/activate
pip install -U setuptools setuptools_scm wheel pip

2. Run the Repository and F' Tools:
git clone https://github.com/nasa/fprime
pip install -r fprime/requirements.txt

3.  Wait for successful download:
Successfully installed Brotli-1.0.9 Cheetah3-3.2.6.post1 Flask-1.1.4 Flask-Compress-1.12 Flask-RESTful-0.3.9 Jinja2-2.11.3 Markdown-3.3.7 MarkupSafe-2.0.1 Pygments-2.12.0 Werkzeug-1.0.1 aniso8601-9.0.1 argcomplete-1.12.3 arrow-1.2.2 attrs-21.4.0 binaryornot-0.4.4 certifi-2022.6.15 chardet-4.0.0 charset-normalizer-2.0.12 click-7.1.2 cookiecutter-1.7.3 fprime-fpp-1.0.2 fprime-gds-3.1.3 fprime-tools-3.1.1 gcovr-5.1 idna-3.3 importlib-metadata-4.11.4 iniconfig-1.1.1 itsdangerous-1.1.0 jinja2-time-0.2.0 lxml-4.9.0 pexpect-4.8.0 pluggy-1.0.0 poyo-0.5.0 ptyprocess-0.7.0 py-1.11.0 pytest-6.2.5 python-dateutil-2.8.2 python-slugify-6.1.2 pytz-2022.1 pyzmq-22.3.0 requests-2.28.0 six-1.16.0 text-unidecode-1.3 toml-0.10.2 urllib3-1.26.9 zipp-3.8.0

4. This is where it said it was downloading to:
Stored in directory: /Users/myname/Library/Caches/pip/wheels/
(added ""myname"" instead of my actual name)

5. Run the Autocoder Install Test:
cd Ref
fprime-util generate
fprime-util build --jobs ""$(nproc || printf '%s\n' 1)""

##Expected Behavior

6. Error Messages Received:
cd: no such file or directory: Ref
[ERROR] Could not detect deployment directory for: /Users/myname
zsh: command not found: nproc
[ERROR] Could not detect deployment directory for: /Users/myname

7. Tested Step 1 Again and Received the ""Requirement Already Satisfied"" for all site packages
_____________________
My MacOS terminal says the following:
myname -- -zsh -- 166x34
(fprime-venv) myname@MacBook-Pro ~ %

Should I have other applications open (CMake, XCode, Python, etc)? I read a similar Issue Ticket for a Linux user, and the post reply had something to do with pip installing in the .local directory, causing the Terminal to not find it. I am not sure how to fix that (if it is the case with my issue). Any help would be appreciated, thank you!

![Screen Shot 2022-09-23 at 10 13 08 AM](https://user-images.githubusercontent.com/114238662/191981644-d76a223d-01a4-42a6-a9f6-636b54d3032a.png)
![Screen Shot 2022-09-23 at 10 15 07 AM](https://user-images.githubusercontent.com/114238662/191981672-c29a6cab-14d0-4298-8521-052391eb7f6f.png)
",bug,https://github.com/nasa/fprime/issues/1666
Improve type safety of Fw::Logger,"| | |
|:---|:---|
|**_F´ Version_**| v1.10 |
|**_Affected Component_**| All |
---
## Feature Description

The Fw::Logger interface requires that arguments of type POINTER_CAST be bound to format specifiers. 

https://github.com/nasa/fprime/blob/67b7a7d7177af832c02893bac5db2a22a4b8e7fe/Fw/Logger/Logger.hpp#L54-L66

Therefore using the logger like this
```
Fw::Logger::logMsg(""%u %u"", 0, 1);
```
assumes that code like this works properly:
```
#include <stdint.h>
#include <stdio.h>
 
int main(int argc, char **argv) {
  const uint64_t a = 0;
  const uint64_t b = 1;
  printf(""%u %u\n"", a, b);
  return 0;
}
```

This code does work on my machine (Mac OS 10.15, clang), but (a) it produces warnings about invalid format specifiers and (b) according to the C library standard it is not guaranteed to work. See https://en.cppreference.com/w/c/io/fprintf. 

The only absolute guarantee is that this code works:
```
#include <stdio.h>
 
int main(int argc, char **argv) {
  const unsigned a = 0;
  const unsigned b = 1;
  printf(""%u %u\n"", a, b);
  return 0;
}
```

If you know that uint32_t is an alias for unsigned, then this also works:
```
#include <stdint.h>
#include <stdio.h>
 
int main(int argc, char **argv) {
  const uint32_t a = 0;
  const uint32_t b = 1;
  printf(""%u %u\n"", a, b);
  return 0;
}
```
However, this version is incorrect on platforms where unsigned is an alias for uint16_t.

A safer approach would be to use `Fw::FixedLengthString::format` to format the string before passing it to the logger:
```
Fw::FixedLengthString s;
s.format(""%u %u\n"", 0, 1);
Logger::logMsg(s.toChar());
```
This way the correct argument types are bound to the correct format specifiers, without passing through POINTER_CAST.

## Rationale

In general we should avoid code that causes compiler warnings and/or relies on non-standard behavior. In this case, the compiler and library writers have clearly done something nifty to make printf ""just work"" despite the mismatched argument types, but we may not want to rely on this nifty behavior in the core framework.
",non-bug,https://github.com/nasa/fprime/issues/549
Create CFDP Class 1 file packets,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Implement the CFDP Protocol Data Units (PDU) for Class 1 defined in section 5 of the CFDP Recommended Standard.

Implements the following:
FilePacket
Header
Metadata
EndOfFile
Finished
FileData

Recommended Standard:
https://public.ccsds.org/Pubs/727x0b5.pdf

## Rationale

Supports #2768.
",non-bug,https://github.com/nasa/fprime/issues/2769
Add Table of Contents to side bar in F´ docs website,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**| Docs |
---
## Feature Description

Here's our Jekyll theme: https://github.com/fprime-community/fprime-theme. We are using a clean slate theme that displays a single page at a time.
From the popular Jekyll themes, it looks like there's a bunch of them that have a Table of Contents in a sidebar https://jekyllthemes.io/jekyll-documentation-themes 
It would be quite nice if we could have that as well. Not sure how easy/doable it would be to do with our current theme. Posting this issue here in case anyone want to take a bite at doing that!

## Rationale

Improve navigability of F´ docs
",non-bug,https://github.com/nasa/fprime/issues/2100
Telemetry channels not added to RefPackets.xml upon build,"| | |
|:---|:---|
|**_F´ Version_**|3.2.0 |
|**_Affected Component_**|   |
---
## Problem Description

A description of the problem with sufficient detail to understand the issue.

## How to Reproduce
Follow math component tutorial up to step 6.3 sans building unit tests. 
The build will fail when packetizing custom telemetry channels
```
Packet SigGen4 size 73/111
Packetizing SigGen5 (19)
Packet SigGen5 size 73/111
Packetizing TypeDemo (20)
Packet TypeDemo size 81/111
Channel mathSender.VAL1 (3840) not packetized or ignored.
gmake[3]: *** [Ref/Top/CMakeFiles/Ref_Top.dir/build.make:220: Ref/Top/RefPacketsAc.cpp] Error 255
gmake[2]: *** [CMakeFiles/Makefile2:9410: Ref/Top/CMakeFiles/Ref_Top.dir/all] Error 2
gmake[1]: *** [CMakeFiles/Makefile2:2394: CMakeFiles/Ref.dir/rule] Error 2
gmake: *** [Makefile:183: Ref] Error 2
Channel mathSender.OP (3841) not packetized or ignored.
Channel mathSender.VAL2 (3842) not packetized or ignored.
Channel mathSender.RESULT (3843) not packetized or ignored.
Channel mathReceiver.OPERATION (9984) not packetized or ignored.
Channel mathReceiver.FACTOR (9985) not packetized or ignored.
Packet XML parsing error: Channels missing from packets
[ERROR] CMake erred with return code 2
```

This is because the channels are not being added to RefPackets.xml

Manually adding these channels fixes the issue.

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/2020
Add --pass-through arguments to `fprime-gds`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Allow fprime-gds to pass through arguments to FSW that is automatically started up.",non-bug,https://github.com/nasa/fprime/issues/1894
Properly Support ERT Ordering,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description
In order to properly support ERT ordering, I recommend:

1. Add a TimeType field to the [SysData](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/data_types/sys_data.py#L19) class and add an accessor for `get_ert_time()`.
2. Have the GDS record ERT at some point.
3. Preserve the use of the `fsw_order` argument in the test API's [constructor](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/testing_fw/api.py#L29) and [sub-history](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/testing_fw/api.py#L244) functions by passing the fsw_order argument to the chronological [history constructor](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/history/chrono.py#L23).
4. Modify chronological history to choose whether to use `get_time()` or `get_ert_time()` for its ordering/returning operations:
    - [clearing history](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/history/chrono.py#L111)
    - `__insert_chrono()` [helper](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/history/chrono.py#L165)
    - `__get_index()` [helper](https://github.com/nasa/fprime/blob/717bc6fab85c53680108fc961cad6338e779816f/Gds/src/fprime_gds/common/history/chrono.py#L206)",non-bug,https://github.com/nasa/fprime/issues/2650
Channel Tab is not displaying colors based on limit values,"| | |
|:---|:---|
|**_F´ Version_**| fprime-gds@devel |
|**_Affected Component_**|   |
---
## Problem Description

When specifying a limit
```
        telemetry Channel1: U32 high { red 3, orange 2, yellow 1 }
```
and the channel goes above the threshold, I would expect the row to change colors. But I haven't been able to observe that behavior 

Calculating the row color is here: https://github.com/nasa/fprime-gds/blob/2c95a45d044dc26b74da1c55c1197fc4bf3b7e7d/src/fprime_gds/flask/static/js/vue-support/channel.js#L86-L107
There may be a bug here or in the handling of the limit values, or in the display somewhere.

## How to Reproduce

1. Add a limit to a channel in Ref/
2. Build, and trigger the telemetry so that it will go beyond the limit
3. observe color in channel tab

## Expected Behavior

Channel row should take the appropriate color
",bug,https://github.com/nasa/fprime/issues/2754
LinuxGpioDriver Minor Bug,"| | |
|:---|:---|
|**_F´ Version_**| Latest in devel|
|**_Affected Component_**|   Drv/LinuxGpioDriver |
---
## Problem Description

Fix typo in this line: https://github.com/nasa/fprime/blob/devel/Drv/LinuxGpioDriver/LinuxGpioDriverComponentImpl.cpp#L378. It should be replaced with just `char buf[MAX_BUF];`.

## How to Reproduce

Code inspection

## Expected Behavior

Currently there's no apparent issue at runtime since `buf` is only used in a debug print, but it should be fixed to be an array or chars rather than an array of char pointers.
",bug,https://github.com/nasa/fprime/issues/2432
Cleaning a subdirectory of a build cache,"| | |
|:---|:---|
|**_F´ Version_**| 1.5.3 |
|**_Affected Component_**| All |
---
## Feature Description

It would be helpful to have an `fprime-util clean` capability that cleans just a subdirectory of a build cache.

## Rationale

Due to bugs or quirks in the build, the build environment can get itself into a state where it is impossible to proceed without wiping out build artifacts and starting over. Often it is sufficient to wipe out the artifacts in a particular directory, for example a component unit test directory. Wiping out the entire build cache is inconvenient in this case.",non-bug,https://github.com/nasa/fprime/issues/367
Publish gds and fw packages to PyPI,"| | |
|:---|:---|
|**_F´ Version_**|current|
|**_Affected Component_**|Gds and Fw/python|
---
## Feature Description

Publish `Gds` and `Fw/Python` as `fprime-gds` and `fprime-fw` packages on PyPI.

## Rationale

- Easier installation for users since they can just use `python3 -m pip install fprime-gds`.
- `fprime-gds` package will be able to list `fprime-fw` as a dependency.
- Actual releases.  Users will be using versions of the packages released on PyPI, not random clones from GitHub.",non-bug,https://github.com/nasa/fprime/issues/405
Typo in GPS Tutorial.,"| | |
|:---|:---|
|**_F´ Version_**| |devel
|**_Affected Component_**| GpsComponentImpl.cpp |
---
## Problem Description

The function used in GpsComponentImpl.cpp in GPS Tutorial is not correct. It should be setData, setSize and getData based on what is in FW/Buffer/Buffer.cpp but you have it in all lowered case in the example code in the GPS tutorial. Not sure if you guys modify buffer.cpp and forget to change the tutorial.

## How to Reproduce

Follow the gps tutorial until you build the gps component after you modify GpsComponentImpl.cpp and GpsComponentImpl.hpp

## Expected Behavior

It should show an error that setdata, setsize and getdata are not in a class buffer.
",bug,https://github.com/nasa/fprime/issues/680
`fprime-util build` fails with obscure error in auto-coded file if `fpp` does not include `queue size`,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.0
|**_Affected Component_**|   `fprime-util build`
---
## Problem Description

If the `queue size` property of an Active Component is mistakenly omitted from the `fpp` file, the autocoder will happily proceed, and then the compile stage will fail with:

```
.../DeploymentAc.cpp: error: <component> is not a member of `<deployment>::QueueSizes’
```

It is a non-obvious that the `fpp` file is the source of the problem, with the only hint being that the error occurs in an autocoded file.

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
fprime-util version-check
usage: fprime-util [-h]
                   {build,check,generate,purge,fpp-check,fpp-to-xml,visualize,impl,hash-to-file,info,new,format} ...
fprime-util: error: argument command: invalid choice: 'version-check' (choose from 'build', 'check', 'generate', 'purge', 'fpp-check', 'fpp-to-xml', 'visualize', 'impl', 'hash-to-file', 'info', 'new', 'format')
```

However, the `fprime-util -h` command reports `fprime-util (3.4.0)`

## How to Reproduce

1. Add an Active Component to a topology
2. Omit the `queue size` property
3. Run `fprime-util build`
4. Observe autocoding succeed and compiling fail

## Expected Behavior

`fprime-util` should complain about an invalid FPP file before the build process gets to the compile stage.
",bug,https://github.com/nasa/fprime/issues/2508
Overriding Baremetal Os Abstraction,"| | |
|:---|:---|
|**_F´ Version_**| 3.3.2 |
|**_Affected Component_**|  Os/Baremetal/ |
---
## Problem Description

The [`fprime/Os/Baremetal/CMakeLists.txt`](https://github.com/nasa/fprime/blob/devel/Os/CMakeLists.txt#L84) file always adds the Baremetal Os abstractions of File, FileSystem, IntervalTimer, Mutex, Queue, SystemResources, Task when defining the `FPRIME_USE_BAREMETAL_SCHEDULER` flag. So even if an external package that attempts to create a specific Os abstraction (i.e. File), the `Os/Baremetal/___.cpp` versions will always be used instead of the external package.

## Reproduce Bug

We can use the existing `IntervalTimer.cpp` file in `fprime-arduino` as an example, as that is *expected* to override the `Os/Baremetal/IntervalTimer.cpp` within `fprime`.

1. Simply call the `IntervalTimer` `getRawTime()` function. It will call the function inside of the `fprime` `Os/Baremetal` version instead of `fprime-arduino`'s version.

## Suggestion
The `FPRIME_USE_BAREMETAL_SCHEDULER` flag should only replace the Task Scheduler to use the Baremetal implementation, not add all of the other Baremetal Os abstractions. The baremetal package(s) should be the ones adding those baremetal abstractions (see how `fprime-arduino` is doing it [here](https://github.com/fprime-community/fprime-arduino/blob/devel/Arduino/Os/CMakeLists.txt#L26).

## Why
A `File.cpp` abstraction for the `fprime-arduino` package is currently in development as it is needed for [`fprime-artemis-cubesat`](https://github.com/fprime-community/fprime-artemis-cubesat) to replace the Baremetal implementation, which currently does nothing. 

## Temporary Solution
The following lines were commented out in the [CMake](https://github.com/nasa/fprime/blob/devel/Os/CMakeLists.txt#L84) file:
```
# list(APPEND SOURCE_FILES ""${CMAKE_CURRENT_LIST_DIR}/Baremetal/File.cpp"")
# list(APPEND SOURCE_FILES ""${CMAKE_CURRENT_LIST_DIR}/Baremetal/FileSystem.cpp"")
# list(APPEND SOURCE_FILES ""${CMAKE_CURRENT_LIST_DIR}/Baremetal/IntervalTimer.cpp"")
# list(APPEND SOURCE_FILES ""${CMAKE_CURRENT_LIST_DIR}/Baremetal/Mutex.cpp"")
# list(APPEND SOURCE_FILES ""${CMAKE_CURRENT_LIST_DIR}/Baremetal/Queue.cpp"")
# list(APPEND SOURCE_FILES ""${CMAKE_CURRENT_LIST_DIR}/Baremetal/SystemResources.cpp"")
# list(APPEND SOURCE_FILES ""${CMAKE_CURRENT_LIST_DIR}/Baremetal/Task.cpp"")
```
Instead, these are linked within the Os abstraction of `fprime-arduino` [here](https://github.com/fprime-community/fprime-arduino/blob/devel/Arduino/Os/CMakeLists.txt#L26).

For example, if I choose to override the Baremetal `File.cpp` version, I simply replace:
```
""${FPRIME_FRAMEWORK_PATH}/Os/Baremetal/File.cpp""
``` 
with:
```
""${CMAKE_CURRENT_LIST_DIR}/File.cpp""
```",bug,https://github.com/nasa/fprime/issues/2330
GDS command arguments should allow non-string types,"Presently, the GDS doesn't accept command arguments that aren't strings. This is kind of annoying and means the test API is more flexible about",non-bug,https://github.com/nasa/fprime/issues/2647
Metapackaging,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add in meta packaging so user can:

```
pip install fprime==<version>
-or-
cd fprime; pip install .
```

And get all necessary tools: `fprime-util`, `fpp-*`, `fprime-gds`, of the ""approved"" versions to work with the given release/checkout (master).
 
## Rationale

It would be simpler to install this way. ",non-bug,https://github.com/nasa/fprime/issues/1336
Autocoder does not export full path to topology.xml,"| | |
|:---|:---|
|**_F´ Version 1.5**| |
|**_MagicDraw Autocoder_**|   |
---
## Problem Description

Autocoder does not export full path to topology.xml

## Expected Behavior
While e.g. the path of component `ManagerMission` should be `ManagerMission/ManagerMissionComponentAi.xml`, 
it always exports the path as `/ManagerMissionComponentAi.xml` in the topolog.xml. 
Is there anyway to set this export path in Magicdraw?

## How to Reproduce

The repo configuration:

I have the following repository setup, with the MagicDraw project file at the highest level. 
```
├── Project.mdxml  (THIS IS THE MAGICDRAW PROJECT FOR THE OVERALL SYSTEM)
├── CMakeLists.txt
├── settings.ini   (project_root: .  framework_path: ./Fprime)
├── Fprime
│   ├── Autocoders
│   │   ├── CMakeLists.txt
│   │   ├── MagicDrawCompPlugin
│   
│     ...
│
├── ManagerMission
│   ├── CMakeLists.txt
│   ├── ManagerMissionComponentAi.xml
│   └── ManagerMission.mdxml (THIS IS THE MAGICDRAW PROJECT FOR THE COMPONENT)
│   
└── Topology
    ├── CMakeLists.txt
    ├── Main.cpp
    ├── README.md
    ├── RoboticsProcessingUnitTopologyAppAi.xml (THIS IS WHAT WE WANT TO GENERATE)
    └── Topology.cpp
```    
The exported topology looks like this:
```    
<assembly name = ""RoboticsProcessingUnit"">
	<import_component_type>Svc/TlmChan/TlmChanComponentAi.xml</import_component_type>
	<import_component_type>/ManagerMissionComponentAi.xml</import_component_type>  
```    
The MagicDraw project setup:
![Screenshot from 2021-06-25 15-40-32](https://user-images.githubusercontent.com/16116085/123433428-be236480-d5cb-11eb-8ca4-32c31dd9b29a.png)


## What I tried

I try to understand how the autocoder is exporting the component path as apparently for the Ref Application this is just working fine. I currently assume that the export is based on the ""preferred path value "". However I cannot modify this value directly. I tried: 
- Changing the preferred path value directly in the Project.mdxml
- Using different sharing folder structures in ManagerMission.mdxml: 
```
Model
└── ManagerMission (Shared Package)
          └── ManagerMission (Queued passive component)
Model
└── ManagerMission (Shared Package)
         └── ManagerMission (Package) 
                         └── ManagerMission (Queued passive component)
Model
└── ManagerMission
         └── ManagerMission  (Shared Package)
                         └── ManagerMission (Queued passive component)
- Adding ""ManagerMission""  as namespace in queued passive component
- Modifying preferred path in package option dialog (not possible)
- Modifying Mounted on in package option dialog (does lead to different project structure and not impact exported path
````

![Screenshot from 2021-06-25 15-42-31](https://user-images.githubusercontent.com/16116085/123433652-f9be2e80-d5cb-11eb-80f2-d9634879f28b.png)

",bug,https://github.com/nasa/fprime/issues/773
Minimize Download Size of F´,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

F´'s repo and history are huge and filled with items never intended to be checked in (binaries, libs etc).  Can we fix this?",non-bug,https://github.com/nasa/fprime/issues/1166
Sequence Editor Not Auto-Suggesting Enums,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The enum autocomplete doesn't work in the sequence editor tab of the GDS.",bug,https://github.com/nasa/fprime/issues/1689
Baremetal Reference: Communications,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

A quick description of the requested feature.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/2063
Sequence Linter,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

A quick description of the requested feature.

## Rationale

A rationale for why the feature should be implemented in F´.
",non-bug,https://github.com/nasa/fprime/issues/1868
Add .gitignore to `fprime-util --new` Project,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Add a `.gitignore` for basic fprime usage.",non-bug,https://github.com/nasa/fprime/issues/1980
fprime-util build failed with `error: ‘Fw::InputCmdPort’`,"| | |
|:---|:---|
|**_F´ Version_**| 3.3.0|
|**_Affected Component_**|  FW |
---
## Problem Description
when trying to compile a project with `fprime-util build` it fails with error:

```
 fprime-util build
[  0%] Built target proto
[  4%] Built target codegen
[  4%] Built target config
[  4%] Built target Fw_Cfg
[ 10%] Built target Fw_Types
[ 10%] Built target Fw_Logger
[ 12%] Built target Fw_Obj
[ 12%] Built target Fw_Port
[ 14%] Built target Fw_Time
[ 14%] Built target Fw_Com
[ 16%] Built target Fw_Tlm
[ 20%] Built target Fw_Log
[ 22%] Built target Fw_Cmd
[ 24%] Built target Fw_Prm
[ 24%] Built target Fw_Buffer
[ 26%] Built target Utils_Hash
[ 26%] Built target Fw_Comp
[ 34%] Built target Os
[ 34%] Built target Fw_CompQueued
[ 36%] Built target Fw_Ports_SuccessCondition
[ 36%] Built target CFDP_Checksum
[ 38%] Built target Fw_FilePacket
[ 40%] Built target Svc_Cycle
[ 40%] Built target Svc_Fatal
[ 40%] Built target Svc_Ping
[ 42%] Built target Svc_Sched
[ 44%] Built target Svc_Seq
[ 46%] Built target Svc_WatchDog
[ 48%] Built target Svc_ActiveLogger
[ 51%] Built target Svc_ActiveRateGroup
[ 53%] Built target Svc_AssertFatalAdapter
[ 55%] Built target Svc_BufferManager
[ 57%] Built target Svc_CmdDispatcher
[ 61%] Built target Svc_CmdSequencer
[ 63%] Built target Utils_Types
[ 63%] Built target Svc_FramingProtocol
[ 65%] Built target Drv_ByteStreamDriverModel
[ 65%] Built target Svc_Deframer
[ 67%] Built target Svc_FatalHandler
[ 69%] Built target Svc_FileDownlinkPorts
[ 71%] Built target Svc_FileDownlink
[ 73%] Built target Svc_FileManager
[ 75%] Built target Svc_FileUplink
[ 75%] Built target Svc_Framer
[ 77%] Built target Svc_Health
[ 79%] Built target Svc_PrmDb
[ 81%] Built target Svc_RateGroupDriver
[ 81%] Built target Svc_StaticMemory
[ 83%] Built target Svc_Time
[ 85%] Built target Svc_TlmChan
[ 85%] Built target version
[ 87%] Built target Svc_SystemResources
[ 87%] Built target Svc_PassiveConsoleTextLogger
[ 87%] Built target Svc_LinuxTime
[ 87%] Built target Drv_DataTypes
[ 87%] Built target Drv_BlockDriver
[ 87%] Built target Drv_Ip
[ 89%] Built target Drv_TcpClient
[ 91%] Built target Drv_Udp
[ 91%] Built target spring_spring_types
[ 91%] Built target spring_spring_ports
Scanning dependencies of target spring_controller
[ 93%] Building CXX object spring/controller/CMakeFiles/spring_controller.dir/controller_comp.cpp.o
[ 93%] Building CXX object spring/controller/CMakeFiles/spring_controller.dir/controller_compComponentAc.cpp.o
/fprime_ws/spring/build-fprime-automatic-native/spring/controller/controller_compComponentAc.cpp:26:28: error: ‘Fw::InputCmdPort’ has not been declared
   26 |       BYTE cmdPortSize[Fw::InputCmdPort::SERIALIZED_SIZE];
```

## How to Reproduce

1. fprime-util generate
2. fprime-util build

anything specific that I need to take care with this kind of error?

Thanks in advance.
",bug,https://github.com/nasa/fprime/issues/2196
GDS Does Not Sort New Items In Tables,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The table sorting doesn't work on new items: https://github.com/nasa/fprime/issues/272

Note: when fixing this, be careful to not break the efficient handling of new items.",bug,https://github.com/nasa/fprime/issues/2232
Incorrect header include when built in a syminked directory,"| | |
|:---|:---|
|**_F´ Version_**| 776af784414b8df7c148845dfca8a1956e5ac4cb |
|**_Affected Component_**| N/A |
---
## Problem Description

> Due to issues with Java/Scala and the FPP tool-set. It becomes a question as to whether we need to support symlinks outside `fprime-util` which resolves to the full corrected path. 

Converted this issue into an epic:

- [x] Incorrect use of `REALPATH`  in cmake `normalize_paths`: https://github.com/nasa/fprime/issues/2449
- [x] Incorrect normalization of paths loaded in ini_settings: https://github.com/nasa/fprime/issues/2450
- [ ] ~Incorrect topology includes: https://github.com/fprime-community/fpp/issues/370~
- [x] https://github.com/nasa/fprime/issues/2455
- [x] Fix Packet Autocoder For Symlinked Paths: https://github.com/nasa/fprime/issues/2453
- [x] https://github.com/nasa/fprime/issues/2624

## Further description

If I clone/build `fprime` in a symlinked directory, I get the following build error. The error goes away if I clone/build it in a non-symlinked path.

```
[ 13%] Building CXX object F-Prime/Fw/Log/CMakeFiles/Fw_Log.dir/LogPortAc.cpp.o
cd /data/rps/myint/fprime-hce/build/F-Prime/Fw/Log && /usr/bin/c++  -DFW_BAREMETAL_SCHEDULER=0 -DTGT_OS_TYPE_LINUX -I/data/rps/myint/fprime-hce/build -I/data/rps/myint/fprime-hce/build/F-Prime -I/data/rps/myint/fprime-hce -I/data/rps/myint/fprime-hce/config -I/data/rps/myint/fprime-hce/Fw/Log -I/data/rps/myint/fprime-hce/Fw/Com -I/data/rps/myint/fprime-hce/Fw/Time -I/data/rps/myint/fprime-hce/Fw/Port -I/data/rps/myint/fprime-hce/Fw/Cfg -I/data/rps/myint/fprime-hce/Fw/Types -I/data/rps/myint/fprime-hce/Fw/Logger -I/data/rps/myint/fprime-hce/Fw/Obj -I/data/rps/myint/fprime-hce/Fw/Tlm -isystem /data/rps/myint/fprime-hce/Fw/Types/Linux  -Wall -Wextra -Werror -Wold-style-cast -Wno-unused-parameter -std=c++11 -DASSERT_FILE_ID=""0xdacc024b"" -o CMakeFiles/Fw_Log.dir/LogPortAc.cpp.o -c /data/rps/myint/fprime-hce/build/F-Prime/Fw/Log/LogPortAc.cpp
In file included from /data/rps/myint/fprime-hce/build/F-Prime/Fw/Log/LogPortAc.cpp:6:0:
/data/rps/myint/fprime-hce/build/F-Prime/Fw/Log/LogPortAc.hpp:20:72: fatal error: /var/ammos/rps/myint/fprime-hce/Fw/Log/LogSeverityEnumAc.hpp: No such file or directory
 #include </var/ammos/rps/myint/fprime-hce/Fw/Log/LogSeverityEnumAc.hpp>
                                                                        ^
compilation terminated.
make[2]: *** [F-Prime/Fw/Log/CMakeFiles/Fw_Log.dir/LogPortAc.cpp.o] Error 1
make[2]: Leaving directory `/var/ammos/rps/myint/fprime-hce/build'
make[1]: *** [F-Prime/Fw/Log/CMakeFiles/Fw_Log.dir/all] Error 2
make[1]: Leaving directory `/var/ammos/rps/myint/fprime-hce/build'
make: *** [all] Error 2
```

The incorrectly autocoded `LogPortAc.hpp`:

```cpp
/*
 * LogPort.hpp
 *
 *  Created on: Monday, 01 August 2022
 *  Author:     myint
 *
 */
#ifndef FW_LOG_PORT_HPP_
#define FW_LOG_PORT_HPP_

#include <cstring>
#include <cstdio>
#include <FpConfig.hpp>
#include <Fw/Port/InputPortBase.hpp>
#include <Fw/Port/OutputPortBase.hpp>
#include <Fw/Comp/PassiveComponentBase.hpp>
#include <Fw/Types/BasicTypes.hpp>
#include <Fw/Types/Serializable.hpp>
#include <Fw/Types/StringType.hpp>
#include </var/ammos/rps/myint/fprime-hce/Fw/Log/LogSeverityEnumAc.hpp>
#include </var/ammos/rps/myint/fprime-hce/Fw/Log/LogBuffer.hpp>
#include <Fw/Time/Time.hpp>


namespace Fw {
...
```

## How to Reproduce

1. Create a directory.
2. Create a symlink to the above directory.
3. `cd` into the above symlink.
4. Clone `fprime`.
5. Build it.
6. Get a build error due to an incorrect header include.

## Expected Behavior

I would expect no build error and I would instead expect the autocoder to instead generate the following for `LogPortAc.hpp`. I can make the above autocoding error go away by directly `cd`ing into the resolved directory rather than the symlinked path:

```cpp
/*
 * LogPort.hpp
 *
 *  Created on: Monday, 01 August 2022
 *  Author:     myint
 *
 */
#ifndef FW_LOG_PORT_HPP_
#define FW_LOG_PORT_HPP_

#include <cstring>
#include <cstdio>
#include <FpConfig.hpp>
#include <Fw/Port/InputPortBase.hpp>
#include <Fw/Port/OutputPortBase.hpp>
#include <Fw/Comp/PassiveComponentBase.hpp>
#include <Fw/Types/BasicTypes.hpp>
#include <Fw/Types/Serializable.hpp>
#include <Fw/Types/StringType.hpp>
#include <Fw/Log/LogSeverityEnumAc.hpp>
#include <Fw/Log/LogBuffer.hpp>
#include <Fw/Time/Time.hpp>


namespace Fw {
...
```
",bug,https://github.com/nasa/fprime/issues/1604
Max id for instance conflicts with base id for another instance,"| | |
|:---|:---|
|**_F´ Version_**| 3.2.0 | 
|**_Affected Component_**|  MathSender |
---
## Problem Description
I am doing the math component tutorial and on problem 6.2 for unconnected ports I keep getting this error when i enter the command fprime-util fpp-check -u unconnected.txt where it says ""max ID 3587 for instance mathSender conflicts with base ID 3584 for instance typeDemo"" and tells where each instance is defined.

Terminal:
(venv) djaldridge@LAPTOP-4BBALQ2L:~/fprime/Math2C/fprime/Ref/Top$ fprime-util fpp-check -u unconnected.txt
fpp-check

Result:
error: max ID 3587 for instance mathSender conflicts with base ID 3584 for instance typeDemo
mathSender is defined here
/home/djaldridge/fprime/Math2C/fprime/Ref/Top/instances.fpp: 92.4
   instance mathSender: Ref.MathSender base id 0xE00 \
   ^
typeDemo is defined here
/home/djaldridge/fprime/Math2C/fprime/Ref/Top/instances.fpp: 90.4
   instance typeDemo: Ref.TypeDemo base id 0x0E00

End result;
## How to Reproduce

1.  do the math component tutorial all the way to 6.2
2.  add the component instances to the topology
3.  packetize the telemetry channels

## Expected Behavior
it's supposed to create a text file of all the unconnected ports. 
 
A description of the expected behavior.
when I type the command fprime-util fpp-check -u unconnected.txt, the text file should be created and be located in the Ref/Top directory.",bug,https://github.com/nasa/fprime/issues/2093
Add `add_fprime_subproject` Function to CMake,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Need to add a call to the build system for `add_fprime_subproject` that adapts #1994 to support multiple projects in one repo with different configuration.

This should wrap:

`ExternalProject_Add` with a specified setting and an inherited set of CMake flags.
",non-bug,https://github.com/nasa/fprime/issues/2004
"Space In Project Description, when using Fprime-utils new package generates errors in fprime-utils generate","| | |
|:---|:---|
|**_F´ Version_**|Master branch, 3.3.2 & devel | 
|**_Affected Component_**| fprime-util ( fprime-tools )  | 
---
## Problem Description

Making a new project, using` fprime-util new --project ` creates errors.


```
(fprime-test) weaselslider@Weasel-Laptop:/mnt/c/Users/wease/Desktop/Comp4710/fprime-test-test/Hello World$ fprime-util generate
[INFO] Generating build directory at: /mnt/c/Users/wease/Desktop/Comp4710/fprime-test-test/Hello World/build-fprime-automatic-native
[INFO] Using toolchain file None for platform default
CMake Error: Could not find cmake module file: CMakeDetermineWorldCompiler.cmake
CMake Error: Error required internal CMake variable not set, cmake may not be built correctly.
Missing variable is:
CMAKE_World_COMPILER_ENV_VAR
CMake Error: Error required internal CMake variable not set, cmake may not be built correctly.
Missing variable is:
CMAKE_World_COMPILER
CMake Error: Could not find cmake module file: /mnt/c/Users/wease/Desktop/Comp4710/fprime-test-test/Hello World/build-fprime-automatic-native/CMakeFiles/3.22.1/CMakeWorldCompiler.cmake
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
CMake Error at CMakeLists.txt:7 (project):
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
  No CMAKE_World_COMPILER could be found.

  Tell CMake where to find the compiler by setting the CMake cache entry
  CMAKE_World_COMPILER to the full path to the compiler, or to the compiler
  name if it is in the PATH.


CMake Error: Could not find cmake module file: CMakeWorldInformation.cmake
CMake Error: CMAKE_World_COMPILER not set, after EnableLanguage
-- Configuring incomplete, errors occurred!
See also ""/mnt/c/Users/wease/Desktop/Comp4710/fprime-test-test/Hello World/build-fprime-automatic-native/CMakeFiles/CMakeOutput.log"".
[ERROR] CMake erred with return code 1. Partial build cache remains. Run purge to clean-up.
```


The CMakeLists.txt is as follows
```
(fprime-test) weaselslider@Weasel-Laptop:/mnt/c/Users/wease/Desktop/Comp4710/fprime-test-test/Hello World$ cat CMakeLists.txt
####
# This sets up the build system for the 'Hello World' project, including
# components and deployments from project.cmake. In addition, it imports the core F Prime components.
####

cmake_minimum_required(VERSION 3.13)
project(Hello World C CXX)

###
# F' Core Setup
# This includes all of the F prime core components, and imports the make-system.
###
include(""${CMAKE_CURRENT_LIST_DIR}/fprime/cmake/FPrime.cmake"")
# NOTE: register custom targets between these two lines
include(""${FPRIME_FRAMEWORK_PATH}/cmake/FPrime-Code.cmake"")


# This includes project-wide objects
include(""${CMAKE_CURRENT_LIST_DIR}/project.cmake"")
```

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
(fprime-test) weaselslider@Weasel-Laptop:/mnt/c/Users/wease/Desktop/Comp4710/fprime-test-test/Hello World$ fprime-util version-check
usage: fprime-util [-h] {build,check,generate,purge,fpp-check,fpp-to-xml,visualize,impl,hash-to-file,info,new,format} ...
fprime-util: error: argument command: invalid choice: 'version-check' (choose from 'build', 'check', 'generate', 'purge', 'fpp-check', 'fpp-to-xml', 'visualize', 'impl', 'hash-to-file', 'info', 'new', 'format')
```

## How to Reproduce

1. fprime-util new --project
2. name the project something with a space in it (I used ""Hello World"")
3. `fprime-util generate` in the generated project


## Expected Behavior
fprime-util should either prevent the user from creating a project with a space character in the name, or it should format the CMakeLists.txt correctly, with quotes around the project name.
",bug,https://github.com/nasa/fprime/issues/2505
BufferLogger Unit Test fails in Docker Ubuntu 20.04,"| | |
|:---|:---|
|**_F´ Version_**| 2.1.0 |
|**_Affected Component_**| Svc/BufferLogger |
---
## Problem Description

Running 
```
fprime-util check 
```
I get the following 
```
The following tests FAILED:
         61 - Svc_BufferLogger_ut_exe (Failed)
```
It seems the problem occurs in BufferLogger/test/ut/Errors.cpp:177

Where ASSERT_EVENTS_SIZE(2) is expecting 2 events to be in the log, but 
```this->eventsSize``` seems to have only 1 at that point in the code.
## How to Reproduce

1. Spin a docker container running Ubuntu 20.04 (focal)
2. run fprime-util check

## Expected Behavior

For the units tests to pass.
",bug,https://github.com/nasa/fprime/issues/1388
Add `fprime-util` version check command,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Command that prints to stdout the versions of all kinds of relevant things to help debugging.
Include versions of:
- python
- pip
- cmake
- all pip F´ packages

## Rationale

Help debug things
",non-bug,https://github.com/nasa/fprime/issues/2407
Error copying file,"## Problem Description

I am working on a project which requires an array to be used as the input to a component. We are currently making modification to the MathComponent created in the Math Tutorial to accommodate our project. We attempted to follow the specifications shown at this [link](https://nasa.github.io/fprime/UsersGuide/dev/xml-specification.html#serializable) to create our .xml files. We are currently getting an error when building F` and were wondering if this is a common problem and if there is some way to fix it.

The .xml file defining our serializable type is shown below:

```
<serializable namespace=""Ref"" name=""MathOp"">
    <comment>
    This value holds the values of a math operation
    </comment>
    <import_array_type>Ref/MathTypes/TestArrayAi.xml</import_array_type>
    <members>
        <member name=""val1"" type=""TestArray""/>
        <member name=""val2"" type=""F32""/>
        <member name=""op"" type=""ENUM"">
            <enum name=""Operation"">
                <item name=""ADD""/>
                <item name=""SUB""/>
                <item name=""MULT""/>           
                <item name=""DIVIDE""/>
            </enum>
        </member>
        <member name=""result"" type=""TestArray""/>
    </members>
</serializable>
```

The imported array .xml file is shown below:

```
<array name=""TestArray"" namespace=""Ref"">
  <type>F32</type>
  <size>3</size>
  <format>%f</format>
  <default>
    <value>0.0f</value>
    <value>0.0f</value>
    <value>0.0f</value>
  </default>
</array>
```

When attempting to build F` we are receiving the following error:

![MathTypes](https://user-images.githubusercontent.com/9275528/103162164-ced05a80-47a1-11eb-8270-8cc627ec1fb6.PNG)

We were wondering if anybody else had run into this problem and if so, what a potential solution might be. We're fairly new to F` so any advice is appreciated. Than you.
",bug,https://github.com/nasa/fprime/issues/321
PrmBuffer m_data VxWorks issue,"| | |
|:---|:---|
|**_F´ Version_**| 2.0|
|**_Affected Component_**|   |
---
## Problem Description

The `m_data` member variable collides with the notorious `m_data` macro for VxWorks. Change the name of the data member to avoid the collision.

## How to Reproduce

1. Any VxWorks build

## Expected Behavior

Should compile fine under Vxworks",bug,https://github.com/nasa/fprime/issues/796
[Math Component Tutorial] create Unit Test build cache error,"Hi,

I'm running through the Math Component tutorial right now and while i've been able to successfully run the MathComponent deployment through the GDS, but my `fprime-util generate --ut ` is failing in MathProject directory. I seem to be getting different output than is shown in the tutorial, so I'm not sure if it's something in my code or how I'm running it. Any help would be much appreciated!

![fprime-util generate --ut_error](https://github.com/nasa/fprime/assets/138548836/d86c02a7-413b-4d46-bde0-aae92251621b)


",bug,https://github.com/nasa/fprime/issues/2167
Fw::Buffer Should Allow `nullptr` as an input,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**| Fw::Buffer  |
---
## Problem Description

Fw::Buffer does not allow null pointers as input.  Thus it is not possible to send an empty/blank buffer:

```
Fw::Buffer my_buffer; // Works, nullptr and 0 length
Fw::Buffer my_buffer(nullptr, 0); //Trips an assert
```

This prevents things like SPI write without read.
",bug,https://github.com/nasa/fprime/issues/873
Stop Clearing Log Pane Output on Shutdown,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

When reading logs from the log pane in the GDS, the current log is cleared on shutdown and replaced with [ERROR].  This can prevent seeing errors and reviewing and does not add context.",bug,https://github.com/nasa/fprime/issues/2380
Add a certification package,"| | |
|:---|:---|
|**_F´ Version_**| latest |
|**_Affected Component_**|  |
---
## Feature Description

The certification package shall allow users of the framework to easily certify their software using an automated infrastructure. The package shall be designed to be compatible with ECSS and DO standards used in the aviation and aerospace community, and shall assist users in achieving Class A certification for their software.

The package shall include all the tools necessary to configure and execute the certification process, including testing and validation tools to ensure that the software meets the standards and certification requirements, and the documents and forms necessary to submit the software for certification review.

The package must also include instructions and guides to help users understand how to use the certification package and navigate the certification process, as well as tools to track and manage the certification process, including expiration dates and required updates.

Finally, the package should include resources to help users understand the certification standards and requirements, as well as templates or examples of commonly used certification documents.


## Rationale

The addition of a certification package would allow users to ensure the quality and compliance of their software with Class A standards and certification requirements, which are particularly important in the aviation and aerospace industries.

This certification is often required to market and sell software in these industries, and adding a certification package would make the process easier for users of the framework.

In addition, adding a certification package could benefit the framework itself, as it could be a way to differentiate it from others and attract new users looking for a framework that offers quality certification tools.

Finally, the addition of a certification package could help ensure that software created using the framework meets the high standards and quality requirements demanded by the aviation and aerospace community, which could enhance the framework's reputation and credibility with these users.
",non-bug,https://github.com/nasa/fprime/issues/1839
installation guide not working,"| | |
|:---|:---|
|**_F´ Version_**| @latest |
|**_Affected Component_**|  install.html |
---
## installation guide not entirely working on windows wsl

Following https://nasa.github.io/fprime/INSTALL.html fprime-util install doesn't seem to work right.

This is the error msg received on `frime-util generate`:

[WARNING] Failed to find settings file: /mnt/d/Projj/nasa/helicopter2021/Fprime/fprime/Ref/settings.ini
[ERROR] /mnt/d/Projj/nasa/helicopter2021/Fprime/fprime/Ref/build-fprime-automatic-native already exists.

This is the error msg received on `fprime-util install --jobs 32`:

usage: fprime-util [-h] {generate,purge,hash-to-file,info,build,impl,check} ...
fprime-util: error: argument command: invalid choice: 'install' (choose from 'generate', 'purge', 'hash-to-file', 'info', 'build', 'impl', 'check')

## How to Reproduce

1. run wsl on windows
2. follow the installation guide.

## Expected Behavior

Not working

",bug,https://github.com/nasa/fprime/issues/534
generate error: `fpp-depend appears corrupt` on WSL1 with v3.4.0,"| | |
|:---|:---|
|**_F´ Version_**| v3.4.0 |
|**_Affected Component_**|   |
---
## Problem Description

See Error after running `fprime-util generate`:
```
fprime-util generate
[INFO] Generating build directory at: /home/ethan/work/fprime-projects/fprime-community/fprime-tutorial-hello-world/build-fprime-automatic-native
[INFO] Using toolchain file None for platform default
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
/home/ethan/venv/fprime-new/bin/fpp-depend: 1: Syntax error: ""("" unexpected
-- [fpp-tools] fpp-depend appears corrupt.
CMake Error at fprime/cmake/required.cmake:26 (message):
-- Configuring incomplete, errors occurred!
   fpp tools not found. Install with:
    'pip install -r ""/home/ethan/work/fprime-projects/fprime-community/fprime-tutorial-hello-world/fprime/requirements.txt""'
Call Stack (most recent call first):
  fprime/cmake/FPrime.cmake:13 (include)
  CMakeLists.txt:13 (include)
```

## How to Reproduce

The following commands were executed in order:
```
pip install fprime-tools
pip install -r ""fprime/requirements.txt""
fprime-util generate
```
",bug,https://github.com/nasa/fprime/issues/2398
fprime-util new --project doesn't create .gitignore,"| | |
|:---|:---|
|**_F´ Version_**| 3.x|
|**_Affected Component_**| n/a  |
---
## Problem Description

The tutorial to create a new deployment does not place a `.gitignore` file in the `MyProject` folder. This risks checking in the `venv` folder that gets created by default in `MyProject`.

## How to Reproduce

1. Follow `Hello World` tutorial through the new project step
2. Notice that `.gitignore` is missing

## Expected Behavior

A `.gitignore` should be created with `venv` in it, or better the location of the user-selected virtual environment if it is in the newly-created repo.
",bug,https://github.com/nasa/fprime/issues/2179
Create `Drv::I2cDriver` Interface,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Make an interface out of Drv/LinuxI2cDriver protocol. See #2255 for an example interface change set.

The following three ports should be pulled out of `Drv::LinuxI2cDriver` into `Svc/Interfaces/I2cInterface.fppi` such that other I2C implementations can use it.

https://github.com/nasa/fprime/blob/a73bff28617b96736c0e3e222e4c6e1dea1c6f5e/Drv/LinuxI2cDriver/LinuxI2cDriver.fpp#L5-L9

Note: annotations should be added to explain what each port does.",non-bug,https://github.com/nasa/fprime/issues/2580
Remove Docker,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We should remove the docker folder, and docker setup.

## Rationale

F´ and CI don't use Docker directly **and** keeping it up-to-date is a maintenance burden.  Docker integrations may be supported in fprime-community.  ",non-bug,https://github.com/nasa/fprime/issues/1171
"TopologyAppDictionary not populating with all enums used in arrays and parameters, preventing gds from starting up","### Discussed in https://github.com/nasa/fprime/discussions/1909

<div type='discussions-op-text'>

<sup>Originally posted by **apaletta3** February 25, 2023</sup>
Hey devs,

I'm working on a project using Fprime 3.1.1 and the gds 3.1.4, and I'm not able to start the gds up because it isn't able to parse the dictionary since certain enums that are being used in arrays and parameters that appear in the dictionary don't appear themselves in the dictionary, resulting in a parsing error as such:
`[ERROR] Parsing error: Could not find type SSDL::FormationStatusValue`

This is how the some of these enums appear in the `fpp` files in the project
``` 
enum FormationStatusValue { WORKING, NOT_WORKING, IRRELEVANT, NONE } default IRRELEVANT
array FormationStatuses = [7] FormationStatusValue
array ResponseTableInputs = [20] FormationStatuses
```
Arrays such as these are used in parameters and telem channels for some of the components in the deployment as in the example above where `ResponseTableInputs`  is a parameter. For this example, the dictionary is missing the `FormationStatusValue` enum, but it does include the `FormationStatuses` array and `ResponseTableInputs` array.

Not sure if this helps, but here's an example of how `FormationStatuses` appears in the dict, and since there is no previous definition of `SSDL::FormationStatusValue` as an enum, this is where the error is caused.
```
    <array name=""SSDL::FormationStatuses"" type=""SSDL::FormationStatusValue"" type_id=""0x34860AEB"" size=""7"" format=""%s"">
      <defaults>
        <default value=""SSDL::FormationStatusValue::IRRELEVANT""/>
        <default value=""SSDL::FormationStatusValue::IRRELEVANT""/>
        <default value=""SSDL::FormationStatusValue::IRRELEVANT""/>
        <default value=""SSDL::FormationStatusValue::IRRELEVANT""/>
        <default value=""SSDL::FormationStatusValue::IRRELEVANT""/>
        <default value=""SSDL::FormationStatusValue::IRRELEVANT""/>
        <default value=""SSDL::FormationStatusValue::IRRELEVANT""/>
      </defaults>
    </array>
```

Thanks for your help and let me know if there's anything else I should include in this post to help with understanding my issue.</div>",bug,https://github.com/nasa/fprime/issues/1913
Float Type Assertions,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We should expose floating-point ""sigma"" asserts in our F´ asserts on objects of float types.",non-bug,https://github.com/nasa/fprime/issues/1723
Setting up a Fuzz infrastructure for a cyber-secure software development environment,"| | |
|:---|:---|
|**_F´ Version_**| devel |
|**_Affected Component_**|  Testing, Code Coverage, Cyber security |
---
## Feature Description

F´ shall have its own fuzzing infrastructure capable of running the Fuzz test harness continuously.

Fuzzing is used to complement the explicit testing of functional requirements (unit and integration tests) of the mission.

As a first step, the idea is to invite project stakeholders to think about this fuzzing infrastructure and see what can be implemented in  F´.


This would require:

1. Choose the Fuzz Engine to use (see [here](https://github.com/google/fuzzing/blob/master/docs/why-fuzz.md#fuzzing-is-typically-used-to-find-the-following-kinds-of-bugs)), such as :

    - [AFLPlusPlus](https://github.com/AFLplusplus/AFLplusplus), an improvement of the [Google's AFL](https://github.com/google/AFL) used on [cFS](https://github.com/nasa/cFS/blob/main/SECURITY.md#fuzz-testing).
    - [LLVM's LibFuzzer](https://llvm.org/docs/LibFuzzer.html) notably implemented in [Jason Turner's cpp_starter_project project](https://github.com/cpp-best-practices/cpp_starter_project/blob/dfd6956418ed3a298770ccc362184574879d1b33/README.md#fuzz-testing).

2. Develop a process/mechanism for Fuzzing. Should we use ``fprime-util`` like for unit testing? [cf [here](https://github.com/google/fuzzing/blob/master/docs/building-fuzz-targets.md)]

3. Develop a standard Fuzz test harness template/pattern to apply to all components.

4. Implement a Fuzz test harness on an interesting but simple component of F´.

5. Specify the duration, frequency of this infrastructure activation (24 hours a day, 7 days a week? every night?).

6. Configure a continuous integration pipeline to run the Fuzz test harness.

7. See how the Fuzzing results are saved/displayed to the community.

8. Create a ``SECURITY.md`` file containing evidence that F´ has a cyber-secure software development environment.


## Rationale

Fuzz testing is considered an important tool in the software development process to protect assets in security related and safety critical applications.

By combining the fuzzing infrastructure with the [LGTM code analysis platform](https://lgtm.com/projects/g/nasa/fprime/context:cpp) that prevents critical vulnerabilities, F´ would have a cyber-secure software development environment suitable for today's concerns.

Indeed, fuzzing is an effective method to detect bugs before they are discovered in operation and exploited by malicious agents.


Fuzz tests detect programming errors that have nothing to do with the project requirements, such as [[ref](https://github.com/google/fuzzing/blob/master/docs/why-fuzz.md#fuzzing-is-typically-used-to-find-the-following-kinds-of-bugs)]:

- C/C++-specific bugs:
  - Use-after-free, buffer overflows
  - Uninitialized memory uses
  - Memory leaks
- Arithmetic bugs:
  - Divisions by zero, int/float overflows, invalid bitwise shifts.
- Pure and simple crashes:
  - NULL dereferences, undetected exceptions
- Concurrency bugs:
  - Data races, deadlocks
- Resource utilization problems:
  - Memory exhaustion, hanging or infinite loops, infinite recursion (stack overflows).
- Logic bugs:
  - Discrepancies between two implementations of the same protocol.
  - Round-trip consistency bugs
  - Assertion failures
 
Unit or integration test harnesses are rarely written to try to catch these types of bugs, which are primarily responsible for security flaws and reliability problems.",non-bug,https://github.com/nasa/fprime/issues/1223
Install Into Existing VENV,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Having `fprime-util new --project` create a venv makes it harder for users to understand and work with virtual environments. Additionally, it means that other users have less control over where packages are installed.

We need to:

1. Update the tool to check-for and use an existing virtual environment
2. Update the install guide to call that out.",non-bug,https://github.com/nasa/fprime/issues/2193
F´  As Library Guide,"Some users integrating with some packages need to treat F´ as a library.  

For example: STM32 build needs to call ""F´"" as a library.  Can we write a guide for developing in this style.",non-bug,https://github.com/nasa/fprime/issues/2250
fprime-util generate fails due to info-cache/fpp_locs error,"---
## Problem Description
I am trying to generate a new empty project and get this error when running fprime-util generate command:

```
$ fprime-util generate
[INFO] Generating build directory at: /home/den/Documents/F'/HelloWorld/Hello_World/build-fprime-automatic-native-ut
[INFO] Using toolchain file None for platform default
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Enabled the following sanitizers: address,undefined,leak
-- [python3] python3 found at: /home/den/Documents/F'/HelloWorld/fprime-venv/bin/python3
-- [fpp-tools] fpp-depend found at: /home/den/Documents/F'/HelloWorld/fprime-venv/bin/fpp-depend
-- [fpp-tools] fpp-to-xml found at: /home/den/Documents/F'/HelloWorld/fprime-venv/bin/fpp-to-xml
-- [fpp-tools] fpp-to-cpp found at: /home/den/Documents/F'/HelloWorld/fprime-venv/bin/fpp-to-cpp
-- [fpp-tools] fpp-locate-defs found at: /home/den/Documents/F'/HelloWorld/fprime-venv/bin/fpp-locate-defs
-- [FPRIME] Module locations: /home/den/Documents/F'/HelloWorld/Hello_World/fprime;/home/den/Documents/F'/HelloWorld/Hello_World
-- [FPRIME] Configuration module: /home/den/Documents/F'/HelloWorld/Hello_World/fprime/config
-- [FPRIME] Installation directory: /home/den/Documents/F'/HelloWorld/Hello_World/build-artifacts
-- Target build toolchain/platform: Linux/Linux
-- Including /home/den/Documents/F'/HelloWorld/Hello_World/fprime/cmake/platform/Linux.cmake
-- Requiring thread library
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- [sub-build] Performing sub-build: info-cache
-- [sub-build] Generating: info-cache with target/fpp_locs;target/fpp_depend
-- [sub-build] Executing: info-cache with fpp_locs
CMake Error at fprime/cmake/utilities.cmake:586 (message):
-- Configuring incomplete, errors occurred!
  [sub-build] Failed to execute: info-cache/fpp_locs:
See also ""/home/den/Documents/F'/HelloWorld/Hello_World/build-fprime-automatic-native-ut/CMakeFiles/CMakeOutput.log"".

  /bin/sh: 1: Syntax error: Unterminated quoted string

  gmake[3]: *** [CMakeFiles/fpp_locs.dir/build.make:74: ../locs.fpp] Error 2

  gmake[2]: *** [CMakeFiles/Makefile2:2679: CMakeFiles/fpp_locs.dir/all]
  Error 2

  gmake[1]: *** [CMakeFiles/Makefile2:2686: CMakeFiles/fpp_locs.dir/rule]
  Error 2

  gmake: *** [Makefile:498: fpp_locs] Error 2
Call Stack (most recent call first):
  fprime/cmake/sub-build/sub-build.cmake:65 (execute_process_or_fail)
  fprime/cmake/FPrime.cmake:152 (run_sub_build)
  fprime/cmake/FPrime.cmake:221 (fprime_initialize_build_system)
  CMakeLists.txt:13 (include)


[ERROR] CMake erred with return code 1. Partial build cache remains. Run purge to clean-up.
```


I am using Ubuntu 22.04.3 LTS

## How to Reproduce

1. python3 -m venv fprime-venv
2. . fprime-venv/bin/activate
3. pip install -U fprime-tools
4. fprime-util new --project
5. cd NewProject
6. fprime-util generate
",bug,https://github.com/nasa/fprime/issues/2504
SocketCAN driver?,"Has anyone ever developed a SocketCAN driver for F'?
If not, I'll start one and can share it here.",non-bug,https://github.com/nasa/fprime/issues/200
Type Enums are printed as NOSPEC to stdout,"| | |
|:---|:---|
|**_F´ Version_**|1.5> |
|**_Affected Component_**|   all |
---
## Problem Description

Enum types are printed as NOSPEC to stdout
The following example is from SignalGen

![image](https://user-images.githubusercontent.com/35859004/106944614-a9f1d000-66db-11eb-9dbc-c8019530fd66.png)

The Signal types are defined here:
https://github.com/nasa/fprime/blob/ca71e1278cf61fba4b6faf67c9f049a3a5f423e5/Ref/SignalGen/SignalTypeEnumAi.xml#L5-L8

## How to Reproduce

1. `fprime-gds -n`
2. `./fprime/Ref/build-artifacts/Darwin/bin/Ref -a 127.0.0.1 -p 50000`
3. In the GUI commanding page
![image](https://user-images.githubusercontent.com/35859004/106945338-854a2800-66dc-11eb-8fd5-1916eaf8f625.png)

Observe the printed EVR in stdout as following 
![image](https://user-images.githubusercontent.com/35859004/106944614-a9f1d000-66db-11eb-9dbc-c8019530fd66.png)

## Expected Behavior
The EVR should correctly print out the ENUM name instead of NOSPEC",bug,https://github.com/nasa/fprime/issues/348
`fprime-util generate` step missing in `Adding The Hello World Component`,"| | |
|:---|:---|
|**_F´ Version_**| v3.2.0 |
|**_Affected Component_**| HelloWorld |
---
## Problem Description

`fprime-util generate` step is missing toward the end of [Adding The Hello World Component](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/Deployments.html#adding-the-hello-world-component) section prior to `fprime-util build -j4` step, which otherwise results in a `[ERROR] '/path-to/MyProject/build-fprime-automatic-native' is not a valid build cache. Generate this build cache with 'fprime-util generate ...'` error

## How to Reproduce

1. Follow steps in [Adding The Hello World Component](https://fprime-community.github.io/fprime-tutorial-hello-world/docs/Deployments.html#adding-the-hello-world-component)

## Expected Behavior

Deployment should build without errors
",bug,https://github.com/nasa/fprime/issues/2133
CI CppCheck/CppScan failing,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

See https://github.com/nasa/fprime/actions/runs/4390265240/jobs/7688586298. CI is failing on CppLint and CppCheck scans because the `--force` option of Microsoft's SARIF-Multitool converter is not available anymore. Probably an update of the convert tool.

Fix is likely going to be to simply remove the option (or use the older version of the tool?), but we should also check what it used to be doing to be sure we're not losing any functionality.
",bug,https://github.com/nasa/fprime/issues/1931
General Documentation update,"| | |
|:---|:---|
|**_F´ Version_**| 1.5.3|
|**_Affected Component_**| Documentation  |
---
## Feature Description

**Documentation fix 1:**

In page: 

https://github.com/nasa/fprime/blob/devel/docs/INSTALL.md
 link https://github.com/nasa/fprime/blob/devel/docs/UsersGuide/user/AUTOCOMPLETE.md
 does not work


**Documentation fix 2:**

UT tutorial has outdated info: https://github.com/nasa/fprime/blob/devel/docs/UsersGuide/user/unit-testing.md


**Documentation fix 3:**

Typo in https://github.com/nasa/fprime/blob/devel/docs/UsersGuide/user/port-comp-top.md
A port may specify zero or more arguments of any D´ (supposed to be F`?) data 
type or primitive (int, float, U8, etc.).


**Documentation fix 4:**

Currently the following document
https://github.com/nasa/fprime/blob/update/ground-prototype/docs/Tutorials/MathComponent/Tutorial.md#24132-test-code-implementation
Shows ```fprime-util build –ut``` to run the test.

Add note for ``` fprime-util generate –ut``` and ```fprime-util check``` to clarify running the UT.

**Documentation fix 5:**

https://github.com/nasa/fprime/blob/devel/docs/Tutorials/MathComponent/Tutorial.md#321-component-imports
```
<import_component_type>Svc/PassiveTextLogger/PassiveTextLoggerComponentAi.xml</import_component_type>
```
has changed to 
```
<import_component_type>Svc/PassiveConsoleTextLogger/PassiveTextLoggerComponentAi.xml</import_component_type>
```

**Documentation fix 6:**

https://github.com/nasa/fprime/issues/171 is still not fixed in update/ground-prototype branch

**Documentation fix 7:**

https://github.com/nasa/fprime/blob/devel/docs/Tutorials/MathComponent/Tutorial.md#41-running-the-ground-system

```fprime-gds -d fprime/Ref```

Is -d argument still available? Get argument not found when using -d.

",non-bug,https://github.com/nasa/fprime/issues/332
Unsafe Array Creation,"|**_1.5.3, 2.0.1_**| |
|**_All_**|   |
---
## Problem Description

The autogenerated return function for array values, does not appear to be safe. 

## How to Reproduce

[/Types/Vector3DSerializableAi.xml](/Types/Vector3DSerializableAi.xml)

```
<serializable namespace=""Types"" name=""Vector3D"">
    <comment>
    Vector class for description of 3D vectors
    </comment>
    <members>
        <member name=""vec"" type=""F32"" size=""3""/>
    </members>
</serializable>
```
generates the interface 

[build-fprime-automatic-native/Types/Vector3DSerializableAc.cpp](build-fprime-automatic-native/Types/Vector3DSerializableAc.cpp)

```
const F32* Vector3D::getvec(NATIVE_INT_TYPE& size) {
    size = 3;
    return this->m_vec;
}
```
To get the array values the interface returns only a raw pointer. 
This leads to undefined behavior (if values are not immediately stored, interrupts happening, etc.).

```
Types::Vector3d a;
Types::Vector3d b;
...
const F32 *vec1 = a.getvec(3);
const F32 *vec2 = b.getvec(3);
```

## Expected Behavior

Getter interface should provide a reference interface to ensure safe allocation.
void get(F32 & return).",bug,https://github.com/nasa/fprime/issues/1137
GDS Orb does not change when client connection drops,"| | |
|:---|:---|
|**_F´ Version_**| 1.5|
|**_Affected Component_**| GDS  |
---
## Problem Description
Current implementation of GDS uses a `green orb` and a `red cross` symbol to show if there is any new communication between GDS and FSW. The orb changes to the cross when there is no update in the `channel` or `event` history in the last `config.dataTimeout` seconds. 

The issue is the orb does not change its state when client connection is dropped as shown below:

Although connection is dropped the orb is still being shown:

![image](https://user-images.githubusercontent.com/35859004/114260513-2e85f680-998a-11eb-8558-309e3b2f5205.png)

## How to Reproduce

1. Start GDS GUI without the client (`fprime-gds -n`) 
2. Start the Ref client (e.g. from the Ref directory on Mac run `./build-artifacts/Darwin/bin/Ref -a 0.0.0.0 -p 50000`)
3. Add a few `CMD_NO_OP` from `Commanding` page
3. Drop Ref connection.

## Expected Behavior
The orb should change to the cross symbol indicating the connection has dropped.
",bug,https://github.com/nasa/fprime/issues/473
Have impl code generator/cookie cutter generate `doDispatch()` example for sync port ,"| | |
|:---|:---|
|**_F´ Version_**|[v3.4.3](https://github.com/nasa/fprime/releases/tag/v3.4.3) |
|**_Affected Component_**|  |
---
## Feature Description

When specifying a component as queued, have the cookie cutter generate:

1) A `Svc::Sched` port connection, the most common use case
2) have the `Svc::Sched` handler generate code call `doDispatch()` to show that messages need to be handled manually by the user.

## Rationale

Helps users not miss the need to handle messages.",non-bug,https://github.com/nasa/fprime/issues/2870
Cleaner Unit Test Tracing,"Can we enable more unit test tracing in GTest, or expose the log generated for help debugging unit tests?",non-bug,https://github.com/nasa/fprime/issues/167
Add `Svc.Ping` port response to Active Component generated base class.,"| | |
|:---|:---|
|**_F´ Version_**|  [v3.4.3](https://github.com/nasa/fprime/releases/tag/v3.4.3) |
|**_Affected Component_**| all active |
---
## Feature Description

Have the generated base class automatically handle pings from the `Svc.Ping` port instead of having developers write the same code every time.

## Rationale

The requirement for the ping port handler is to return the supplied code sent to the `Svc.Ping` port to confirm that the thread is still alive. The implementation is pretty much always the same:

```c++
    void CmdSequencerComponentImpl ::
      pingIn_handler(
          NATIVE_INT_TYPE portNum, /*!< The port number*/
          U32 key /*!< Value to return to pinger*/
      )
    {
        // send ping response
        this->pingOut_out(0,key);
    }
```

The generated active component base class could implement this as a virtual function that would be used the majority of the time, but could be overridden by the implementation class if needed.
",non-bug,https://github.com/nasa/fprime/issues/2661
Check CMake Project Name vs Module,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

CMake $PROJECT_NAME must be the same as return value of `git_module_name(<project dir>)`.  This should produce an error if miss-set.",bug,https://github.com/nasa/fprime/issues/1445
CMAke 3.16 With Manual Build Fails on M1 Macs,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

M1 Macs fail to link when building by-hand:

```
mkdir build
cd build
cmake ..
make

```

Produces linking errors:

```
ld: warning: ignoring file '/Users/mstarch/code/fprime-infrastructure/fprime/Ref/build-fprime-automatic-native/CMakeFiles/Ref.dir/Users/mstarch/code/fprime-infrastructure/fprime/Os/Posix/DefaultFile.cpp.o': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libconfig.a[4](ProcTypeEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libconfig.a[3](PolyDbEntryEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libconfig.a[2](FppConstantsAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[22](SuccessEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Obj.a[3](SimpleObjRegistry.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Logger.a[3](LogAssert.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cfg.a[2](ConfigCheck.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PosixTime.a[3](PosixTimeComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Port.a[6](PortBase.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Time.a[2](Time.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Port.a[5](OutputSerializePort.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Com.a[4](ComPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PosixTime.a[2](PosixTime.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Tlm.a[5](TlmGetPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Port.a[4](OutputPortBase.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Comp.a[2](PassiveComponentBase.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Log.a[8](LogTextPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Prm.a[6](PrmSetPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Prm.a[5](PrmGetPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cmd.a[8](CmdResponsePortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Prm.a[4](ParamValidEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cmd.a[7](CmdResponseEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Tlm.a[6](TlmPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libUtils_Hash.a[5](HashCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Prm.a[3](PrmString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cmd.a[6](CmdRegPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Time.a[3](TimePortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cmd.a[5](CmdPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[28](SystemResources.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Tlm.a[4](TlmString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_Ip.a[5](UdpSocket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_Ip.a[4](TcpServerSocket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Tlm.a[3](TlmPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cmd.a[4](CmdString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Tlm.a[2](TlmBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_Ip.a[6](SocketReadTask.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Com.a[3](ComBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Port.a[3](InputSerializePort.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Prm.a[2](PrmBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[27](IPCQueueStub.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_Ip.a[3](TcpClientSocket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[26](Directory.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_Ip.a[2](IpSocket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[25](TaskId.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[24](FileSystem.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cmd.a[3](CmdPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Port.a[2](InputPortBase.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Buffer.a[3](BufferGetPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Cmd.a[2](CmdArgBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Buffer.a[4](BufferSendPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Buffer.a[2](Buffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Log.a[7](LogSeverityEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Com.a[2](ComPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libUtils_Hash.a[4](HashBufferCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Logger.a[2](Logger.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[23](Mutex.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libUtils_Hash.a[3](lib_crc.c.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Obj.a[2](ObjBase.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[22](IntervalTimer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[21](SerialStatusEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_Udp.a[3](UdpComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[21](WatchdogTimer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_TcpClient.a[3](TcpClientComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[20](OpenEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_DataTypes.a[3](DataBufferPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Cycle.a[2](TimerVal.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Cycle.a[3](CyclePortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_TcpServer.a[3](TcpServerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libUtils_Hash.a[2](CRC32.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Log.a[6](LogPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Ping.a[2](PingPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[19](OnEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Sched.a[2](SchedPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[18](LogicEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_CompQueued.a[3](ActiveComponentBase.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Log.a[5](TextLogString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_BlockDriver.a[3](BlockDriverComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[17](HealthEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[20](InterruptLock.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_BlockDriver.a[2](BlockDriverImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_Udp.a[2](UdpComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_PingReceiver.a[3](PingReceiverComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_DataTypes.a[2](DataBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_PingReceiver.a[2](PingReceiverComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[16](EnabledEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SendBuffApp.a[3](SendBuffComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_CompQueued.a[2](QueuedComponentBase.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SendBuffApp.a[2](SendBuffComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_TcpServer.a[2](TcpServerComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SignalGen.a[8](SignalTypeEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[15](DirectionEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SignalGen.a[7](SignalSetArrayAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[14](DeserialStatusEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SignalGen.a[6](SignalPairSetArrayAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_TcpClient.a[2](TcpClientComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[19](Task.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Fatal.a[2](FatalEventPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_ByteStreamDriverModel.a[8](SendStatusEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[13](ActiveEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SendBuffApp.a[4](SendBuff_ActiveStateEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[18](MaxHeap.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[11](TypeDemoComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[17](PriorityBufferQueue.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[10](TooManyChoicesArrayAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SignalGen.a[5](SignalPairSerializableAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[16](BufferQueueCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SignalGen.a[4](SignalInfoSerializableAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[12](StringUtils.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_ByteStreamDriverModel.a[7](RecvStatusEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Log.a[4](LogString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_AssertFatalAdapter.a[3](AssertFatalAdapterComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[11](StringType.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_ByteStreamDriverModel.a[6](PollStatusEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Log.a[3](LogPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[10](Serializable.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[9](ScalarStructSerializableAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[9](SerialBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[15](Queue.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[8](PolyType.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_ByteStreamDriverModel.a[5](ByteStreamSendPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Log.a[2](LogBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SignalGen.a[3](SignalGenComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_AssertFatalAdapter.a[2](AssertFatalAdapterComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[14](LogPrintf.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[13](LogDefault.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_ByteStreamDriverModel.a[4](ByteStreamRecvPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_ByteStreamDriverModel.a[3](ByteStreamReadyPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[8](ManyChoicesArrayAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[7](FppConstantsAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[6](FloatSetArrayAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libDrv_ByteStreamDriverModel.a[2](ByteStreamPollPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_SignalGen.a[2](SignalGen.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[12](File.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[11](ValidatedFile.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[5](ChoiceSlurrySerializableAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[7](ObjectName.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[10](ValidateFileCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[4](ChoicePairSerializableAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Seq.a[3](CmdSeqInPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_BufferManager.a[3](BufferManagerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_BufferManager.a[2](BufferManagerComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_RecvBuffApp.a[5](RecvBuffComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Seq.a[2](CmdSeqCancelPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[9](MemCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[3](ChoiceEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[8](SimpleQueueRegistry.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_TypeDemo.a[2](TypeDemo.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[7](IPCQueueCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[6](QueueString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[6](MemAllocator.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_RecvBuffApp.a[4](PacketStatSerializableAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdDispatcher.a[3](CommandDispatcherComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[5](MallocAllocator.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_RecvBuffApp.a[3](PacketRecvStatusEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_ActiveRateGroup.a[3](ActiveRateGroupComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_ActiveRateGroup.a[2](ActiveRateGroup.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_RecvBuffApp.a[2](RecvBuffComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdDispatcher.a[2](CommandDispatcherImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libUtils_Types.a[3](Queue.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libCFDP_Checksum.a[2](Checksum.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[5](QueueCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[4](InternalInterfaceString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[4](TaskCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libUtils_Types.a[2](CircularBuffer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlinkPorts.a[5](SendFileStatusEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[3](TaskString.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[3](String.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_FilePacket.a[7](PathName.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_FilePacket.a[8](StartPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_FilePacket.a[6](Header.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FramingProtocol.a[3](FramingProtocol.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_FilePacket.a[5](FilePacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FramingProtocol.a[2](DeframingProtocol.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_FilePacket.a[4](EndPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FramingProtocol.a[4](FprimeProtocol.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs.a[2](IntervalTimerCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Types.a[2](Assert.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_FilePacket.a[3](DataPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_Ports_SuccessCondition.a[2](SuccessConditionPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libFw_FilePacket.a[2](CancelPacket.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlinkPorts.a[4](SendFileResponseSerializableAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlinkPorts.a[3](SendFileRequestPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlinkPorts.a[2](SendFileCompletePortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_WatchDog.a[2](WatchDogPortAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PassiveConsoleTextLogger.a[3](PassiveTextLoggerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PassiveConsoleTextLogger.a[2](ConsoleTextLoggerImplCommon.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FatalHandler.a[4](FatalHandlerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FatalHandler.a[3](FatalHandlerComponentLinuxImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FatalHandler.a[2](FatalHandlerComponentCommonImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_ActiveLogger.a[5](ActiveLogger_FilterSeverityEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_RateGroupDriver.a[3](RateGroupDriverComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_ActiveLogger.a[4](ActiveLogger_EnabledEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Framer.a[3](FramerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_ActiveLogger.a[3](ActiveLoggerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Framer.a[2](Framer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Deframer.a[2](Deframer.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_ActiveLogger.a[2](ActiveLoggerImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_RateGroupDriver.a[2](RateGroupDriver.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Deframer.a[3](DeframerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_SystemResources.a[4](SystemResourcesComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_SystemResources.a[3](SystemResourceEnabledEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_SystemResources.a[2](SystemResources.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_TlmChan.a[3](TlmChanComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileUplink.a[5](FileUplinkComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs_File_Posix.a[2](File.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libOs_File_Posix.a[3](errno.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileUplink.a[4](Warnings.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileUplink.a[3](File.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileUplink.a[2](FileUplink.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_TlmChan.a[2](TlmChan.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Health.a[4](HealthComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_StaticMemory.a[3](StaticMemoryComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_StaticMemory.a[2](StaticMemoryComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Health.a[3](HealthComponentStubChecks.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileManager.a[3](FileManagerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_Health.a[2](HealthComponentImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileManager.a[2](FileManager.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlink.a[5](FileDownlinkComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlink.a[4](Warnings.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlink.a[3](File.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_FileDownlink.a[2](FileDownlink.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PrmDb.a[5](PrmDb_PrmWriteErrorEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PrmDb.a[4](PrmDb_PrmReadErrorEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PrmDb.a[3](PrmDbComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_PrmDb.a[2](PrmDbImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_Top.a[7](RefPacketsAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_Top.a[6](RefTopologyAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_Top.a[5](Ports_StaticMemoryEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_Top.a[4](Ports_RateGroupsEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_Top.a[3](FppConstantsAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libRef_Top.a[2](RefTopology.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[10](CmdSequencer_SeqModeEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[9](CmdSequencer_FileReadStageEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[8](CmdSequencer_BlockStateEnumAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[7](CmdSequencerComponentAc.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[6](AMPCSSequence.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[5](Sequence.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[4](FPrimeSequence.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[3](Events.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
ld: warning: ignoring file 'lib/Darwin/libSvc_CmdSequencer.a[2](CmdSequencerImpl.cpp.o)': found architecture 'arm64', required architecture 'x86_64'
Undefined symbols for architecture x86_64:
  ""_main"", referenced from:
      <initial-undefines>
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[2]: *** [bin/Darwin/Ref] Error 1
make[1]: *** [CMakeFiles/Ref.dir/all] Error 2
make: *** [all] Error 2
```",bug,https://github.com/nasa/fprime/issues/2623
LinuxSerialDriver: Remove old comments,"| | |
|:---|:---|
|**_F´ Version_**| 2.x |
|**_Affected Component_**| LinuxSerialDriver  |
---
## Problem Description

There are comments in the code that are from the original hardware platform such as:

```c++
      /*
       Their config:
       2-wire UART on BLSP2 is accessible via /dev/ttyHS0
       2-wire UART on BLSP9 is accessible via /dev/ttyHS3
       4-wire UART on BLSP6 is accessible via /dev/ttyHS2
       Our config:
       tty-1 bam-2 2-wire
       tty-2 bam-6 4-wire
       tty-3 bam-9 4-wire
       */
```

These should be removed

## How to Reproduce

n/a

## Expected Behavior

n/a
",bug,https://github.com/nasa/fprime/issues/1066
fpp-to-xml unable to compile telemetry limits with boolean types,"| | |
|:---|:---|
|**_F´ Version_**| v3.4.3 |
|**_Affected Component_**| fpp-to-xml  |
---
## Problem Description

Unable to use telemetry limits with boolean types. The `fpp-to-xml` script is unable to generate an XML file. Here is an example built from the `Ref` deployment

Version 1:
```
telemetry test2: bool id 7 \
low { \
  orange false \
}
```

```
fpp-to-xml
/Users/kubiak/Documents/fprime/Ref/SignalGen/Telemetry.fppi:26.10
  orange false \
         ^
  included at /Users/kubiak/Documents/fprime/Ref/SignalGen/SignalGen.fpp:69.13
error: cannot convert bool to a numeric type
```

Version 2:
```
telemetry test2: bool id 7 \
low { \
  orange 0 \
}
```

```
fpp-to-xml
/Users/kubiak/Documents/fprime/Ref/SignalGen/Telemetry.fppi:26.10
  orange 0 \
         ^
  included at /Users/kubiak/Documents/fprime/Ref/SignalGen/SignalGen.fpp:69.13
error: cannot convert Integer to bool
```

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
Operating System: Darwin
CPU Architecture: arm64
Platform: macOS-14.4.1-arm64-arm-64bit
Python version: 3.12.2
CMake version: 3.27.4
Pip version: 24.0
[WARNING] Cannot import 'pkg_resources'. Will not check tool versions.
```

Also observed on
```
Operating System: Linux
CPU Architecture: aarch64
Platform: Linux-6.5.0-26-generic-aarch64-with-glibc2.35
Python version: 3.10.12
CMake version: 3.22.1
Pip version: 22.0.2
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a5
```

## How to Reproduce

1. Add the following line to `SignalGen.fpp`
```
telemetry test2: bool id 7 \
low { \
  orange false \
}
```

```
fpp-to-xml
/Users/kubiak/Documents/fprime/Ref/SignalGen/Telemetry.fppi:26.10
  orange false \
         ^
  included at /Users/kubiak/Documents/fprime/Ref/SignalGen/SignalGen.fpp:69.13
error: cannot convert bool to a numeric type
```



2. Rebuild the `Ref` deployment. Observe the following error

## Expected Behavior

Expect to be able to use telemetry limits with Boolean telemetry types
",bug,https://github.com/nasa/fprime/issues/2656
Typos in MathComponent tutorial,"| | |
|:---|:---|
|**_F' Version_**|3.0|
|**_Affected Component_**| docs/Tutorials/MathComponent |
---
## Problem Description

In `docs/Tutorials/MathComponent/Tutorial.md`, line 2113, ends with `how` when it should say `now`:

https://github.com/nasa/fprime/blob/91c578ee37c01ba92e556dbca0287d82f9f18b95/docs/Tutorials/MathComponent/Tutorial.md?plain=1#L2111-L2115

In `docs/Tutorials/MathComponent/md/Tutorial.md`, line 1788, ends with `how` when it should say `now`:

https://github.com/nasa/fprime/blob/91c578ee37c01ba92e556dbca0287d82f9f18b95/docs/Tutorials/MathComponent/md/Tutorial.md?plain=1#L1786-L1790

There are a couple of instances in the same files that seem to indicate that the intention was to say _now_:
https://github.com/nasa/fprime/blob/master/docs/Tutorials/MathComponent/Tutorial.md?plain=1#L2144
https://github.com/nasa/fprime/blob/master/docs/Tutorials/MathComponent/md/Tutorial.md?plain=1#L1819

## How to Reproduce

Not applicable (typo).

## Expected Behavior

Not applicable (typo).",bug,https://github.com/nasa/fprime/issues/1929
Telemetry Port/Channel Autocoder Bug,"| | |
|:---|:---|
|**2.0**| |
|**Autocoder**|   |
---
## Problem Description

Currently, components with a telemetry port but no telemetry channels will build, but the unit test build will fail.

## How to Reproduce

1. On a throwaway branch, navigate to any component without telemetry channels (I used Svc/ActiveTextLogger) and add `<import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>` to the ActiveLoggerComponentAi.xml file. Additionally, add the telemetry port to the XML with the following line: 
`<port name=""Tlm"" data_type=""Fw::Tlm"" kind=""output"" role=""Telemetry"" max_number=""1""/>`
2. Use fprime-util build
3. Use fprime-util build -ut and the bug should occur

## Expected Behavior

fprime-util build should either fail or warn the user that they have not specified telemetry channels for their telemetry port
",bug,https://github.com/nasa/fprime/issues/835
Os Specific Installation Links,"Certain OS-Specific steps are hard to find in the INSTALL guide.

- macOS: must install CMake to path
- macOS: user-space installations
- ubuntu: notes on split-python installs
- Windows: WSL

Make these notes easier to find.

",non-bug,https://github.com/nasa/fprime/issues/2235
Tutorial.md Possibly Incorrect Ref Install Instructions,"| | |
|:---|:---|
|**_F´ Version_**|latest devel |
|**_Affected Component_**| Tutorial.md  |
---
## Problem Description

I am following the instructions in _Tutorial.md_ in an Ubuntu 20.04 Docker container.  In the section **Installing the Ref Deployment and Running the Binary Assuming Linux** of _Tutorial.md_ I followed the steps listed:

```sh
cd fprime/Ref
fprime-util build
./bin/Linux/Ref # Run the deployment
CTRL-C # Exit the application
```

and there is no _.bin_ directory in _fprime/Ref_. 

I ran a `find . -name Ref` and `ls` all over the _fprime_ and _Ref_ directories and I have not found that binary directory. 

## How to Reproduce

1. Setup the latest `fprime/devel` branch on Ubuntu.
2. Go through the _Tutorial.md_ instructions.
3. Build the Ref component and look for the _.bin_ directory.

## Expected Behavior

Be able to walk through _Tutorial.md_ and find the _.bin_ directory on Linux.
",bug,https://github.com/nasa/fprime/issues/864
Update `Svc/TlmChan` to send multiple channels per `ComBuffer`,"| | |
|:---|:---|
|**_F´ Version_**| 3.0 |
|**_Affected Component_**| `Svc/TlmChan` |
---
## Feature Description

Put more than one channel in `ComBuffer` when downlinking updated channels. Fill the `ComBuffer` with channels until it is full and repeat until all updated channels are sent.

## Rationale

`Svc/TlmChan` is currently very inefficient in that it sends only one channel per downlink packet. This will make it more efficient per packet.

## Note: A ground system update is needed for this since the GDS only extracts one telemetry channel from each packet.

https://github.com/fprime-community/fprime-gds/issues/40
",non-bug,https://github.com/nasa/fprime/issues/1204
Delete locs.fpp and update-locs files within fprime,"| | |
|:---|:---|
|**_F´ Version_**| 3.0.0+ |
|**_Affected Component_**| N/A |
---
## Problem Description

Within fprime, there are a few files sprinked throughout that are not being used anymore. All the files named `locs.fpp` which contain fpp locations for symbols within each build module are no longer needed since there is now a scan that generates a location index in the build system itself. Similarly, the `update-locs` scripts next to these `locs.fpp` files can be deleted.

## How to Reproduce

See the files in the `config/`, `Drv/`, `Fpp/`, `Fw/`, `Ref/`, and `Svc/` directories

## Expected Behavior

This isn't a breaking bug, but it is confusing enough that developers who are using Ref as a reference deployment have tried to use these scripts and files and been confused by why they aren't doing anything (see the discussion here: https://github.com/nasa/fprime/discussions/1555)
",bug,https://github.com/nasa/fprime/issues/1576
Event throttling,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Current event throttling is very limited. Once your event reaches the throttle limit, it never gets output again until FSW calls `log_<severity>_<eventName>_ThrottleClear()` function. It would be better if F Prime could throttle X events per Y seconds.


## Rationale

Handling a burst of events at a specific rate has been more useful in my projects than only handling X events and giving up until commanded to reset throttle rate.
",non-bug,https://github.com/nasa/fprime/issues/1940
Create RPi PWM driver,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Create a driver to allow users to control the raspberry pi's PWM pins. Preferably, this is done using hardware PWM, not software PWM.

## Rationale
This feature is needed for the F' system reference's use of a rotor. 
",non-bug,https://github.com/nasa/fprime/issues/2116
F´ Check Version of Tool Suite,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Check the following versions:

fprime-util: check fpp, fprime (repo), fprime-gds

",non-bug,https://github.com/nasa/fprime/issues/1341
FPP with `NATIVE_INT_TYPE` compiles but GDS fails to start,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.3 |
|**_Affected Component_**| fprime-util |
---
## Problem Description

An event, and presumably other typed elements, can be specified with an argument of type `NATIVE_INT_TYPE` and this will build fine. However, when launching GDS, it fails with

```
[ERROR] Parsing error: Could not find type NATIVE_INT_TYPE
[ERROR] Failed to run application ...
[INFO] Shutting down F prime due to error. Failed to run HTML GUI
```

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
└──> fprime-util version-check
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-4.18.0-513.18.1.el8_9.x86_64-x86_64-with-glibc2.28
Python version: 3.11.5
CMake version: 3.26.5
Pip version: 24.0
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a3
```

## How to Reproduce

Introduce an event like

```
        event REJECTED_EXEC (
            cmdType: ProjectName.CmdIdType
            portNo: NATIVE_INT_TYPE
        ) 
```

Then build and run GDS.

## Expected Behavior

Either the application should fail to compile, or GDS should start with the resulting dictionary.
",bug,https://github.com/nasa/fprime/issues/2788
fprime-util new cmakelist addition error,"| | |
|:---|:---|
|**_F´ Version_**|2.0.1 |
|**_Affected Component_**|  fprime-util new |
---
## Problem Description

When using the `fprime-util new` command to create a new component, at the very end of the process it will attempt to add a line to your deployment's `CMakeLists.txt` for the new component. However, when you run this command OUTSIDE the deployment folder and use the `-d` flag, the command will successfully create the files associated with the component, but it will error on the step where it adds the line to the deployment `CMakeLists.txt`

Repository structure in question:

```
gt2-software (project root)
    |
    |-- fprime (submodule)
    |
    |-- Primary (cookiecutter deployment)
    |
    |-- Common (The folder containing your fprime component)
```

## How to Reproduce

1. In a repository in which fprime is included as a submodule, create a deployment at the same level as the fprime directory. See the repository structure above as an example. (In my case, to generate the deployment labeled ""Primary,"" I used Sterling Peet's fprime deployment cookiecutter located here: https://github.com/SterlingPeet/cookiecutter-fprime-deployment ).
2. Run `fprime-util generate` in the deployment folder. (In my case, ""Primary"").
3. Create a new component outside the deployment folder using `fprime-util new -d <path-to-your-deployment>` (In my case, I ran `fprime-util new -d ../Primary` from the `Common` directory.)
4. Walk through the prompts and hit enter for all default options.
5. Component folder and files will successfully generate, but you will receive an error like this where you would normally get a prompt asking if you'd like to add your component to the CMakeList: `ValueError: '/home/anthony/fprime-devel/gt2-software/Common/GPS' does not start with '../Primary'`

## Expected Behavior

`fprime-util new` will automatically detect the CMakeLists.txt file within your deployment folder (in the below example, the deployment is called  ""Primary"")
You will then be prompted to include the component in the topology and generate implementations as is shown below.

```[INFO] Found CMakeLists.txt at '/home/anthony/fprime-devel/gt2-software/Primary/CMakeLists.txt'
[INFO] Topology inclusion 'add_fprime_subdirectory(""${CMAKE_CURRENT_LIST_DIR}/Top/"")' found on line 80.
Add component GPS to /home/anthony/fprime-devel/gt2-software/Primary/CMakeLists.txt  before topology inclusion?yes
Generate implementations and merge into /home/anthony/fprime-devel/gt2-software/Primary/GPS/GPSComponentImpl.hpp and /home/anthony/fprime-devel/gt2-software/Primary/GPS/GPSComponentImpl.cpp?yes```
",bug,https://github.com/nasa/fprime/issues/1244
fprime-util generate displays generic error when library is missing target restrictions,"| | |
|:---|:---|
|**_F´ Version_**| 3.4.0 |
|**_Affected Component_**| fprime-util |
---
## Problem Description

@LeStarch, per our conversation earlier, you requested a bug report with the following notes:
- fprime-util generate <target> will produce a generic error when one of the subrepos listed as a `library_location` in `settings.ini` is missing the correct `restrict_platforms()` verbiage in its any of its CMake files.
- One example is that in which a library is added to access one or several files, but a target-specific static library included as a `MOD_DEP` is also specified 

## How to Reproduce

1. Include as a `library_location` any submodule or folder tree which includes a CMake that uses a path in a `cmake/toolchain` file
2. Alternatively, set a `MOD_DEPS` that is satisfied by a lower-level CMake file with a `restrict_platforms()` that does not match the higher-level CMake file
3. Observe an error like:

`CMake error at fprime/cmake/target/build.cmake:75 (add_dependencies): The dependency myLib.a of target MyTarget does not exist`

## Expected Behavior

Reading the CMake call/error stack will eventually get you to a line pointing to the underlying offending CMake file. I'm not sure how you would like to improve this.",bug,https://github.com/nasa/fprime/issues/2486
Vulnerabilities in FileUplink overwriting,"| | |
|:---|:---|
|**_F´ Version_**| |
|**FileUplink**|   |
---
## Problem Description

CADRE discovered a vulnerability with FileUplink associated with overwriting existing files. Assume version-1 of a file is saved with the name <FILE.bin> and has the size X-bytes. Version-2 of <FILE.bin> is uplinked with a size of Y-bytes where X>Y, e.g. the new file is smaller than the old file. In this scenario, FileUplink successfully validates size, checksum, etc, then saves to disk in such a way that it partially overwrites the old version. The result is <FILE.bin> that has a size of X-bytes. The first Y-bytes originate in FILE.bin_v2 and the remaining (X minus Y)-bytes originate from FILE.bin_v1. And what is concerning is that no errors or warnings are raised.

CADRE is taking this as Use-As-Is (UAI) and operationally restricting file overwrites on uplink.

For JPLers, reference [CADRE issue 946](https://cadregitlab.jpl.nasa.gov/cadre/cadre-fsw/-/issues/946).

According to @csmith608, other FPrime missions at JPL have addressed this problem in their local code base, so there are solutions out in the wild.

## How to Reproduce

See above 

## Expected Behavior

The old file deleted prior to the new file being saved.
",bug,https://github.com/nasa/fprime/issues/2458
Refactor Os::Log into CMake Selection,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

- [x] Consider if `Os::Log` should be renamed `Os::Console`. 
- [x] Refactor Os::Log into the Interface, Os::Log, and Implementation classes (following pattern of Os::File)
- [x] Implement Posix implementation
- [x] Implement Stub implementation
- [x] Implement Test stub implementation
- [x] Build common rules-based tests
- [x] Build specific posix tests
- [x] Build stub interface tests
- [x] Setup default posix implementation for Posix platforms
- [x] Document
",non-bug,https://github.com/nasa/fprime/issues/2723
Fix BSON Version for OpenMCT,"BSON needs to be updated to 1.0.5 or greater:

https://github.com/nasa/fprime/blob/44bc57574daaac8d455b60912f664e6c57d487d9/openmct/package.json#L23",bug,https://github.com/nasa/fprime/issues/40
Fw.Time for TM/TC,"### Discussed in https://github.com/nasa/fprime/discussions/2152

<div type='discussions-op-text'>

<sup>Originally posted by **SMorettini** July 24, 2023</sup>
Hi everyone,

I'm currently working on a project where I need to create a telemetry channel with a struct that contains an Fw.Time variable as data. The challenge I'm facing is that Fw.Time is not defined in any Fpp but only in a serializable, which means there is no direct definition of the type Fw::Time in the dictionary.

As of now, the workaround I've implemented involves using a custom Time type. Whenever I need to send data involving Fw.Time in TM/TC, I convert Fw.Time to my custom time type. However, I feel that this solution is not the most elegant.

Therefore, I'm interested in exploring better alternatives to handle this situation effectively. If there is a better way I would be happy to contribute to Fprime in the implementation.  

Thank you in advance for your assistance!</div>",non-bug,https://github.com/nasa/fprime/issues/2335
Implement Data Buffer compression ports and components,"| | |
|:---|:---|
|**_F´ Version_**|3.x |
|**_Affected Component_**| new component  |
---
## Feature Description

Add a set of data compression ports and a bzip2 based compression component. 

Requirements:

1) input `Fw::Buffer` port for incoming uncompressed buffers
2) output `Fw::Buffer` port for outgoing compressed buffers
3) Component would not require additional Fw::Buffer allocation; compress in place or use temporary working buffer.


## Rationale

This will allow the `DpWriter` component (and others) to optionally compress data that is in `Fw::Buffer` memory.
",non-bug,https://github.com/nasa/fprime/issues/1959
Add LED Blinker as a Formal Tutorial,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Two steps:
- [x] Add it to the tutorial landing page (documentation)
- [x] Build in CI to ensure it stays current
",non-bug,https://github.com/nasa/fprime/issues/1999
Cannot name a port interface field status,"The autocoder uses a local variable called status internally, so naming a field called status conflicts with the local variable.
We should name mangle local variable to prevent this from happening.


Defined Port:

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<?oxygen RNGSchema=""file:../xml/ISF_Type_Schema.rnc"" type=""compact""?>
<interface name=""SendFileComplete"" namespace=""Svc"">
    <import_enum_type>Svc/FileDownlink/SendFileStatusEnumAi.xml</import_enum_type>
    <comment>
        FileDownlink response to send file request
    </comment>
    <args>
        <arg name=""status"" type=""Svc::SendFileStatus"">
            <comment>Response Status</comment>
        </arg>
        ....
    </args>
</interface>

```

Autogenerated Code:

```c++
void OutputSendFileCompletePort::invoke(Svc::SendFileStatus status, U32 context, filenameString filename) {
#if FW_PORT_TRACING == 1
    this->trace();
#endif

#if FW_PORT_SERIALIZATION            
    FW_ASSERT(this->m_port||this->m_serPort);
#else
    FW_ASSERT(this->m_port);
#endif

    if (this->m_port) {
        this->m_port->invoke(status, context, filename);
#if FW_PORT_SERIALIZATION            
    } else if (this->m_serPort) {

        Fw::SerializeStatus status;

        SendFileCompletePortBuffer _buffer;
        status = _buffer.serialize(status);
        FW_ASSERT(Fw::FW_SERIALIZE_OK == status,static_cast<AssertArg>(status));

        status = _buffer.serialize(context);
        FW_ASSERT(Fw::FW_SERIALIZE_OK == status,static_cast<AssertArg>(status));

        status = _buffer.serialize(filename);
        FW_ASSERT(Fw::FW_SERIALIZE_OK == status,static_cast<AssertArg>(status));

        status = this->m_serPort->invokeSerial(_buffer);
        FW_ASSERT(Fw::FW_SERIALIZE_OK == status,static_cast<AssertArg>(status));
    }
#else
    }    
#endif

} // end OutputSendFileCompletePort::invoke(...)
```

Compilation Error:

```
fprime-oss/build-fprime-automatic-native/F-Prime/Svc/FileDownlink/SendFileCompletePortAc.cpp:202:36: error: variable 'status' is uninitialized when used here [-Werror,-Wuninitialized]
        status = _buffer.serialize(status);
                                   ^~~~~~
fprime-oss/build-fprime-automatic-native/F-Prime/Svc/FileDownlink/SendFileCompletePortAc.cpp:199:9: note: variable 'status' is declared here
        Fw::SerializeStatus status;
```",bug,https://github.com/nasa/fprime/issues/308
Why the test api of gds has double the histories?,"### Discussed in https://github.com/nasa/fprime/discussions/2153

<div type='discussions-op-text'>

<sup>Originally posted by **SMorettini** July 24, 2023</sup>
In [api.py](https://github.com/fprime-community/fprime-gds/blob/928a264420a1f2b566c4f1a88e7fceae861fa619/src/fprime_gds/common/testing_fw/api.py#L41C1-L44C65) there are the following lines:
```
# these are owned by the GDS and will not be modified by the test API.
self.aggregate_command_history = pipeline.histories.commands
self.aggregate_telemetry_history = pipeline.histories.channels
self.aggregate_event_history = pipeline.histories.events
```
Why do we need to create the history objects for GDS inside the integration tests? From my understanding, the pipeline of GDS and the pipeline for the integration tests are two different pipelines and both contain their history objects. Could someone clarify this point?

I notice that I run my integration tests for hours and the ram usage keeps increasing because I was clearing the test histories but the histories indicated in the code above were not cleaned by GDS. 

P.s.: In my setup, GDS is started separately, am I don't it wrong? </div>",bug,https://github.com/nasa/fprime/issues/2336
Add a formatter?,"| | |
|:---|:---|
|**_F´ Version_**| n/A|
|**_Affected Component_**|  All of them|
---
## Feature Description

Add a formatter (like clang-format) to keep all of the code formatted in the same way.

## Rationale

A lot of C++ projects (like root-project/root) have this and it is very helpful.

Should be done as an individual point release.
",non-bug,https://github.com/nasa/fprime/issues/817
Apply uniform convention to serialize() methods,"| | |
|:---|:---|
|**_F´ Version_**|2.1.0 |
|**_Affected Component_**| At least `TlmChan` and `Serializable`  |
---
## Feature Description
Ensure that methods called in the form `foo.serialize(bar)` always (uniformly across F') either:
- Serialise `foo` and place it in `bar`
- Serialise `bar` and place it in `foo`

## Rationale

I am tracing the path of a telemetry channel from source component to ground, using Ref for simplicity.

In `MathReceiverComponentBase::tlmWrite_MR_FACTOR1()`, we see this line:
```cpp
Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
```
... which appears to me like `arg` is being serialised and stored in a byte array in `_tlmBuff`. That makes sense.

However, in `TlmChanImpl::Run_handler()` we see this:
```cpp
Fw::SerializeStatus stat = this->m_tlmPacket.serialize(this->m_comBuffer);
...
this->PktSend_out(0,this->m_comBuffer,0);
```

In the first case, `arg` is serialised and stored in `_tlmBuffer`; in the second, `this->m_tlmPacket` is serialised and stored in `this->m_comBuffer`.

This is chaotic and contradictory.",non-bug,https://github.com/nasa/fprime/issues/1289
Update system reference to work with the latest F Prime,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Update the system reference project so it compiles with the latest version of F Prime (which at the time of writing this, is v3.2.0)

",non-bug,https://github.com/nasa/fprime/issues/2007
Add In `handle` As a Queue Overflow Behavior,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Ass in `handle` as a queue overflow behavior and autocode `overflowHandler` function for it!",non-bug,https://github.com/nasa/fprime/issues/2571
Checking UTs in Os/Posix Does Not Work,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

1. `cd Os/Posix`
2. `fprime-util check`

Failure.  This is likely caused because named UTs were added, but a module-level UT was not.  Thus breaking the build linkage.  See: #2672 for further information.",bug,https://github.com/nasa/fprime/issues/2734
Flag to stop printing log messages to STDOUT,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

The current FPrime behavior for log messages is to:
1. Send them to downlink,
2. Record them to the a file, and
3. print them to STDOUT.

In the event an operator wants to see STDOUT, one must download the STDOUT log file, which also includes the log messages. Thusly, those are received in duplicate, or in triplicate if the recorded stream is also telemetered. This reduces the signal to noise ratio of STDOUT and makes them unnecessarily large. Such a size may motivate an operator to triage STDOUT and skip downlinking it.

I propose that FPrime put in some sort of flag (a parameter, command, or a variable of sorts, enable or disable printing the messages to STDOUT.


## Rationale
This feature would preserve the logs to stdout for debugging during development, yet conserve bandwidth during operations.

",non-bug,https://github.com/nasa/fprime/issues/2516
Add Default -D flags to `settings.ini`,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

settings.ini should allow a default set of -D flags to submit to a CMake call.",non-bug,https://github.com/nasa/fprime/issues/1683
CI Bug: DefaultDict Already Exists,"From CI, somewhat randomly:

```
Failed to run 'check --all' in /github/workspace/
---------------------------------------
---------------- STDERR ---------------
[Errno 17] File exists: 'DefaultDict/serializable'
```",bug,https://github.com/nasa/fprime/issues/261
Baremetal TaskRunner Priority,Implement priorities for the baremetal taskrunner. Higher priority tasks will be run first.,non-bug,https://github.com/nasa/fprime/issues/2108
Receives [ERROR] Unknown arguments: -b when running ./docs/doxygen/generate_docs.bash,"| | |
|:---|:---|
|**_F´ Version_**| 1.5>=|
|**_Affected Component_**|all   |
---
## Problem Description

Receives [ERROR] Unknown arguments: -b when running:
```./docs/doxygen/generate_docs.bash```

## How to Reproduce
run the following from fprime directory:
```./docs/doxygen/generate_docs.bash```

## Expected Behavior
Generate doxygen and sphinx documents",bug,https://github.com/nasa/fprime/issues/335
Add Documentation to Note Optional Components to INSTALL.md,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

Some of the python packages (fprime-tools, fprime-gds) support optional packages during install.  We should document how to install them.

E.g. fprime-gds comes with an optional component uart-adapter.  The install guide should mention this and how to install it.


## Rationale

We have the features, but without understanding on how to install them, they aren't used.",non-bug,https://github.com/nasa/fprime/issues/1327
"Math Tutorial section 2.4.1.3.2: ""Undefined symbols for architecture x86_64""","I'm running into an issue with the Math tutorial, section 2.4.1.3.2
After I run the ""fprime-util generate --ut"" command and then run the ""fprime-util build --ut"" inside of the MathSender folder
I get the error below. I'm wondering if it has something to do with me using an M1 processor?

                Undefined symbols for architecture x86_64:
                  ""Ref::Tester::testDivCommand()"", referenced from:
                      Nominal_DivideOperationTest_Test::TestBody() in TestMain.o
                  ""Ref::Tester::testSubCommand()"", referenced from:
                      Nominal_SubOperationTest_Test::TestBody() in TestMain.o
                  ""Ref::Tester::testMultCommand()"", referenced from:
                      Nominal_MultOperationTest_Test::TestBody() in TestMain.o
                ld: symbol(s) not found for architecture x86_64
                clang: error: linker command failed with exit code 1 (use -v to see invocation)
                make[3]: *** [bin/Darwin/Ref_MathSender_ut_exe] Error 1
                make[2]: *** [Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/all] Error 2
                make[1]: *** [Ref/MathSender/CMakeFiles/Ref_MathSender_ut_exe.dir/rule] Error 2
                make: *** [Ref_MathSender_ut_exe] Error 2
                [ERROR] CMake erred with return code 2

I've also tried running in the test/ut folder and get a different error listed below:

                Policy CMP0048 is not set: project() command manages VERSION variables.
                Run ""cmake --help-policy CMP0048"" for policy details.  Use the cmake_policy
                command to set the policy and suppress this warning.
              
                The following variable(s) would be set to empty:
              
                  CMAKE_PROJECT_VERSION
                  CMAKE_PROJECT_VERSION_MAJOR
                  CMAKE_PROJECT_VERSION_MINOR
                  CMAKE_PROJECT_VERSION_PATCH
              This warning is for project developers.  Use -Wno-dev to suppress it.
              
              make: *** No rule to make target `Ref_MathSender_test_ut_ut_exe'.  Stop.
              [ERROR] CMake erred with return code 2",bug,https://github.com/nasa/fprime/issues/1044
missing import in run_deployment.py,"| | |
|:---|:---|
|**_F´ Version_**|3.1.0 |
|**_Affected Component_**| fprime_gds  |
---
## Problem Description

following the `INSTALL.md` tutorial, when testing F´ GDS Installation Via Running HTML GUI, namely:
`fprime-gds -g html -r <path to fprime checkout>/Ref/build-artifacts`

i got a python error from line 23 in the run_deployment.py file:
`root = Path(args.root_dir)`

that indicated that `Path` was unknown,
and indeed, the relevant import was missing.
adding the line
`from pathlib import Path`
fix it.

## How to Reproduce

1. see above

## Expected Behavior

no errors should occur...
",bug,https://github.com/nasa/fprime/issues/1562
fprime-utils: Clean-Up UT Impl,"Some simple features to fprime-utils are needed

1. ~Report version information with a simple version option.~ Completed with `version_check`
2. Create the test/ut subdirectories when doing an impl --ut.
3. Auto move all generated files to test/ut when doing an impl --ut.

As I worked through the MathComponent tutorial I was surprised these things not present.",non-bug,https://github.com/nasa/fprime/issues/2515
Comand completion wait for action completion,"| | |
|:---|:---|
|**_F´ Version_**| x.x.x |
|**_Affected Component_**| Command Dispatcher/all components with commands  |
---
## Feature Description

A commonly desired design pattern is to have commands wait for an action to complete before returning the command completion. For example, rather than sending a movement command and immediately returning, having the command wait for the movement to finish before completing. This would allow a sequence to call many in a row without guessing at the time that the motion takes to complete.

(Really, it would be great if the sequence or commander could choose when it completes, either immediately or upon action completion)

## Rationale

This is a common design pattern and is currently difficult and time consuming to do in f prime. It is fairly easy to mess up and to have a command never return without careful state tracking. I'm not sure exactly what needs to happen, but I feel like this could be made easier and/or documented as a design pattern. 
",non-bug,https://github.com/nasa/fprime/issues/2782
F´ New Module,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We should add an `fprime-util new --module` for defining modules that are composed off autocoded only things (ports, data types, etc).

Directory With:
- [ ] CMakeList.txt
- [ ] Empty `<module>.fpp` with commented out demos of ports, arrays, enums, structs, etc.

",non-bug,https://github.com/nasa/fprime/issues/2006
Cmake: Config directory not living at project include roots fails to build correctly,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

A description of the problem with sufficient detail to understand the issue.

## Context / Environment

Execute `fprime-util version-check` and share the output.

```
Operating System: Linux
CPU Architecture: x86_64
Platform: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35
Python version: 3.10.12
CMake version: 3.22.1
Pip version: 22.0.2
Pip packages:
    fprime-tools==3.4.4
    fprime-gds==3.4.3
    fprime-fpp-*==2.1.0a5
```

## How to Reproduce

1. 
2.
3.

## Expected Behavior

A description of the expected behavior.
",bug,https://github.com/nasa/fprime/issues/2659
Refactor Integration Tests,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

Integration tests need the following updates:

1. Refactor to use new connection_uri connection string
2. Test complex types via signal gen",bug,https://github.com/nasa/fprime/issues/1458
Unit tests fail because gcov can't merge coverage analysis,"**How to reproduce it:** On Mac OS, run `fprime-util check` in a component directory, then revise the test code and rerun. On OS X, gcov emits lots of warnings like `... gcda: cannot merge previous run count: corrupt object tag ...`. Sometimes the tests run successfully with these warnings. Otherwise there are test failures, including segmentation faults.

**Notes:**

* I've observed this behavior on Mac OS. I can't confirm whether this behavior occurs on other systems.
* When I run `fprime-util check --coverage`, the output says `[INFO] Scrubbing leftover .gcda files` and I don't see this behavior. When I run `fprime-util check` without `--coverage` I don't see the info message and I do see the warnings.
* Manually deleting the `*.gcda` files in the build cache fixes the issue.",bug,https://github.com/nasa/fprime/issues/2327
Add Missing FPP Models,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|  |
---
## Feature Description

We are missing FPP models for the following items:

## Drv Items
- [x] ./Drv/GpioDriverPorts/GpioReadPortAi.xml
- [x]  ./Drv/GpioDriverPorts/GpioWritePortAi.xml
- [x] ./Drv/SerialDriverPorts/SerialWritePortAi.xml
- [x] ./Drv/SerialDriverPorts/SerialReadPortAi.xml
- [x] ./Drv/LinuxSpiDriver/LinuxSpiDriverComponentAi.xml
- [x] ./Drv/LinuxI2cDriver/LinuxI2cDriverComponentAi.xml
- [x] ./Drv/I2cDriverPorts/I2cWriteReadPortAi.xml
- [x] ./Drv/I2cDriverPorts/I2cPortAi.xml
- [x] ./Drv/I2cDriverPorts/I2cStatusEnumAi.xml
- [x] ./Drv/LinuxGpioDriver/LinuxGpioDriverComponentAi.xml
- [x] ./Drv/SocketIpDriver/SocketIpDriverComponentAi.xml -- Should we remove this component?  It has been replaced
- [x] ./Drv/SpiDriverPorts/SpiReadWritePortAi.xml
- [x] ./Drv/LinuxSerialDriver/LinuxSerialDriverComponentAi.xml

## RPI Example. Do we want to update this for v3.0.0?
- [x] ./RPI/Top/RPITopologyAppAi.xml
- [x] ./RPI/RpiDemo/RpiDemoComponentAi.xml

## Svc Items
- [x] ./Svc/TlmPacketizer/TlmPacketizerComponentAi.xml -- Should we ask @timcanham to update this?

",non-bug,https://github.com/nasa/fprime/issues/1144
StubFileTest Randomly Fails,"| | |
|:---|:---|
|**_F´ Version_**| |
|**_Affected Component_**|   |
---
## Problem Description

The `StubFileTest` randomly fails.",bug,https://github.com/nasa/fprime/issues/2733
